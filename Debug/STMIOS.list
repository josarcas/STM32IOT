
STMIOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b1dc  08016be0  08016be0  00026be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021dbc  08021dbc  000402e8  2**0
                  CONTENTS
  4 .ARM          00000008  08021dbc  08021dbc  00031dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021dc4  08021dc4  000402e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021dc4  08021dc4  00031dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021dc8  08021dc8  00031dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08021dcc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012da4  200002e8  080220b4  000402e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001308c  080220b4  0004308c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000324d1  00000000  00000000  00040318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ea8  00000000  00000000  000727e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002280  00000000  00000000  00078698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe0  00000000  00000000  0007a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fca1  00000000  00000000  0007c8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a82f  00000000  00000000  000ac599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116deb  00000000  00000000  000d6dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001edbb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9fc  00000000  00000000  001edc08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e8 	.word	0x200002e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016bc8 	.word	0x08016bc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	08016bc8 	.word	0x08016bc8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_ldivmod>:
 8000c2c:	b97b      	cbnz	r3, 8000c4e <__aeabi_ldivmod+0x22>
 8000c2e:	b972      	cbnz	r2, 8000c4e <__aeabi_ldivmod+0x22>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bfbe      	ittt	lt
 8000c34:	2000      	movlt	r0, #0
 8000c36:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c3a:	e006      	blt.n	8000c4a <__aeabi_ldivmod+0x1e>
 8000c3c:	bf08      	it	eq
 8000c3e:	2800      	cmpeq	r0, #0
 8000c40:	bf1c      	itt	ne
 8000c42:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c46:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4a:	f000 b9ef 	b.w	800102c <__aeabi_idiv0>
 8000c4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c56:	2900      	cmp	r1, #0
 8000c58:	db09      	blt.n	8000c6e <__aeabi_ldivmod+0x42>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db1a      	blt.n	8000c94 <__aeabi_ldivmod+0x68>
 8000c5e:	f000 f883 	bl	8000d68 <__udivmoddi4>
 8000c62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6a:	b004      	add	sp, #16
 8000c6c:	4770      	bx	lr
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db1b      	blt.n	8000cb0 <__aeabi_ldivmod+0x84>
 8000c78:	f000 f876 	bl	8000d68 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	4770      	bx	lr
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	f000 f865 	bl	8000d68 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4240      	negs	r0, r0
 8000caa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f857 	bl	8000d68 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4252      	negs	r2, r2
 8000cc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_uldivmod>:
 8000ccc:	b953      	cbnz	r3, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cce:	b94a      	cbnz	r2, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	bf08      	it	eq
 8000cd4:	2800      	cmpeq	r0, #0
 8000cd6:	bf1c      	itt	ne
 8000cd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce0:	f000 b9a4 	b.w	800102c <__aeabi_idiv0>
 8000ce4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cec:	f000 f83c 	bl	8000d68 <__udivmoddi4>
 8000cf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf8:	b004      	add	sp, #16
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_d2lz>:
 8000cfc:	b538      	push	{r3, r4, r5, lr}
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2300      	movs	r3, #0
 8000d02:	4604      	mov	r4, r0
 8000d04:	460d      	mov	r5, r1
 8000d06:	f7ff fef9 	bl	8000afc <__aeabi_dcmplt>
 8000d0a:	b928      	cbnz	r0, 8000d18 <__aeabi_d2lz+0x1c>
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	4629      	mov	r1, r5
 8000d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d14:	f000 b80a 	b.w	8000d2c <__aeabi_d2ulz>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1e:	f000 f805 	bl	8000d2c <__aeabi_d2ulz>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	bd38      	pop	{r3, r4, r5, pc}
 8000d2a:	bf00      	nop

08000d2c <__aeabi_d2ulz>:
 8000d2c:	b5d0      	push	{r4, r6, r7, lr}
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__aeabi_d2ulz+0x34>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	4606      	mov	r6, r0
 8000d34:	460f      	mov	r7, r1
 8000d36:	f7ff fc6f 	bl	8000618 <__aeabi_dmul>
 8000d3a:	f7ff ff07 	bl	8000b4c <__aeabi_d2uiz>
 8000d3e:	4604      	mov	r4, r0
 8000d40:	f7ff fbf0 	bl	8000524 <__aeabi_ui2d>
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <__aeabi_d2ulz+0x38>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f7ff fc66 	bl	8000618 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4630      	mov	r0, r6
 8000d52:	4639      	mov	r1, r7
 8000d54:	f7ff faa8 	bl	80002a8 <__aeabi_dsub>
 8000d58:	f7ff fef8 	bl	8000b4c <__aeabi_d2uiz>
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d60:	3df00000 	.word	0x3df00000
 8000d64:	41f00000 	.word	0x41f00000

08000d68 <__udivmoddi4>:
 8000d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	9d08      	ldr	r5, [sp, #32]
 8000d6e:	4604      	mov	r4, r0
 8000d70:	468c      	mov	ip, r1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8083 	bne.w	8000e7e <__udivmoddi4+0x116>
 8000d78:	428a      	cmp	r2, r1
 8000d7a:	4617      	mov	r7, r2
 8000d7c:	d947      	bls.n	8000e0e <__udivmoddi4+0xa6>
 8000d7e:	fab2 f282 	clz	r2, r2
 8000d82:	b142      	cbz	r2, 8000d96 <__udivmoddi4+0x2e>
 8000d84:	f1c2 0020 	rsb	r0, r2, #32
 8000d88:	fa24 f000 	lsr.w	r0, r4, r0
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	4097      	lsls	r7, r2
 8000d90:	ea40 0c01 	orr.w	ip, r0, r1
 8000d94:	4094      	lsls	r4, r2
 8000d96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000da0:	fa1f fe87 	uxth.w	lr, r7
 8000da4:	fb08 c116 	mls	r1, r8, r6, ip
 8000da8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dac:	fb06 f10e 	mul.w	r1, r6, lr
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x60>
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 8119 	bcs.w	8000ff0 <__udivmoddi4+0x288>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 8116 	bls.w	8000ff0 <__udivmoddi4+0x288>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	443b      	add	r3, r7
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x8c>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de6:	f080 8105 	bcs.w	8000ff4 <__udivmoddi4+0x28c>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	f240 8102 	bls.w	8000ff4 <__udivmoddi4+0x28c>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df8:	eba4 040e 	sub.w	r4, r4, lr
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa0>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	b902      	cbnz	r2, 8000e12 <__udivmoddi4+0xaa>
 8000e10:	deff      	udf	#255	; 0xff
 8000e12:	fab2 f282 	clz	r2, r2
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	d150      	bne.n	8000ebc <__udivmoddi4+0x154>
 8000e1a:	1bcb      	subs	r3, r1, r7
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	fa1f f887 	uxth.w	r8, r7
 8000e24:	2601      	movs	r6, #1
 8000e26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e2a:	0c21      	lsrs	r1, r4, #16
 8000e2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb08 f30c 	mul.w	r3, r8, ip
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0xe4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0xe2>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	f200 80e9 	bhi.w	800101c <__udivmoddi4+0x2b4>
 8000e4a:	4684      	mov	ip, r0
 8000e4c:	1ac9      	subs	r1, r1, r3
 8000e4e:	b2a3      	uxth	r3, r4
 8000e50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e5c:	fb08 f800 	mul.w	r8, r8, r0
 8000e60:	45a0      	cmp	r8, r4
 8000e62:	d907      	bls.n	8000e74 <__udivmoddi4+0x10c>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x10a>
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	f200 80d9 	bhi.w	8001024 <__udivmoddi4+0x2bc>
 8000e72:	4618      	mov	r0, r3
 8000e74:	eba4 0408 	sub.w	r4, r4, r8
 8000e78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e7c:	e7bf      	b.n	8000dfe <__udivmoddi4+0x96>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0x12e>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	f000 80b1 	beq.w	8000fea <__udivmoddi4+0x282>
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f683 	clz	r6, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x1cc>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0x140>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80b8 	bhi.w	8001018 <__udivmoddi4+0x2b0>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb61 0103 	sbc.w	r1, r1, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	468c      	mov	ip, r1
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d0a8      	beq.n	8000e08 <__udivmoddi4+0xa0>
 8000eb6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eba:	e7a5      	b.n	8000e08 <__udivmoddi4+0xa0>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec4:	4097      	lsls	r7, r2
 8000ec6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ece:	40d9      	lsrs	r1, r3
 8000ed0:	4330      	orrs	r0, r6
 8000ed2:	0c03      	lsrs	r3, r0, #16
 8000ed4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed8:	fa1f f887 	uxth.w	r8, r7
 8000edc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ee0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee4:	fb06 f108 	mul.w	r1, r6, r8
 8000ee8:	4299      	cmp	r1, r3
 8000eea:	fa04 f402 	lsl.w	r4, r4, r2
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x19c>
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef6:	f080 808d 	bcs.w	8001014 <__udivmoddi4+0x2ac>
 8000efa:	4299      	cmp	r1, r3
 8000efc:	f240 808a 	bls.w	8001014 <__udivmoddi4+0x2ac>
 8000f00:	3e02      	subs	r6, #2
 8000f02:	443b      	add	r3, r7
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b281      	uxth	r1, r0
 8000f08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f14:	fb00 f308 	mul.w	r3, r0, r8
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	d907      	bls.n	8000f2c <__udivmoddi4+0x1c4>
 8000f1c:	1879      	adds	r1, r7, r1
 8000f1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f22:	d273      	bcs.n	800100c <__udivmoddi4+0x2a4>
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d971      	bls.n	800100c <__udivmoddi4+0x2a4>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4439      	add	r1, r7
 8000f2c:	1acb      	subs	r3, r1, r3
 8000f2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f32:	e778      	b.n	8000e26 <__udivmoddi4+0xbe>
 8000f34:	f1c6 0c20 	rsb	ip, r6, #32
 8000f38:	fa03 f406 	lsl.w	r4, r3, r6
 8000f3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f40:	431c      	orrs	r4, r3
 8000f42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f46:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f52:	431f      	orrs	r7, r3
 8000f54:	0c3b      	lsrs	r3, r7, #16
 8000f56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5a:	fa1f f884 	uxth.w	r8, r4
 8000f5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f66:	fb09 fa08 	mul.w	sl, r9, r8
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f70:	fa00 f306 	lsl.w	r3, r0, r6
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x220>
 8000f76:	1861      	adds	r1, r4, r1
 8000f78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f7c:	d248      	bcs.n	8001010 <__udivmoddi4+0x2a8>
 8000f7e:	458a      	cmp	sl, r1
 8000f80:	d946      	bls.n	8001010 <__udivmoddi4+0x2a8>
 8000f82:	f1a9 0902 	sub.w	r9, r9, #2
 8000f86:	4421      	add	r1, r4
 8000f88:	eba1 010a 	sub.w	r1, r1, sl
 8000f8c:	b2bf      	uxth	r7, r7
 8000f8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f9a:	fb00 f808 	mul.w	r8, r0, r8
 8000f9e:	45b8      	cmp	r8, r7
 8000fa0:	d907      	bls.n	8000fb2 <__udivmoddi4+0x24a>
 8000fa2:	19e7      	adds	r7, r4, r7
 8000fa4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa8:	d22e      	bcs.n	8001008 <__udivmoddi4+0x2a0>
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d92c      	bls.n	8001008 <__udivmoddi4+0x2a0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	4427      	add	r7, r4
 8000fb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb6:	eba7 0708 	sub.w	r7, r7, r8
 8000fba:	fba0 8902 	umull	r8, r9, r0, r2
 8000fbe:	454f      	cmp	r7, r9
 8000fc0:	46c6      	mov	lr, r8
 8000fc2:	4649      	mov	r1, r9
 8000fc4:	d31a      	bcc.n	8000ffc <__udivmoddi4+0x294>
 8000fc6:	d017      	beq.n	8000ff8 <__udivmoddi4+0x290>
 8000fc8:	b15d      	cbz	r5, 8000fe2 <__udivmoddi4+0x27a>
 8000fca:	ebb3 020e 	subs.w	r2, r3, lr
 8000fce:	eb67 0701 	sbc.w	r7, r7, r1
 8000fd2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd6:	40f2      	lsrs	r2, r6
 8000fd8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fdc:	40f7      	lsrs	r7, r6
 8000fde:	e9c5 2700 	strd	r2, r7, [r5]
 8000fe2:	2600      	movs	r6, #0
 8000fe4:	4631      	mov	r1, r6
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	462e      	mov	r6, r5
 8000fec:	4628      	mov	r0, r5
 8000fee:	e70b      	b.n	8000e08 <__udivmoddi4+0xa0>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	e6e9      	b.n	8000dc8 <__udivmoddi4+0x60>
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	e6fd      	b.n	8000df4 <__udivmoddi4+0x8c>
 8000ff8:	4543      	cmp	r3, r8
 8000ffa:	d2e5      	bcs.n	8000fc8 <__udivmoddi4+0x260>
 8000ffc:	ebb8 0e02 	subs.w	lr, r8, r2
 8001000:	eb69 0104 	sbc.w	r1, r9, r4
 8001004:	3801      	subs	r0, #1
 8001006:	e7df      	b.n	8000fc8 <__udivmoddi4+0x260>
 8001008:	4608      	mov	r0, r1
 800100a:	e7d2      	b.n	8000fb2 <__udivmoddi4+0x24a>
 800100c:	4660      	mov	r0, ip
 800100e:	e78d      	b.n	8000f2c <__udivmoddi4+0x1c4>
 8001010:	4681      	mov	r9, r0
 8001012:	e7b9      	b.n	8000f88 <__udivmoddi4+0x220>
 8001014:	4666      	mov	r6, ip
 8001016:	e775      	b.n	8000f04 <__udivmoddi4+0x19c>
 8001018:	4630      	mov	r0, r6
 800101a:	e74a      	b.n	8000eb2 <__udivmoddi4+0x14a>
 800101c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001020:	4439      	add	r1, r7
 8001022:	e713      	b.n	8000e4c <__udivmoddi4+0xe4>
 8001024:	3802      	subs	r0, #2
 8001026:	443c      	add	r4, r7
 8001028:	e724      	b.n	8000e74 <__udivmoddi4+0x10c>
 800102a:	bf00      	nop

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2104      	movs	r1, #4
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f006 fda4 	bl	8007b88 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f004 fe0b 	bl	8005c5c <HAL_Delay>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}

0800104a <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2104      	movs	r1, #4
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f006 fd97 	bl	8007b88 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800105a:	2001      	movs	r0, #1
 800105c:	f004 fdfe 	bl	8005c5c <HAL_Delay>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800106e:	bf00      	nop
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <SPI_TxByte+0x30>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b02      	cmp	r3, #2
 800107c:	d1f8      	bne.n	8001070 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800107e:	1df9      	adds	r1, r7, #7
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	2201      	movs	r2, #1
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <SPI_TxByte+0x30>)
 8001086:	f008 f978 	bl	800937a <HAL_SPI_Transmit>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20010ec8 	.word	0x20010ec8

08001098 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010a4:	bf00      	nop
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <SPI_TxBuffer+0x30>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d1f8      	bne.n	80010a6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80010b4:	887a      	ldrh	r2, [r7, #2]
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <SPI_TxBuffer+0x30>)
 80010bc:	f008 f95d 	bl	800937a <HAL_SPI_Transmit>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20010ec8 	.word	0x20010ec8

080010cc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010d6:	bf00      	nop
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <SPI_RxByte+0x34>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d1f8      	bne.n	80010d8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010e6:	1dba      	adds	r2, r7, #6
 80010e8:	1df9      	adds	r1, r7, #7
 80010ea:	2364      	movs	r3, #100	; 0x64
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <SPI_RxByte+0x34>)
 80010f2:	f008 fbe0 	bl	80098b6 <HAL_SPI_TransmitReceive>

	return data;
 80010f6:	79bb      	ldrb	r3, [r7, #6]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20010ec8 	.word	0x20010ec8

08001104 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800110c:	f7ff ffde 	bl	80010cc <SPI_RxByte>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	701a      	strb	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <SD_ReadyWait+0x30>)
 8001128:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800112c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800112e:	f7ff ffcd 	bl	80010cc <SPI_RxByte>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2bff      	cmp	r3, #255	; 0xff
 800113a:	d003      	beq.n	8001144 <SD_ReadyWait+0x24>
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SD_ReadyWait+0x30>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f4      	bne.n	800112e <SD_ReadyWait+0xe>

	return res;
 8001144:	79fb      	ldrb	r3, [r7, #7]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20010194 	.word	0x20010194

08001154 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800115a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800115e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001160:	f7ff ff73 	bl	800104a <DESELECT>
	for(int i = 0; i < 10; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	e005      	b.n	8001176 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800116a:	20ff      	movs	r0, #255	; 0xff
 800116c:	f7ff ff7a 	bl	8001064 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3301      	adds	r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b09      	cmp	r3, #9
 800117a:	ddf6      	ble.n	800116a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800117c:	f7ff ff58 	bl	8001030 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001194:	2395      	movs	r3, #149	; 0x95
 8001196:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001198:	463b      	mov	r3, r7
 800119a:	2106      	movs	r1, #6
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff7b 	bl	8001098 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80011a2:	e002      	b.n	80011aa <SD_PowerOn+0x56>
	{
		cnt--;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80011aa:	f7ff ff8f 	bl	80010cc <SPI_RxByte>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d002      	beq.n	80011ba <SD_PowerOn+0x66>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f4      	bne.n	80011a4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80011ba:	f7ff ff46 	bl	800104a <DESELECT>
	SPI_TxByte(0XFF);
 80011be:	20ff      	movs	r0, #255	; 0xff
 80011c0:	f7ff ff50 	bl	8001064 <SPI_TxByte>

	PowerFlag = 1;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <SD_PowerOn+0x80>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000305 	.word	0x20000305

080011d8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <SD_PowerOff+0x14>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	20000305 	.word	0x20000305

080011f0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <SD_CheckPower+0x14>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000305 	.word	0x20000305

08001208 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <SD_RxDataBlock+0x58>)
 8001214:	22c8      	movs	r2, #200	; 0xc8
 8001216:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001218:	f7ff ff58 	bl	80010cc <SPI_RxByte>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	2bff      	cmp	r3, #255	; 0xff
 8001224:	d103      	bne.n	800122e <SD_RxDataBlock+0x26>
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <SD_RxDataBlock+0x58>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f4      	bne.n	8001218 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	2bfe      	cmp	r3, #254	; 0xfe
 8001232:	d001      	beq.n	8001238 <SD_RxDataBlock+0x30>
 8001234:	2300      	movs	r3, #0
 8001236:	e00f      	b.n	8001258 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff60 	bl	8001104 <SPI_RxBytePtr>
	} while(len--);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	1e5a      	subs	r2, r3, #1
 8001248:	603a      	str	r2, [r7, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f4      	bne.n	8001238 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800124e:	f7ff ff3d 	bl	80010cc <SPI_RxByte>
	SPI_RxByte();
 8001252:	f7ff ff3b 	bl	80010cc <SPI_RxByte>

	return TRUE;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20010196 	.word	0x20010196

08001264 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001274:	f7ff ff54 	bl	8001120 <SD_ReadyWait>
 8001278:	4603      	mov	r3, r0
 800127a:	2bff      	cmp	r3, #255	; 0xff
 800127c:	d001      	beq.n	8001282 <SD_TxDataBlock+0x1e>
 800127e:	2300      	movs	r3, #0
 8001280:	e02f      	b.n	80012e2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff feed 	bl	8001064 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	2bfd      	cmp	r3, #253	; 0xfd
 800128e:	d020      	beq.n	80012d2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff feff 	bl	8001098 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800129a:	f7ff ff17 	bl	80010cc <SPI_RxByte>
		SPI_RxByte();
 800129e:	f7ff ff15 	bl	80010cc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80012a2:	e00b      	b.n	80012bc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80012a4:	f7ff ff12 	bl	80010cc <SPI_RxByte>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d006      	beq.n	80012c4 <SD_TxDataBlock+0x60>
			i++;
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	3301      	adds	r3, #1
 80012ba:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	2b40      	cmp	r3, #64	; 0x40
 80012c0:	d9f0      	bls.n	80012a4 <SD_TxDataBlock+0x40>
 80012c2:	e000      	b.n	80012c6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80012c4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80012c6:	bf00      	nop
 80012c8:	f7ff ff00 	bl	80010cc <SPI_RxByte>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0fa      	beq.n	80012c8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d101      	bne.n	80012e0 <SD_TxDataBlock+0x7c>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	6039      	str	r1, [r7, #0]
 80012f4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012f6:	f7ff ff13 	bl	8001120 <SD_ReadyWait>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2bff      	cmp	r3, #255	; 0xff
 80012fe:	d001      	beq.n	8001304 <SD_SendCmd+0x1a>
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	e042      	b.n	800138a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff feac 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	0e1b      	lsrs	r3, r3, #24
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fea6 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	0c1b      	lsrs	r3, r3, #16
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fea0 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fe9a 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fe95 	bl	8001064 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b40      	cmp	r3, #64	; 0x40
 800133e:	d102      	bne.n	8001346 <SD_SendCmd+0x5c>
 8001340:	2395      	movs	r3, #149	; 0x95
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e007      	b.n	8001356 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b48      	cmp	r3, #72	; 0x48
 800134a:	d102      	bne.n	8001352 <SD_SendCmd+0x68>
 800134c:	2387      	movs	r3, #135	; 0x87
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e001      	b.n	8001356 <SD_SendCmd+0x6c>
	else crc = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fe83 	bl	8001064 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b4c      	cmp	r3, #76	; 0x4c
 8001362:	d101      	bne.n	8001368 <SD_SendCmd+0x7e>
 8001364:	f7ff feb2 	bl	80010cc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001368:	230a      	movs	r3, #10
 800136a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800136c:	f7ff feae 	bl	80010cc <SPI_RxByte>
 8001370:	4603      	mov	r3, r0
 8001372:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001374:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001378:	2b00      	cmp	r3, #0
 800137a:	da05      	bge.n	8001388 <SD_SendCmd+0x9e>
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	3b01      	subs	r3, #1
 8001380:	73bb      	strb	r3, [r7, #14]
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f1      	bne.n	800136c <SD_SendCmd+0x82>

	return res;
 8001388:	7b7b      	ldrb	r3, [r7, #13]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SD_disk_initialize+0x14>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0d1      	b.n	800154c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80013a8:	4b6a      	ldr	r3, [pc, #424]	; (8001554 <SD_disk_initialize+0x1c0>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <SD_disk_initialize+0x2a>
 80013b6:	4b67      	ldr	r3, [pc, #412]	; (8001554 <SD_disk_initialize+0x1c0>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	e0c6      	b.n	800154c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80013be:	f7ff fec9 	bl	8001154 <SD_PowerOn>

	/* slave select */
	SELECT();
 80013c2:	f7ff fe35 	bl	8001030 <SELECT>

	/* check disk type */
	type = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80013ca:	2100      	movs	r1, #0
 80013cc:	2040      	movs	r0, #64	; 0x40
 80013ce:	f7ff ff8c 	bl	80012ea <SD_SendCmd>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	f040 80a1 	bne.w	800151c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80013da:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <SD_disk_initialize+0x1c4>)
 80013dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013e2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013e6:	2048      	movs	r0, #72	; 0x48
 80013e8:	f7ff ff7f 	bl	80012ea <SD_SendCmd>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d155      	bne.n	800149e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e00c      	b.n	8001412 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013f8:	7bfc      	ldrb	r4, [r7, #15]
 80013fa:	f7ff fe67 	bl	80010cc <SPI_RxByte>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4423      	add	r3, r4
 8001408:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	3301      	adds	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d9ef      	bls.n	80013f8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001418:	7abb      	ldrb	r3, [r7, #10]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d17e      	bne.n	800151c <SD_disk_initialize+0x188>
 800141e:	7afb      	ldrb	r3, [r7, #11]
 8001420:	2baa      	cmp	r3, #170	; 0xaa
 8001422:	d17b      	bne.n	800151c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001424:	2100      	movs	r1, #0
 8001426:	2077      	movs	r0, #119	; 0x77
 8001428:	f7ff ff5f 	bl	80012ea <SD_SendCmd>
 800142c:	4603      	mov	r3, r0
 800142e:	2b01      	cmp	r3, #1
 8001430:	d807      	bhi.n	8001442 <SD_disk_initialize+0xae>
 8001432:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001436:	2069      	movs	r0, #105	; 0x69
 8001438:	f7ff ff57 	bl	80012ea <SD_SendCmd>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001442:	4b45      	ldr	r3, [pc, #276]	; (8001558 <SD_disk_initialize+0x1c4>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1ec      	bne.n	8001424 <SD_disk_initialize+0x90>
 800144a:	e000      	b.n	800144e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800144c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800144e:	4b42      	ldr	r3, [pc, #264]	; (8001558 <SD_disk_initialize+0x1c4>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d062      	beq.n	800151c <SD_disk_initialize+0x188>
 8001456:	2100      	movs	r1, #0
 8001458:	207a      	movs	r0, #122	; 0x7a
 800145a:	f7ff ff46 	bl	80012ea <SD_SendCmd>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d15b      	bne.n	800151c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e00c      	b.n	8001484 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800146a:	7bfc      	ldrb	r4, [r7, #15]
 800146c:	f7ff fe2e 	bl	80010cc <SPI_RxByte>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4423      	add	r3, r4
 800147a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	3301      	adds	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d9ef      	bls.n	800146a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800148a:	7a3b      	ldrb	r3, [r7, #8]
 800148c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SD_disk_initialize+0x104>
 8001494:	230c      	movs	r3, #12
 8001496:	e000      	b.n	800149a <SD_disk_initialize+0x106>
 8001498:	2304      	movs	r3, #4
 800149a:	73bb      	strb	r3, [r7, #14]
 800149c:	e03e      	b.n	800151c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800149e:	2100      	movs	r1, #0
 80014a0:	2077      	movs	r0, #119	; 0x77
 80014a2:	f7ff ff22 	bl	80012ea <SD_SendCmd>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d808      	bhi.n	80014be <SD_disk_initialize+0x12a>
 80014ac:	2100      	movs	r1, #0
 80014ae:	2069      	movs	r0, #105	; 0x69
 80014b0:	f7ff ff1b 	bl	80012ea <SD_SendCmd>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d801      	bhi.n	80014be <SD_disk_initialize+0x12a>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e000      	b.n	80014c0 <SD_disk_initialize+0x12c>
 80014be:	2301      	movs	r3, #1
 80014c0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d10e      	bne.n	80014e6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80014c8:	2100      	movs	r1, #0
 80014ca:	2077      	movs	r0, #119	; 0x77
 80014cc:	f7ff ff0d 	bl	80012ea <SD_SendCmd>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d80e      	bhi.n	80014f4 <SD_disk_initialize+0x160>
 80014d6:	2100      	movs	r1, #0
 80014d8:	2069      	movs	r0, #105	; 0x69
 80014da:	f7ff ff06 	bl	80012ea <SD_SendCmd>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d107      	bne.n	80014f4 <SD_disk_initialize+0x160>
 80014e4:	e00c      	b.n	8001500 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014e6:	2100      	movs	r1, #0
 80014e8:	2041      	movs	r0, #65	; 0x41
 80014ea:	f7ff fefe 	bl	80012ea <SD_SendCmd>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <SD_disk_initialize+0x1c4>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e2      	bne.n	80014c2 <SD_disk_initialize+0x12e>
 80014fc:	e000      	b.n	8001500 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014fe:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <SD_disk_initialize+0x1c4>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <SD_disk_initialize+0x184>
 8001508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150c:	2050      	movs	r0, #80	; 0x50
 800150e:	f7ff feec 	bl	80012ea <SD_SendCmd>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SD_disk_initialize+0x188>
 8001518:	2300      	movs	r3, #0
 800151a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800151c:	4a0f      	ldr	r2, [pc, #60]	; (800155c <SD_disk_initialize+0x1c8>)
 800151e:	7bbb      	ldrb	r3, [r7, #14]
 8001520:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001522:	f7ff fd92 	bl	800104a <DESELECT>
	SPI_RxByte();
 8001526:	f7ff fdd1 	bl	80010cc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800152a:	7bbb      	ldrb	r3, [r7, #14]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <SD_disk_initialize+0x1c0>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SD_disk_initialize+0x1c0>)
 800153e:	701a      	strb	r2, [r3, #0]
 8001540:	e001      	b.n	8001546 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001542:	f7ff fe49 	bl	80011d8 <SD_PowerOff>
	}

	return Stat;
 8001546:	4b03      	ldr	r3, [pc, #12]	; (8001554 <SD_disk_initialize+0x1c0>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}
 8001554:	20000000 	.word	0x20000000
 8001558:	20010196 	.word	0x20010196
 800155c:	20000304 	.word	0x20000304

08001560 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SD_disk_status+0x14>
 8001570:	2301      	movs	r3, #1
 8001572:	e002      	b.n	800157a <SD_disk_status+0x1a>
	return Stat;
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SD_disk_status+0x28>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000

0800158c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <SD_disk_read+0x1c>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <SD_disk_read+0x20>
 80015a8:	2304      	movs	r3, #4
 80015aa:	e051      	b.n	8001650 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <SD_disk_read+0xcc>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SD_disk_read+0x32>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e048      	b.n	8001650 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015be:	4b27      	ldr	r3, [pc, #156]	; (800165c <SD_disk_read+0xd0>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <SD_disk_read+0x44>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	025b      	lsls	r3, r3, #9
 80015ce:	607b      	str	r3, [r7, #4]

	SELECT();
 80015d0:	f7ff fd2e 	bl	8001030 <SELECT>

	if (count == 1)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d111      	bne.n	80015fe <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	2051      	movs	r0, #81	; 0x51
 80015de:	f7ff fe84 	bl	80012ea <SD_SendCmd>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d129      	bne.n	800163c <SD_disk_read+0xb0>
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	68b8      	ldr	r0, [r7, #8]
 80015ee:	f7ff fe0b 	bl	8001208 <SD_RxDataBlock>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d021      	beq.n	800163c <SD_disk_read+0xb0>
 80015f8:	2300      	movs	r3, #0
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	e01e      	b.n	800163c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	2052      	movs	r0, #82	; 0x52
 8001602:	f7ff fe72 	bl	80012ea <SD_SendCmd>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d117      	bne.n	800163c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800160c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001610:	68b8      	ldr	r0, [r7, #8]
 8001612:	f7ff fdf9 	bl	8001208 <SD_RxDataBlock>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00a      	beq.n	8001632 <SD_disk_read+0xa6>
				buff += 512;
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001622:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3b01      	subs	r3, #1
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ed      	bne.n	800160c <SD_disk_read+0x80>
 8001630:	e000      	b.n	8001634 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001632:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001634:	2100      	movs	r1, #0
 8001636:	204c      	movs	r0, #76	; 0x4c
 8001638:	f7ff fe57 	bl	80012ea <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800163c:	f7ff fd05 	bl	800104a <DESELECT>
	SPI_RxByte();
 8001640:	f7ff fd44 	bl	80010cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf14      	ite	ne
 800164a:	2301      	movne	r3, #1
 800164c:	2300      	moveq	r3, #0
 800164e:	b2db      	uxtb	r3, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000000 	.word	0x20000000
 800165c:	20000304 	.word	0x20000304

08001660 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	4603      	mov	r3, r0
 800166e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <SD_disk_write+0x1c>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <SD_disk_write+0x20>
 800167c:	2304      	movs	r3, #4
 800167e:	e06b      	b.n	8001758 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001680:	4b37      	ldr	r3, [pc, #220]	; (8001760 <SD_disk_write+0x100>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SD_disk_write+0x32>
 800168e:	2303      	movs	r3, #3
 8001690:	e062      	b.n	8001758 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001692:	4b33      	ldr	r3, [pc, #204]	; (8001760 <SD_disk_write+0x100>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SD_disk_write+0x44>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e059      	b.n	8001758 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80016a4:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <SD_disk_write+0x104>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <SD_disk_write+0x56>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	025b      	lsls	r3, r3, #9
 80016b4:	607b      	str	r3, [r7, #4]

	SELECT();
 80016b6:	f7ff fcbb 	bl	8001030 <SELECT>

	if (count == 1)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d110      	bne.n	80016e2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	2058      	movs	r0, #88	; 0x58
 80016c4:	f7ff fe11 	bl	80012ea <SD_SendCmd>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d13a      	bne.n	8001744 <SD_disk_write+0xe4>
 80016ce:	21fe      	movs	r1, #254	; 0xfe
 80016d0:	68b8      	ldr	r0, [r7, #8]
 80016d2:	f7ff fdc7 	bl	8001264 <SD_TxDataBlock>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d033      	beq.n	8001744 <SD_disk_write+0xe4>
			count = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	e030      	b.n	8001744 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <SD_disk_write+0x104>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d007      	beq.n	80016fe <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016ee:	2100      	movs	r1, #0
 80016f0:	2077      	movs	r0, #119	; 0x77
 80016f2:	f7ff fdfa 	bl	80012ea <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80016f6:	6839      	ldr	r1, [r7, #0]
 80016f8:	2057      	movs	r0, #87	; 0x57
 80016fa:	f7ff fdf6 	bl	80012ea <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	2059      	movs	r0, #89	; 0x59
 8001702:	f7ff fdf2 	bl	80012ea <SD_SendCmd>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d11b      	bne.n	8001744 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800170c:	21fc      	movs	r1, #252	; 0xfc
 800170e:	68b8      	ldr	r0, [r7, #8]
 8001710:	f7ff fda8 	bl	8001264 <SD_TxDataBlock>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00a      	beq.n	8001730 <SD_disk_write+0xd0>
				buff += 512;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001720:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3b01      	subs	r3, #1
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ee      	bne.n	800170c <SD_disk_write+0xac>
 800172e:	e000      	b.n	8001732 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001730:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001732:	21fd      	movs	r1, #253	; 0xfd
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fd95 	bl	8001264 <SD_TxDataBlock>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <SD_disk_write+0xe4>
			{
				count = 1;
 8001740:	2301      	movs	r3, #1
 8001742:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001744:	f7ff fc81 	bl	800104a <DESELECT>
	SPI_RxByte();
 8001748:	f7ff fcc0 	bl	80010cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf14      	ite	ne
 8001752:	2301      	movne	r3, #1
 8001754:	2300      	moveq	r3, #0
 8001756:	b2db      	uxtb	r3, r3
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000000 	.word	0x20000000
 8001764:	20000304 	.word	0x20000304

08001768 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b08b      	sub	sp, #44	; 0x2c
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	603a      	str	r2, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
 8001774:	460b      	mov	r3, r1
 8001776:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SD_disk_ioctl+0x1e>
 8001782:	2304      	movs	r3, #4
 8001784:	e115      	b.n	80019b2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d124      	bne.n	80017dc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d012      	beq.n	80017c0 <SD_disk_ioctl+0x58>
 800179a:	2b02      	cmp	r3, #2
 800179c:	dc1a      	bgt.n	80017d4 <SD_disk_ioctl+0x6c>
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <SD_disk_ioctl+0x40>
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d006      	beq.n	80017b4 <SD_disk_ioctl+0x4c>
 80017a6:	e015      	b.n	80017d4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80017a8:	f7ff fd16 	bl	80011d8 <SD_PowerOff>
			res = RES_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017b2:	e0fc      	b.n	80019ae <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80017b4:	f7ff fcce 	bl	8001154 <SD_PowerOn>
			res = RES_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017be:	e0f6      	b.n	80019ae <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	1c5c      	adds	r4, r3, #1
 80017c4:	f7ff fd14 	bl	80011f0 <SD_CheckPower>
 80017c8:	4603      	mov	r3, r0
 80017ca:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017d2:	e0ec      	b.n	80019ae <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80017d4:	2304      	movs	r3, #4
 80017d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017da:	e0e8      	b.n	80019ae <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017dc:	4b77      	ldr	r3, [pc, #476]	; (80019bc <SD_disk_ioctl+0x254>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SD_disk_ioctl+0x86>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e0e1      	b.n	80019b2 <SD_disk_ioctl+0x24a>

		SELECT();
 80017ee:	f7ff fc1f 	bl	8001030 <SELECT>

		switch (ctrl)
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	2b0d      	cmp	r3, #13
 80017f6:	f200 80cb 	bhi.w	8001990 <SD_disk_ioctl+0x228>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <SD_disk_ioctl+0x98>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	080018fb 	.word	0x080018fb
 8001804:	08001839 	.word	0x08001839
 8001808:	080018eb 	.word	0x080018eb
 800180c:	08001991 	.word	0x08001991
 8001810:	08001991 	.word	0x08001991
 8001814:	08001991 	.word	0x08001991
 8001818:	08001991 	.word	0x08001991
 800181c:	08001991 	.word	0x08001991
 8001820:	08001991 	.word	0x08001991
 8001824:	08001991 	.word	0x08001991
 8001828:	08001991 	.word	0x08001991
 800182c:	0800190d 	.word	0x0800190d
 8001830:	08001931 	.word	0x08001931
 8001834:	08001955 	.word	0x08001955
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001838:	2100      	movs	r1, #0
 800183a:	2049      	movs	r0, #73	; 0x49
 800183c:	f7ff fd55 	bl	80012ea <SD_SendCmd>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 80a8 	bne.w	8001998 <SD_disk_ioctl+0x230>
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2110      	movs	r1, #16
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fcda 	bl	8001208 <SD_RxDataBlock>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 809e 	beq.w	8001998 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800185c:	7b3b      	ldrb	r3, [r7, #12]
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d10e      	bne.n	8001884 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001866:	7d7b      	ldrb	r3, [r7, #21]
 8001868:	b29a      	uxth	r2, r3
 800186a:	7d3b      	ldrb	r3, [r7, #20]
 800186c:	b29b      	uxth	r3, r3
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b29b      	uxth	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800187a:	8bfb      	ldrh	r3, [r7, #30]
 800187c:	029a      	lsls	r2, r3, #10
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e02e      	b.n	80018e2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001884:	7c7b      	ldrb	r3, [r7, #17]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	b2da      	uxtb	r2, r3
 800188c:	7dbb      	ldrb	r3, [r7, #22]
 800188e:	09db      	lsrs	r3, r3, #7
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4413      	add	r3, r2
 8001894:	b2da      	uxtb	r2, r3
 8001896:	7d7b      	ldrb	r3, [r7, #21]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	f003 0306 	and.w	r3, r3, #6
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	3302      	adds	r3, #2
 80018a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80018ac:	7d3b      	ldrb	r3, [r7, #20]
 80018ae:	099b      	lsrs	r3, r3, #6
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	7cfb      	ldrb	r3, [r7, #19]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	4413      	add	r3, r2
 80018be:	b29a      	uxth	r2, r3
 80018c0:	7cbb      	ldrb	r3, [r7, #18]
 80018c2:	029b      	lsls	r3, r3, #10
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3301      	adds	r3, #1
 80018d2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018d4:	8bfa      	ldrh	r2, [r7, #30]
 80018d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018da:	3b09      	subs	r3, #9
 80018dc:	409a      	lsls	r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018e8:	e056      	b.n	8001998 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018f8:	e055      	b.n	80019a6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80018fa:	f7ff fc11 	bl	8001120 <SD_ReadyWait>
 80018fe:	4603      	mov	r3, r0
 8001900:	2bff      	cmp	r3, #255	; 0xff
 8001902:	d14b      	bne.n	800199c <SD_disk_ioctl+0x234>
 8001904:	2300      	movs	r3, #0
 8001906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800190a:	e047      	b.n	800199c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800190c:	2100      	movs	r1, #0
 800190e:	2049      	movs	r0, #73	; 0x49
 8001910:	f7ff fceb 	bl	80012ea <SD_SendCmd>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d142      	bne.n	80019a0 <SD_disk_ioctl+0x238>
 800191a:	2110      	movs	r1, #16
 800191c:	6a38      	ldr	r0, [r7, #32]
 800191e:	f7ff fc73 	bl	8001208 <SD_RxDataBlock>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d03b      	beq.n	80019a0 <SD_disk_ioctl+0x238>
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800192e:	e037      	b.n	80019a0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001930:	2100      	movs	r1, #0
 8001932:	204a      	movs	r0, #74	; 0x4a
 8001934:	f7ff fcd9 	bl	80012ea <SD_SendCmd>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d132      	bne.n	80019a4 <SD_disk_ioctl+0x23c>
 800193e:	2110      	movs	r1, #16
 8001940:	6a38      	ldr	r0, [r7, #32]
 8001942:	f7ff fc61 	bl	8001208 <SD_RxDataBlock>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d02b      	beq.n	80019a4 <SD_disk_ioctl+0x23c>
 800194c:	2300      	movs	r3, #0
 800194e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001952:	e027      	b.n	80019a4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001954:	2100      	movs	r1, #0
 8001956:	207a      	movs	r0, #122	; 0x7a
 8001958:	f7ff fcc7 	bl	80012ea <SD_SendCmd>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001968:	e00b      	b.n	8001982 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800196a:	6a3c      	ldr	r4, [r7, #32]
 800196c:	1c63      	adds	r3, r4, #1
 800196e:	623b      	str	r3, [r7, #32]
 8001970:	f7ff fbac 	bl	80010cc <SPI_RxByte>
 8001974:	4603      	mov	r3, r0
 8001976:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001978:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800197c:	3301      	adds	r3, #1
 800197e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001982:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001986:	2b03      	cmp	r3, #3
 8001988:	d9ef      	bls.n	800196a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001990:	2304      	movs	r3, #4
 8001992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001996:	e006      	b.n	80019a6 <SD_disk_ioctl+0x23e>
			break;
 8001998:	bf00      	nop
 800199a:	e004      	b.n	80019a6 <SD_disk_ioctl+0x23e>
			break;
 800199c:	bf00      	nop
 800199e:	e002      	b.n	80019a6 <SD_disk_ioctl+0x23e>
			break;
 80019a0:	bf00      	nop
 80019a2:	e000      	b.n	80019a6 <SD_disk_ioctl+0x23e>
			break;
 80019a4:	bf00      	nop
		}

		DESELECT();
 80019a6:	f7ff fb50 	bl	800104a <DESELECT>
		SPI_RxByte();
 80019aa:	f7ff fb8f 	bl	80010cc <SPI_RxByte>
	}

	return res;
 80019ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	372c      	adds	r7, #44	; 0x2c
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd90      	pop	{r4, r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000000 	.word	0x20000000

080019c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <vApplicationGetIdleTaskMemory+0x2c>)
 80019d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <vApplicationGetIdleTaskMemory+0x30>)
 80019d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000308 	.word	0x20000308
 80019f0:	200003bc 	.word	0x200003bc

080019f4 <write8>:
//TOUCH PROTOTYPES
void gpio_pin_mode(GPIO_TypeDef *port  , uint16_t pin, uint8_t mode);

/*FUNCTIONS*******************************************************************/
void write8(uint8_t info)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i=0; i<8; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	e015      	b.n	8001a30 <write8+0x3c>
	{
		HAL_GPIO_WritePin(spf_port[i], spf_pin[i], info>>i & 0x01);
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <write8+0x60>)
 8001a08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <write8+0x64>)
 8001a10:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a14:	79fa      	ldrb	r2, [r7, #7]
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	fa42 f303 	asr.w	r3, r2, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	f006 f8af 	bl	8007b88 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<8; i++)
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	2b07      	cmp	r3, #7
 8001a34:	d9e6      	bls.n	8001a04 <write8+0x10>
	}
	WR_STROBE;
 8001a36:	2200      	movs	r2, #0
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4808      	ldr	r0, [pc, #32]	; (8001a5c <write8+0x68>)
 8001a3c:	f006 f8a4 	bl	8007b88 <HAL_GPIO_WritePin>
 8001a40:	2201      	movs	r2, #1
 8001a42:	2110      	movs	r1, #16
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <write8+0x68>)
 8001a46:	f006 f89f 	bl	8007b88 <HAL_GPIO_WritePin>
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000004 	.word	0x20000004
 8001a58:	0801ad74 	.word	0x0801ad74
 8001a5c:	48000800 	.word	0x48000800

08001a60 <writeRegister8>:

void writeRegister8(uint8_t reg, uint8_t data)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	460a      	mov	r2, r1
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	71bb      	strb	r3, [r7, #6]
	CD_COMMAND;
 8001a70:	2200      	movs	r2, #0
 8001a72:	2108      	movs	r1, #8
 8001a74:	4809      	ldr	r0, [pc, #36]	; (8001a9c <writeRegister8+0x3c>)
 8001a76:	f006 f887 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(reg);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ffb9 	bl	80019f4 <write8>
	CD_DATA;
 8001a82:	2201      	movs	r2, #1
 8001a84:	2108      	movs	r1, #8
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <writeRegister8+0x3c>)
 8001a88:	f006 f87e 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(data);
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ffb0 	bl	80019f4 <write8>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	48000800 	.word	0x48000800

08001aa0 <writeRegister16>:

void writeRegister16(uint16_t reg, uint16_t data)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	80fb      	strh	r3, [r7, #6]
 8001aac:	4613      	mov	r3, r2
 8001aae:	80bb      	strh	r3, [r7, #4]
	CD_COMMAND;
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2108      	movs	r1, #8
 8001ab4:	4811      	ldr	r0, [pc, #68]	; (8001afc <writeRegister16+0x5c>)
 8001ab6:	f006 f867 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(reg>>8);
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff96 	bl	80019f4 <write8>
	write8(reg);
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff91 	bl	80019f4 <write8>
	CD_DATA;
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	4809      	ldr	r0, [pc, #36]	; (8001afc <writeRegister16+0x5c>)
 8001ad8:	f006 f856 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(data>>8);
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff85 	bl	80019f4 <write8>
	write8(data);
 8001aea:	88bb      	ldrh	r3, [r7, #4]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff80 	bl	80019f4 <write8>
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	48000800 	.word	0x48000800

08001b00 <writeRegister32>:

void writeRegister32(uint8_t reg, uint32_t data)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE;
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2104      	movs	r1, #4
 8001b10:	4818      	ldr	r0, [pc, #96]	; (8001b74 <writeRegister32+0x74>)
 8001b12:	f006 f839 	bl	8007b88 <HAL_GPIO_WritePin>
	CD_COMMAND;
 8001b16:	2200      	movs	r2, #0
 8001b18:	2108      	movs	r1, #8
 8001b1a:	4816      	ldr	r0, [pc, #88]	; (8001b74 <writeRegister32+0x74>)
 8001b1c:	f006 f834 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(reg);
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff66 	bl	80019f4 <write8>
	CD_DATA;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	2108      	movs	r1, #8
 8001b2c:	4811      	ldr	r0, [pc, #68]	; (8001b74 <writeRegister32+0x74>)
 8001b2e:	f006 f82b 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(data >> 24);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	0e1b      	lsrs	r3, r3, #24
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5b 	bl	80019f4 <write8>
	write8(data >> 16);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff55 	bl	80019f4 <write8>
	write8(data >> 8);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff4f 	bl	80019f4 <write8>
	write8(data);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff4a 	bl	80019f4 <write8>
	CS_IDLE;
 8001b60:	2201      	movs	r2, #1
 8001b62:	2104      	movs	r1, #4
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <writeRegister32+0x74>)
 8001b66:	f006 f80f 	bl	8007b88 <HAL_GPIO_WritePin>

}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	48000800 	.word	0x48000800

08001b78 <set_cursor>:
	CD_COMMAND; write8(aL); CD_DATA; write8(lo);
}


void set_cursor(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4604      	mov	r4, r0
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	4623      	mov	r3, r4
 8001b88:	80fb      	strh	r3, [r7, #6]
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80bb      	strh	r3, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	807b      	strh	r3, [r7, #2]
 8001b92:	4613      	mov	r3, r2
 8001b94:	803b      	strh	r3, [r7, #0]

	uint32_t t;

	t = x0;
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	60fb      	str	r3, [r7, #12]
	t <<= 16;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	60fb      	str	r3, [r7, #12]
	t |= x1;
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
	writeRegister32(ILI9341_COLADDRSET, t);
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	202a      	movs	r0, #42	; 0x2a
 8001bac:	f7ff ffa8 	bl	8001b00 <writeRegister32>
	t = y0;
 8001bb0:	88bb      	ldrh	r3, [r7, #4]
 8001bb2:	60fb      	str	r3, [r7, #12]
	t <<= 16;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	041b      	lsls	r3, r3, #16
 8001bb8:	60fb      	str	r3, [r7, #12]
	t |= y1;
 8001bba:	883b      	ldrh	r3, [r7, #0]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
	writeRegister32(ILI9341_PAGEADDRSET, t);
 8001bc2:	68f9      	ldr	r1, [r7, #12]
 8001bc4:	202b      	movs	r0, #43	; 0x2b
 8001bc6:	f7ff ff9b 	bl	8001b00 <writeRegister32>
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd90      	pop	{r4, r7, pc}
	...

08001bd4 <lcd_init>:

void lcd_init()
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	lcd_reset();
 8001bd8:	f000 f84e 	bl	8001c78 <lcd_reset>
	HAL_Delay(20);
 8001bdc:	2014      	movs	r0, #20
 8001bde:	f004 f83d 	bl	8005c5c <HAL_Delay>

	CS_ACTIVE;
 8001be2:	2200      	movs	r2, #0
 8001be4:	2104      	movs	r1, #4
 8001be6:	4823      	ldr	r0, [pc, #140]	; (8001c74 <lcd_init+0xa0>)
 8001be8:	f005 ffce 	bl	8007b88 <HAL_GPIO_WritePin>
	writeRegister8(ILI9341_SOFTRESET, 0);
 8001bec:	2100      	movs	r1, #0
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff ff36 	bl	8001a60 <writeRegister8>
	HAL_Delay(50);
 8001bf4:	2032      	movs	r0, #50	; 0x32
 8001bf6:	f004 f831 	bl	8005c5c <HAL_Delay>
	writeRegister8(ILI9341_DISPLAYOFF, 0);
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2028      	movs	r0, #40	; 0x28
 8001bfe:	f7ff ff2f 	bl	8001a60 <writeRegister8>

	writeRegister8(ILI9341_POWERCONTROL1, 0x23);
 8001c02:	2123      	movs	r1, #35	; 0x23
 8001c04:	20c0      	movs	r0, #192	; 0xc0
 8001c06:	f7ff ff2b 	bl	8001a60 <writeRegister8>
	writeRegister8(ILI9341_POWERCONTROL2, 0x10);
 8001c0a:	2110      	movs	r1, #16
 8001c0c:	20c1      	movs	r0, #193	; 0xc1
 8001c0e:	f7ff ff27 	bl	8001a60 <writeRegister8>
	writeRegister16(ILI9341_VCOMCONTROL1, 0x2B2B);
 8001c12:	f642 312b 	movw	r1, #11051	; 0x2b2b
 8001c16:	20c5      	movs	r0, #197	; 0xc5
 8001c18:	f7ff ff42 	bl	8001aa0 <writeRegister16>
	writeRegister8(ILI9341_VCOMCONTROL2, 0xC0);
 8001c1c:	21c0      	movs	r1, #192	; 0xc0
 8001c1e:	20c7      	movs	r0, #199	; 0xc7
 8001c20:	f7ff ff1e 	bl	8001a60 <writeRegister8>
	writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001c24:	2188      	movs	r1, #136	; 0x88
 8001c26:	2036      	movs	r0, #54	; 0x36
 8001c28:	f7ff ff1a 	bl	8001a60 <writeRegister8>
	writeRegister8(ILI9341_PIXELFORMAT, 0x55);
 8001c2c:	2155      	movs	r1, #85	; 0x55
 8001c2e:	203a      	movs	r0, #58	; 0x3a
 8001c30:	f7ff ff16 	bl	8001a60 <writeRegister8>
	writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
 8001c34:	211b      	movs	r1, #27
 8001c36:	20b1      	movs	r0, #177	; 0xb1
 8001c38:	f7ff ff32 	bl	8001aa0 <writeRegister16>

	writeRegister8(ILI9341_ENTRYMODE, 0x07);
 8001c3c:	2107      	movs	r1, #7
 8001c3e:	20b7      	movs	r0, #183	; 0xb7
 8001c40:	f7ff ff0e 	bl	8001a60 <writeRegister8>


	writeRegister8(ILI9341_SLEEPOUT, 0);
 8001c44:	2100      	movs	r1, #0
 8001c46:	2011      	movs	r0, #17
 8001c48:	f7ff ff0a 	bl	8001a60 <writeRegister8>
	HAL_Delay(150);
 8001c4c:	2096      	movs	r0, #150	; 0x96
 8001c4e:	f004 f805 	bl	8005c5c <HAL_Delay>
	writeRegister8(ILI9341_DISPLAYON, 0);
 8001c52:	2100      	movs	r1, #0
 8001c54:	2029      	movs	r0, #41	; 0x29
 8001c56:	f7ff ff03 	bl	8001a60 <writeRegister8>
	HAL_Delay(500);
 8001c5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c5e:	f003 fffd 	bl	8005c5c <HAL_Delay>
	set_cursor(0, 0, TFTWIDTH-1, TFTHEIGHT-1);
 8001c62:	f240 133f 	movw	r3, #319	; 0x13f
 8001c66:	22ef      	movs	r2, #239	; 0xef
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f7ff ff84 	bl	8001b78 <set_cursor>

    return;
 8001c70:	bf00      	nop
}
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	48000800 	.word	0x48000800

08001c78 <lcd_reset>:

void lcd_reset(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
	CS_IDLE;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2104      	movs	r1, #4
 8001c82:	4821      	ldr	r0, [pc, #132]	; (8001d08 <lcd_reset+0x90>)
 8001c84:	f005 ff80 	bl	8007b88 <HAL_GPIO_WritePin>
	WR_IDLE;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2110      	movs	r1, #16
 8001c8c:	481e      	ldr	r0, [pc, #120]	; (8001d08 <lcd_reset+0x90>)
 8001c8e:	f005 ff7b 	bl	8007b88 <HAL_GPIO_WritePin>
	RD_IDLE;
 8001c92:	2201      	movs	r2, #1
 8001c94:	2120      	movs	r1, #32
 8001c96:	481c      	ldr	r0, [pc, #112]	; (8001d08 <lcd_reset+0x90>)
 8001c98:	f005 ff76 	bl	8007b88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	4819      	ldr	r0, [pc, #100]	; (8001d08 <lcd_reset+0x90>)
 8001ca2:	f005 ff71 	bl	8007b88 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f003 ffd8 	bl	8005c5c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2102      	movs	r1, #2
 8001cb0:	4815      	ldr	r0, [pc, #84]	; (8001d08 <lcd_reset+0x90>)
 8001cb2:	f005 ff69 	bl	8007b88 <HAL_GPIO_WritePin>

	CS_ACTIVE;
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2104      	movs	r1, #4
 8001cba:	4813      	ldr	r0, [pc, #76]	; (8001d08 <lcd_reset+0x90>)
 8001cbc:	f005 ff64 	bl	8007b88 <HAL_GPIO_WritePin>
	CD_COMMAND;
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2108      	movs	r1, #8
 8001cc4:	4810      	ldr	r0, [pc, #64]	; (8001d08 <lcd_reset+0x90>)
 8001cc6:	f005 ff5f 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(0x00);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff fe92 	bl	80019f4 <write8>
	for(uint8_t i=0; i<3; i++) WR_STROBE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	e00c      	b.n	8001cf0 <lcd_reset+0x78>
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2110      	movs	r1, #16
 8001cda:	480b      	ldr	r0, [pc, #44]	; (8001d08 <lcd_reset+0x90>)
 8001cdc:	f005 ff54 	bl	8007b88 <HAL_GPIO_WritePin>
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2110      	movs	r1, #16
 8001ce4:	4808      	ldr	r0, [pc, #32]	; (8001d08 <lcd_reset+0x90>)
 8001ce6:	f005 ff4f 	bl	8007b88 <HAL_GPIO_WritePin>
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	3301      	adds	r3, #1
 8001cee:	71fb      	strb	r3, [r7, #7]
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d9ef      	bls.n	8001cd6 <lcd_reset+0x5e>
	CS_IDLE;
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	4803      	ldr	r0, [pc, #12]	; (8001d08 <lcd_reset+0x90>)
 8001cfc:	f005 ff44 	bl	8007b88 <HAL_GPIO_WritePin>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	48000800 	.word	0x48000800

08001d0c <lcd_clear>:

void lcd_clear(uint16_t color)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
	uint8_t hi = color>>8;
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	72fb      	strb	r3, [r7, #11]
	uint8_t lo = color;
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	72bb      	strb	r3, [r7, #10]

	set_cursor(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8001d22:	f240 133f 	movw	r3, #319	; 0x13f
 8001d26:	22ef      	movs	r2, #239	; 0xef
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff ff24 	bl	8001b78 <set_cursor>
	CS_ACTIVE;
 8001d30:	2200      	movs	r2, #0
 8001d32:	2104      	movs	r1, #4
 8001d34:	4819      	ldr	r0, [pc, #100]	; (8001d9c <lcd_clear+0x90>)
 8001d36:	f005 ff27 	bl	8007b88 <HAL_GPIO_WritePin>
	CD_COMMAND;
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2108      	movs	r1, #8
 8001d3e:	4817      	ldr	r0, [pc, #92]	; (8001d9c <lcd_clear+0x90>)
 8001d40:	f005 ff22 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(0x2C);
 8001d44:	202c      	movs	r0, #44	; 0x2c
 8001d46:	f7ff fe55 	bl	80019f4 <write8>
	CD_DATA;
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2108      	movs	r1, #8
 8001d4e:	4813      	ldr	r0, [pc, #76]	; (8001d9c <lcd_clear+0x90>)
 8001d50:	f005 ff1a 	bl	8007b88 <HAL_GPIO_WritePin>
	for(uint16_t i=0; i<LCD_WIDTH; i++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	81fb      	strh	r3, [r7, #14]
 8001d58:	e014      	b.n	8001d84 <lcd_clear+0x78>
	{
		for(uint16_t j=0; j<LCD_HEIGHT; j++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	81bb      	strh	r3, [r7, #12]
 8001d5e:	e00a      	b.n	8001d76 <lcd_clear+0x6a>
		{
			write8(hi);
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fe46 	bl	80019f4 <write8>
			write8(lo);
 8001d68:	7abb      	ldrb	r3, [r7, #10]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fe42 	bl	80019f4 <write8>
		for(uint16_t j=0; j<LCD_HEIGHT; j++)
 8001d70:	89bb      	ldrh	r3, [r7, #12]
 8001d72:	3301      	adds	r3, #1
 8001d74:	81bb      	strh	r3, [r7, #12]
 8001d76:	89bb      	ldrh	r3, [r7, #12]
 8001d78:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d7c:	d3f0      	bcc.n	8001d60 <lcd_clear+0x54>
	for(uint16_t i=0; i<LCD_WIDTH; i++)
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
 8001d80:	3301      	adds	r3, #1
 8001d82:	81fb      	strh	r3, [r7, #14]
 8001d84:	89fb      	ldrh	r3, [r7, #14]
 8001d86:	2bef      	cmp	r3, #239	; 0xef
 8001d88:	d9e7      	bls.n	8001d5a <lcd_clear+0x4e>
		}
	}
	CS_IDLE;
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	4803      	ldr	r0, [pc, #12]	; (8001d9c <lcd_clear+0x90>)
 8001d90:	f005 fefa 	bl	8007b88 <HAL_GPIO_WritePin>

}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	48000800 	.word	0x48000800

08001da0 <lcd_set_pixel>:

void lcd_set_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
 8001daa:	460b      	mov	r3, r1
 8001dac:	80bb      	strh	r3, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	807b      	strh	r3, [r7, #2]

	set_cursor(x, y, x, y);
 8001db2:	88bb      	ldrh	r3, [r7, #4]
 8001db4:	88fa      	ldrh	r2, [r7, #6]
 8001db6:	88b9      	ldrh	r1, [r7, #4]
 8001db8:	88f8      	ldrh	r0, [r7, #6]
 8001dba:	f7ff fedd 	bl	8001b78 <set_cursor>

	CS_ACTIVE;
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	4812      	ldr	r0, [pc, #72]	; (8001e0c <lcd_set_pixel+0x6c>)
 8001dc4:	f005 fee0 	bl	8007b88 <HAL_GPIO_WritePin>
	CD_COMMAND;
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2108      	movs	r1, #8
 8001dcc:	480f      	ldr	r0, [pc, #60]	; (8001e0c <lcd_set_pixel+0x6c>)
 8001dce:	f005 fedb 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(0x2C);
 8001dd2:	202c      	movs	r0, #44	; 0x2c
 8001dd4:	f7ff fe0e 	bl	80019f4 <write8>
	CD_DATA;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2108      	movs	r1, #8
 8001ddc:	480b      	ldr	r0, [pc, #44]	; (8001e0c <lcd_set_pixel+0x6c>)
 8001dde:	f005 fed3 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(color>>8);
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fe02 	bl	80019f4 <write8>
	write8(color);
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fdfd 	bl	80019f4 <write8>
	CS_IDLE;
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	4803      	ldr	r0, [pc, #12]	; (8001e0c <lcd_set_pixel+0x6c>)
 8001e00:	f005 fec2 	bl	8007b88 <HAL_GPIO_WritePin>

}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	48000800 	.word	0x48000800

08001e10 <lcd_set_window_color>:

void lcd_set_window_color(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
		uint16_t color)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4604      	mov	r4, r0
 8001e18:	4608      	mov	r0, r1
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4623      	mov	r3, r4
 8001e20:	80fb      	strh	r3, [r7, #6]
 8001e22:	4603      	mov	r3, r0
 8001e24:	80bb      	strh	r3, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	803b      	strh	r3, [r7, #0]
	uint8_t hi = color>>8;
 8001e2e:	8c3b      	ldrh	r3, [r7, #32]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	72fb      	strb	r3, [r7, #11]
	uint8_t lo = color;
 8001e36:	8c3b      	ldrh	r3, [r7, #32]
 8001e38:	72bb      	strb	r3, [r7, #10]

	set_cursor(x0, y0, x1-1, y1-1);
 8001e3a:	887b      	ldrh	r3, [r7, #2]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	883b      	ldrh	r3, [r7, #0]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	88b9      	ldrh	r1, [r7, #4]
 8001e48:	88f8      	ldrh	r0, [r7, #6]
 8001e4a:	f7ff fe95 	bl	8001b78 <set_cursor>

	CS_ACTIVE;
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2104      	movs	r1, #4
 8001e52:	481a      	ldr	r0, [pc, #104]	; (8001ebc <lcd_set_window_color+0xac>)
 8001e54:	f005 fe98 	bl	8007b88 <HAL_GPIO_WritePin>
	CD_COMMAND;
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2108      	movs	r1, #8
 8001e5c:	4817      	ldr	r0, [pc, #92]	; (8001ebc <lcd_set_window_color+0xac>)
 8001e5e:	f005 fe93 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(0x2C);
 8001e62:	202c      	movs	r0, #44	; 0x2c
 8001e64:	f7ff fdc6 	bl	80019f4 <write8>
	CD_DATA;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	4813      	ldr	r0, [pc, #76]	; (8001ebc <lcd_set_window_color+0xac>)
 8001e6e:	f005 fe8b 	bl	8007b88 <HAL_GPIO_WritePin>
	for(uint16_t i=x0; i<x1; i++)
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	81fb      	strh	r3, [r7, #14]
 8001e76:	e014      	b.n	8001ea2 <lcd_set_window_color+0x92>
	{
		for(uint16_t j=y0; j<y1; j++)
 8001e78:	88bb      	ldrh	r3, [r7, #4]
 8001e7a:	81bb      	strh	r3, [r7, #12]
 8001e7c:	e00a      	b.n	8001e94 <lcd_set_window_color+0x84>
		{
			write8(hi);
 8001e7e:	7afb      	ldrb	r3, [r7, #11]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fdb7 	bl	80019f4 <write8>
			write8(lo);
 8001e86:	7abb      	ldrb	r3, [r7, #10]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fdb3 	bl	80019f4 <write8>
		for(uint16_t j=y0; j<y1; j++)
 8001e8e:	89bb      	ldrh	r3, [r7, #12]
 8001e90:	3301      	adds	r3, #1
 8001e92:	81bb      	strh	r3, [r7, #12]
 8001e94:	89ba      	ldrh	r2, [r7, #12]
 8001e96:	883b      	ldrh	r3, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3f0      	bcc.n	8001e7e <lcd_set_window_color+0x6e>
	for(uint16_t i=x0; i<x1; i++)
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	81fb      	strh	r3, [r7, #14]
 8001ea2:	89fa      	ldrh	r2, [r7, #14]
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3e6      	bcc.n	8001e78 <lcd_set_window_color+0x68>
		}
	}
	CS_IDLE;
 8001eaa:	2201      	movs	r2, #1
 8001eac:	2104      	movs	r1, #4
 8001eae:	4803      	ldr	r0, [pc, #12]	; (8001ebc <lcd_set_window_color+0xac>)
 8001eb0:	f005 fe6a 	bl	8007b88 <HAL_GPIO_WritePin>

}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd90      	pop	{r4, r7, pc}
 8001ebc:	48000800 	.word	0x48000800

08001ec0 <lcd_draw_string>:

void lcd_draw_string(char *str, uint8_t size, uint16_t x, uint16_t y,
		uint16_t color, font_t font)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	72fb      	strb	r3, [r7, #11]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	813b      	strh	r3, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
	uint16_t page;

	switch (font)
 8001eda:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	f200 820e 	bhi.w	8002300 <lcd_draw_string+0x440>
 8001ee4:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <lcd_draw_string+0x2c>)
 8001ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eea:	bf00      	nop
 8001eec:	08001f01 	.word	0x08001f01
 8001ef0:	08001fa9 	.word	0x08001fa9
 8001ef4:	08002057 	.word	0x08002057
 8001ef8:	0800211d 	.word	0x0800211d
 8001efc:	080021e9 	.word	0x080021e9
	{
		case font8:
		{
			for(uint8_t i=0; i<size; i++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001f06:	e049      	b.n	8001f9c <lcd_draw_string+0xdc>
			{
				x+=8;
 8001f08:	893b      	ldrh	r3, [r7, #8]
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	813b      	strh	r3, [r7, #8]
				page = (str[i]-32)*8;
 8001f0e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	3b20      	subs	r3, #32
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(uint8_t j=0; j<8; j++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001f26:	e030      	b.n	8001f8a <lcd_draw_string+0xca>
				{
					for(uint8_t k=0; k<8; k++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001f2e:	e020      	b.n	8001f72 <lcd_draw_string+0xb2>
					{
						if((font8_table[page]>>k)& 0x01)
 8001f30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f32:	4aaf      	ldr	r2, [pc, #700]	; (80021f0 <lcd_draw_string+0x330>)
 8001f34:	5cd3      	ldrb	r3, [r2, r3]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f3c:	fa42 f303 	asr.w	r3, r2, r3
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00f      	beq.n	8001f68 <lcd_draw_string+0xa8>
							lcd_set_pixel(x-k, j+y, color);
 8001f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	893a      	ldrh	r2, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	b298      	uxth	r0, r3
 8001f54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7ff ff1c 	bl	8001da0 <lcd_set_pixel>
					for(uint8_t k=0; k<8; k++)
 8001f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f76:	2b07      	cmp	r3, #7
 8001f78:	d9da      	bls.n	8001f30 <lcd_draw_string+0x70>
					}
					page++;
 8001f7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(uint8_t j=0; j<8; j++)
 8001f80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f84:	3301      	adds	r3, #1
 8001f86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001f8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	d9ca      	bls.n	8001f28 <lcd_draw_string+0x68>
			for(uint8_t i=0; i<size; i++)
 8001f92:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f96:	3301      	adds	r3, #1
 8001f98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001f9c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001fa0:	7afb      	ldrb	r3, [r7, #11]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d3b0      	bcc.n	8001f08 <lcd_draw_string+0x48>
				}
			}

		}
		break;
 8001fa6:	e1ab      	b.n	8002300 <lcd_draw_string+0x440>

		case font12:
		{
			for(uint8_t i=0; i<size; i++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001fae:	e04c      	b.n	800204a <lcd_draw_string+0x18a>
			{
				x+=8;
 8001fb0:	893b      	ldrh	r3, [r7, #8]
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	813b      	strh	r3, [r7, #8]
				page = (str[i]-32)*12;
 8001fb6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	3b20      	subs	r3, #32
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	0052      	lsls	r2, r2, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(uint8_t j=0; j<12; j++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001fd4:	e030      	b.n	8002038 <lcd_draw_string+0x178>
				{
					for(uint8_t k=0; k<8; k++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f887 3020 	strb.w	r3, [r7, #32]
 8001fdc:	e020      	b.n	8002020 <lcd_draw_string+0x160>
					{
						if((font12_table[page]>>k)& 0x01)
 8001fde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fe0:	4a84      	ldr	r2, [pc, #528]	; (80021f4 <lcd_draw_string+0x334>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fea:	fa42 f303 	asr.w	r3, r2, r3
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00f      	beq.n	8002016 <lcd_draw_string+0x156>
							lcd_set_pixel(x-k, j+y, color);
 8001ff6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	893a      	ldrh	r2, [r7, #8]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	b298      	uxth	r0, r3
 8002002:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002006:	b29a      	uxth	r2, r3
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	4413      	add	r3, r2
 800200c:	b29b      	uxth	r3, r3
 800200e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002010:	4619      	mov	r1, r3
 8002012:	f7ff fec5 	bl	8001da0 <lcd_set_pixel>
					for(uint8_t k=0; k<8; k++)
 8002016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800201a:	3301      	adds	r3, #1
 800201c:	f887 3020 	strb.w	r3, [r7, #32]
 8002020:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002024:	2b07      	cmp	r3, #7
 8002026:	d9da      	bls.n	8001fde <lcd_draw_string+0x11e>
					}
					page++;
 8002028:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800202a:	3301      	adds	r3, #1
 800202c:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(uint8_t j=0; j<12; j++)
 800202e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002032:	3301      	adds	r3, #1
 8002034:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002038:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800203c:	2b0b      	cmp	r3, #11
 800203e:	d9ca      	bls.n	8001fd6 <lcd_draw_string+0x116>
			for(uint8_t i=0; i<size; i++)
 8002040:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002044:	3301      	adds	r3, #1
 8002046:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800204a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	429a      	cmp	r2, r3
 8002052:	d3ad      	bcc.n	8001fb0 <lcd_draw_string+0xf0>
				}
			}
		}
		break;
 8002054:	e154      	b.n	8002300 <lcd_draw_string+0x440>

		case font16:
		{
			for(uint8_t i=0; i<size; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	77fb      	strb	r3, [r7, #31]
 800205a:	e05a      	b.n	8002112 <lcd_draw_string+0x252>
			{
				//x+=16;
				x+=13;
 800205c:	893b      	ldrh	r3, [r7, #8]
 800205e:	330d      	adds	r3, #13
 8002060:	813b      	strh	r3, [r7, #8]
				page = (str[i]-32)*32;
 8002062:	7ffb      	ldrb	r3, [r7, #31]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	3b20      	subs	r3, #32
 800206c:	b29b      	uxth	r3, r3
 800206e:	015b      	lsls	r3, r3, #5
 8002070:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(uint8_t j=0; j<16; j++)
 8002072:	2300      	movs	r3, #0
 8002074:	77bb      	strb	r3, [r7, #30]
 8002076:	e046      	b.n	8002106 <lcd_draw_string+0x246>
				{
					page++;
 8002078:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800207a:	3301      	adds	r3, #1
 800207c:	84fb      	strh	r3, [r7, #38]	; 0x26
					for(uint8_t k=0; k<8; k++)
 800207e:	2300      	movs	r3, #0
 8002080:	777b      	strb	r3, [r7, #29]
 8002082:	e037      	b.n	80020f4 <lcd_draw_string+0x234>
					{
						if((font16_table[page]>>k)& 0x01)
 8002084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002086:	4a5c      	ldr	r2, [pc, #368]	; (80021f8 <lcd_draw_string+0x338>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	461a      	mov	r2, r3
 800208c:	7f7b      	ldrb	r3, [r7, #29]
 800208e:	fa42 f303 	asr.w	r3, r2, r3
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00d      	beq.n	80020b6 <lcd_draw_string+0x1f6>
							lcd_set_pixel(x-k, j+y, color);
 800209a:	7f7b      	ldrb	r3, [r7, #29]
 800209c:	b29b      	uxth	r3, r3
 800209e:	893a      	ldrh	r2, [r7, #8]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	b298      	uxth	r0, r3
 80020a4:	7fbb      	ldrb	r3, [r7, #30]
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4413      	add	r3, r2
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80020b0:	4619      	mov	r1, r3
 80020b2:	f7ff fe75 	bl	8001da0 <lcd_set_pixel>
						if((font16_table[page-1]>>k)& 0x01)
 80020b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80020b8:	3b01      	subs	r3, #1
 80020ba:	4a4f      	ldr	r2, [pc, #316]	; (80021f8 <lcd_draw_string+0x338>)
 80020bc:	5cd3      	ldrb	r3, [r2, r3]
 80020be:	461a      	mov	r2, r3
 80020c0:	7f7b      	ldrb	r3, [r7, #29]
 80020c2:	fa42 f303 	asr.w	r3, r2, r3
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00f      	beq.n	80020ee <lcd_draw_string+0x22e>
							lcd_set_pixel((x-8)-k, j+y, color);
 80020ce:	7f7b      	ldrb	r3, [r7, #29]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	893a      	ldrh	r2, [r7, #8]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b08      	subs	r3, #8
 80020da:	b298      	uxth	r0, r3
 80020dc:	7fbb      	ldrb	r3, [r7, #30]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	4413      	add	r3, r2
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7ff fe59 	bl	8001da0 <lcd_set_pixel>
					for(uint8_t k=0; k<8; k++)
 80020ee:	7f7b      	ldrb	r3, [r7, #29]
 80020f0:	3301      	adds	r3, #1
 80020f2:	777b      	strb	r3, [r7, #29]
 80020f4:	7f7b      	ldrb	r3, [r7, #29]
 80020f6:	2b07      	cmp	r3, #7
 80020f8:	d9c4      	bls.n	8002084 <lcd_draw_string+0x1c4>
					}
					page++;
 80020fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80020fc:	3301      	adds	r3, #1
 80020fe:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(uint8_t j=0; j<16; j++)
 8002100:	7fbb      	ldrb	r3, [r7, #30]
 8002102:	3301      	adds	r3, #1
 8002104:	77bb      	strb	r3, [r7, #30]
 8002106:	7fbb      	ldrb	r3, [r7, #30]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d9b5      	bls.n	8002078 <lcd_draw_string+0x1b8>
			for(uint8_t i=0; i<size; i++)
 800210c:	7ffb      	ldrb	r3, [r7, #31]
 800210e:	3301      	adds	r3, #1
 8002110:	77fb      	strb	r3, [r7, #31]
 8002112:	7ffa      	ldrb	r2, [r7, #31]
 8002114:	7afb      	ldrb	r3, [r7, #11]
 8002116:	429a      	cmp	r2, r3
 8002118:	d3a0      	bcc.n	800205c <lcd_draw_string+0x19c>
				}
			}
		}
		break;
 800211a:	e0f1      	b.n	8002300 <lcd_draw_string+0x440>

		case font20:
		{
			for(uint8_t i=0; i<size; i++)
 800211c:	2300      	movs	r3, #0
 800211e:	773b      	strb	r3, [r7, #28]
 8002120:	e05d      	b.n	80021de <lcd_draw_string+0x31e>
			{
				x+=16;
 8002122:	893b      	ldrh	r3, [r7, #8]
 8002124:	3310      	adds	r3, #16
 8002126:	813b      	strh	r3, [r7, #8]
				page = (str[i]-32)*40;
 8002128:	7f3b      	ldrb	r3, [r7, #28]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	3b20      	subs	r3, #32
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(uint8_t j=0; j<20; j++)
 800213e:	2300      	movs	r3, #0
 8002140:	76fb      	strb	r3, [r7, #27]
 8002142:	e046      	b.n	80021d2 <lcd_draw_string+0x312>
				{
					page++;
 8002144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002146:	3301      	adds	r3, #1
 8002148:	84fb      	strh	r3, [r7, #38]	; 0x26
					for(uint8_t k=0; k<8; k++)
 800214a:	2300      	movs	r3, #0
 800214c:	76bb      	strb	r3, [r7, #26]
 800214e:	e037      	b.n	80021c0 <lcd_draw_string+0x300>
					{
						if((font20_table[page]>>k)& 0x01)
 8002150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002152:	4a2a      	ldr	r2, [pc, #168]	; (80021fc <lcd_draw_string+0x33c>)
 8002154:	5cd3      	ldrb	r3, [r2, r3]
 8002156:	461a      	mov	r2, r3
 8002158:	7ebb      	ldrb	r3, [r7, #26]
 800215a:	fa42 f303 	asr.w	r3, r2, r3
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <lcd_draw_string+0x2c2>
							lcd_set_pixel(x-k, j+y, color);
 8002166:	7ebb      	ldrb	r3, [r7, #26]
 8002168:	b29b      	uxth	r3, r3
 800216a:	893a      	ldrh	r2, [r7, #8]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	b298      	uxth	r0, r3
 8002170:	7efb      	ldrb	r3, [r7, #27]
 8002172:	b29a      	uxth	r2, r3
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	4413      	add	r3, r2
 8002178:	b29b      	uxth	r3, r3
 800217a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800217c:	4619      	mov	r1, r3
 800217e:	f7ff fe0f 	bl	8001da0 <lcd_set_pixel>
						if((font20_table[page-1]>>k)& 0x01)
 8002182:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002184:	3b01      	subs	r3, #1
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <lcd_draw_string+0x33c>)
 8002188:	5cd3      	ldrb	r3, [r2, r3]
 800218a:	461a      	mov	r2, r3
 800218c:	7ebb      	ldrb	r3, [r7, #26]
 800218e:	fa42 f303 	asr.w	r3, r2, r3
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00f      	beq.n	80021ba <lcd_draw_string+0x2fa>
							lcd_set_pixel((x-8)-k, j+y, color);
 800219a:	7ebb      	ldrb	r3, [r7, #26]
 800219c:	b29b      	uxth	r3, r3
 800219e:	893a      	ldrh	r2, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b08      	subs	r3, #8
 80021a6:	b298      	uxth	r0, r3
 80021a8:	7efb      	ldrb	r3, [r7, #27]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	4413      	add	r3, r2
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7ff fdf3 	bl	8001da0 <lcd_set_pixel>
					for(uint8_t k=0; k<8; k++)
 80021ba:	7ebb      	ldrb	r3, [r7, #26]
 80021bc:	3301      	adds	r3, #1
 80021be:	76bb      	strb	r3, [r7, #26]
 80021c0:	7ebb      	ldrb	r3, [r7, #26]
 80021c2:	2b07      	cmp	r3, #7
 80021c4:	d9c4      	bls.n	8002150 <lcd_draw_string+0x290>
					}
					page++;
 80021c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021c8:	3301      	adds	r3, #1
 80021ca:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(uint8_t j=0; j<20; j++)
 80021cc:	7efb      	ldrb	r3, [r7, #27]
 80021ce:	3301      	adds	r3, #1
 80021d0:	76fb      	strb	r3, [r7, #27]
 80021d2:	7efb      	ldrb	r3, [r7, #27]
 80021d4:	2b13      	cmp	r3, #19
 80021d6:	d9b5      	bls.n	8002144 <lcd_draw_string+0x284>
			for(uint8_t i=0; i<size; i++)
 80021d8:	7f3b      	ldrb	r3, [r7, #28]
 80021da:	3301      	adds	r3, #1
 80021dc:	773b      	strb	r3, [r7, #28]
 80021de:	7f3a      	ldrb	r2, [r7, #28]
 80021e0:	7afb      	ldrb	r3, [r7, #11]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d39d      	bcc.n	8002122 <lcd_draw_string+0x262>
				}
			}
		}
		break;
 80021e6:	e08b      	b.n	8002300 <lcd_draw_string+0x440>

		case font24:
		{
			for(uint8_t i=0; i<size; i++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	767b      	strb	r3, [r7, #25]
 80021ec:	e083      	b.n	80022f6 <lcd_draw_string+0x436>
 80021ee:	bf00      	nop
 80021f0:	0801aa7c 	.word	0x0801aa7c
 80021f4:	08017094 	.word	0x08017094
 80021f8:	08017508 	.word	0x08017508
 80021fc:	080180e8 	.word	0x080180e8
			{
				x+=24;
 8002200:	893b      	ldrh	r3, [r7, #8]
 8002202:	3318      	adds	r3, #24
 8002204:	813b      	strh	r3, [r7, #8]
				page = (str[i]-32)*47;
 8002206:	7e7b      	ldrb	r3, [r7, #25]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	3b20      	subs	r3, #32
 8002210:	b29b      	uxth	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	0052      	lsls	r2, r2, #1
 8002216:	441a      	add	r2, r3
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(uint8_t j=0; j<24; j++)
 800221e:	2300      	movs	r3, #0
 8002220:	763b      	strb	r3, [r7, #24]
 8002222:	e062      	b.n	80022ea <lcd_draw_string+0x42a>
				{
					page+=2;
 8002224:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002226:	3302      	adds	r3, #2
 8002228:	84fb      	strh	r3, [r7, #38]	; 0x26
					for(uint8_t k=0; k<8; k++)
 800222a:	2300      	movs	r3, #0
 800222c:	75fb      	strb	r3, [r7, #23]
 800222e:	e053      	b.n	80022d8 <lcd_draw_string+0x418>
					{
						if((font24_table[page]>>k)& 0x01)
 8002230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002232:	4a35      	ldr	r2, [pc, #212]	; (8002308 <lcd_draw_string+0x448>)
 8002234:	5cd3      	ldrb	r3, [r2, r3]
 8002236:	461a      	mov	r2, r3
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	fa42 f303 	asr.w	r3, r2, r3
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <lcd_draw_string+0x3a2>
							lcd_set_pixel(x-k, j+y, color);
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	b29b      	uxth	r3, r3
 800224a:	893a      	ldrh	r2, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	b298      	uxth	r0, r3
 8002250:	7e3b      	ldrb	r3, [r7, #24]
 8002252:	b29a      	uxth	r2, r3
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	4413      	add	r3, r2
 8002258:	b29b      	uxth	r3, r3
 800225a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800225c:	4619      	mov	r1, r3
 800225e:	f7ff fd9f 	bl	8001da0 <lcd_set_pixel>
						if((font24_table[page-1]>>k)& 0x01)
 8002262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002264:	3b01      	subs	r3, #1
 8002266:	4a28      	ldr	r2, [pc, #160]	; (8002308 <lcd_draw_string+0x448>)
 8002268:	5cd3      	ldrb	r3, [r2, r3]
 800226a:	461a      	mov	r2, r3
 800226c:	7dfb      	ldrb	r3, [r7, #23]
 800226e:	fa42 f303 	asr.w	r3, r2, r3
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00f      	beq.n	800229a <lcd_draw_string+0x3da>
							lcd_set_pixel((x-8)-k, j+y, color);
 800227a:	7dfb      	ldrb	r3, [r7, #23]
 800227c:	b29b      	uxth	r3, r3
 800227e:	893a      	ldrh	r2, [r7, #8]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b08      	subs	r3, #8
 8002286:	b298      	uxth	r0, r3
 8002288:	7e3b      	ldrb	r3, [r7, #24]
 800228a:	b29a      	uxth	r2, r3
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	4413      	add	r3, r2
 8002290:	b29b      	uxth	r3, r3
 8002292:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002294:	4619      	mov	r1, r3
 8002296:	f7ff fd83 	bl	8001da0 <lcd_set_pixel>
						if((font24_table[page-2]>>k)& 0x01)
 800229a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800229c:	3b02      	subs	r3, #2
 800229e:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <lcd_draw_string+0x448>)
 80022a0:	5cd3      	ldrb	r3, [r2, r3]
 80022a2:	461a      	mov	r2, r3
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	fa42 f303 	asr.w	r3, r2, r3
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00f      	beq.n	80022d2 <lcd_draw_string+0x412>
							lcd_set_pixel((x-16)-k, j+y, color);
 80022b2:	7dfb      	ldrb	r3, [r7, #23]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	893a      	ldrh	r2, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b10      	subs	r3, #16
 80022be:	b298      	uxth	r0, r3
 80022c0:	7e3b      	ldrb	r3, [r7, #24]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	4413      	add	r3, r2
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80022cc:	4619      	mov	r1, r3
 80022ce:	f7ff fd67 	bl	8001da0 <lcd_set_pixel>
					for(uint8_t k=0; k<8; k++)
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	3301      	adds	r3, #1
 80022d6:	75fb      	strb	r3, [r7, #23]
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	2b07      	cmp	r3, #7
 80022dc:	d9a8      	bls.n	8002230 <lcd_draw_string+0x370>
					}
					page++;
 80022de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022e0:	3301      	adds	r3, #1
 80022e2:	84fb      	strh	r3, [r7, #38]	; 0x26
				for(uint8_t j=0; j<24; j++)
 80022e4:	7e3b      	ldrb	r3, [r7, #24]
 80022e6:	3301      	adds	r3, #1
 80022e8:	763b      	strb	r3, [r7, #24]
 80022ea:	7e3b      	ldrb	r3, [r7, #24]
 80022ec:	2b17      	cmp	r3, #23
 80022ee:	d999      	bls.n	8002224 <lcd_draw_string+0x364>
			for(uint8_t i=0; i<size; i++)
 80022f0:	7e7b      	ldrb	r3, [r7, #25]
 80022f2:	3301      	adds	r3, #1
 80022f4:	767b      	strb	r3, [r7, #25]
 80022f6:	7e7a      	ldrb	r2, [r7, #25]
 80022f8:	7afb      	ldrb	r3, [r7, #11]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d380      	bcc.n	8002200 <lcd_draw_string+0x340>
				}
			}
		}
		break;
 80022fe:	bf00      	nop

	}
}
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	; 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	08018fc4 	.word	0x08018fc4

0800230c <lcd_draw_image>:

void lcd_draw_image(const uint16_t *image, uint16_t x, uint16_t y, uint16_t width,
		uint16_t height)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	4608      	mov	r0, r1
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4603      	mov	r3, r0
 800231c:	817b      	strh	r3, [r7, #10]
 800231e:	460b      	mov	r3, r1
 8002320:	813b      	strh	r3, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
	uint16_t page=0;
 8002326:	2300      	movs	r3, #0
 8002328:	82fb      	strh	r3, [r7, #22]

	set_cursor(x, y, x+width-1, y+height-1);
 800232a:	897a      	ldrh	r2, [r7, #10]
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	4413      	add	r3, r2
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29c      	uxth	r4, r3
 8002336:	893a      	ldrh	r2, [r7, #8]
 8002338:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800233a:	4413      	add	r3, r2
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29b      	uxth	r3, r3
 8002342:	8939      	ldrh	r1, [r7, #8]
 8002344:	8978      	ldrh	r0, [r7, #10]
 8002346:	4622      	mov	r2, r4
 8002348:	f7ff fc16 	bl	8001b78 <set_cursor>

	CS_ACTIVE;
 800234c:	2200      	movs	r2, #0
 800234e:	2104      	movs	r1, #4
 8002350:	4824      	ldr	r0, [pc, #144]	; (80023e4 <lcd_draw_image+0xd8>)
 8002352:	f005 fc19 	bl	8007b88 <HAL_GPIO_WritePin>
	CD_COMMAND;
 8002356:	2200      	movs	r2, #0
 8002358:	2108      	movs	r1, #8
 800235a:	4822      	ldr	r0, [pc, #136]	; (80023e4 <lcd_draw_image+0xd8>)
 800235c:	f005 fc14 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(0x2C);
 8002360:	202c      	movs	r0, #44	; 0x2c
 8002362:	f7ff fb47 	bl	80019f4 <write8>
	CD_DATA;
 8002366:	2201      	movs	r2, #1
 8002368:	2108      	movs	r1, #8
 800236a:	481e      	ldr	r0, [pc, #120]	; (80023e4 <lcd_draw_image+0xd8>)
 800236c:	f005 fc0c 	bl	8007b88 <HAL_GPIO_WritePin>
	for(uint16_t i=0; i< height; i++)
 8002370:	2300      	movs	r3, #0
 8002372:	82bb      	strh	r3, [r7, #20]
 8002374:	e028      	b.n	80023c8 <lcd_draw_image+0xbc>
	{
		for(uint16_t j= 0; j<width; j++)
 8002376:	2300      	movs	r3, #0
 8002378:	827b      	strh	r3, [r7, #18]
 800237a:	e01a      	b.n	80023b2 <lcd_draw_image+0xa6>
		{
			write8(image[page+j]>>8);
 800237c:	8afa      	ldrh	r2, [r7, #22]
 800237e:	8a7b      	ldrh	r3, [r7, #18]
 8002380:	4413      	add	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	b29b      	uxth	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fb2f 	bl	80019f4 <write8>
			write8(image[page+j]);
 8002396:	8afa      	ldrh	r2, [r7, #22]
 8002398:	8a7b      	ldrh	r3, [r7, #18]
 800239a:	4413      	add	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4413      	add	r3, r2
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fb24 	bl	80019f4 <write8>
		for(uint16_t j= 0; j<width; j++)
 80023ac:	8a7b      	ldrh	r3, [r7, #18]
 80023ae:	3301      	adds	r3, #1
 80023b0:	827b      	strh	r3, [r7, #18]
 80023b2:	8a7a      	ldrh	r2, [r7, #18]
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d3e0      	bcc.n	800237c <lcd_draw_image+0x70>
		}
		page += width;
 80023ba:	8afa      	ldrh	r2, [r7, #22]
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	4413      	add	r3, r2
 80023c0:	82fb      	strh	r3, [r7, #22]
	for(uint16_t i=0; i< height; i++)
 80023c2:	8abb      	ldrh	r3, [r7, #20]
 80023c4:	3301      	adds	r3, #1
 80023c6:	82bb      	strh	r3, [r7, #20]
 80023c8:	8aba      	ldrh	r2, [r7, #20]
 80023ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d3d2      	bcc.n	8002376 <lcd_draw_image+0x6a>
	}
	CS_IDLE;
 80023d0:	2201      	movs	r2, #1
 80023d2:	2104      	movs	r1, #4
 80023d4:	4803      	ldr	r0, [pc, #12]	; (80023e4 <lcd_draw_image+0xd8>)
 80023d6:	f005 fbd7 	bl	8007b88 <HAL_GPIO_WritePin>

}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd90      	pop	{r4, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	48000800 	.word	0x48000800

080023e8 <lcd_draw_line>:

void lcd_draw_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
		uint16_t color)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b08d      	sub	sp, #52	; 0x34
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	4604      	mov	r4, r0
 80023f0:	4608      	mov	r0, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	4623      	mov	r3, r4
 80023f8:	80fb      	strh	r3, [r7, #6]
 80023fa:	4603      	mov	r3, r0
 80023fc:	80bb      	strh	r3, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	807b      	strh	r3, [r7, #2]
 8002402:	4613      	mov	r3, r2
 8002404:	803b      	strh	r3, [r7, #0]
	int slope;
	int dx, incE, incNE, x, y;
	int dy, d;

	if(x0 > x1)
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	429a      	cmp	r2, r3
 800240c:	d909      	bls.n	8002422 <lcd_draw_line+0x3a>
	{
		lcd_draw_line(x1, y1, x0, y0, color);
 800240e:	88bc      	ldrh	r4, [r7, #4]
 8002410:	88fa      	ldrh	r2, [r7, #6]
 8002412:	8839      	ldrh	r1, [r7, #0]
 8002414:	8878      	ldrh	r0, [r7, #2]
 8002416:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	4623      	mov	r3, r4
 800241c:	f7ff ffe4 	bl	80023e8 <lcd_draw_line>
		return;
 8002420:	e044      	b.n	80024ac <lcd_draw_line+0xc4>
	}

	dx = x1 - x0;
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	613b      	str	r3, [r7, #16]
	dy = y1 - y0;
 800242a:	883a      	ldrh	r2, [r7, #0]
 800242c:	88bb      	ldrh	r3, [r7, #4]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	61bb      	str	r3, [r7, #24]

	if(dy < 0)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	da06      	bge.n	8002446 <lcd_draw_line+0x5e>
	{
		slope = -1;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
		dy = -dy;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	425b      	negs	r3, r3
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	e001      	b.n	800244a <lcd_draw_line+0x62>
	}

	else
		slope = 1;
 8002446:	2301      	movs	r3, #1
 8002448:	627b      	str	r3, [r7, #36]	; 0x24

	incE = 2 * dy;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
	incNE = 2 * dy - 2 * dx;
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
	d = 2 * dy - dx;
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	005a      	lsls	r2, r3, #1
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
	y = y0;
 8002464:	88bb      	ldrh	r3, [r7, #4]
 8002466:	61fb      	str	r3, [r7, #28]

	for(x=x0; x<=x1; x++)
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	623b      	str	r3, [r7, #32]
 800246c:	e01a      	b.n	80024a4 <lcd_draw_line+0xbc>
	{
		lcd_set_pixel(x, y, color);
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	b29b      	uxth	r3, r3
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	b291      	uxth	r1, r2
 8002476:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fc91 	bl	8001da0 <lcd_set_pixel>

		if(d <= 0)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	dc04      	bgt.n	800248e <lcd_draw_line+0xa6>
			d += incE;
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4413      	add	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e007      	b.n	800249e <lcd_draw_line+0xb6>

		else
		{
			d += incNE;
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4413      	add	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
			y += slope;
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	4413      	add	r3, r2
 800249c:	61fb      	str	r3, [r7, #28]
	for(x=x0; x<=x1; x++)
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	3301      	adds	r3, #1
 80024a2:	623b      	str	r3, [r7, #32]
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	6a3a      	ldr	r2, [r7, #32]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	dde0      	ble.n	800246e <lcd_draw_line+0x86>
		}
	}
}
 80024ac:	372c      	adds	r7, #44	; 0x2c
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd90      	pop	{r4, r7, pc}
	...

080024b4 <lcd_draw_rect>:

void lcd_draw_rect(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint16_t color)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4604      	mov	r4, r0
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4623      	mov	r3, r4
 80024c4:	80fb      	strh	r3, [r7, #6]
 80024c6:	4603      	mov	r3, r0
 80024c8:	80bb      	strh	r3, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	807b      	strh	r3, [r7, #2]
 80024ce:	4613      	mov	r3, r2
 80024d0:	803b      	strh	r3, [r7, #0]

  	uint8_t i;

  	uint8_t hi = color>>8;
 80024d2:	8c3b      	ldrh	r3, [r7, #32]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	73bb      	strb	r3, [r7, #14]
  	uint8_t lo = color;
 80024da:	8c3b      	ldrh	r3, [r7, #32]
 80024dc:	737b      	strb	r3, [r7, #13]

  	height--;
 80024de:	883b      	ldrh	r3, [r7, #0]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	803b      	strh	r3, [r7, #0]
  	width--;
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	807b      	strh	r3, [r7, #2]

	set_cursor(x, y, x, y+height);
 80024ea:	88ba      	ldrh	r2, [r7, #4]
 80024ec:	883b      	ldrh	r3, [r7, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	88b9      	ldrh	r1, [r7, #4]
 80024f6:	88f8      	ldrh	r0, [r7, #6]
 80024f8:	f7ff fb3e 	bl	8001b78 <set_cursor>
	CS_ACTIVE;
 80024fc:	2200      	movs	r2, #0
 80024fe:	2104      	movs	r1, #4
 8002500:	485f      	ldr	r0, [pc, #380]	; (8002680 <lcd_draw_rect+0x1cc>)
 8002502:	f005 fb41 	bl	8007b88 <HAL_GPIO_WritePin>
	CD_COMMAND;
 8002506:	2200      	movs	r2, #0
 8002508:	2108      	movs	r1, #8
 800250a:	485d      	ldr	r0, [pc, #372]	; (8002680 <lcd_draw_rect+0x1cc>)
 800250c:	f005 fb3c 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(0x2C);
 8002510:	202c      	movs	r0, #44	; 0x2c
 8002512:	f7ff fa6f 	bl	80019f4 <write8>
	CD_DATA;
 8002516:	2201      	movs	r2, #1
 8002518:	2108      	movs	r1, #8
 800251a:	4859      	ldr	r0, [pc, #356]	; (8002680 <lcd_draw_rect+0x1cc>)
 800251c:	f005 fb34 	bl	8007b88 <HAL_GPIO_WritePin>
	for(i=0; i<=height; i++)
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e00a      	b.n	800253c <lcd_draw_rect+0x88>
	{
		write8(hi);
 8002526:	7bbb      	ldrb	r3, [r7, #14]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fa63 	bl	80019f4 <write8>
		write8(lo);
 800252e:	7b7b      	ldrb	r3, [r7, #13]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fa5f 	bl	80019f4 <write8>
	for(i=0; i<=height; i++)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	3301      	adds	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	b29b      	uxth	r3, r3
 8002540:	883a      	ldrh	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d2ef      	bcs.n	8002526 <lcd_draw_rect+0x72>
	}

	set_cursor(x+width, y, x+width, y+height);
 8002546:	88fa      	ldrh	r2, [r7, #6]
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	4413      	add	r3, r2
 800254c:	b298      	uxth	r0, r3
 800254e:	88fa      	ldrh	r2, [r7, #6]
 8002550:	887b      	ldrh	r3, [r7, #2]
 8002552:	4413      	add	r3, r2
 8002554:	b29c      	uxth	r4, r3
 8002556:	88ba      	ldrh	r2, [r7, #4]
 8002558:	883b      	ldrh	r3, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	b29b      	uxth	r3, r3
 800255e:	88b9      	ldrh	r1, [r7, #4]
 8002560:	4622      	mov	r2, r4
 8002562:	f7ff fb09 	bl	8001b78 <set_cursor>
	CS_ACTIVE;
 8002566:	2200      	movs	r2, #0
 8002568:	2104      	movs	r1, #4
 800256a:	4845      	ldr	r0, [pc, #276]	; (8002680 <lcd_draw_rect+0x1cc>)
 800256c:	f005 fb0c 	bl	8007b88 <HAL_GPIO_WritePin>
	CD_COMMAND;
 8002570:	2200      	movs	r2, #0
 8002572:	2108      	movs	r1, #8
 8002574:	4842      	ldr	r0, [pc, #264]	; (8002680 <lcd_draw_rect+0x1cc>)
 8002576:	f005 fb07 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(0x2C);
 800257a:	202c      	movs	r0, #44	; 0x2c
 800257c:	f7ff fa3a 	bl	80019f4 <write8>
	CD_DATA;
 8002580:	2201      	movs	r2, #1
 8002582:	2108      	movs	r1, #8
 8002584:	483e      	ldr	r0, [pc, #248]	; (8002680 <lcd_draw_rect+0x1cc>)
 8002586:	f005 faff 	bl	8007b88 <HAL_GPIO_WritePin>
	for(i=0; i<=height; i++)
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	e00a      	b.n	80025a6 <lcd_draw_rect+0xf2>
	{
		write8(hi);
 8002590:	7bbb      	ldrb	r3, [r7, #14]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fa2e 	bl	80019f4 <write8>
		write8(lo);
 8002598:	7b7b      	ldrb	r3, [r7, #13]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fa2a 	bl	80019f4 <write8>
	for(i=0; i<=height; i++)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	3301      	adds	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	883a      	ldrh	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d2ef      	bcs.n	8002590 <lcd_draw_rect+0xdc>
	}

	set_cursor(x, y, x+width, y);
 80025b0:	88fa      	ldrh	r2, [r7, #6]
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	4413      	add	r3, r2
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	88bb      	ldrh	r3, [r7, #4]
 80025ba:	88b9      	ldrh	r1, [r7, #4]
 80025bc:	88f8      	ldrh	r0, [r7, #6]
 80025be:	f7ff fadb 	bl	8001b78 <set_cursor>
	CS_ACTIVE;
 80025c2:	2200      	movs	r2, #0
 80025c4:	2104      	movs	r1, #4
 80025c6:	482e      	ldr	r0, [pc, #184]	; (8002680 <lcd_draw_rect+0x1cc>)
 80025c8:	f005 fade 	bl	8007b88 <HAL_GPIO_WritePin>
	CD_COMMAND;
 80025cc:	2200      	movs	r2, #0
 80025ce:	2108      	movs	r1, #8
 80025d0:	482b      	ldr	r0, [pc, #172]	; (8002680 <lcd_draw_rect+0x1cc>)
 80025d2:	f005 fad9 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(0x2C);
 80025d6:	202c      	movs	r0, #44	; 0x2c
 80025d8:	f7ff fa0c 	bl	80019f4 <write8>
	CD_DATA;
 80025dc:	2201      	movs	r2, #1
 80025de:	2108      	movs	r1, #8
 80025e0:	4827      	ldr	r0, [pc, #156]	; (8002680 <lcd_draw_rect+0x1cc>)
 80025e2:	f005 fad1 	bl	8007b88 <HAL_GPIO_WritePin>
	for(i=0; i<=width; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e00a      	b.n	8002602 <lcd_draw_rect+0x14e>
	{
		write8(hi);
 80025ec:	7bbb      	ldrb	r3, [r7, #14]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fa00 	bl	80019f4 <write8>
		write8(lo);
 80025f4:	7b7b      	ldrb	r3, [r7, #13]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff f9fc 	bl	80019f4 <write8>
	for(i=0; i<=width; i++)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	3301      	adds	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	b29b      	uxth	r3, r3
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	429a      	cmp	r2, r3
 800260a:	d2ef      	bcs.n	80025ec <lcd_draw_rect+0x138>
	}

	set_cursor(x, y+height, x+width, y+height);
 800260c:	88ba      	ldrh	r2, [r7, #4]
 800260e:	883b      	ldrh	r3, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	b299      	uxth	r1, r3
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	4413      	add	r3, r2
 800261a:	b29c      	uxth	r4, r3
 800261c:	88ba      	ldrh	r2, [r7, #4]
 800261e:	883b      	ldrh	r3, [r7, #0]
 8002620:	4413      	add	r3, r2
 8002622:	b29b      	uxth	r3, r3
 8002624:	88f8      	ldrh	r0, [r7, #6]
 8002626:	4622      	mov	r2, r4
 8002628:	f7ff faa6 	bl	8001b78 <set_cursor>
	CS_ACTIVE;
 800262c:	2200      	movs	r2, #0
 800262e:	2104      	movs	r1, #4
 8002630:	4813      	ldr	r0, [pc, #76]	; (8002680 <lcd_draw_rect+0x1cc>)
 8002632:	f005 faa9 	bl	8007b88 <HAL_GPIO_WritePin>
	CD_COMMAND;
 8002636:	2200      	movs	r2, #0
 8002638:	2108      	movs	r1, #8
 800263a:	4811      	ldr	r0, [pc, #68]	; (8002680 <lcd_draw_rect+0x1cc>)
 800263c:	f005 faa4 	bl	8007b88 <HAL_GPIO_WritePin>
	write8(0x2C);
 8002640:	202c      	movs	r0, #44	; 0x2c
 8002642:	f7ff f9d7 	bl	80019f4 <write8>
	CD_DATA;
 8002646:	2201      	movs	r2, #1
 8002648:	2108      	movs	r1, #8
 800264a:	480d      	ldr	r0, [pc, #52]	; (8002680 <lcd_draw_rect+0x1cc>)
 800264c:	f005 fa9c 	bl	8007b88 <HAL_GPIO_WritePin>
	for(i=0; i<=width; i++)
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e00a      	b.n	800266c <lcd_draw_rect+0x1b8>
	{
		write8(hi);
 8002656:	7bbb      	ldrb	r3, [r7, #14]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff f9cb 	bl	80019f4 <write8>
		write8(lo);
 800265e:	7b7b      	ldrb	r3, [r7, #13]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f9c7 	bl	80019f4 <write8>
	for(i=0; i<=width; i++)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	3301      	adds	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	b29b      	uxth	r3, r3
 8002670:	887a      	ldrh	r2, [r7, #2]
 8002672:	429a      	cmp	r2, r3
 8002674:	d2ef      	bcs.n	8002656 <lcd_draw_rect+0x1a2>
	}

}
 8002676:	bf00      	nop
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	48000800 	.word	0x48000800

08002684 <lcd_draw_fill_circle>:

	}
}

void lcd_draw_fill_circle(uint16_t x, uint16_t y, uint16_t rad, uint16_t color)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	4604      	mov	r4, r0
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	461a      	mov	r2, r3
 8002692:	4623      	mov	r3, r4
 8002694:	80fb      	strh	r3, [r7, #6]
 8002696:	4603      	mov	r3, r0
 8002698:	80bb      	strh	r3, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	807b      	strh	r3, [r7, #2]
 800269e:	4613      	mov	r3, r2
 80026a0:	803b      	strh	r3, [r7, #0]
    int16_t x_pos, y_pos;
    x_pos = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	81fb      	strh	r3, [r7, #14]
    y_pos = rad;
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	81bb      	strh	r3, [r7, #12]

    int16_t esp = 3 - (rad << 1 );
 80026aa:	887b      	ldrh	r3, [r7, #2]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f1c3 0303 	rsb	r3, r3, #3
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	817b      	strh	r3, [r7, #10]

    int16_t s_count_y;

	while(x_pos <= y_pos )
 80026b8:	e096      	b.n	80027e8 <lcd_draw_fill_circle+0x164>
	{
		for(s_count_y = x_pos; s_count_y <= y_pos; s_count_y ++ )
 80026ba:	89fb      	ldrh	r3, [r7, #14]
 80026bc:	813b      	strh	r3, [r7, #8]
 80026be:	e065      	b.n	800278c <lcd_draw_fill_circle+0x108>
		{
			lcd_set_pixel(x + x_pos, y + s_count_y, color);
 80026c0:	89fa      	ldrh	r2, [r7, #14]
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	4413      	add	r3, r2
 80026c6:	b298      	uxth	r0, r3
 80026c8:	893a      	ldrh	r2, [r7, #8]
 80026ca:	88bb      	ldrh	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	883a      	ldrh	r2, [r7, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7ff fb64 	bl	8001da0 <lcd_set_pixel>
			lcd_set_pixel(x - x_pos, y + s_count_y, color);
 80026d8:	89fb      	ldrh	r3, [r7, #14]
 80026da:	88fa      	ldrh	r2, [r7, #6]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	b298      	uxth	r0, r3
 80026e0:	893a      	ldrh	r2, [r7, #8]
 80026e2:	88bb      	ldrh	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	883a      	ldrh	r2, [r7, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	f7ff fb58 	bl	8001da0 <lcd_set_pixel>
			lcd_set_pixel(x - s_count_y, y + x_pos, color);
 80026f0:	893b      	ldrh	r3, [r7, #8]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	b298      	uxth	r0, r3
 80026f8:	89fa      	ldrh	r2, [r7, #14]
 80026fa:	88bb      	ldrh	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	b29b      	uxth	r3, r3
 8002700:	883a      	ldrh	r2, [r7, #0]
 8002702:	4619      	mov	r1, r3
 8002704:	f7ff fb4c 	bl	8001da0 <lcd_set_pixel>
			lcd_set_pixel(x - s_count_y, y - x_pos, color);
 8002708:	893b      	ldrh	r3, [r7, #8]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	b298      	uxth	r0, r3
 8002710:	89fb      	ldrh	r3, [r7, #14]
 8002712:	88ba      	ldrh	r2, [r7, #4]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	b29b      	uxth	r3, r3
 8002718:	883a      	ldrh	r2, [r7, #0]
 800271a:	4619      	mov	r1, r3
 800271c:	f7ff fb40 	bl	8001da0 <lcd_set_pixel>
			lcd_set_pixel(x - x_pos, y - s_count_y, color);
 8002720:	89fb      	ldrh	r3, [r7, #14]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	b298      	uxth	r0, r3
 8002728:	893b      	ldrh	r3, [r7, #8]
 800272a:	88ba      	ldrh	r2, [r7, #4]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	883a      	ldrh	r2, [r7, #0]
 8002732:	4619      	mov	r1, r3
 8002734:	f7ff fb34 	bl	8001da0 <lcd_set_pixel>
			lcd_set_pixel(x + x_pos, y - s_count_y, color);
 8002738:	89fa      	ldrh	r2, [r7, #14]
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	4413      	add	r3, r2
 800273e:	b298      	uxth	r0, r3
 8002740:	893b      	ldrh	r3, [r7, #8]
 8002742:	88ba      	ldrh	r2, [r7, #4]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	b29b      	uxth	r3, r3
 8002748:	883a      	ldrh	r2, [r7, #0]
 800274a:	4619      	mov	r1, r3
 800274c:	f7ff fb28 	bl	8001da0 <lcd_set_pixel>
			lcd_set_pixel(x + s_count_y, y - x_pos, color);
 8002750:	893a      	ldrh	r2, [r7, #8]
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	4413      	add	r3, r2
 8002756:	b298      	uxth	r0, r3
 8002758:	89fb      	ldrh	r3, [r7, #14]
 800275a:	88ba      	ldrh	r2, [r7, #4]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	b29b      	uxth	r3, r3
 8002760:	883a      	ldrh	r2, [r7, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	f7ff fb1c 	bl	8001da0 <lcd_set_pixel>
			lcd_set_pixel(x + s_count_y, y + x_pos, color);
 8002768:	893a      	ldrh	r2, [r7, #8]
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	4413      	add	r3, r2
 800276e:	b298      	uxth	r0, r3
 8002770:	89fa      	ldrh	r2, [r7, #14]
 8002772:	88bb      	ldrh	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	b29b      	uxth	r3, r3
 8002778:	883a      	ldrh	r2, [r7, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	f7ff fb10 	bl	8001da0 <lcd_set_pixel>
		for(s_count_y = x_pos; s_count_y <= y_pos; s_count_y ++ )
 8002780:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002784:	b29b      	uxth	r3, r3
 8002786:	3301      	adds	r3, #1
 8002788:	b29b      	uxth	r3, r3
 800278a:	813b      	strh	r3, [r7, #8]
 800278c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002790:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	dd93      	ble.n	80026c0 <lcd_draw_fill_circle+0x3c>
		}
		if(esp < 0 )
 8002798:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800279c:	2b00      	cmp	r3, #0
 800279e:	da09      	bge.n	80027b4 <lcd_draw_fill_circle+0x130>
			esp += 4 * x_pos + 6;
 80027a0:	89fb      	ldrh	r3, [r7, #14]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	4413      	add	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3306      	adds	r3, #6
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	817b      	strh	r3, [r7, #10]
 80027b2:	e013      	b.n	80027dc <lcd_draw_fill_circle+0x158>
		else
		{
			esp += 10 + 4 * (x_pos - y_pos );
 80027b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80027b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	b29b      	uxth	r3, r3
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	897b      	ldrh	r3, [r7, #10]
 80027c6:	4413      	add	r3, r2
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	330a      	adds	r3, #10
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	817b      	strh	r3, [r7, #10]
			y_pos --;
 80027d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29b      	uxth	r3, r3
 80027da:	81bb      	strh	r3, [r7, #12]
		}
		x_pos ++;
 80027dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	81fb      	strh	r3, [r7, #14]
	while(x_pos <= y_pos )
 80027e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80027ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	f77f af62 	ble.w	80026ba <lcd_draw_fill_circle+0x36>
	}
}
 80027f6:	bf00      	nop
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd90      	pop	{r4, r7, pc}

08002800 <lcd_draw_batery_widget>:

void lcd_draw_batery_widget(uint16_t x, uint16_t y, uint8_t level)
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b087      	sub	sp, #28
 8002804:	af02      	add	r7, sp, #8
 8002806:	4603      	mov	r3, r0
 8002808:	80fb      	strh	r3, [r7, #6]
 800280a:	460b      	mov	r3, r1
 800280c:	80bb      	strh	r3, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	70fb      	strb	r3, [r7, #3]
	uint16_t color;

	if(level<30)
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	2b1d      	cmp	r3, #29
 8002816:	d803      	bhi.n	8002820 <lcd_draw_batery_widget+0x20>
		color = RED;
 8002818:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800281c:	81fb      	strh	r3, [r7, #14]
 800281e:	e009      	b.n	8002834 <lcd_draw_batery_widget+0x34>
	else if(level< 60)
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	2b3b      	cmp	r3, #59	; 0x3b
 8002824:	d803      	bhi.n	800282e <lcd_draw_batery_widget+0x2e>
		color = YELLOW;
 8002826:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800282a:	81fb      	strh	r3, [r7, #14]
 800282c:	e002      	b.n	8002834 <lcd_draw_batery_widget+0x34>
	else
		color = GREEN;
 800282e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002832:	81fb      	strh	r3, [r7, #14]

	lcd_draw_rect(x, y, 21, 12, WHITE);
 8002834:	88b9      	ldrh	r1, [r7, #4]
 8002836:	88f8      	ldrh	r0, [r7, #6]
 8002838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	230c      	movs	r3, #12
 8002840:	2215      	movs	r2, #21
 8002842:	f7ff fe37 	bl	80024b4 <lcd_draw_rect>
	level = level*2/10;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	4a20      	ldr	r2, [pc, #128]	; (80028cc <lcd_draw_batery_widget+0xcc>)
 800284a:	fb82 1203 	smull	r1, r2, r2, r3
 800284e:	1052      	asrs	r2, r2, #1
 8002850:	17db      	asrs	r3, r3, #31
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	70fb      	strb	r3, [r7, #3]
	x++;
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	3301      	adds	r3, #1
 800285a:	80fb      	strh	r3, [r7, #6]
	y++;
 800285c:	88bb      	ldrh	r3, [r7, #4]
 800285e:	3301      	adds	r3, #1
 8002860:	80bb      	strh	r3, [r7, #4]
	lcd_set_window_color(x, y, x+level, y+10, color);
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	b29a      	uxth	r2, r3
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	4413      	add	r3, r2
 800286a:	b29a      	uxth	r2, r3
 800286c:	88bb      	ldrh	r3, [r7, #4]
 800286e:	330a      	adds	r3, #10
 8002870:	b29c      	uxth	r4, r3
 8002872:	88b9      	ldrh	r1, [r7, #4]
 8002874:	88f8      	ldrh	r0, [r7, #6]
 8002876:	89fb      	ldrh	r3, [r7, #14]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	4623      	mov	r3, r4
 800287c:	f7ff fac8 	bl	8001e10 <lcd_set_window_color>
	lcd_set_window_color(x+level, y, x+19 , y+10, BLACK);
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	b29a      	uxth	r2, r3
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	4413      	add	r3, r2
 8002888:	b298      	uxth	r0, r3
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	3313      	adds	r3, #19
 800288e:	b29a      	uxth	r2, r3
 8002890:	88bb      	ldrh	r3, [r7, #4]
 8002892:	330a      	adds	r3, #10
 8002894:	b29b      	uxth	r3, r3
 8002896:	88b9      	ldrh	r1, [r7, #4]
 8002898:	2400      	movs	r4, #0
 800289a:	9400      	str	r4, [sp, #0]
 800289c:	f7ff fab8 	bl	8001e10 <lcd_set_window_color>
	lcd_set_window_color(x+20, y+3, x+23, y+7, WHITE);
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	3314      	adds	r3, #20
 80028a4:	b298      	uxth	r0, r3
 80028a6:	88bb      	ldrh	r3, [r7, #4]
 80028a8:	3303      	adds	r3, #3
 80028aa:	b299      	uxth	r1, r3
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	3317      	adds	r3, #23
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	88bb      	ldrh	r3, [r7, #4]
 80028b4:	3307      	adds	r3, #7
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80028bc:	9400      	str	r4, [sp, #0]
 80028be:	f7ff faa7 	bl	8001e10 <lcd_set_window_color>

}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd90      	pop	{r4, r7, pc}
 80028ca:	bf00      	nop
 80028cc:	66666667 	.word	0x66666667

080028d0 <lcd_draw_wifi_signal_widget>:
	   set_cursor(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
}
*/

void lcd_draw_wifi_signal_widget(uint16_t x,uint16_t y, int8_t level)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
 80028da:	460b      	mov	r3, r1
 80028dc:	80bb      	strh	r3, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	70fb      	strb	r3, [r7, #3]
	int ddf_x;
	int ddf_y;
	int x_pos;
	int y_pos;

	lcd_set_pixel(x, y, WHITE);
 80028e2:	88b9      	ldrh	r1, [r7, #4]
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fa58 	bl	8001da0 <lcd_set_pixel>

	int rad = 4;//primer radio
 80028f0:	2304      	movs	r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]

	while(rad<=12)//radio maximo
 80028f4:	e06d      	b.n	80029d2 <lcd_draw_wifi_signal_widget+0x102>
	{
		f = 1-rad;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f1c3 0301 	rsb	r3, r3, #1
 80028fc:	623b      	str	r3, [r7, #32]
		ddf_x = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
		ddf_y = -2*rad;
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	07db      	lsls	r3, r3, #31
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	61bb      	str	r3, [r7, #24]
		x_pos = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
		y_pos = rad;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	613b      	str	r3, [r7, #16]

		if((level+=40)<0)
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	3328      	adds	r3, #40	; 0x28
 800291a:	b2db      	uxtb	r3, r3
 800291c:	70fb      	strb	r3, [r7, #3]
 800291e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002922:	2b00      	cmp	r3, #0
 8002924:	da03      	bge.n	800292e <lcd_draw_wifi_signal_widget+0x5e>
			color = WHITE;
 8002926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800292c:	e002      	b.n	8002934 <lcd_draw_wifi_signal_widget+0x64>
		else
			color = 0x8410;
 800292e:	f248 4310 	movw	r3, #33808	; 0x8410
 8002932:	84fb      	strh	r3, [r7, #38]	; 0x26

		lcd_set_pixel(x, y-rad, color);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	b29b      	uxth	r3, r3
 8002938:	88ba      	ldrh	r2, [r7, #4]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	b299      	uxth	r1, r3
 800293e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fa2c 	bl	8001da0 <lcd_set_pixel>
		lcd_set_pixel(x-rad, y, color);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	b29b      	uxth	r3, r3
 800294c:	88fa      	ldrh	r2, [r7, #6]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	b29b      	uxth	r3, r3
 8002952:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002954:	88b9      	ldrh	r1, [r7, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fa22 	bl	8001da0 <lcd_set_pixel>

		while(x_pos<y_pos)
 800295c:	e032      	b.n	80029c4 <lcd_draw_wifi_signal_widget+0xf4>
		{
			if(f >= 0)
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db09      	blt.n	8002978 <lcd_draw_wifi_signal_widget+0xa8>
			{
				y_pos--;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	3b01      	subs	r3, #1
 8002968:	613b      	str	r3, [r7, #16]
				ddf_y += 2;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	3302      	adds	r3, #2
 800296e:	61bb      	str	r3, [r7, #24]
				f += ddf_y;
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	623b      	str	r3, [r7, #32]
			}

			x_pos++;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3301      	adds	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
			ddf_x += 2;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3302      	adds	r3, #2
 8002982:	61fb      	str	r3, [r7, #28]
			f += ddf_x;
 8002984:	6a3a      	ldr	r2, [r7, #32]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	623b      	str	r3, [r7, #32]

			lcd_set_pixel(x-x_pos, y-y_pos, color);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	b29b      	uxth	r3, r3
 8002990:	88fa      	ldrh	r2, [r7, #6]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	b298      	uxth	r0, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	b29b      	uxth	r3, r3
 800299a:	88ba      	ldrh	r2, [r7, #4]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	b29b      	uxth	r3, r3
 80029a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80029a2:	4619      	mov	r1, r3
 80029a4:	f7ff f9fc 	bl	8001da0 <lcd_set_pixel>
			lcd_set_pixel(x-y_pos, y-x_pos, color);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	b298      	uxth	r0, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	88ba      	ldrh	r2, [r7, #4]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80029be:	4619      	mov	r1, r3
 80029c0:	f7ff f9ee 	bl	8001da0 <lcd_set_pixel>
		while(x_pos<y_pos)
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	dbc8      	blt.n	800295e <lcd_draw_wifi_signal_widget+0x8e>
		}

		rad+=4;//incremento del radio
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3304      	adds	r3, #4
 80029d0:	60fb      	str	r3, [r7, #12]
	while(rad<=12)//radio maximo
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	dd8e      	ble.n	80028f6 <lcd_draw_wifi_signal_widget+0x26>

	}
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3728      	adds	r7, #40	; 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <convert_from_rgb_8>:
*/



uint16_t convert_from_rgb_8(uint8_t r, uint8_t g, uint8_t b)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
 80029ec:	460b      	mov	r3, r1
 80029ee:	71bb      	strb	r3, [r7, #6]
 80029f0:	4613      	mov	r3, r2
 80029f2:	717b      	strb	r3, [r7, #5]
	uint8_t r_5 = r>>3;
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	08db      	lsrs	r3, r3, #3
 80029f8:	73fb      	strb	r3, [r7, #15]
	uint8_t g_6 = g>>2;
 80029fa:	79bb      	ldrb	r3, [r7, #6]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	73bb      	strb	r3, [r7, #14]
	uint8_t b_5 = b>>3;
 8002a00:	797b      	ldrb	r3, [r7, #5]
 8002a02:	08db      	lsrs	r3, r3, #3
 8002a04:	737b      	strb	r3, [r7, #13]

	return (r_5<<11) | (g_6<<5) | (b_5);
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	02db      	lsls	r3, r3, #11
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	015b      	lsls	r3, r3, #5
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	4313      	orrs	r3, r2
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	7b7b      	ldrb	r3, [r7, #13]
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	b29b      	uxth	r3, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <lcd_draw_message_widget>:

void lcd_draw_message_widget(uint16_t x, uint16_t y, uint8_t n_messages)
{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
 8002a36:	460b      	mov	r3, r1
 8002a38:	80bb      	strh	r3, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	70fb      	strb	r3, [r7, #3]
	lcd_set_window_color(x, y, x+16, y+10, WHITE);
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	3310      	adds	r3, #16
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	88bb      	ldrh	r3, [r7, #4]
 8002a46:	330a      	adds	r3, #10
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	88b9      	ldrh	r1, [r7, #4]
 8002a4c:	88f8      	ldrh	r0, [r7, #6]
 8002a4e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002a52:	9400      	str	r4, [sp, #0]
 8002a54:	f7ff f9dc 	bl	8001e10 <lcd_set_window_color>

	lcd_draw_line(x, y, x+(16/2), y+(10/2), BLACK);
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	88bb      	ldrh	r3, [r7, #4]
 8002a60:	3305      	adds	r3, #5
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	88b9      	ldrh	r1, [r7, #4]
 8002a66:	88f8      	ldrh	r0, [r7, #6]
 8002a68:	2400      	movs	r4, #0
 8002a6a:	9400      	str	r4, [sp, #0]
 8002a6c:	f7ff fcbc 	bl	80023e8 <lcd_draw_line>
	lcd_draw_line(x+15, y, x+(16/2), y+(10/2), BLACK);
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	330f      	adds	r3, #15
 8002a74:	b298      	uxth	r0, r3
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	3308      	adds	r3, #8
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	88bb      	ldrh	r3, [r7, #4]
 8002a7e:	3305      	adds	r3, #5
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	88b9      	ldrh	r1, [r7, #4]
 8002a84:	2400      	movs	r4, #0
 8002a86:	9400      	str	r4, [sp, #0]
 8002a88:	f7ff fcae 	bl	80023e8 <lcd_draw_line>

	lcd_draw_line(x, y+9, x+(16/2)-2, y+(10/2)-2, BLACK);
 8002a8c:	88bb      	ldrh	r3, [r7, #4]
 8002a8e:	3309      	adds	r3, #9
 8002a90:	b299      	uxth	r1, r3
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	3306      	adds	r3, #6
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	88bb      	ldrh	r3, [r7, #4]
 8002a9a:	3303      	adds	r3, #3
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	88f8      	ldrh	r0, [r7, #6]
 8002aa0:	2400      	movs	r4, #0
 8002aa2:	9400      	str	r4, [sp, #0]
 8002aa4:	f7ff fca0 	bl	80023e8 <lcd_draw_line>
	lcd_draw_line(x+15, y+9, x+(16/2)+2, y+(10/2)-2, BLACK);
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	330f      	adds	r3, #15
 8002aac:	b298      	uxth	r0, r3
 8002aae:	88bb      	ldrh	r3, [r7, #4]
 8002ab0:	3309      	adds	r3, #9
 8002ab2:	b299      	uxth	r1, r3
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	330a      	adds	r3, #10
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	88bb      	ldrh	r3, [r7, #4]
 8002abc:	3303      	adds	r3, #3
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2400      	movs	r4, #0
 8002ac2:	9400      	str	r4, [sp, #0]
 8002ac4:	f7ff fc90 	bl	80023e8 <lcd_draw_line>

	if(n_messages)
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <lcd_draw_message_widget+0xb8>
		lcd_draw_fill_circle(x+15, y+2, 2, RED);
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	330f      	adds	r3, #15
 8002ad2:	b298      	uxth	r0, r3
 8002ad4:	88bb      	ldrh	r3, [r7, #4]
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	b299      	uxth	r1, r3
 8002ada:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f7ff fdd0 	bl	8002684 <lcd_draw_fill_circle>

}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}

08002aec <gpio_pin_mode>:



//TOUCH PROTOTYPES
void gpio_pin_mode(GPIO_TypeDef *port  , uint16_t pin, uint8_t mode)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
 8002af8:	4613      	mov	r3, r2
 8002afa:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_DeInit(port, pin);
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	4619      	mov	r1, r3
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f004 ff35 	bl	8007970 <HAL_GPIO_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b06:	f107 030c 	add.w	r3, r7, #12
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	60da      	str	r2, [r3, #12]
 8002b14:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = pin;
 8002b16:	887b      	ldrh	r3, [r7, #2]
 8002b18:	60fb      	str	r3, [r7, #12]
	if(mode)
 8002b1a:	787b      	ldrb	r3, [r7, #1]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d004      	beq.n	8002b2a <gpio_pin_mode+0x3e>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b20:	2301      	movs	r3, #1
 8002b22:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	e001      	b.n	8002b2e <gpio_pin_mode+0x42>
	}

	else
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
	}

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f004 fd6f 	bl	800761c <HAL_GPIO_Init>
}
 8002b3e:	bf00      	nop
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <touch_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void touch_read(touch_point_t *point)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	uint32_t adc_read_x=0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
	uint32_t adc_read_y=0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
	////////////////////////////Zread/////////////////////////////////
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 8002b58:	2108      	movs	r1, #8
 8002b5a:	485e      	ldr	r0, [pc, #376]	; (8002cd4 <touch_read+0x18c>)
 8002b5c:	f004 ff08 	bl	8007970 <HAL_GPIO_DeInit>
	MX_ADC1_Init();
 8002b60:	f000 fa4a 	bl	8002ff8 <MX_ADC1_Init>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 8002b64:	2110      	movs	r1, #16
 8002b66:	485b      	ldr	r0, [pc, #364]	; (8002cd4 <touch_read+0x18c>)
 8002b68:	f004 ff02 	bl	8007970 <HAL_GPIO_DeInit>
	MX_ADC2_Init();
 8002b6c:	f000 faba 	bl	80030e4 <MX_ADC2_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b70:	2201      	movs	r2, #1
 8002b72:	2110      	movs	r1, #16
 8002b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b78:	f005 f806 	bl	8007b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2102      	movs	r1, #2
 8002b80:	4855      	ldr	r0, [pc, #340]	; (8002cd8 <touch_read+0x190>)
 8002b82:	f005 f801 	bl	8007b88 <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc1);
 8002b86:	4855      	ldr	r0, [pc, #340]	; (8002cdc <touch_read+0x194>)
 8002b88:	f003 fd28 	bl	80065dc <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 8002b8c:	4854      	ldr	r0, [pc, #336]	; (8002ce0 <touch_read+0x198>)
 8002b8e:	f003 fd25 	bl	80065dc <HAL_ADC_Start>

	adc_read_x = HAL_ADC_GetValue(&hadc1);
 8002b92:	4852      	ldr	r0, [pc, #328]	; (8002cdc <touch_read+0x194>)
 8002b94:	f003 fe0f 	bl	80067b6 <HAL_ADC_GetValue>
 8002b98:	6178      	str	r0, [r7, #20]
	adc_read_y = HAL_ADC_GetValue(&hadc2);
 8002b9a:	4851      	ldr	r0, [pc, #324]	; (8002ce0 <touch_read+0x198>)
 8002b9c:	f003 fe0b 	bl	80067b6 <HAL_ADC_GetValue>
 8002ba0:	6138      	str	r0, [r7, #16]

	HAL_ADC_Stop(&hadc1);
 8002ba2:	484e      	ldr	r0, [pc, #312]	; (8002cdc <touch_read+0x194>)
 8002ba4:	f003 fdd4 	bl	8006750 <HAL_ADC_Stop>
	HAL_ADC_Stop(&hadc2);
 8002ba8:	484d      	ldr	r0, [pc, #308]	; (8002ce0 <touch_read+0x198>)
 8002baa:	f003 fdd1 	bl	8006750 <HAL_ADC_Stop>

	point->pressure = adc_read_y-adc_read_x;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	809a      	strh	r2, [r3, #4]

	HAL_ADC_DeInit(&hadc2);
 8002bbe:	4848      	ldr	r0, [pc, #288]	; (8002ce0 <touch_read+0x198>)
 8002bc0:	f003 fbd6 	bl	8006370 <HAL_ADC_DeInit>
	gpio_pin_mode(GPIOC, GPIO_PIN_4, 1);
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	4842      	ldr	r0, [pc, #264]	; (8002cd4 <touch_read+0x18c>)
 8002bca:	f7ff ff8f 	bl	8002aec <gpio_pin_mode>

	////////////////X READ//////////////////////////////////////////
	gpio_pin_mode(GPIOB, GPIO_PIN_1, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	4841      	ldr	r0, [pc, #260]	; (8002cd8 <touch_read+0x190>)
 8002bd4:	f7ff ff8a 	bl	8002aec <gpio_pin_mode>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002bd8:	2201      	movs	r2, #1
 8002bda:	2110      	movs	r1, #16
 8002bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be0:	f004 ffd2 	bl	8007b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2110      	movs	r1, #16
 8002be8:	483a      	ldr	r0, [pc, #232]	; (8002cd4 <touch_read+0x18c>)
 8002bea:	f004 ffcd 	bl	8007b88 <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc1);
 8002bee:	483b      	ldr	r0, [pc, #236]	; (8002cdc <touch_read+0x194>)
 8002bf0:	f003 fcf4 	bl	80065dc <HAL_ADC_Start>
	for(uint8_t i=0; i<100; i++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e009      	b.n	8002c0e <touch_read+0xc6>
	{
		adc_read_x += HAL_ADC_GetValue(&hadc1);
 8002bfa:	4838      	ldr	r0, [pc, #224]	; (8002cdc <touch_read+0x194>)
 8002bfc:	f003 fddb 	bl	80067b6 <HAL_ADC_GetValue>
 8002c00:	4602      	mov	r2, r0
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	4413      	add	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
	for(uint8_t i=0; i<100; i++)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2b63      	cmp	r3, #99	; 0x63
 8002c12:	d9f2      	bls.n	8002bfa <touch_read+0xb2>
	}
	HAL_ADC_Stop(&hadc1);
 8002c14:	4831      	ldr	r0, [pc, #196]	; (8002cdc <touch_read+0x194>)
 8002c16:	f003 fd9b 	bl	8006750 <HAL_ADC_Stop>

	point->x_point = (adc_read_x/1700);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	4a31      	ldr	r2, [pc, #196]	; (8002ce4 <touch_read+0x19c>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	801a      	strh	r2, [r3, #0]

	HAL_ADC_DeInit(&hadc1);
 8002c2c:	482b      	ldr	r0, [pc, #172]	; (8002cdc <touch_read+0x194>)
 8002c2e:	f003 fb9f 	bl	8006370 <HAL_ADC_DeInit>

	gpio_pin_mode(GPIOB, GPIO_PIN_1, 1);
 8002c32:	2201      	movs	r2, #1
 8002c34:	2102      	movs	r1, #2
 8002c36:	4828      	ldr	r0, [pc, #160]	; (8002cd8 <touch_read+0x190>)
 8002c38:	f7ff ff58 	bl	8002aec <gpio_pin_mode>
	gpio_pin_mode(GPIOC, GPIO_PIN_3, 1);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2108      	movs	r1, #8
 8002c40:	4824      	ldr	r0, [pc, #144]	; (8002cd4 <touch_read+0x18c>)
 8002c42:	f7ff ff53 	bl	8002aec <gpio_pin_mode>

	///////////////////YREAD////////////////////////////////////////
	gpio_pin_mode(GPIOA, GPIO_PIN_4, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2110      	movs	r1, #16
 8002c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4e:	f7ff ff4d 	bl	8002aec <gpio_pin_mode>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 8002c52:	2110      	movs	r1, #16
 8002c54:	481f      	ldr	r0, [pc, #124]	; (8002cd4 <touch_read+0x18c>)
 8002c56:	f004 fe8b 	bl	8007970 <HAL_GPIO_DeInit>

	MX_ADC2_Init();
 8002c5a:	f000 fa43 	bl	80030e4 <MX_ADC2_Init>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2102      	movs	r1, #2
 8002c62:	481d      	ldr	r0, [pc, #116]	; (8002cd8 <touch_read+0x190>)
 8002c64:	f004 ff90 	bl	8007b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8002c68:	2201      	movs	r2, #1
 8002c6a:	2108      	movs	r1, #8
 8002c6c:	4819      	ldr	r0, [pc, #100]	; (8002cd4 <touch_read+0x18c>)
 8002c6e:	f004 ff8b 	bl	8007b88 <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc2);
 8002c72:	481b      	ldr	r0, [pc, #108]	; (8002ce0 <touch_read+0x198>)
 8002c74:	f003 fcb2 	bl	80065dc <HAL_ADC_Start>
	for(uint8_t i=0; i<100; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73bb      	strb	r3, [r7, #14]
 8002c7c:	e009      	b.n	8002c92 <touch_read+0x14a>
	{
		adc_read_y += HAL_ADC_GetValue(&hadc2);
 8002c7e:	4818      	ldr	r0, [pc, #96]	; (8002ce0 <touch_read+0x198>)
 8002c80:	f003 fd99 	bl	80067b6 <HAL_ADC_GetValue>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
	for(uint8_t i=0; i<100; i++)
 8002c8c:	7bbb      	ldrb	r3, [r7, #14]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	73bb      	strb	r3, [r7, #14]
 8002c92:	7bbb      	ldrb	r3, [r7, #14]
 8002c94:	2b63      	cmp	r3, #99	; 0x63
 8002c96:	d9f2      	bls.n	8002c7e <touch_read+0x136>
	}
	HAL_ADC_Stop(&hadc2);
 8002c98:	4811      	ldr	r0, [pc, #68]	; (8002ce0 <touch_read+0x198>)
 8002c9a:	f003 fd59 	bl	8006750 <HAL_ADC_Stop>
	point->y_point = (adc_read_y/1200);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4a11      	ldr	r2, [pc, #68]	; (8002ce8 <touch_read+0x1a0>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	09db      	lsrs	r3, r3, #7
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	805a      	strh	r2, [r3, #2]

	HAL_ADC_DeInit(&hadc2);
 8002cae:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <touch_read+0x198>)
 8002cb0:	f003 fb5e 	bl	8006370 <HAL_ADC_DeInit>

	gpio_pin_mode(GPIOA, GPIO_PIN_4, 1);
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	2110      	movs	r1, #16
 8002cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbc:	f7ff ff16 	bl	8002aec <gpio_pin_mode>
	gpio_pin_mode(GPIOC, GPIO_PIN_4, 1);
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	2110      	movs	r1, #16
 8002cc4:	4803      	ldr	r0, [pc, #12]	; (8002cd4 <touch_read+0x18c>)
 8002cc6:	f7ff ff11 	bl	8002aec <gpio_pin_mode>

}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	48000800 	.word	0x48000800
 8002cd8:	48000400 	.word	0x48000400
 8002cdc:	200103c4 	.word	0x200103c4
 8002ce0:	200101a8 	.word	0x200101a8
 8002ce4:	134679ad 	.word	0x134679ad
 8002ce8:	1b4e81b5 	.word	0x1b4e81b5

08002cec <system_block_screen_by_tp_crtl>:

void system_block_screen_by_tp_crtl()
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
	touch_point_t point;
	while(xQueueReceive(touch_point_queue, &point, portMAX_DELAY) == pdFALSE);
 8002cf2:	bf00      	nop
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <system_block_screen_by_tp_crtl+0x28>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4639      	mov	r1, r7
 8002cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f00c fdc8 	bl	800f894 <xQueueReceive>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f4      	beq.n	8002cf4 <system_block_screen_by_tp_crtl+0x8>
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200005bc 	.word	0x200005bc

08002d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d1e:	f002 ff64 	bl	8005bea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d22:	f000 f8eb 	bl	8002efc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002d26:	f000 f93b 	bl	8002fa0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d2a:	f000 fb39 	bl	80033a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002d2e:	f000 fa3d 	bl	80031ac <MX_SPI1_Init>
  MX_FATFS_Init();
 8002d32:	f008 fa7b 	bl	800b22c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8002d36:	f000 fb03 	bl	8003340 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8002d3a:	f000 fa75 	bl	8003228 <MX_SPI3_Init>
  MX_ADC1_Init();
 8002d3e:	f000 f95b 	bl	8002ff8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002d42:	f000 f9cf 	bl	80030e4 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002d46:	f000 faad 	bl	80032a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //LCD INIT__________________________________________________________________
  HAL_ADC_DeInit(&hadc1);
 8002d4a:	4854      	ldr	r0, [pc, #336]	; (8002e9c <main+0x184>)
 8002d4c:	f003 fb10 	bl	8006370 <HAL_ADC_DeInit>
  HAL_ADC_DeInit(&hadc2);
 8002d50:	4853      	ldr	r0, [pc, #332]	; (8002ea0 <main+0x188>)
 8002d52:	f003 fb0d 	bl	8006370 <HAL_ADC_DeInit>
  gpio_pin_mode(GPIOC, GPIO_PIN_4, 1);
 8002d56:	2201      	movs	r2, #1
 8002d58:	2110      	movs	r1, #16
 8002d5a:	4852      	ldr	r0, [pc, #328]	; (8002ea4 <main+0x18c>)
 8002d5c:	f7ff fec6 	bl	8002aec <gpio_pin_mode>
  gpio_pin_mode(GPIOC, GPIO_PIN_3, 1);
 8002d60:	2201      	movs	r2, #1
 8002d62:	2108      	movs	r1, #8
 8002d64:	484f      	ldr	r0, [pc, #316]	; (8002ea4 <main+0x18c>)
 8002d66:	f7ff fec1 	bl	8002aec <gpio_pin_mode>

  lcd_init();
 8002d6a:	f7fe ff33 	bl	8001bd4 <lcd_init>

  //SYSTEM INIT_______________________________________________________________
  print_logo();
 8002d6e:	f000 fbff 	bl	8003570 <print_logo>
  if(!init_sd(STORAGE_MOUNT))
 8002d72:	484d      	ldr	r0, [pc, #308]	; (8002ea8 <main+0x190>)
 8002d74:	f001 f889 	bl	8003e8a <init_sd>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d117      	bne.n	8002dae <main+0x96>
  {
	  lcd_draw_string("SD FAILED...", strlen("SD FAILED..."), 0, 0, RED, font12);
 8002d7e:	2301      	movs	r3, #1
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	210c      	movs	r1, #12
 8002d8e:	4847      	ldr	r0, [pc, #284]	; (8002eac <main+0x194>)
 8002d90:	f7ff f896 	bl	8001ec0 <lcd_draw_string>
	  lcd_draw_string("PRESS RESET...", strlen("PRESS RESET..."), 0, 12, YELLOW, font12);
 8002d94:	2301      	movs	r3, #1
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	230c      	movs	r3, #12
 8002da0:	2200      	movs	r2, #0
 8002da2:	210e      	movs	r1, #14
 8002da4:	4842      	ldr	r0, [pc, #264]	; (8002eb0 <main+0x198>)
 8002da6:	f7ff f88b 	bl	8001ec0 <lcd_draw_string>
	  while(1)
		  asm("nop");
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <main+0x92>
  }

  lcd_draw_message_widget(100, 0, 1);
 8002dae:	2201      	movs	r2, #1
 8002db0:	2100      	movs	r1, #0
 8002db2:	2064      	movs	r0, #100	; 0x64
 8002db4:	f7ff fe3a 	bl	8002a2c <lcd_draw_message_widget>
  //while(1);

  //INIT MUTEX________________________________________________________________
  lcd_mutex = xSemaphoreCreateMutex();
 8002db8:	2001      	movs	r0, #1
 8002dba:	f00c fbc6 	bl	800f54a <xQueueCreateMutex>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <main+0x19c>)
 8002dc2:	6013      	str	r3, [r2, #0]
  lcd_control_show = xSemaphoreCreateMutex();
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f00c fbc0 	bl	800f54a <xQueueCreateMutex>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4a3a      	ldr	r2, [pc, #232]	; (8002eb8 <main+0x1a0>)
 8002dce:	6013      	str	r3, [r2, #0]
  date_time_mutex = xSemaphoreCreateMutex();
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f00c fbba 	bl	800f54a <xQueueCreateMutex>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4a38      	ldr	r2, [pc, #224]	; (8002ebc <main+0x1a4>)
 8002dda:	6013      	str	r3, [r2, #0]
  wifi_control_mutex = xSemaphoreCreateMutex();
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f00c fbb4 	bl	800f54a <xQueueCreateMutex>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4a36      	ldr	r2, [pc, #216]	; (8002ec0 <main+0x1a8>)
 8002de6:	6013      	str	r3, [r2, #0]

  //INIT QUEUE________________________________________________________________
  touch_point_queue = xQueueCreate(1, sizeof(touch_point_t));
 8002de8:	2200      	movs	r2, #0
 8002dea:	2106      	movs	r1, #6
 8002dec:	2001      	movs	r0, #1
 8002dee:	f00c fb39 	bl	800f464 <xQueueGenericCreate>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4a33      	ldr	r2, [pc, #204]	; (8002ec4 <main+0x1ac>)
 8002df6:	6013      	str	r3, [r2, #0]

  //INIT SYSTEM TASK__________________________________________________________
  xTaskCreate(&check_batery_task, "batery task", 512, NULL, 1, NULL);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2300      	movs	r3, #0
 8002e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e06:	4930      	ldr	r1, [pc, #192]	; (8002ec8 <main+0x1b0>)
 8002e08:	4830      	ldr	r0, [pc, #192]	; (8002ecc <main+0x1b4>)
 8002e0a:	f00d f982 	bl	8010112 <xTaskCreate>
  xTaskCreate(&check_wifi_connection_task, "wifi tasK", 1024, NULL, 2, NULL);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	2302      	movs	r3, #2
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2300      	movs	r3, #0
 8002e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e1c:	492c      	ldr	r1, [pc, #176]	; (8002ed0 <main+0x1b8>)
 8002e1e:	482d      	ldr	r0, [pc, #180]	; (8002ed4 <main+0x1bc>)
 8002e20:	f00d f977 	bl	8010112 <xTaskCreate>
  xTaskCreate(&time_show_task, "time task", 1024, NULL, 1, NULL);
 8002e24:	2300      	movs	r3, #0
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e32:	4929      	ldr	r1, [pc, #164]	; (8002ed8 <main+0x1c0>)
 8002e34:	4829      	ldr	r0, [pc, #164]	; (8002edc <main+0x1c4>)
 8002e36:	f00d f96c 	bl	8010112 <xTaskCreate>

  xTaskCreate(&touch_screen_task, "touch task", 1024, NULL, 5, NULL);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	2305      	movs	r3, #5
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2300      	movs	r3, #0
 8002e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e48:	4925      	ldr	r1, [pc, #148]	; (8002ee0 <main+0x1c8>)
 8002e4a:	4826      	ldr	r0, [pc, #152]	; (8002ee4 <main+0x1cc>)
 8002e4c:	f00d f961 	bl	8010112 <xTaskCreate>
  xTaskCreate(&screen_show_task, "master task", 512*8, NULL, 10, &screen_ctrl_master);
 8002e50:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <main+0x1d0>)
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	230a      	movs	r3, #10
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e5e:	4923      	ldr	r1, [pc, #140]	; (8002eec <main+0x1d4>)
 8002e60:	4823      	ldr	r0, [pc, #140]	; (8002ef0 <main+0x1d8>)
 8002e62:	f00d f956 	bl	8010112 <xTaskCreate>

  vTaskStartScheduler();
 8002e66:	f00d fc87 	bl	8010778 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002e6a:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <main+0x1dc>)
 8002e6c:	1d3c      	adds	r4, r7, #4
 8002e6e:	461d      	mov	r5, r3
 8002e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f00c f830 	bl	800eee6 <osThreadCreate>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <main+0x1e0>)
 8002e8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002e8c:	f00c f824 	bl	800eed8 <osKernelStart>
 8002e90:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bdb0      	pop	{r4, r5, r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200103c4 	.word	0x200103c4
 8002ea0:	200101a8 	.word	0x200101a8
 8002ea4:	48000800 	.word	0x48000800
 8002ea8:	08016c38 	.word	0x08016c38
 8002eac:	08016c3c 	.word	0x08016c3c
 8002eb0:	08016c4c 	.word	0x08016c4c
 8002eb4:	200005c0 	.word	0x200005c0
 8002eb8:	200005c4 	.word	0x200005c4
 8002ebc:	200005c8 	.word	0x200005c8
 8002ec0:	200005cc 	.word	0x200005cc
 8002ec4:	200005bc 	.word	0x200005bc
 8002ec8:	08016c5c 	.word	0x08016c5c
 8002ecc:	08003745 	.word	0x08003745
 8002ed0:	08016c68 	.word	0x08016c68
 8002ed4:	08003a61 	.word	0x08003a61
 8002ed8:	08016c74 	.word	0x08016c74
 8002edc:	08003c25 	.word	0x08003c25
 8002ee0:	08016c80 	.word	0x08016c80
 8002ee4:	08003959 	.word	0x08003959
 8002ee8:	2001020c 	.word	0x2001020c
 8002eec:	08016c8c 	.word	0x08016c8c
 8002ef0:	0800378d 	.word	0x0800378d
 8002ef4:	08016c98 	.word	0x08016c98
 8002ef8:	200101a4 	.word	0x200101a4

08002efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b096      	sub	sp, #88	; 0x58
 8002f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	2244      	movs	r2, #68	; 0x44
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f00f f8fe 	bl	801210c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f10:	463b      	mov	r3, r7
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	60da      	str	r2, [r3, #12]
 8002f1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002f1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f22:	f004 fe57 	bl	8007bd4 <HAL_PWREx_ControlVoltageScaling>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002f2c:	f000 ffa8 	bl	8003e80 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002f30:	2310      	movs	r3, #16
 8002f32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f34:	2301      	movs	r3, #1
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f3c:	2360      	movs	r3, #96	; 0x60
 8002f3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f40:	2302      	movs	r3, #2
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002f44:	2301      	movs	r3, #1
 8002f46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002f4c:	2328      	movs	r3, #40	; 0x28
 8002f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f50:	2307      	movs	r3, #7
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f54:	2302      	movs	r3, #2
 8002f56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	4618      	mov	r0, r3
 8002f62:	f004 fe8d 	bl	8007c80 <HAL_RCC_OscConfig>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002f6c:	f000 ff88 	bl	8003e80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f70:	230f      	movs	r3, #15
 8002f72:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f74:	2303      	movs	r3, #3
 8002f76:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f84:	463b      	mov	r3, r7
 8002f86:	2104      	movs	r1, #4
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f005 fa5f 	bl	800844c <HAL_RCC_ClockConfig>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002f94:	f000 ff74 	bl	8003e80 <Error_Handler>
  }
}
 8002f98:	bf00      	nop
 8002f9a:	3758      	adds	r7, #88	; 0x58
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b0a2      	sub	sp, #136	; 0x88
 8002fa4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fa6:	463b      	mov	r3, r7
 8002fa8:	2288      	movs	r2, #136	; 0x88
 8002faa:	2100      	movs	r1, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f00f f8ad 	bl	801210c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002fb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fb6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002fb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fbc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002fc6:	2318      	movs	r3, #24
 8002fc8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002fca:	2307      	movs	r3, #7
 8002fcc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002fd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fda:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fdc:	463b      	mov	r3, r7
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f005 fc6c 	bl	80088bc <HAL_RCCEx_PeriphCLKConfig>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8002fea:	f000 ff49 	bl	8003e80 <Error_Handler>
  }
}
 8002fee:	bf00      	nop
 8002ff0:	3788      	adds	r7, #136	; 0x88
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002ffe:	f107 031c 	add.w	r3, r7, #28
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
 8003018:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <MX_ADC1_Init+0xe0>)
 800301c:	4a2f      	ldr	r2, [pc, #188]	; (80030dc <MX_ADC1_Init+0xe4>)
 800301e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003020:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <MX_ADC1_Init+0xe0>)
 8003022:	2200      	movs	r2, #0
 8003024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003026:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <MX_ADC1_Init+0xe0>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800302c:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <MX_ADC1_Init+0xe0>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003032:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <MX_ADC1_Init+0xe0>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003038:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <MX_ADC1_Init+0xe0>)
 800303a:	2204      	movs	r2, #4
 800303c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <MX_ADC1_Init+0xe0>)
 8003040:	2200      	movs	r2, #0
 8003042:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <MX_ADC1_Init+0xe0>)
 8003046:	2201      	movs	r2, #1
 8003048:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <MX_ADC1_Init+0xe0>)
 800304c:	2201      	movs	r2, #1
 800304e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <MX_ADC1_Init+0xe0>)
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003058:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <MX_ADC1_Init+0xe0>)
 800305a:	2200      	movs	r2, #0
 800305c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <MX_ADC1_Init+0xe0>)
 8003060:	2200      	movs	r2, #0
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003064:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <MX_ADC1_Init+0xe0>)
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800306c:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <MX_ADC1_Init+0xe0>)
 800306e:	2200      	movs	r2, #0
 8003070:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003072:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <MX_ADC1_Init+0xe0>)
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800307a:	4817      	ldr	r0, [pc, #92]	; (80030d8 <MX_ADC1_Init+0xe0>)
 800307c:	f003 f822 	bl	80060c4 <HAL_ADC_Init>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8003086:	f000 fefb 	bl	8003e80 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800308e:	f107 031c 	add.w	r3, r7, #28
 8003092:	4619      	mov	r1, r3
 8003094:	4810      	ldr	r0, [pc, #64]	; (80030d8 <MX_ADC1_Init+0xe0>)
 8003096:	f004 f92f 	bl	80072f8 <HAL_ADCEx_MultiModeConfigChannel>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80030a0:	f000 feee 	bl	8003e80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80030a4:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <MX_ADC1_Init+0xe8>)
 80030a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030a8:	2306      	movs	r3, #6
 80030aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80030b0:	237f      	movs	r3, #127	; 0x7f
 80030b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80030b4:	2304      	movs	r3, #4
 80030b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	4619      	mov	r1, r3
 80030c0:	4805      	ldr	r0, [pc, #20]	; (80030d8 <MX_ADC1_Init+0xe0>)
 80030c2:	f003 fb85 	bl	80067d0 <HAL_ADC_ConfigChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80030cc:	f000 fed8 	bl	8003e80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030d0:	bf00      	nop
 80030d2:	3728      	adds	r7, #40	; 0x28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200103c4 	.word	0x200103c4
 80030dc:	50040000 	.word	0x50040000
 80030e0:	10c00010 	.word	0x10c00010

080030e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030ea:	463b      	mov	r3, r7
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
 80030f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80030fa:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <MX_ADC2_Init+0xbc>)
 80030fc:	4a29      	ldr	r2, [pc, #164]	; (80031a4 <MX_ADC2_Init+0xc0>)
 80030fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003100:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <MX_ADC2_Init+0xbc>)
 8003102:	2200      	movs	r2, #0
 8003104:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003106:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <MX_ADC2_Init+0xbc>)
 8003108:	2200      	movs	r2, #0
 800310a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800310c:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <MX_ADC2_Init+0xbc>)
 800310e:	2200      	movs	r2, #0
 8003110:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003112:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <MX_ADC2_Init+0xbc>)
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <MX_ADC2_Init+0xbc>)
 800311a:	2204      	movs	r2, #4
 800311c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <MX_ADC2_Init+0xbc>)
 8003120:	2200      	movs	r2, #0
 8003122:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003124:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <MX_ADC2_Init+0xbc>)
 8003126:	2201      	movs	r2, #1
 8003128:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <MX_ADC2_Init+0xbc>)
 800312c:	2201      	movs	r2, #1
 800312e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <MX_ADC2_Init+0xbc>)
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003138:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <MX_ADC2_Init+0xbc>)
 800313a:	2200      	movs	r2, #0
 800313c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800313e:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <MX_ADC2_Init+0xbc>)
 8003140:	2200      	movs	r2, #0
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003144:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <MX_ADC2_Init+0xbc>)
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <MX_ADC2_Init+0xbc>)
 800314e:	2200      	movs	r2, #0
 8003150:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8003152:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <MX_ADC2_Init+0xbc>)
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800315a:	4811      	ldr	r0, [pc, #68]	; (80031a0 <MX_ADC2_Init+0xbc>)
 800315c:	f002 ffb2 	bl	80060c4 <HAL_ADC_Init>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8003166:	f000 fe8b 	bl	8003e80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <MX_ADC2_Init+0xc4>)
 800316c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800316e:	2306      	movs	r3, #6
 8003170:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003176:	237f      	movs	r3, #127	; 0x7f
 8003178:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800317a:	2304      	movs	r3, #4
 800317c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003182:	463b      	mov	r3, r7
 8003184:	4619      	mov	r1, r3
 8003186:	4806      	ldr	r0, [pc, #24]	; (80031a0 <MX_ADC2_Init+0xbc>)
 8003188:	f003 fb22 	bl	80067d0 <HAL_ADC_ConfigChannel>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8003192:	f000 fe75 	bl	8003e80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	200101a8 	.word	0x200101a8
 80031a4:	50040100 	.word	0x50040100
 80031a8:	36902000 	.word	0x36902000

080031ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80031b0:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <MX_SPI1_Init+0x74>)
 80031b2:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <MX_SPI1_Init+0x78>)
 80031b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031b6:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <MX_SPI1_Init+0x74>)
 80031b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <MX_SPI1_Init+0x74>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <MX_SPI1_Init+0x74>)
 80031c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <MX_SPI1_Init+0x74>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031d2:	4b13      	ldr	r3, [pc, #76]	; (8003220 <MX_SPI1_Init+0x74>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <MX_SPI1_Init+0x74>)
 80031da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80031e0:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <MX_SPI1_Init+0x74>)
 80031e2:	2210      	movs	r2, #16
 80031e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031e6:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <MX_SPI1_Init+0x74>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <MX_SPI1_Init+0x74>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f2:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <MX_SPI1_Init+0x74>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <MX_SPI1_Init+0x74>)
 80031fa:	2207      	movs	r2, #7
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <MX_SPI1_Init+0x74>)
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <MX_SPI1_Init+0x74>)
 8003206:	2208      	movs	r2, #8
 8003208:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800320a:	4805      	ldr	r0, [pc, #20]	; (8003220 <MX_SPI1_Init+0x74>)
 800320c:	f006 f812 	bl	8009234 <HAL_SPI_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003216:	f000 fe33 	bl	8003e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20010ec8 	.word	0x20010ec8
 8003224:	40013000 	.word	0x40013000

08003228 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <MX_SPI3_Init+0x74>)
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <MX_SPI3_Init+0x78>)
 8003230:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003232:	4b1a      	ldr	r3, [pc, #104]	; (800329c <MX_SPI3_Init+0x74>)
 8003234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003238:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800323a:	4b18      	ldr	r3, [pc, #96]	; (800329c <MX_SPI3_Init+0x74>)
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <MX_SPI3_Init+0x74>)
 8003242:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8003246:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003248:	4b14      	ldr	r3, [pc, #80]	; (800329c <MX_SPI3_Init+0x74>)
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <MX_SPI3_Init+0x74>)
 8003250:	2200      	movs	r2, #0
 8003252:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <MX_SPI3_Init+0x74>)
 8003256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <MX_SPI3_Init+0x74>)
 800325e:	2210      	movs	r2, #16
 8003260:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <MX_SPI3_Init+0x74>)
 8003264:	2200      	movs	r2, #0
 8003266:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <MX_SPI3_Init+0x74>)
 800326a:	2200      	movs	r2, #0
 800326c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <MX_SPI3_Init+0x74>)
 8003270:	2200      	movs	r2, #0
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <MX_SPI3_Init+0x74>)
 8003276:	2207      	movs	r2, #7
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <MX_SPI3_Init+0x74>)
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <MX_SPI3_Init+0x74>)
 8003282:	2208      	movs	r2, #8
 8003284:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003286:	4805      	ldr	r0, [pc, #20]	; (800329c <MX_SPI3_Init+0x74>)
 8003288:	f005 ffd4 	bl	8009234 <HAL_SPI_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003292:	f000 fdf5 	bl	8003e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20010218 	.word	0x20010218
 80032a0:	40003c00 	.word	0x40003c00

080032a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032aa:	f107 0310 	add.w	r3, r7, #16
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b8:	1d3b      	adds	r3, r7, #4
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <MX_TIM2_Init+0x98>)
 80032c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <MX_TIM2_Init+0x98>)
 80032cc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80032d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <MX_TIM2_Init+0x98>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80032d8:	4b18      	ldr	r3, [pc, #96]	; (800333c <MX_TIM2_Init+0x98>)
 80032da:	f242 720f 	movw	r2, #9999	; 0x270f
 80032de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e0:	4b16      	ldr	r3, [pc, #88]	; (800333c <MX_TIM2_Init+0x98>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032e6:	4b15      	ldr	r3, [pc, #84]	; (800333c <MX_TIM2_Init+0x98>)
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032ec:	4813      	ldr	r0, [pc, #76]	; (800333c <MX_TIM2_Init+0x98>)
 80032ee:	f006 fead 	bl	800a04c <HAL_TIM_Base_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80032f8:	f000 fdc2 	bl	8003e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003300:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003302:	f107 0310 	add.w	r3, r7, #16
 8003306:	4619      	mov	r1, r3
 8003308:	480c      	ldr	r0, [pc, #48]	; (800333c <MX_TIM2_Init+0x98>)
 800330a:	f007 f886 	bl	800a41a <HAL_TIM_ConfigClockSource>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003314:	f000 fdb4 	bl	8003e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003318:	2300      	movs	r3, #0
 800331a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003320:	1d3b      	adds	r3, r7, #4
 8003322:	4619      	mov	r1, r3
 8003324:	4805      	ldr	r0, [pc, #20]	; (800333c <MX_TIM2_Init+0x98>)
 8003326:	f007 fa9b 	bl	800a860 <HAL_TIMEx_MasterConfigSynchronization>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003330:	f000 fda6 	bl	8003e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003334:	bf00      	nop
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20010f2c 	.word	0x20010f2c

08003340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <MX_USART1_UART_Init+0x58>)
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <MX_USART1_UART_Init+0x5c>)
 8003348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <MX_USART1_UART_Init+0x58>)
 800334c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <MX_USART1_UART_Init+0x58>)
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <MX_USART1_UART_Init+0x58>)
 800335a:	2200      	movs	r2, #0
 800335c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800335e:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <MX_USART1_UART_Init+0x58>)
 8003360:	2200      	movs	r2, #0
 8003362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <MX_USART1_UART_Init+0x58>)
 8003366:	220c      	movs	r2, #12
 8003368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <MX_USART1_UART_Init+0x58>)
 800336c:	2200      	movs	r2, #0
 800336e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003370:	4b09      	ldr	r3, [pc, #36]	; (8003398 <MX_USART1_UART_Init+0x58>)
 8003372:	2200      	movs	r2, #0
 8003374:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <MX_USART1_UART_Init+0x58>)
 8003378:	2200      	movs	r2, #0
 800337a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <MX_USART1_UART_Init+0x58>)
 800337e:	2200      	movs	r2, #0
 8003380:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003382:	4805      	ldr	r0, [pc, #20]	; (8003398 <MX_USART1_UART_Init+0x58>)
 8003384:	f007 fb12 	bl	800a9ac <HAL_UART_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800338e:	f000 fd77 	bl	8003e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20010428 	.word	0x20010428
 800339c:	40013800 	.word	0x40013800

080033a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	60da      	str	r2, [r3, #12]
 80033b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b6:	4b69      	ldr	r3, [pc, #420]	; (800355c <MX_GPIO_Init+0x1bc>)
 80033b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ba:	4a68      	ldr	r2, [pc, #416]	; (800355c <MX_GPIO_Init+0x1bc>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033c2:	4b66      	ldr	r3, [pc, #408]	; (800355c <MX_GPIO_Init+0x1bc>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <MX_GPIO_Init+0x1bc>)
 80033d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d2:	4a62      	ldr	r2, [pc, #392]	; (800355c <MX_GPIO_Init+0x1bc>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033da:	4b60      	ldr	r3, [pc, #384]	; (800355c <MX_GPIO_Init+0x1bc>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e6:	4b5d      	ldr	r3, [pc, #372]	; (800355c <MX_GPIO_Init+0x1bc>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	4a5c      	ldr	r2, [pc, #368]	; (800355c <MX_GPIO_Init+0x1bc>)
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033f2:	4b5a      	ldr	r3, [pc, #360]	; (800355c <MX_GPIO_Init+0x1bc>)
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <MX_GPIO_Init+0x1bc>)
 8003400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003402:	4a56      	ldr	r2, [pc, #344]	; (800355c <MX_GPIO_Init+0x1bc>)
 8003404:	f043 0310 	orr.w	r3, r3, #16
 8003408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800340a:	4b54      	ldr	r3, [pc, #336]	; (800355c <MX_GPIO_Init+0x1bc>)
 800340c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003416:	4b51      	ldr	r3, [pc, #324]	; (800355c <MX_GPIO_Init+0x1bc>)
 8003418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341a:	4a50      	ldr	r2, [pc, #320]	; (800355c <MX_GPIO_Init+0x1bc>)
 800341c:	f043 0308 	orr.w	r3, r3, #8
 8003420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003422:	4b4e      	ldr	r3, [pc, #312]	; (800355c <MX_GPIO_Init+0x1bc>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5, GPIO_PIN_RESET);
 800342e:	2200      	movs	r2, #0
 8003430:	2126      	movs	r1, #38	; 0x26
 8003432:	484b      	ldr	r0, [pc, #300]	; (8003560 <MX_GPIO_Init+0x1c0>)
 8003434:	f004 fba8 	bl	8007b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8003438:	2200      	movs	r2, #0
 800343a:	f248 011c 	movw	r1, #32796	; 0x801c
 800343e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003442:	f004 fba1 	bl	8007b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13
 8003446:	2200      	movs	r2, #0
 8003448:	f242 0117 	movw	r1, #8215	; 0x2017
 800344c:	4845      	ldr	r0, [pc, #276]	; (8003564 <MX_GPIO_Init+0x1c4>)
 800344e:	f004 fb9b 	bl	8007b88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_0, GPIO_PIN_RESET);
 8003452:	2200      	movs	r2, #0
 8003454:	f240 1101 	movw	r1, #257	; 0x101
 8003458:	4843      	ldr	r0, [pc, #268]	; (8003568 <MX_GPIO_Init+0x1c8>)
 800345a:	f004 fb95 	bl	8007b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800345e:	2200      	movs	r2, #0
 8003460:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003464:	4841      	ldr	r0, [pc, #260]	; (800356c <MX_GPIO_Init+0x1cc>)
 8003466:	f004 fb8f 	bl	8007b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 800346a:	2326      	movs	r3, #38	; 0x26
 800346c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346e:	2301      	movs	r3, #1
 8003470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347a:	f107 0314 	add.w	r3, r7, #20
 800347e:	4619      	mov	r1, r3
 8003480:	4837      	ldr	r0, [pc, #220]	; (8003560 <MX_GPIO_Init+0x1c0>)
 8003482:	f004 f8cb 	bl	800761c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003486:	2304      	movs	r3, #4
 8003488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800348a:	2301      	movs	r3, #1
 800348c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003492:	2301      	movs	r3, #1
 8003494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	4619      	mov	r1, r3
 800349c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034a0:	f004 f8bc 	bl	800761c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 80034a4:	f248 0318 	movw	r3, #32792	; 0x8018
 80034a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034aa:	2301      	movs	r3, #1
 80034ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	2300      	movs	r3, #0
 80034b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c0:	f004 f8ac 	bl	800761c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13
 80034c4:	f242 0317 	movw	r3, #8215	; 0x2017
 80034c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d2:	2300      	movs	r3, #0
 80034d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4821      	ldr	r0, [pc, #132]	; (8003564 <MX_GPIO_Init+0x1c4>)
 80034de:	f004 f89d 	bl	800761c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e8:	2301      	movs	r3, #1
 80034ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4619      	mov	r1, r3
 80034fa:	481b      	ldr	r0, [pc, #108]	; (8003568 <MX_GPIO_Init+0x1c8>)
 80034fc:	f004 f88e 	bl	800761c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003500:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003506:	2301      	movs	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350e:	2300      	movs	r3, #0
 8003510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	4619      	mov	r1, r3
 8003518:	4814      	ldr	r0, [pc, #80]	; (800356c <MX_GPIO_Init+0x1cc>)
 800351a:	f004 f87f 	bl	800761c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800351e:	2301      	movs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003522:	2301      	movs	r3, #1
 8003524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800352a:	2301      	movs	r3, #1
 800352c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	4619      	mov	r1, r3
 8003534:	480c      	ldr	r0, [pc, #48]	; (8003568 <MX_GPIO_Init+0x1c8>)
 8003536:	f004 f871 	bl	800761c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800353a:	2302      	movs	r3, #2
 800353c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	4806      	ldr	r0, [pc, #24]	; (8003568 <MX_GPIO_Init+0x1c8>)
 800354e:	f004 f865 	bl	800761c <HAL_GPIO_Init>

}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	48000800 	.word	0x48000800
 8003564:	48000400 	.word	0x48000400
 8003568:	48001000 	.word	0x48001000
 800356c:	48000c00 	.word	0x48000c00

08003570 <print_logo>:

/* USER CODE BEGIN 4 */
//INIT
void print_logo()
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af02      	add	r7, sp, #8
	lcd_clear(0x18e3);
 8003576:	f641 00e3 	movw	r0, #6371	; 0x18e3
 800357a:	f7fe fbc7 	bl	8001d0c <lcd_clear>
	lcd_draw_image(jcios_logo, 32, 123, 175, 73);
 800357e:	2349      	movs	r3, #73	; 0x49
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	23af      	movs	r3, #175	; 0xaf
 8003584:	227b      	movs	r2, #123	; 0x7b
 8003586:	2120      	movs	r1, #32
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <print_logo+0x24>)
 800358a:	f7fe febf 	bl	800230c <lcd_draw_image>
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	0801ad84 	.word	0x0801ad84

08003598 <show_file>:

//SD

bool show_file(char *file_name, type_file_t type)
{
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b092      	sub	sp, #72	; 0x48
 800359c:	af02      	add	r7, sp, #8
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
	FIL *file = (FIL *)pvPortMalloc(sizeof(FIL));
 80035a4:	f241 0030 	movw	r0, #4144	; 0x1030
 80035a8:	f00e f966 	bl	8011878 <pvPortMalloc>
 80035ac:	6338      	str	r0, [r7, #48]	; 0x30

	switch(type)
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d002      	beq.n	80035ba <show_file+0x22>
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d05d      	beq.n	8003674 <show_file+0xdc>
 80035b8:	e0b4      	b.n	8003724 <show_file+0x18c>
	{
		case txt:
		{
			char buffer_file[31];
			uint8_t y_pos=12;
 80035ba:	230c      	movs	r3, #12
 80035bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			if(f_open(file, file_name, FA_READ) != FR_OK)
 80035c0:	2201      	movs	r2, #1
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035c6:	f00a fb15 	bl	800dbf4 <f_open>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <show_file+0x3c>
				return false;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e0b0      	b.n	8003736 <show_file+0x19e>

			if(xSemaphoreTake(lcd_mutex, portMAX_DELAY) == pdTRUE)
 80035d4:	4b5a      	ldr	r3, [pc, #360]	; (8003740 <show_file+0x1a8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f04f 31ff 	mov.w	r1, #4294967295
 80035dc:	4618      	mov	r0, r3
 80035de:	f00c fa39 	bl	800fa54 <xQueueSemaphoreTake>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d13a      	bne.n	800365e <show_file+0xc6>
			{
				lcd_set_window_color(0, 12, LCD_WIDTH, LCD_HEIGHT, BLACK);
 80035e8:	2300      	movs	r3, #0
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80035f0:	22f0      	movs	r2, #240	; 0xf0
 80035f2:	210c      	movs	r1, #12
 80035f4:	2000      	movs	r0, #0
 80035f6:	f7fe fc0b 	bl	8001e10 <lcd_set_window_color>
				xSemaphoreGive(lcd_mutex);
 80035fa:	4b51      	ldr	r3, [pc, #324]	; (8003740 <show_file+0x1a8>)
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	2300      	movs	r3, #0
 8003600:	2200      	movs	r2, #0
 8003602:	2100      	movs	r1, #0
 8003604:	f00b ffba 	bl	800f57c <xQueueGenericSend>
			}

				while(f_gets(buffer_file, 31, file) != NULL)
 8003608:	e029      	b.n	800365e <show_file+0xc6>
				{
					if(xSemaphoreTake(lcd_mutex, portMAX_DELAY) == pdTRUE)
 800360a:	4b4d      	ldr	r3, [pc, #308]	; (8003740 <show_file+0x1a8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f04f 31ff 	mov.w	r1, #4294967295
 8003612:	4618      	mov	r0, r3
 8003614:	f00c fa1e 	bl	800fa54 <xQueueSemaphoreTake>
 8003618:	4603      	mov	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	d11f      	bne.n	800365e <show_file+0xc6>
					{
						lcd_draw_string(buffer_file, strlen(buffer_file), 0, y_pos, WHITE, font12);
 800361e:	f107 0310 	add.w	r3, r7, #16
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc fdde 	bl	80001e4 <strlen>
 8003628:	4603      	mov	r3, r0
 800362a:	b2d9      	uxtb	r1, r3
 800362c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003630:	b29b      	uxth	r3, r3
 8003632:	f107 0010 	add.w	r0, r7, #16
 8003636:	2201      	movs	r2, #1
 8003638:	9201      	str	r2, [sp, #4]
 800363a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800363e:	9200      	str	r2, [sp, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	f7fe fc3d 	bl	8001ec0 <lcd_draw_string>
						y_pos +=12;
 8003646:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800364a:	330c      	adds	r3, #12
 800364c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						xSemaphoreGive(lcd_mutex);
 8003650:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <show_file+0x1a8>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	2300      	movs	r3, #0
 8003656:	2200      	movs	r2, #0
 8003658:	2100      	movs	r1, #0
 800365a:	f00b ff8f 	bl	800f57c <xQueueGenericSend>
				while(f_gets(buffer_file, 31, file) != NULL)
 800365e:	f107 0310 	add.w	r3, r7, #16
 8003662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003664:	211f      	movs	r1, #31
 8003666:	4618      	mov	r0, r3
 8003668:	f00b fa61 	bl	800eb2e <f_gets>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1cb      	bne.n	800360a <show_file+0x72>
					}
				}
		}
		break;
 8003672:	e059      	b.n	8003728 <show_file+0x190>
		{
			uint8_t buffer_file[3];
			uint size_read;
			int i;

			if(f_open(file, file_name, FA_READ) != FR_OK)
 8003674:	2201      	movs	r2, #1
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800367a:	f00a fabb 	bl	800dbf4 <f_open>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <show_file+0xf0>
				return false;
 8003684:	2300      	movs	r3, #0
 8003686:	e056      	b.n	8003736 <show_file+0x19e>

			for(i=0; i<18; i++)
 8003688:	2300      	movs	r3, #0
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
 800368c:	e00a      	b.n	80036a4 <show_file+0x10c>
			{
				if(f_read(file, buffer_file, 3, &size_read) != FR_OK);
 800368e:	f107 0308 	add.w	r3, r7, #8
 8003692:	f107 010c 	add.w	r1, r7, #12
 8003696:	2203      	movs	r2, #3
 8003698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800369a:	f00a fd0e 	bl	800e0ba <f_read>
			for(i=0; i<18; i++)
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	3301      	adds	r3, #1
 80036a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	2b11      	cmp	r3, #17
 80036a8:	ddf1      	ble.n	800368e <show_file+0xf6>
			}


			for(i= LCD_HEIGHT-1; i>=12; i--)
 80036aa:	f240 133f 	movw	r3, #319	; 0x13f
 80036ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80036b0:	e034      	b.n	800371c <show_file+0x184>
			{
				for(int j=0; j<LCD_WIDTH; j++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
 80036b6:	e02b      	b.n	8003710 <show_file+0x178>
				{
					f_read(file, buffer_file, 3, &size_read);
 80036b8:	f107 0308 	add.w	r3, r7, #8
 80036bc:	f107 010c 	add.w	r1, r7, #12
 80036c0:	2203      	movs	r2, #3
 80036c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036c4:	f00a fcf9 	bl	800e0ba <f_read>
					if(xSemaphoreTake(lcd_mutex, portMAX_DELAY) == pdTRUE)
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <show_file+0x1a8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	4618      	mov	r0, r3
 80036d2:	f00c f9bf 	bl	800fa54 <xQueueSemaphoreTake>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d116      	bne.n	800370a <show_file+0x172>
					{
						lcd_set_pixel(j, i, convert_from_rgb_8(buffer_file[2], buffer_file[1], buffer_file[0]));
 80036dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036de:	b29c      	uxth	r4, r3
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	b29d      	uxth	r5, r3
 80036e4:	7bbb      	ldrb	r3, [r7, #14]
 80036e6:	7b79      	ldrb	r1, [r7, #13]
 80036e8:	7b3a      	ldrb	r2, [r7, #12]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff f979 	bl	80029e2 <convert_from_rgb_8>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	4629      	mov	r1, r5
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7fe fb52 	bl	8001da0 <lcd_set_pixel>
						xSemaphoreGive(lcd_mutex);
 80036fc:	4b10      	ldr	r3, [pc, #64]	; (8003740 <show_file+0x1a8>)
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	2200      	movs	r2, #0
 8003704:	2100      	movs	r1, #0
 8003706:	f00b ff39 	bl	800f57c <xQueueGenericSend>
				for(int j=0; j<LCD_WIDTH; j++)
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	3301      	adds	r3, #1
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
 8003710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003712:	2bef      	cmp	r3, #239	; 0xef
 8003714:	ddd0      	ble.n	80036b8 <show_file+0x120>
			for(i= LCD_HEIGHT-1; i>=12; i--)
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	3b01      	subs	r3, #1
 800371a:	63bb      	str	r3, [r7, #56]	; 0x38
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	2b0b      	cmp	r3, #11
 8003720:	dcc7      	bgt.n	80036b2 <show_file+0x11a>
				}
			}


		}
		break;
 8003722:	e001      	b.n	8003728 <show_file+0x190>

		default:
			return false;
 8003724:	2300      	movs	r3, #0
 8003726:	e006      	b.n	8003736 <show_file+0x19e>
	}

	f_close(file);
 8003728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800372a:	f00b f8a0 	bl	800e86e <f_close>
	vPortFree(file);
 800372e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003730:	f00e f96e 	bl	8011a10 <vPortFree>
	return true;
 8003734:	2301      	movs	r3, #1
}
 8003736:	4618      	mov	r0, r3
 8003738:	3740      	adds	r7, #64	; 0x40
 800373a:	46bd      	mov	sp, r7
 800373c:	bdb0      	pop	{r4, r5, r7, pc}
 800373e:	bf00      	nop
 8003740:	200005c0 	.word	0x200005c0

08003744 <check_batery_task>:

//SYSTEM TASK
void check_batery_task(void *arg)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	uint8_t batery_level=30;
 800374c:	231e      	movs	r3, #30
 800374e:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		if(xSemaphoreTake(lcd_mutex, portMAX_DELAY) == pdTRUE)
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <check_batery_task+0x44>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f04f 31ff 	mov.w	r1, #4294967295
 8003758:	4618      	mov	r0, r3
 800375a:	f00c f97b 	bl	800fa54 <xQueueSemaphoreTake>
 800375e:	4603      	mov	r3, r0
 8003760:	2b01      	cmp	r3, #1
 8003762:	d10c      	bne.n	800377e <check_batery_task+0x3a>
		{
			lcd_draw_batery_widget(LCD_WIDTH-25, 0, batery_level);
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	461a      	mov	r2, r3
 8003768:	2100      	movs	r1, #0
 800376a:	20d7      	movs	r0, #215	; 0xd7
 800376c:	f7ff f848 	bl	8002800 <lcd_draw_batery_widget>
			xSemaphoreGive(lcd_mutex);
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <check_batery_task+0x44>)
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	2300      	movs	r3, #0
 8003776:	2200      	movs	r2, #0
 8003778:	2100      	movs	r1, #0
 800377a:	f00b feff 	bl	800f57c <xQueueGenericSend>
		}
		vTaskDelay(1000);
 800377e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003782:	f00c fea3 	bl	80104cc <vTaskDelay>
		if(xSemaphoreTake(lcd_mutex, portMAX_DELAY) == pdTRUE)
 8003786:	e7e3      	b.n	8003750 <check_batery_task+0xc>
 8003788:	200005c0 	.word	0x200005c0

0800378c <screen_show_task>:
	}
}

void screen_show_task(void *arg)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af02      	add	r7, sp, #8
 8003792:	6078      	str	r0, [r7, #4]
	uint8_t actual_screen=0;
 8003794:	2300      	movs	r3, #0
 8003796:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_screen = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		switch(actual_screen)
 800379c:	7bbb      	ldrb	r3, [r7, #14]
 800379e:	2b0a      	cmp	r3, #10
 80037a0:	d850      	bhi.n	8003844 <screen_show_task+0xb8>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <screen_show_task+0x1c>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037d5 	.word	0x080037d5
 80037ac:	08003845 	.word	0x08003845
 80037b0:	08003845 	.word	0x08003845
 80037b4:	08003845 	.word	0x08003845
 80037b8:	080037df 	.word	0x080037df
 80037bc:	08003803 	.word	0x08003803
 80037c0:	08003827 	.word	0x08003827
 80037c4:	08003845 	.word	0x08003845
 80037c8:	08003833 	.word	0x08003833
 80037cc:	08003845 	.word	0x08003845
 80037d0:	0800383f 	.word	0x0800383f
		{
		case 0:
			system_block_screen_by_tp_crtl();
 80037d4:	f7ff fa8a 	bl	8002cec <system_block_screen_by_tp_crtl>
			actual_screen = 4;
 80037d8:	2304      	movs	r3, #4
 80037da:	73bb      	strb	r3, [r7, #14]
			break;
 80037dc:	e036      	b.n	800384c <screen_show_task+0xc0>

		case 4:
			prev_screen = actual_screen;
 80037de:	7bbb      	ldrb	r3, [r7, #14]
 80037e0:	73fb      	strb	r3, [r7, #15]
			xTaskCreate(&main_menu_show_task, "main menu", 1024, &actual_screen, 4, NULL);
 80037e2:	f107 030e 	add.w	r3, r7, #14
 80037e6:	2200      	movs	r2, #0
 80037e8:	9201      	str	r2, [sp, #4]
 80037ea:	2204      	movs	r2, #4
 80037ec:	9200      	str	r2, [sp, #0]
 80037ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037f2:	4917      	ldr	r1, [pc, #92]	; (8003850 <screen_show_task+0xc4>)
 80037f4:	4817      	ldr	r0, [pc, #92]	; (8003854 <screen_show_task+0xc8>)
 80037f6:	f00c fc8c 	bl	8010112 <xTaskCreate>
			vTaskSuspend(NULL);
 80037fa:	2000      	movs	r0, #0
 80037fc:	f00c fe9a 	bl	8010534 <vTaskSuspend>
			break;
 8003800:	e024      	b.n	800384c <screen_show_task+0xc0>

		case 5:
			prev_screen = actual_screen;
 8003802:	7bbb      	ldrb	r3, [r7, #14]
 8003804:	73fb      	strb	r3, [r7, #15]
			xTaskCreate(&file_explorer_task, "file show", 1024*4, &actual_screen, 4, NULL);
 8003806:	f107 030e 	add.w	r3, r7, #14
 800380a:	2200      	movs	r2, #0
 800380c:	9201      	str	r2, [sp, #4]
 800380e:	2204      	movs	r2, #4
 8003810:	9200      	str	r2, [sp, #0]
 8003812:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003816:	4910      	ldr	r1, [pc, #64]	; (8003858 <screen_show_task+0xcc>)
 8003818:	4810      	ldr	r0, [pc, #64]	; (800385c <screen_show_task+0xd0>)
 800381a:	f00c fc7a 	bl	8010112 <xTaskCreate>
			vTaskSuspend(NULL);
 800381e:	2000      	movs	r0, #0
 8003820:	f00c fe88 	bl	8010534 <vTaskSuspend>
			break;
 8003824:	e012      	b.n	800384c <screen_show_task+0xc0>

		case 6:
			prev_screen = actual_screen;
 8003826:	7bbb      	ldrb	r3, [r7, #14]
 8003828:	73fb      	strb	r3, [r7, #15]
			//xTaskCreate(&system_constrast_task, "brillo task", 1024*2, &actual_screen, 4, NULL);
			vTaskSuspend(NULL);
 800382a:	2000      	movs	r0, #0
 800382c:	f00c fe82 	bl	8010534 <vTaskSuspend>
			break;
 8003830:	e00c      	b.n	800384c <screen_show_task+0xc0>

		case 8:
			prev_screen = actual_screen;
 8003832:	7bbb      	ldrb	r3, [r7, #14]
 8003834:	73fb      	strb	r3, [r7, #15]
			//xTaskCreate(wifi_scan_show_task, "wifi scan", 1024*2, &actual_screen, 4, NULL);
			vTaskSuspend(NULL);
 8003836:	2000      	movs	r0, #0
 8003838:	f00c fe7c 	bl	8010534 <vTaskSuspend>
			break;
 800383c:	e006      	b.n	800384c <screen_show_task+0xc0>

		case 10:
			//system_block_screen_by_bt_crtl('b', 4);
			actual_screen = prev_screen;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	73bb      	strb	r3, [r7, #14]
			break;
 8003842:	e003      	b.n	800384c <screen_show_task+0xc0>
		default:
			vTaskDelay(10);
 8003844:	200a      	movs	r0, #10
 8003846:	f00c fe41 	bl	80104cc <vTaskDelay>
			break;
 800384a:	bf00      	nop
		switch(actual_screen)
 800384c:	e7a6      	b.n	800379c <screen_show_task+0x10>
 800384e:	bf00      	nop
 8003850:	08016cb4 	.word	0x08016cb4
 8003854:	08003861 	.word	0x08003861
 8003858:	08016cc0 	.word	0x08016cc0
 800385c:	08003ce5 	.word	0x08003ce5

08003860 <main_menu_show_task>:

	vTaskDelete(NULL);
}

void main_menu_show_task(void *arg)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
	uint8_t *next_state = arg;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	613b      	str	r3, [r7, #16]
	touch_point_t point;
	point.y_point = 20;
 800386c:	2314      	movs	r3, #20
 800386e:	817b      	strh	r3, [r7, #10]

	if(xSemaphoreTake(lcd_mutex, portMAX_DELAY) == pdTRUE)
 8003870:	4b34      	ldr	r3, [pc, #208]	; (8003944 <main_menu_show_task+0xe4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f04f 31ff 	mov.w	r1, #4294967295
 8003878:	4618      	mov	r0, r3
 800387a:	f00c f8eb 	bl	800fa54 <xQueueSemaphoreTake>
 800387e:	4603      	mov	r3, r0
 8003880:	2b01      	cmp	r3, #1
 8003882:	d133      	bne.n	80038ec <main_menu_show_task+0x8c>
	{
		lcd_set_window_color(0, 12, LCD_WIDTH, LCD_HEIGHT, BLACK);
 8003884:	2300      	movs	r3, #0
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800388c:	22f0      	movs	r2, #240	; 0xf0
 800388e:	210c      	movs	r1, #12
 8003890:	2000      	movs	r0, #0
 8003892:	f7fe fabd 	bl	8001e10 <lcd_set_window_color>

		for(uint8_t i=0; i<7; i++)
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]
 800389a:	e01d      	b.n	80038d8 <main_menu_show_task+0x78>
		{
			lcd_draw_string(main_menu[i], strlen(main_menu[i]),
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	4a2a      	ldr	r2, [pc, #168]	; (8003948 <main_menu_show_task+0xe8>)
 80038a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	4a28      	ldr	r2, [pc, #160]	; (8003948 <main_menu_show_task+0xe8>)
 80038a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fc99 	bl	80001e4 <strlen>
 80038b2:	4603      	mov	r3, r0
 80038b4:	b2d9      	uxtb	r1, r3
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	2203      	movs	r2, #3
 80038ba:	9201      	str	r2, [sp, #4]
 80038bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80038c0:	9200      	str	r2, [sp, #0]
 80038c2:	2200      	movs	r2, #0
 80038c4:	4620      	mov	r0, r4
 80038c6:	f7fe fafb 	bl	8001ec0 <lcd_draw_string>
					0, point.y_point, 2047, font20);
			point.y_point +=20;
 80038ca:	897b      	ldrh	r3, [r7, #10]
 80038cc:	3314      	adds	r3, #20
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	817b      	strh	r3, [r7, #10]
		for(uint8_t i=0; i<7; i++)
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	3301      	adds	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d9de      	bls.n	800389c <main_menu_show_task+0x3c>
		}

		xSemaphoreGive(lcd_mutex);
 80038de:	4b19      	ldr	r3, [pc, #100]	; (8003944 <main_menu_show_task+0xe4>)
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	2300      	movs	r3, #0
 80038e4:	2200      	movs	r2, #0
 80038e6:	2100      	movs	r1, #0
 80038e8:	f00b fe48 	bl	800f57c <xQueueGenericSend>
	}

	while(1)
	{
		if(xQueueReceive(touch_point_queue, &point, portMAX_DELAY) == pdTRUE)
 80038ec:	4b17      	ldr	r3, [pc, #92]	; (800394c <main_menu_show_task+0xec>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f107 0108 	add.w	r1, r7, #8
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00b ffcb 	bl	800f894 <xQueueReceive>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b01      	cmp	r3, #1
 8003902:	d1f3      	bne.n	80038ec <main_menu_show_task+0x8c>
		{
			if(point.y_point>20)
 8003904:	897b      	ldrh	r3, [r7, #10]
 8003906:	2b14      	cmp	r3, #20
 8003908:	d9f0      	bls.n	80038ec <main_menu_show_task+0x8c>
			{
				point.y_point = (point.y_point-20)/20;
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	3b14      	subs	r3, #20
 800390e:	4a10      	ldr	r2, [pc, #64]	; (8003950 <main_menu_show_task+0xf0>)
 8003910:	fb82 1203 	smull	r1, r2, r2, r3
 8003914:	10d2      	asrs	r2, r2, #3
 8003916:	17db      	asrs	r3, r3, #31
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	b29b      	uxth	r3, r3
 800391c:	817b      	strh	r3, [r7, #10]
				*next_state = 3+point.y_point;
 800391e:	897b      	ldrh	r3, [r7, #10]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	3303      	adds	r3, #3
 8003924:	b2da      	uxtb	r2, r3
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	701a      	strb	r2, [r3, #0]
				break;
 800392a:	bf00      	nop
			}
		}
	}


	vTaskResume(screen_ctrl_master);
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <main_menu_show_task+0xf4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f00c fec3 	bl	80106bc <vTaskResume>
	vTaskDelete(NULL);
 8003936:	2000      	movs	r0, #0
 8003938:	f00c fd38 	bl	80103ac <vTaskDelete>
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	bd90      	pop	{r4, r7, pc}
 8003944:	200005c0 	.word	0x200005c0
 8003948:	20000024 	.word	0x20000024
 800394c:	200005bc 	.word	0x200005bc
 8003950:	66666667 	.word	0x66666667
 8003954:	2001020c 	.word	0x2001020c

08003958 <touch_screen_task>:

void touch_screen_task(void *arg)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	touch_point_t point;

	while(1)
	{
		if(xSemaphoreTake(lcd_mutex, portMAX_DELAY) == pdTRUE)
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <touch_screen_task+0x58>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f04f 31ff 	mov.w	r1, #4294967295
 8003968:	4618      	mov	r0, r3
 800396a:	f00c f873 	bl	800fa54 <xQueueSemaphoreTake>
 800396e:	4603      	mov	r3, r0
 8003970:	2b01      	cmp	r3, #1
 8003972:	d119      	bne.n	80039a8 <touch_screen_task+0x50>
		{
			touch_read(&point);
 8003974:	f107 0308 	add.w	r3, r7, #8
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff f8e5 	bl	8002b48 <touch_read>
			xSemaphoreGive(lcd_mutex);
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <touch_screen_task+0x58>)
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	2300      	movs	r3, #0
 8003984:	2200      	movs	r2, #0
 8003986:	2100      	movs	r1, #0
 8003988:	f00b fdf8 	bl	800f57c <xQueueGenericSend>
			if(point.pressure<3000)
 800398c:	89bb      	ldrh	r3, [r7, #12]
 800398e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003992:	4293      	cmp	r3, r2
 8003994:	d808      	bhi.n	80039a8 <touch_screen_task+0x50>
				xQueueSend(touch_point_queue, &point, portMAX_DELAY);
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <touch_screen_task+0x5c>)
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f107 0108 	add.w	r1, r7, #8
 800399e:	2300      	movs	r3, #0
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	f00b fdea 	bl	800f57c <xQueueGenericSend>
		}

		vTaskDelay(100);
 80039a8:	2064      	movs	r0, #100	; 0x64
 80039aa:	f00c fd8f 	bl	80104cc <vTaskDelay>
		if(xSemaphoreTake(lcd_mutex, portMAX_DELAY) == pdTRUE)
 80039ae:	e7d7      	b.n	8003960 <touch_screen_task+0x8>
 80039b0:	200005c0 	.word	0x200005c0
 80039b4:	200005bc 	.word	0x200005bc

080039b8 <save_state>:
	}
}

//SYSTEM
bool save_state(char *status)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	FIL *file = (FIL *)pvPortMalloc(sizeof(FIL));
 80039c0:	f241 0030 	movw	r0, #4144	; 0x1030
 80039c4:	f00d ff58 	bl	8011878 <pvPortMalloc>
 80039c8:	6178      	str	r0, [r7, #20]


	if(f_open(file, SYSTEM_STATE_FILE, FA_WRITE) != FR_OK)
 80039ca:	2202      	movs	r2, #2
 80039cc:	4923      	ldr	r1, [pc, #140]	; (8003a5c <save_state+0xa4>)
 80039ce:	6978      	ldr	r0, [r7, #20]
 80039d0:	f00a f910 	bl	800dbf4 <f_open>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <save_state+0x26>
		return false;
 80039da:	2300      	movs	r3, #0
 80039dc:	e039      	b.n	8003a52 <save_state+0x9a>

	uint16_t size = strlen(status)+19;
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fc fc00 	bl	80001e4 <strlen>
 80039e4:	4603      	mov	r3, r0
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3313      	adds	r3, #19
 80039ea:	827b      	strh	r3, [r7, #18]
	uint16_t len_write;
	char *buffer = (char *) pvPortMalloc(size);
 80039ec:	8a7b      	ldrh	r3, [r7, #18]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f00d ff42 	bl	8011878 <pvPortMalloc>
 80039f4:	60f8      	str	r0, [r7, #12]

	//sprintf(buffer, "%02d-%02d-%2d %02d:%02d:%02d->%s", gDate.Date, gDate.Month, 2000 + gDate.Year,
		//	gTime.Hours, gTime.Minutes, gTime.Seconds, status);

	if(f_write(file, buffer, size, &len_write) != FR_OK)
 80039f6:	8a7a      	ldrh	r2, [r7, #18]
 80039f8:	f107 030a 	add.w	r3, r7, #10
 80039fc:	68f9      	ldr	r1, [r7, #12]
 80039fe:	6978      	ldr	r0, [r7, #20]
 8003a00:	f00a fce9 	bl	800e3d6 <f_write>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <save_state+0x68>
	{
		f_close(file);
 8003a0a:	6978      	ldr	r0, [r7, #20]
 8003a0c:	f00a ff2f 	bl	800e86e <f_close>
		vPortFree(buffer);
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f00d fffd 	bl	8011a10 <vPortFree>
		vPortFree(file);
 8003a16:	6978      	ldr	r0, [r7, #20]
 8003a18:	f00d fffa 	bl	8011a10 <vPortFree>
		return false;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e018      	b.n	8003a52 <save_state+0x9a>
	}

	if(len_write<size)
 8003a20:	897b      	ldrh	r3, [r7, #10]
 8003a22:	8a7a      	ldrh	r2, [r7, #18]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d90a      	bls.n	8003a3e <save_state+0x86>
	{
		f_close(file);
 8003a28:	6978      	ldr	r0, [r7, #20]
 8003a2a:	f00a ff20 	bl	800e86e <f_close>
		vPortFree(buffer);
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f00d ffee 	bl	8011a10 <vPortFree>
		vPortFree(file);
 8003a34:	6978      	ldr	r0, [r7, #20]
 8003a36:	f00d ffeb 	bl	8011a10 <vPortFree>
		return false;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e009      	b.n	8003a52 <save_state+0x9a>
	}

	f_close(file);
 8003a3e:	6978      	ldr	r0, [r7, #20]
 8003a40:	f00a ff15 	bl	800e86e <f_close>
	vPortFree(buffer);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f00d ffe3 	bl	8011a10 <vPortFree>
	vPortFree(file);
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f00d ffe0 	bl	8011a10 <vPortFree>

	return true;
 8003a50:	2301      	movs	r3, #1
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	08016ccc 	.word	0x08016ccc

08003a60 <check_wifi_connection_task>:

pop_mail_t mail;
//WIFI TASK
void check_wifi_connection_task(void *arg)
{
 8003a60:	b5b0      	push	{r4, r5, r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	6078      	str	r0, [r7, #4]
	int8_t rssi;

	set_default_wifi();
 8003a68:	f000 fee4 	bl	8004834 <set_default_wifi>
	while(init_wifi(1000) != WiFi_OK)
 8003a6c:	e005      	b.n	8003a7a <check_wifi_connection_task+0x1a>
	{
		save_state("Error init wifi");
 8003a6e:	4857      	ldr	r0, [pc, #348]	; (8003bcc <check_wifi_connection_task+0x16c>)
 8003a70:	f7ff ffa2 	bl	80039b8 <save_state>
		vTaskDelay(100);
 8003a74:	2064      	movs	r0, #100	; 0x64
 8003a76:	f00c fd29 	bl	80104cc <vTaskDelay>
	while(init_wifi(1000) != WiFi_OK)
 8003a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a7e:	f000 ff05 	bl	800488c <init_wifi>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d1f2      	bne.n	8003a6e <check_wifi_connection_task+0xe>
	}

	while(connect_wifi(SSID, PASSWORD, WPAandWPA2, 100000) != WiFi_OK)
 8003a88:	e005      	b.n	8003a96 <check_wifi_connection_task+0x36>
	{
		save_state("Connection lost");
 8003a8a:	4851      	ldr	r0, [pc, #324]	; (8003bd0 <check_wifi_connection_task+0x170>)
 8003a8c:	f7ff ff94 	bl	80039b8 <save_state>
		vTaskDelay(100);
 8003a90:	2064      	movs	r0, #100	; 0x64
 8003a92:	f00c fd1b 	bl	80104cc <vTaskDelay>
	while(connect_wifi(SSID, PASSWORD, WPAandWPA2, 100000) != WiFi_OK)
 8003a96:	4b4f      	ldr	r3, [pc, #316]	; (8003bd4 <check_wifi_connection_task+0x174>)
 8003a98:	2204      	movs	r2, #4
 8003a9a:	494f      	ldr	r1, [pc, #316]	; (8003bd8 <check_wifi_connection_task+0x178>)
 8003a9c:	484f      	ldr	r0, [pc, #316]	; (8003bdc <check_wifi_connection_task+0x17c>)
 8003a9e:	f001 fb57 	bl	8005150 <connect_wifi>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d1f0      	bne.n	8003a8a <check_wifi_connection_task+0x2a>
	//connect_pop("pop.gmail.com", "995", HAL_MAX_DELAY);
	//open_pop("esp32user@gmail.com", "#include<jossarr.h>", HAL_MAX_DELAY);
	//read_email_pop(17, &mail, HAL_MAX_DELAY);
	//HAL_UART_Transmit(&huart1, wifi.buffer_rx, strlen(wifi.buffer_rx), HAL_MAX_DELAY);

	connect_smtp("smtp.gmail.com", "465", 1000);
 8003aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aac:	494c      	ldr	r1, [pc, #304]	; (8003be0 <check_wifi_connection_task+0x180>)
 8003aae:	484d      	ldr	r0, [pc, #308]	; (8003be4 <check_wifi_connection_task+0x184>)
 8003ab0:	f001 fc0a 	bl	80052c8 <connect_smtp>
	open_smtp("esp32user@gmail.com", "#include<jossarr.h>", HAL_MAX_DELAY);
 8003ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab8:	494b      	ldr	r1, [pc, #300]	; (8003be8 <check_wifi_connection_task+0x188>)
 8003aba:	484c      	ldr	r0, [pc, #304]	; (8003bec <check_wifi_connection_task+0x18c>)
 8003abc:	f001 fc7a 	bl	80053b4 <open_smtp>
	send_email_smtp("esp32user@gmail.com", "thijoseph@hotmail.com", "jueves 23 de diciembre",
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	4b4a      	ldr	r3, [pc, #296]	; (8003bf0 <check_wifi_connection_task+0x190>)
 8003ac8:	4a4a      	ldr	r2, [pc, #296]	; (8003bf4 <check_wifi_connection_task+0x194>)
 8003aca:	494b      	ldr	r1, [pc, #300]	; (8003bf8 <check_wifi_connection_task+0x198>)
 8003acc:	4847      	ldr	r0, [pc, #284]	; (8003bec <check_wifi_connection_task+0x18c>)
 8003ace:	f001 fce7 	bl	80054a0 <send_email_smtp>
			"Prospero anio y felicidad!!!", HAL_MAX_DELAY);
	close_smtp(1000);
 8003ad2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ad6:	f001 fd8b 	bl	80055f0 <close_smtp>

	connect_sntp("pool.ntp.org", "123", HAL_MAX_DELAY);
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295
 8003ade:	4947      	ldr	r1, [pc, #284]	; (8003bfc <check_wifi_connection_task+0x19c>)
 8003ae0:	4847      	ldr	r0, [pc, #284]	; (8003c00 <check_wifi_connection_task+0x1a0>)
 8003ae2:	f001 fdb7 	bl	8005654 <connect_sntp>
	if(xSemaphoreTake(date_time_mutex, portMAX_DELAY) == pdTRUE)
 8003ae6:	4b47      	ldr	r3, [pc, #284]	; (8003c04 <check_wifi_connection_task+0x1a4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f04f 31ff 	mov.w	r1, #4294967295
 8003aee:	4618      	mov	r0, r3
 8003af0:	f00b ffb0 	bl	800fa54 <xQueueSemaphoreTake>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d11a      	bne.n	8003b30 <check_wifi_connection_task+0xd0>
	{
		get_time_sntp(&date_time, HAL_MAX_DELAY);
 8003afa:	f04f 31ff 	mov.w	r1, #4294967295
 8003afe:	4842      	ldr	r0, [pc, #264]	; (8003c08 <check_wifi_connection_task+0x1a8>)
 8003b00:	f001 fdf2 	bl	80056e8 <get_time_sntp>
		date_time -= TIME_OFFSET;
 8003b04:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <check_wifi_connection_task+0x1a8>)
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	4840      	ldr	r0, [pc, #256]	; (8003c0c <check_wifi_connection_task+0x1ac>)
 8003b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b10:	1814      	adds	r4, r2, r0
 8003b12:	eb43 0501 	adc.w	r5, r3, r1
 8003b16:	4b3c      	ldr	r3, [pc, #240]	; (8003c08 <check_wifi_connection_task+0x1a8>)
 8003b18:	e9c3 4500 	strd	r4, r5, [r3]
		HAL_TIM_Base_Start_IT(&htim2);
 8003b1c:	483c      	ldr	r0, [pc, #240]	; (8003c10 <check_wifi_connection_task+0x1b0>)
 8003b1e:	f006 faed 	bl	800a0fc <HAL_TIM_Base_Start_IT>
		xSemaphoreGive(date_time_mutex);
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <check_wifi_connection_task+0x1a4>)
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	2300      	movs	r3, #0
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	f00b fd26 	bl	800f57c <xQueueGenericSend>
	}
	disconnect_sntp(HAL_MAX_DELAY);
 8003b30:	f04f 30ff 	mov.w	r0, #4294967295
 8003b34:	f001 fe62 	bl	80057fc <disconnect_sntp>

	http_perform_as_stream_wheather(&info, "19.17,-99.41", HAL_MAX_DELAY);
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3c:	4935      	ldr	r1, [pc, #212]	; (8003c14 <check_wifi_connection_task+0x1b4>)
 8003b3e:	4836      	ldr	r0, [pc, #216]	; (8003c18 <check_wifi_connection_task+0x1b8>)
 8003b40:	f001 fe72 	bl	8005828 <http_perform_as_stream_wheather>
	//http_perform_as_stream_wheather(&info, "19.17,-99.41", HAL_MAX_DELAY);
	//http_perform_as_stream_time(&time, "America", "Mexico_City", HAL_MAX_DELAY);
	//HAL_UART_Transmit(&huart1, wifi.buffer_rx, strlen(wifi.buffer_rx), HAL_MAX_DELAY);
	while(1)
	{
		if(xSemaphoreTake(wifi_control_mutex, portMAX_DELAY) == pdTRUE)
 8003b44:	4b35      	ldr	r3, [pc, #212]	; (8003c1c <check_wifi_connection_task+0x1bc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f04f 31ff 	mov.w	r1, #4294967295
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f00b ff81 	bl	800fa54 <xQueueSemaphoreTake>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d105      	bne.n	8003b64 <check_wifi_connection_task+0x104>
			rssi = rssi_soft_ap(HAL_MAX_DELAY);
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	f001 fb70 	bl	8005240 <rssi_soft_ap>
 8003b60:	4603      	mov	r3, r0
 8003b62:	73fb      	strb	r3, [r7, #15]

		if(rssi == 0)
 8003b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d111      	bne.n	8003b90 <check_wifi_connection_task+0x130>
		{
			save_state("Connection lost");
 8003b6c:	4818      	ldr	r0, [pc, #96]	; (8003bd0 <check_wifi_connection_task+0x170>)
 8003b6e:	f7ff ff23 	bl	80039b8 <save_state>
			while(init_wifi(1000) != WiFi_OK);
 8003b72:	bf00      	nop
 8003b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b78:	f000 fe88 	bl	800488c <init_wifi>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d1f8      	bne.n	8003b74 <check_wifi_connection_task+0x114>
			connect_wifi(SSID, PASSWORD, WPAandWPA2, 10000);
 8003b82:	f242 7310 	movw	r3, #10000	; 0x2710
 8003b86:	2204      	movs	r2, #4
 8003b88:	4913      	ldr	r1, [pc, #76]	; (8003bd8 <check_wifi_connection_task+0x178>)
 8003b8a:	4814      	ldr	r0, [pc, #80]	; (8003bdc <check_wifi_connection_task+0x17c>)
 8003b8c:	f001 fae0 	bl	8005150 <connect_wifi>
		}
		if(xSemaphoreTake(lcd_mutex, portMAX_DELAY) == pdTRUE)
 8003b90:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <check_wifi_connection_task+0x1c0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f04f 31ff 	mov.w	r1, #4294967295
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f00b ff5b 	bl	800fa54 <xQueueSemaphoreTake>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10d      	bne.n	8003bc0 <check_wifi_connection_task+0x160>
		{
			lcd_draw_wifi_signal_widget(LCD_WIDTH-30, 12, rssi);
 8003ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	210c      	movs	r1, #12
 8003bac:	20d2      	movs	r0, #210	; 0xd2
 8003bae:	f7fe fe8f 	bl	80028d0 <lcd_draw_wifi_signal_widget>
			xSemaphoreGive(lcd_mutex);
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <check_wifi_connection_task+0x1c0>)
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2100      	movs	r1, #0
 8003bbc:	f00b fcde 	bl	800f57c <xQueueGenericSend>
		}
		vTaskDelay(1000);
 8003bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bc4:	f00c fc82 	bl	80104cc <vTaskDelay>
		if(xSemaphoreTake(wifi_control_mutex, portMAX_DELAY) == pdTRUE)
 8003bc8:	e7bc      	b.n	8003b44 <check_wifi_connection_task+0xe4>
 8003bca:	bf00      	nop
 8003bcc:	08016ce0 	.word	0x08016ce0
 8003bd0:	08016cf0 	.word	0x08016cf0
 8003bd4:	000186a0 	.word	0x000186a0
 8003bd8:	0802115c 	.word	0x0802115c
 8003bdc:	08021154 	.word	0x08021154
 8003be0:	08016d00 	.word	0x08016d00
 8003be4:	08016d04 	.word	0x08016d04
 8003be8:	08016d14 	.word	0x08016d14
 8003bec:	08016d28 	.word	0x08016d28
 8003bf0:	08016d3c 	.word	0x08016d3c
 8003bf4:	08016d5c 	.word	0x08016d5c
 8003bf8:	08016d74 	.word	0x08016d74
 8003bfc:	08016d8c 	.word	0x08016d8c
 8003c00:	08016d90 	.word	0x08016d90
 8003c04:	200005c8 	.word	0x200005c8
 8003c08:	20010210 	.word	0x20010210
 8003c0c:	ffffaba0 	.word	0xffffaba0
 8003c10:	20010f2c 	.word	0x20010f2c
 8003c14:	08016da0 	.word	0x08016da0
 8003c18:	20010198 	.word	0x20010198
 8003c1c:	200005cc 	.word	0x200005cc
 8003c20:	200005c0 	.word	0x200005c0

08003c24 <time_show_task>:
	}
}

void time_show_task(void *arg)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	6078      	str	r0, [r7, #4]
	char buffer[15];


	while(1)
	{
		if(xSemaphoreTake(date_time_mutex, portMAX_DELAY) == pdTRUE)
 8003c2c:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <time_show_task+0xb0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f04f 31ff 	mov.w	r1, #4294967295
 8003c34:	4618      	mov	r0, r3
 8003c36:	f00b ff0d 	bl	800fa54 <xQueueSemaphoreTake>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d144      	bne.n	8003cca <time_show_task+0xa6>
		{
			ts = localtime(&date_time);
 8003c40:	4825      	ldr	r0, [pc, #148]	; (8003cd8 <time_show_task+0xb4>)
 8003c42:	f00e f92b 	bl	8011e9c <localtime>
 8003c46:	61f8      	str	r0, [r7, #28]
			strftime(buffer, 15, "%H:%M", ts);
 8003c48:	f107 000c 	add.w	r0, r7, #12
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <time_show_task+0xb8>)
 8003c50:	210f      	movs	r1, #15
 8003c52:	f00f f955 	bl	8012f00 <strftime>

			if(xSemaphoreTake(lcd_mutex, portMAX_DELAY) == pdTRUE)
 8003c56:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <time_show_task+0xbc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f00b fef8 	bl	800fa54 <xQueueSemaphoreTake>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d128      	bne.n	8003cbc <time_show_task+0x98>
			{
				lcd_set_window_color(0, 0, strlen(buffer)*8, 12, BLACK);
 8003c6a:	f107 030c 	add.w	r3, r7, #12
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fab8 	bl	80001e4 <strlen>
 8003c74:	4603      	mov	r3, r0
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	230c      	movs	r3, #12
 8003c82:	2100      	movs	r1, #0
 8003c84:	2000      	movs	r0, #0
 8003c86:	f7fe f8c3 	bl	8001e10 <lcd_set_window_color>
				lcd_draw_string(buffer, strlen(buffer), 0, 0, WHITE, font12);
 8003c8a:	f107 030c 	add.w	r3, r7, #12
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc faa8 	bl	80001e4 <strlen>
 8003c94:	4603      	mov	r3, r0
 8003c96:	b2d9      	uxtb	r1, r3
 8003c98:	f107 000c 	add.w	r0, r7, #12
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f7fe f909 	bl	8001ec0 <lcd_draw_string>
				xSemaphoreGive(lcd_mutex);
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <time_show_task+0xbc>)
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	f00b fc60 	bl	800f57c <xQueueGenericSend>
			}

			xSemaphoreGive(date_time_mutex);
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <time_show_task+0xb0>)
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	f00b fc59 	bl	800f57c <xQueueGenericSend>
		}

		vTaskDelay(10000);
 8003cca:	f242 7010 	movw	r0, #10000	; 0x2710
 8003cce:	f00c fbfd 	bl	80104cc <vTaskDelay>
		if(xSemaphoreTake(date_time_mutex, portMAX_DELAY) == pdTRUE)
 8003cd2:	e7ab      	b.n	8003c2c <time_show_task+0x8>
 8003cd4:	200005c8 	.word	0x200005c8
 8003cd8:	20010210 	.word	0x20010210
 8003cdc:	08016db0 	.word	0x08016db0
 8003ce0:	200005c0 	.word	0x200005c0

08003ce4 <file_explorer_task>:
	}
}

//SD TASK
void file_explorer_task(void *arg)
{
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b08d      	sub	sp, #52	; 0x34
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	6078      	str	r0, [r7, #4]
	file_linked_list_t *list = NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
	file_linked_list_t *aux;
	uint8_t *next_state = arg;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	61fb      	str	r3, [r7, #28]

	touch_point_t point;
	point.y_point = 20;
 8003cf4:	2314      	movs	r3, #20
 8003cf6:	81fb      	strh	r3, [r7, #14]

	int size = scan_directory(STORAGE_MOUNT, &list);
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4846      	ldr	r0, [pc, #280]	; (8003e18 <file_explorer_task+0x134>)
 8003d00:	f000 f8e2 	bl	8003ec8 <scan_directory>
 8003d04:	61b8      	str	r0, [r7, #24]

	if(xSemaphoreTake(lcd_mutex, portMAX_DELAY) == pdTRUE)
 8003d06:	4b45      	ldr	r3, [pc, #276]	; (8003e1c <file_explorer_task+0x138>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f00b fea0 	bl	800fa54 <xQueueSemaphoreTake>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d147      	bne.n	8003daa <file_explorer_task+0xc6>
	{
		lcd_set_window_color(0, 12, LCD_WIDTH, LCD_HEIGHT, BLACK);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003d22:	22f0      	movs	r2, #240	; 0xf0
 8003d24:	210c      	movs	r1, #12
 8003d26:	2000      	movs	r0, #0
 8003d28:	f7fe f872 	bl	8001e10 <lcd_set_window_color>

		if(size == -1)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d10b      	bne.n	8003d4c <file_explorer_task+0x68>
			lcd_draw_string("SD NOT FOUND...", 15, 0, 20, RED, font20);
 8003d34:	2303      	movs	r3, #3
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2314      	movs	r3, #20
 8003d40:	2200      	movs	r2, #0
 8003d42:	210f      	movs	r1, #15
 8003d44:	4836      	ldr	r0, [pc, #216]	; (8003e20 <file_explorer_task+0x13c>)
 8003d46:	f7fe f8bb 	bl	8001ec0 <lcd_draw_string>
 8003d4a:	e027      	b.n	8003d9c <file_explorer_task+0xb8>

		else
		{
			aux = list;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
			for(uint8_t i=0; i<size; i++)
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d56:	e01c      	b.n	8003d92 <file_explorer_task+0xae>
			{
				lcd_draw_string(aux->name, strlen(aux->name), 0, point.y_point, 2047, font20);
 8003d58:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fa41 	bl	80001e4 <strlen>
 8003d62:	4603      	mov	r3, r0
 8003d64:	b2d9      	uxtb	r1, r3
 8003d66:	89fb      	ldrh	r3, [r7, #14]
 8003d68:	2203      	movs	r2, #3
 8003d6a:	9201      	str	r2, [sp, #4]
 8003d6c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003d70:	9200      	str	r2, [sp, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	4620      	mov	r0, r4
 8003d76:	f7fe f8a3 	bl	8001ec0 <lcd_draw_string>
				point.y_point +=20;
 8003d7a:	89fb      	ldrh	r3, [r7, #14]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	81fb      	strh	r3, [r7, #14]
				aux = aux->next;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
			for(uint8_t i=0; i<size; i++)
 8003d88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	dcdd      	bgt.n	8003d58 <file_explorer_task+0x74>
			}
		}

		xSemaphoreGive(lcd_mutex);
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <file_explorer_task+0x138>)
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	2200      	movs	r2, #0
 8003da4:	2100      	movs	r1, #0
 8003da6:	f00b fbe9 	bl	800f57c <xQueueGenericSend>
	}

	while(1)
	{
		if(xQueueReceive(touch_point_queue, &point, portMAX_DELAY) == pdTRUE)
 8003daa:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <file_explorer_task+0x140>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f107 010c 	add.w	r1, r7, #12
 8003db2:	f04f 32ff 	mov.w	r2, #4294967295
 8003db6:	4618      	mov	r0, r3
 8003db8:	f00b fd6c 	bl	800f894 <xQueueReceive>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d1f3      	bne.n	8003daa <file_explorer_task+0xc6>
		{
			if(point.y_point>20)
 8003dc2:	89fb      	ldrh	r3, [r7, #14]
 8003dc4:	2b14      	cmp	r3, #20
 8003dc6:	d9f0      	bls.n	8003daa <file_explorer_task+0xc6>
			{
				point.y_point = (point.y_point-20)/20;
 8003dc8:	89fb      	ldrh	r3, [r7, #14]
 8003dca:	3b14      	subs	r3, #20
 8003dcc:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <file_explorer_task+0x144>)
 8003dce:	fb82 1203 	smull	r1, r2, r2, r3
 8003dd2:	10d2      	asrs	r2, r2, #3
 8003dd4:	17db      	asrs	r3, r3, #31
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	81fb      	strh	r3, [r7, #14]
				aux = list;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
				for(uint8_t i=0; i<point.y_point; i++)
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003de6:	e007      	b.n	8003df8 <file_explorer_task+0x114>
					aux = aux->next;
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
				for(uint8_t i=0; i<point.y_point; i++)
 8003dee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003df2:	3301      	adds	r3, #1
 8003df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003df8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	89fb      	ldrh	r3, [r7, #14]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d3f1      	bcc.n	8003de8 <file_explorer_task+0x104>

				show_file(aux->name, aux->type);
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f7ff fbc2 	bl	8003598 <show_file>
		if(xQueueReceive(touch_point_queue, &point, portMAX_DELAY) == pdTRUE)
 8003e14:	e7c9      	b.n	8003daa <file_explorer_task+0xc6>
 8003e16:	bf00      	nop
 8003e18:	08016c38 	.word	0x08016c38
 8003e1c:	200005c0 	.word	0x200005c0
 8003e20:	08016db8 	.word	0x08016db8
 8003e24:	200005bc 	.word	0x200005bc
 8003e28:	66666667 	.word	0x66666667

08003e2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003e34:	2001      	movs	r0, #1
 8003e36:	f00b f8a2 	bl	800ef7e <osDelay>
 8003e3a:	e7fb      	b.n	8003e34 <StartDefaultTask+0x8>

08003e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b5b0      	push	{r4, r5, r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d102      	bne.n	8003e54 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8003e4e:	f001 fee5 	bl	8005c1c <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if(htim->Instance == TIM2)
	  date_time++;

  /* USER CODE END Callback 1 */
}
 8003e52:	e00d      	b.n	8003e70 <HAL_TIM_PeriodElapsedCallback+0x34>
  else if(htim->Instance == TIM2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5c:	d108      	bne.n	8003e70 <HAL_TIM_PeriodElapsedCallback+0x34>
	  date_time++;
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	1c54      	adds	r4, r2, #1
 8003e66:	f143 0500 	adc.w	r5, r3, #0
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003e6c:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bdb0      	pop	{r4, r5, r7, pc}
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	20010210 	.word	0x20010210

08003e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e84:	b672      	cpsid	i
}
 8003e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e88:	e7fe      	b.n	8003e88 <Error_Handler+0x8>

08003e8a <init_sd>:
/*INCLUDES******************************************************************************/
#include "sd_device.h"
#include "fatfs.h"

uint8_t init_sd(char *base_dir)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	f107 0308 	add.w	r3, r7, #8
 8003e98:	3b04      	subs	r3, #4
 8003e9a:	6018      	str	r0, [r3, #0]
	  FATFS fs;
	  if(f_mount(&fs, base_dir, 1) != FR_OK)
 8003e9c:	f107 0308 	add.w	r3, r7, #8
 8003ea0:	3b04      	subs	r3, #4
 8003ea2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003ea6:	381c      	subs	r0, #28
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	f009 fe3e 	bl	800db2c <f_mount>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <init_sd+0x30>
	  	  return 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e000      	b.n	8003ebc <init_sd+0x32>

	  return 1;
 8003eba:	2301      	movs	r3, #1
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <scan_directory>:

int scan_directory(char * dir_name, file_linked_list_t ** file_list)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b0db      	sub	sp, #364	; 0x16c
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	6018      	str	r0, [r3, #0]
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	6019      	str	r1, [r3, #0]
	file_linked_list_t *aux = (*file_list);
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	file_linked_list_t *aux_prev;

	DIR dir;
	FILINFO fno;
	int size_dir=0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	char buffer[3];
	uint8_t i;

	if(f_opendir(&dir, dir_name) != FR_OK)
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f00a fcec 	bl	800e8cc <f_opendir>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d011      	beq.n	8003f1e <scan_directory+0x56>
		return -1;
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	e0f5      	b.n	80040ec <scan_directory+0x224>


	while(aux != NULL)
	{
		(*file_list) = aux->next;
 8003f00:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f06:	463b      	mov	r3, r7
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	601a      	str	r2, [r3, #0]
		vPortFree(aux);
 8003f0c:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8003f10:	f00d fd7e 	bl	8011a10 <vPortFree>
		aux = (*file_list);
 8003f14:	463b      	mov	r3, r7
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	while(aux != NULL)
 8003f1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1ec      	bne.n	8003f00 <scan_directory+0x38>
	}

	while ((f_readdir(&dir, &fno)) == FR_OK)
 8003f26:	e0b8      	b.n	800409a <scan_directory+0x1d2>
	{
		if(fno.fname[0] == '\0')
 8003f28:	f107 030c 	add.w	r3, r7, #12
 8003f2c:	7d9b      	ldrb	r3, [r3, #22]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80c0 	beq.w	80040b4 <scan_directory+0x1ec>
			break;

		if((*file_list) == NULL)
 8003f34:	463b      	mov	r3, r7
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10d      	bne.n	8003f5a <scan_directory+0x92>
		{
			(*file_list) = aux = (file_linked_list_t *)pvPortMalloc(sizeof(file_linked_list_t));
 8003f3e:	203c      	movs	r0, #60	; 0x3c
 8003f40:	f00d fc9a 	bl	8011878 <pvPortMalloc>
 8003f44:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
 8003f48:	463b      	mov	r3, r7
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003f50:	601a      	str	r2, [r3, #0]
			aux_prev = NULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003f58:	e00f      	b.n	8003f7a <scan_directory+0xb2>
		}
		else
		{
			aux->next = (file_linked_list_t *)pvPortMalloc(sizeof(file_linked_list_t));
 8003f5a:	203c      	movs	r0, #60	; 0x3c
 8003f5c:	f00d fc8c 	bl	8011878 <pvPortMalloc>
 8003f60:	4602      	mov	r2, r0
 8003f62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f66:	635a      	str	r2, [r3, #52]	; 0x34
			aux_prev= aux;
 8003f68:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f6c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
			aux = aux->next;
 8003f70:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		}
		strcpy(aux->name, fno.fname);
 8003f7a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003f7e:	f107 030c 	add.w	r3, r7, #12
 8003f82:	3316      	adds	r3, #22
 8003f84:	4619      	mov	r1, r3
 8003f86:	4610      	mov	r0, r2
 8003f88:	f00e fa60 	bl	801244c <strcpy>
		aux->next = NULL;
 8003f8c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f90:	2200      	movs	r2, #0
 8003f92:	635a      	str	r2, [r3, #52]	; 0x34
		aux->prev = aux_prev;
 8003f94:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f98:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
		size_dir++;
 8003f9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

		for(i=0; i<MAX_LENGH_NAME_FILE; i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
 8003fae:	e00b      	b.n	8003fc8 <scan_directory+0x100>
		{
			if(aux->name[i] == '.')
 8003fb0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fb4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003fb8:	5cd3      	ldrb	r3, [r2, r3]
 8003fba:	2b2e      	cmp	r3, #46	; 0x2e
 8003fbc:	d009      	beq.n	8003fd2 <scan_directory+0x10a>
		for(i=0; i<MAX_LENGH_NAME_FILE; i++)
 8003fbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
 8003fc8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fcc:	2b31      	cmp	r3, #49	; 0x31
 8003fce:	d9ef      	bls.n	8003fb0 <scan_directory+0xe8>
 8003fd0:	e000      	b.n	8003fd4 <scan_directory+0x10c>
				break;
 8003fd2:	bf00      	nop
		}

		if(i<MAX_LENGH_NAME_FILE)
 8003fd4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fd8:	2b31      	cmp	r3, #49	; 0x31
 8003fda:	d84d      	bhi.n	8004078 <scan_directory+0x1b0>
		{
			buffer[0] = aux->name[i+1];
 8003fdc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003fe6:	5cd2      	ldrb	r2, [r2, r3]
 8003fe8:	f107 0308 	add.w	r3, r7, #8
 8003fec:	701a      	strb	r2, [r3, #0]
			buffer[1] = aux->name[i+2];
 8003fee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003ff8:	5cd2      	ldrb	r2, [r2, r3]
 8003ffa:	f107 0308 	add.w	r3, r7, #8
 8003ffe:	705a      	strb	r2, [r3, #1]
			buffer[2] = aux->name[i+3];
 8004000:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004004:	3303      	adds	r3, #3
 8004006:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800400a:	5cd2      	ldrb	r2, [r2, r3]
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	709a      	strb	r2, [r3, #2]

			if(strcmp("txt", buffer) == 0)
 8004012:	f107 0308 	add.w	r3, r7, #8
 8004016:	4619      	mov	r1, r3
 8004018:	4837      	ldr	r0, [pc, #220]	; (80040f8 <scan_directory+0x230>)
 800401a:	f7fc f8d9 	bl	80001d0 <strcmp>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <scan_directory+0x168>
				aux->type = txt;
 8004024:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004028:	2202      	movs	r2, #2
 800402a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800402e:	e034      	b.n	800409a <scan_directory+0x1d2>
			else if(strcmp("bmp", buffer) == 0)
 8004030:	f107 0308 	add.w	r3, r7, #8
 8004034:	4619      	mov	r1, r3
 8004036:	4831      	ldr	r0, [pc, #196]	; (80040fc <scan_directory+0x234>)
 8004038:	f7fc f8ca 	bl	80001d0 <strcmp>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d105      	bne.n	800404e <scan_directory+0x186>
				aux->type = bmp;
 8004042:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004046:	2203      	movs	r2, #3
 8004048:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800404c:	e025      	b.n	800409a <scan_directory+0x1d2>
			else if(strcmp("wav", buffer) == 0)
 800404e:	f107 0308 	add.w	r3, r7, #8
 8004052:	4619      	mov	r1, r3
 8004054:	482a      	ldr	r0, [pc, #168]	; (8004100 <scan_directory+0x238>)
 8004056:	f7fc f8bb 	bl	80001d0 <strcmp>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <scan_directory+0x1a4>
				aux->type = wav;
 8004060:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004064:	2204      	movs	r2, #4
 8004066:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800406a:	e016      	b.n	800409a <scan_directory+0x1d2>
			else
				aux->type = unkown;
 800406c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8004076:	e010      	b.n	800409a <scan_directory+0x1d2>
		}
		else
		{
			strcat(aux->name, "/");
 8004078:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 800407c:	4620      	mov	r0, r4
 800407e:	f7fc f8b1 	bl	80001e4 <strlen>
 8004082:	4603      	mov	r3, r0
 8004084:	4423      	add	r3, r4
 8004086:	491f      	ldr	r1, [pc, #124]	; (8004104 <scan_directory+0x23c>)
 8004088:	461a      	mov	r2, r3
 800408a:	460b      	mov	r3, r1
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	8013      	strh	r3, [r2, #0]
			aux->type = folder;
 8004090:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	while ((f_readdir(&dir, &fno)) == FR_OK)
 800409a:	f107 020c 	add.w	r2, r7, #12
 800409e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f00a fce2 	bl	800ea6e <f_readdir>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f43f af3b 	beq.w	8003f28 <scan_directory+0x60>
 80040b2:	e000      	b.n	80040b6 <scan_directory+0x1ee>
			break;
 80040b4:	bf00      	nop
		}

	}

	f_closedir(&dir);
 80040b6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80040ba:	4618      	mov	r0, r3
 80040bc:	f00a fcac 	bl	800ea18 <f_closedir>


	aux->next = (*file_list);
 80040c0:	463b      	mov	r3, r7
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34
	aux_prev = aux;
 80040cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80040d0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	aux = aux->next;
 80040d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	aux->prev = aux_prev;
 80040de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80040e2:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38

	return size_dir;
 80040e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd90      	pop	{r4, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	08016dc8 	.word	0x08016dc8
 80040fc:	08016dcc 	.word	0x08016dcc
 8004100:	08016dd0 	.word	0x08016dd0
 8004104:	08016dd4 	.word	0x08016dd4

08004108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <HAL_MspInit+0x4c>)
 8004110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004112:	4a10      	ldr	r2, [pc, #64]	; (8004154 <HAL_MspInit+0x4c>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6613      	str	r3, [r2, #96]	; 0x60
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_MspInit+0x4c>)
 800411c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_MspInit+0x4c>)
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <HAL_MspInit+0x4c>)
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004130:	6593      	str	r3, [r2, #88]	; 0x58
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <HAL_MspInit+0x4c>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800413e:	2200      	movs	r2, #0
 8004140:	210f      	movs	r1, #15
 8004142:	f06f 0001 	mvn.w	r0, #1
 8004146:	f003 fa3f 	bl	80075c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000

08004158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08c      	sub	sp, #48	; 0x30
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004160:	f107 031c 	add.w	r3, r7, #28
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a33      	ldr	r2, [pc, #204]	; (8004244 <HAL_ADC_MspInit+0xec>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d12d      	bne.n	80041d6 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800417a:	4b33      	ldr	r3, [pc, #204]	; (8004248 <HAL_ADC_MspInit+0xf0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	4a31      	ldr	r2, [pc, #196]	; (8004248 <HAL_ADC_MspInit+0xf0>)
 8004182:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004184:	4b30      	ldr	r3, [pc, #192]	; (8004248 <HAL_ADC_MspInit+0xf0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d10b      	bne.n	80041a4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800418c:	4b2f      	ldr	r3, [pc, #188]	; (800424c <HAL_ADC_MspInit+0xf4>)
 800418e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004190:	4a2e      	ldr	r2, [pc, #184]	; (800424c <HAL_ADC_MspInit+0xf4>)
 8004192:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004198:	4b2c      	ldr	r3, [pc, #176]	; (800424c <HAL_ADC_MspInit+0xf4>)
 800419a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041a4:	4b29      	ldr	r3, [pc, #164]	; (800424c <HAL_ADC_MspInit+0xf4>)
 80041a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a8:	4a28      	ldr	r2, [pc, #160]	; (800424c <HAL_ADC_MspInit+0xf4>)
 80041aa:	f043 0304 	orr.w	r3, r3, #4
 80041ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041b0:	4b26      	ldr	r3, [pc, #152]	; (800424c <HAL_ADC_MspInit+0xf4>)
 80041b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80041bc:	2308      	movs	r3, #8
 80041be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80041c0:	230b      	movs	r3, #11
 80041c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c8:	f107 031c 	add.w	r3, r7, #28
 80041cc:	4619      	mov	r1, r3
 80041ce:	4820      	ldr	r0, [pc, #128]	; (8004250 <HAL_ADC_MspInit+0xf8>)
 80041d0:	f003 fa24 	bl	800761c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80041d4:	e031      	b.n	800423a <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_ADC_MspInit+0xfc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d12c      	bne.n	800423a <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 80041e0:	4b19      	ldr	r3, [pc, #100]	; (8004248 <HAL_ADC_MspInit+0xf0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a18      	ldr	r2, [pc, #96]	; (8004248 <HAL_ADC_MspInit+0xf0>)
 80041e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80041ea:	4b17      	ldr	r3, [pc, #92]	; (8004248 <HAL_ADC_MspInit+0xf0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d10b      	bne.n	800420a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <HAL_ADC_MspInit+0xf4>)
 80041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f6:	4a15      	ldr	r2, [pc, #84]	; (800424c <HAL_ADC_MspInit+0xf4>)
 80041f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <HAL_ADC_MspInit+0xf4>)
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_ADC_MspInit+0xf4>)
 800420c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420e:	4a0f      	ldr	r2, [pc, #60]	; (800424c <HAL_ADC_MspInit+0xf4>)
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <HAL_ADC_MspInit+0xf4>)
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004222:	2310      	movs	r3, #16
 8004224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004226:	230b      	movs	r3, #11
 8004228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	2300      	movs	r3, #0
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800422e:	f107 031c 	add.w	r3, r7, #28
 8004232:	4619      	mov	r1, r3
 8004234:	4806      	ldr	r0, [pc, #24]	; (8004250 <HAL_ADC_MspInit+0xf8>)
 8004236:	f003 f9f1 	bl	800761c <HAL_GPIO_Init>
}
 800423a:	bf00      	nop
 800423c:	3730      	adds	r7, #48	; 0x30
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	50040000 	.word	0x50040000
 8004248:	200005d0 	.word	0x200005d0
 800424c:	40021000 	.word	0x40021000
 8004250:	48000800 	.word	0x48000800
 8004254:	50040100 	.word	0x50040100

08004258 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <HAL_ADC_MspDeInit+0x74>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d113      	bne.n	8004292 <HAL_ADC_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_ADC_CLK_ENABLED--;
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_ADC_MspDeInit+0x78>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3b01      	subs	r3, #1
 8004270:	4a17      	ldr	r2, [pc, #92]	; (80042d0 <HAL_ADC_MspDeInit+0x78>)
 8004272:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==0){
 8004274:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <HAL_ADC_MspDeInit+0x78>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <HAL_ADC_MspDeInit+0x30>
      __HAL_RCC_ADC_CLK_DISABLE();
 800427c:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <HAL_ADC_MspDeInit+0x7c>)
 800427e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004280:	4a14      	ldr	r2, [pc, #80]	; (80042d4 <HAL_ADC_MspDeInit+0x7c>)
 8004282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004286:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 8004288:	2108      	movs	r1, #8
 800428a:	4813      	ldr	r0, [pc, #76]	; (80042d8 <HAL_ADC_MspDeInit+0x80>)
 800428c:	f003 fb70 	bl	8007970 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8004290:	e017      	b.n	80042c2 <HAL_ADC_MspDeInit+0x6a>
  else if(hadc->Instance==ADC2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <HAL_ADC_MspDeInit+0x84>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d112      	bne.n	80042c2 <HAL_ADC_MspDeInit+0x6a>
    HAL_RCC_ADC_CLK_ENABLED--;
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <HAL_ADC_MspDeInit+0x78>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	4a0b      	ldr	r2, [pc, #44]	; (80042d0 <HAL_ADC_MspDeInit+0x78>)
 80042a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==0){
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_ADC_MspDeInit+0x78>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d105      	bne.n	80042ba <HAL_ADC_MspDeInit+0x62>
      __HAL_RCC_ADC_CLK_DISABLE();
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_ADC_MspDeInit+0x7c>)
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <HAL_ADC_MspDeInit+0x7c>)
 80042b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b8:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 80042ba:	2110      	movs	r1, #16
 80042bc:	4806      	ldr	r0, [pc, #24]	; (80042d8 <HAL_ADC_MspDeInit+0x80>)
 80042be:	f003 fb57 	bl	8007970 <HAL_GPIO_DeInit>
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	50040000 	.word	0x50040000
 80042d0:	200005d0 	.word	0x200005d0
 80042d4:	40021000 	.word	0x40021000
 80042d8:	48000800 	.word	0x48000800
 80042dc:	50040100 	.word	0x50040100

080042e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08c      	sub	sp, #48	; 0x30
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e8:	f107 031c 	add.w	r3, r7, #28
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2f      	ldr	r2, [pc, #188]	; (80043bc <HAL_SPI_MspInit+0xdc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d129      	bne.n	8004356 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004302:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 8004304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004306:	4a2e      	ldr	r2, [pc, #184]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 8004308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800430c:	6613      	str	r3, [r2, #96]	; 0x60
 800430e:	4b2c      	ldr	r3, [pc, #176]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 8004310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800431a:	4b29      	ldr	r3, [pc, #164]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 800431c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431e:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 8004328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004332:	23e0      	movs	r3, #224	; 0xe0
 8004334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004336:	2302      	movs	r3, #2
 8004338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433a:	2300      	movs	r3, #0
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800433e:	2303      	movs	r3, #3
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004342:	2305      	movs	r3, #5
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004346:	f107 031c 	add.w	r3, r7, #28
 800434a:	4619      	mov	r1, r3
 800434c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004350:	f003 f964 	bl	800761c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004354:	e02d      	b.n	80043b2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1a      	ldr	r2, [pc, #104]	; (80043c4 <HAL_SPI_MspInit+0xe4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d128      	bne.n	80043b2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004360:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 8004366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436a:	6593      	str	r3, [r2, #88]	; 0x58
 800436c:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 800437a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437c:	4a10      	ldr	r2, [pc, #64]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 800437e:	f043 0304 	orr.w	r3, r3, #4
 8004382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <HAL_SPI_MspInit+0xe0>)
 8004386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004390:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004396:	2302      	movs	r3, #2
 8004398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439e:	2303      	movs	r3, #3
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80043a2:	2306      	movs	r3, #6
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043a6:	f107 031c 	add.w	r3, r7, #28
 80043aa:	4619      	mov	r1, r3
 80043ac:	4806      	ldr	r0, [pc, #24]	; (80043c8 <HAL_SPI_MspInit+0xe8>)
 80043ae:	f003 f935 	bl	800761c <HAL_GPIO_Init>
}
 80043b2:	bf00      	nop
 80043b4:	3730      	adds	r7, #48	; 0x30
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40013000 	.word	0x40013000
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40003c00 	.word	0x40003c00
 80043c8:	48000800 	.word	0x48000800

080043cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d113      	bne.n	8004406 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043de:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <HAL_TIM_Base_MspInit+0x44>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <HAL_TIM_Base_MspInit+0x44>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	6593      	str	r3, [r2, #88]	; 0x58
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <HAL_TIM_Base_MspInit+0x44>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2105      	movs	r1, #5
 80043fa:	201c      	movs	r0, #28
 80043fc:	f003 f8e4 	bl	80075c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004400:	201c      	movs	r0, #28
 8004402:	f003 f8fd 	bl	8007600 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000

08004414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b0ac      	sub	sp, #176	; 0xb0
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800442c:	f107 0314 	add.w	r3, r7, #20
 8004430:	2288      	movs	r2, #136	; 0x88
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f00d fe69 	bl	801210c <memset>
  if(huart->Instance==USART1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <HAL_UART_MspInit+0xb0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d13a      	bne.n	80044ba <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004444:	2301      	movs	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004448:	2300      	movs	r3, #0
 800444a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	4618      	mov	r0, r3
 8004452:	f004 fa33 	bl	80088bc <HAL_RCCEx_PeriphCLKConfig>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800445c:	f7ff fd10 	bl	8003e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004460:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <HAL_UART_MspInit+0xb4>)
 8004462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004464:	4a18      	ldr	r2, [pc, #96]	; (80044c8 <HAL_UART_MspInit+0xb4>)
 8004466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800446a:	6613      	str	r3, [r2, #96]	; 0x60
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <HAL_UART_MspInit+0xb4>)
 800446e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004478:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <HAL_UART_MspInit+0xb4>)
 800447a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447c:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <HAL_UART_MspInit+0xb4>)
 800447e:	f043 0302 	orr.w	r3, r3, #2
 8004482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004484:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_UART_MspInit+0xb4>)
 8004486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004490:	23c0      	movs	r3, #192	; 0xc0
 8004492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	2302      	movs	r3, #2
 8004498:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449c:	2300      	movs	r3, #0
 800449e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a2:	2303      	movs	r3, #3
 80044a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044a8:	2307      	movs	r3, #7
 80044aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80044b2:	4619      	mov	r1, r3
 80044b4:	4805      	ldr	r0, [pc, #20]	; (80044cc <HAL_UART_MspInit+0xb8>)
 80044b6:	f003 f8b1 	bl	800761c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044ba:	bf00      	nop
 80044bc:	37b0      	adds	r7, #176	; 0xb0
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40013800 	.word	0x40013800
 80044c8:	40021000 	.word	0x40021000
 80044cc:	48000400 	.word	0x48000400

080044d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08c      	sub	sp, #48	; 0x30
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80044e0:	2200      	movs	r2, #0
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	2019      	movs	r0, #25
 80044e6:	f003 f86f 	bl	80075c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80044ea:	2019      	movs	r0, #25
 80044ec:	f003 f888 	bl	8007600 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <HAL_InitTick+0x9c>)
 80044f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f4:	4a1d      	ldr	r2, [pc, #116]	; (800456c <HAL_InitTick+0x9c>)
 80044f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044fa:	6613      	str	r3, [r2, #96]	; 0x60
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_InitTick+0x9c>)
 80044fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004508:	f107 0210 	add.w	r2, r7, #16
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f004 f940 	bl	8008798 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004518:	f004 f928 	bl	800876c <HAL_RCC_GetPCLK2Freq>
 800451c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	4a13      	ldr	r2, [pc, #76]	; (8004570 <HAL_InitTick+0xa0>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	0c9b      	lsrs	r3, r3, #18
 8004528:	3b01      	subs	r3, #1
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <HAL_InitTick+0xa4>)
 800452e:	4a12      	ldr	r2, [pc, #72]	; (8004578 <HAL_InitTick+0xa8>)
 8004530:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <HAL_InitTick+0xa4>)
 8004534:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004538:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800453a:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <HAL_InitTick+0xa4>)
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004540:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <HAL_InitTick+0xa4>)
 8004542:	2200      	movs	r2, #0
 8004544:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_InitTick+0xa4>)
 8004548:	2200      	movs	r2, #0
 800454a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800454c:	4809      	ldr	r0, [pc, #36]	; (8004574 <HAL_InitTick+0xa4>)
 800454e:	f005 fd7d 	bl	800a04c <HAL_TIM_Base_Init>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004558:	4806      	ldr	r0, [pc, #24]	; (8004574 <HAL_InitTick+0xa4>)
 800455a:	f005 fdcf 	bl	800a0fc <HAL_TIM_Base_Start_IT>
 800455e:	4603      	mov	r3, r0
 8004560:	e000      	b.n	8004564 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
}
 8004564:	4618      	mov	r0, r3
 8004566:	3730      	adds	r7, #48	; 0x30
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40021000 	.word	0x40021000
 8004570:	431bde83 	.word	0x431bde83
 8004574:	20010f78 	.word	0x20010f78
 8004578:	40012c00 	.word	0x40012c00

0800457c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004580:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <SDTimer_Handler+0x40>)
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d006      	beq.n	8004598 <SDTimer_Handler+0x1c>
    Timer1--;
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <SDTimer_Handler+0x40>)
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <SDTimer_Handler+0x40>)
 8004596:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <SDTimer_Handler+0x44>)
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d006      	beq.n	80045b0 <SDTimer_Handler+0x34>
    Timer2--;
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <SDTimer_Handler+0x44>)
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <SDTimer_Handler+0x44>)
 80045ae:	801a      	strh	r2, [r3, #0]
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	20010196 	.word	0x20010196
 80045c0:	20010194 	.word	0x20010194

080045c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045c8:	e7fe      	b.n	80045c8 <NMI_Handler+0x4>

080045ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045ce:	e7fe      	b.n	80045ce <HardFault_Handler+0x4>

080045d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045d4:	e7fe      	b.n	80045d4 <MemManage_Handler+0x4>

080045d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045d6:	b480      	push	{r7}
 80045d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045da:	e7fe      	b.n	80045da <BusFault_Handler+0x4>

080045dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045e0:	e7fe      	b.n	80045e0 <UsageFault_Handler+0x4>

080045e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  FatFsCnt++;
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <TIM1_UP_TIM16_IRQHandler+0x30>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	3301      	adds	r3, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4b08      	ldr	r3, [pc, #32]	; (8004620 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8004600:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b09      	cmp	r3, #9
 800460a:	d904      	bls.n	8004616 <TIM1_UP_TIM16_IRQHandler+0x26>
  {
	FatFsCnt = 0;
 800460c:	4b04      	ldr	r3, [pc, #16]	; (8004620 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 8004612:	f7ff ffb3 	bl	800457c <SDTimer_Handler>
  }

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004616:	4803      	ldr	r0, [pc, #12]	; (8004624 <TIM1_UP_TIM16_IRQHandler+0x34>)
 8004618:	f005 fde0 	bl	800a1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800461c:	bf00      	nop
 800461e:	bd80      	pop	{r7, pc}
 8004620:	200005d4 	.word	0x200005d4
 8004624:	20010f78 	.word	0x20010f78

08004628 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800462c:	4802      	ldr	r0, [pc, #8]	; (8004638 <TIM2_IRQHandler+0x10>)
 800462e:	f005 fdd5 	bl	800a1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20010f2c 	.word	0x20010f2c

0800463c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
	return 1;
 8004640:	2301      	movs	r3, #1
}
 8004642:	4618      	mov	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <_kill>:

int _kill(int pid, int sig)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004656:	f00d fb01 	bl	8011c5c <__errno>
 800465a:	4603      	mov	r3, r0
 800465c:	2216      	movs	r2, #22
 800465e:	601a      	str	r2, [r3, #0]
	return -1;
 8004660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <_exit>:

void _exit (int status)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004674:	f04f 31ff 	mov.w	r1, #4294967295
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ffe7 	bl	800464c <_kill>
	while (1) {}		/* Make sure we hang here */
 800467e:	e7fe      	b.n	800467e <_exit+0x12>

08004680 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e00a      	b.n	80046a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004692:	f3af 8000 	nop.w
 8004696:	4601      	mov	r1, r0
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	60ba      	str	r2, [r7, #8]
 800469e:	b2ca      	uxtb	r2, r1
 80046a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	3301      	adds	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	dbf0      	blt.n	8004692 <_read+0x12>
	}

return len;
 80046b0:	687b      	ldr	r3, [r7, #4]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b086      	sub	sp, #24
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e009      	b.n	80046e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	60ba      	str	r2, [r7, #8]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	3301      	adds	r3, #1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	dbf1      	blt.n	80046cc <_write+0x12>
	}
	return len;
 80046e8:	687b      	ldr	r3, [r7, #4]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <_close>:

int _close(int file)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
	return -1;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800471a:	605a      	str	r2, [r3, #4]
	return 0;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <_isatty>:

int _isatty(int file)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
	return 1;
 8004732:	2301      	movs	r3, #1
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
	return 0;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004764:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <_sbrk+0x5c>)
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <_sbrk+0x60>)
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <_sbrk+0x64>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <_sbrk+0x64>)
 800477a:	4a12      	ldr	r2, [pc, #72]	; (80047c4 <_sbrk+0x68>)
 800477c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <_sbrk+0x64>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	429a      	cmp	r2, r3
 800478a:	d207      	bcs.n	800479c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800478c:	f00d fa66 	bl	8011c5c <__errno>
 8004790:	4603      	mov	r3, r0
 8004792:	220c      	movs	r2, #12
 8004794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004796:	f04f 33ff 	mov.w	r3, #4294967295
 800479a:	e009      	b.n	80047b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <_sbrk+0x64>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047a2:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <_sbrk+0x64>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4413      	add	r3, r2
 80047aa:	4a05      	ldr	r2, [pc, #20]	; (80047c0 <_sbrk+0x64>)
 80047ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047ae:	68fb      	ldr	r3, [r7, #12]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20018000 	.word	0x20018000
 80047bc:	00000400 	.word	0x00000400
 80047c0:	200005dc 	.word	0x200005dc
 80047c4:	20013090 	.word	0x20013090

080047c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047cc:	4b17      	ldr	r3, [pc, #92]	; (800482c <SystemInit+0x64>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	4a16      	ldr	r2, [pc, #88]	; (800482c <SystemInit+0x64>)
 80047d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80047dc:	4b14      	ldr	r3, [pc, #80]	; (8004830 <SystemInit+0x68>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a13      	ldr	r2, [pc, #76]	; (8004830 <SystemInit+0x68>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80047e8:	4b11      	ldr	r3, [pc, #68]	; (8004830 <SystemInit+0x68>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80047ee:	4b10      	ldr	r3, [pc, #64]	; (8004830 <SystemInit+0x68>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <SystemInit+0x68>)
 80047f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80047f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80047fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80047fe:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <SystemInit+0x68>)
 8004800:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004804:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <SystemInit+0x68>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a09      	ldr	r2, [pc, #36]	; (8004830 <SystemInit+0x68>)
 800480c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004810:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004812:	4b07      	ldr	r3, [pc, #28]	; (8004830 <SystemInit+0x68>)
 8004814:	2200      	movs	r2, #0
 8004816:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <SystemInit+0x64>)
 800481a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800481e:	609a      	str	r2, [r3, #8]
#endif
}
 8004820:	bf00      	nop
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	e000ed00 	.word	0xe000ed00
 8004830:	40021000 	.word	0x40021000

08004834 <set_default_wifi>:
/*
 * configura los puertos y el spi por defecto integrado en el kit de desarrollo
 */
extern SPI_HandleTypeDef hspi3;
void set_default_wifi()
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
	wifi._hspi = &hspi3;
 8004838:	4b10      	ldr	r3, [pc, #64]	; (800487c <set_default_wifi+0x48>)
 800483a:	4a11      	ldr	r2, [pc, #68]	; (8004880 <set_default_wifi+0x4c>)
 800483c:	601a      	str	r2, [r3, #0]

	wifi.RST_PORT = GPIOE;
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <set_default_wifi+0x48>)
 8004840:	4a10      	ldr	r2, [pc, #64]	; (8004884 <set_default_wifi+0x50>)
 8004842:	609a      	str	r2, [r3, #8]
	wifi.CS_PORT = GPIOE;
 8004844:	4b0d      	ldr	r3, [pc, #52]	; (800487c <set_default_wifi+0x48>)
 8004846:	4a0f      	ldr	r2, [pc, #60]	; (8004884 <set_default_wifi+0x50>)
 8004848:	605a      	str	r2, [r3, #4]
	wifi.WKP_PORT = GPIOB;
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <set_default_wifi+0x48>)
 800484c:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <set_default_wifi+0x54>)
 800484e:	60da      	str	r2, [r3, #12]
	wifi.RDY_PORT = GPIOE;
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <set_default_wifi+0x48>)
 8004852:	4a0c      	ldr	r2, [pc, #48]	; (8004884 <set_default_wifi+0x50>)
 8004854:	611a      	str	r2, [r3, #16]

	wifi.RST_PIN = GPIO_PIN_8;
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <set_default_wifi+0x48>)
 8004858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800485c:	82da      	strh	r2, [r3, #22]
	wifi.CS_PIN = GPIO_PIN_0;
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <set_default_wifi+0x48>)
 8004860:	2201      	movs	r2, #1
 8004862:	829a      	strh	r2, [r3, #20]
	wifi.WKP_PIN = GPIO_PIN_13;
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <set_default_wifi+0x48>)
 8004866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800486a:	831a      	strh	r2, [r3, #24]
	wifi.RDY_PIN = GPIO_PIN_1;
 800486c:	4b03      	ldr	r3, [pc, #12]	; (800487c <set_default_wifi+0x48>)
 800486e:	2202      	movs	r2, #2
 8004870:	835a      	strh	r2, [r3, #26]

}
 8004872:	bf00      	nop
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	200104ac 	.word	0x200104ac
 8004880:	20010218 	.word	0x20010218
 8004884:	48001000 	.word	0x48001000
 8004888:	48000400 	.word	0x48000400

0800488c <init_wifi>:
/*
 * Inicializa el modulo esWi-Fi
 * timeout : tiempo maximo para la operacion
 */
wifi_status init_wifi(uint32_t timeout)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	wakeup_wifi();
 8004894:	f000 f832 	bl	80048fc <wakeup_wifi>
	reset_wifi();
 8004898:	f000 f812 	bl	80048c0 <reset_wifi>
	vTaskDelay(50);
 800489c:	2032      	movs	r0, #50	; 0x32
 800489e:	f00b fe15 	bl	80104cc <vTaskDelay>

	return error_check_wifi(read_wifi(timeout), "\025\025\r\n> ");
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f996 	bl	8004bd4 <read_wifi>
 80048a8:	4603      	mov	r3, r0
 80048aa:	4904      	ldr	r1, [pc, #16]	; (80048bc <init_wifi+0x30>)
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fa2f 	bl	8004d10 <error_check_wifi>
 80048b2:	4603      	mov	r3, r0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	08016dd8 	.word	0x08016dd8

080048c0 <reset_wifi>:

/*
 * Reinicia el modulo WiFi
 */
void reset_wifi()
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
	vTaskDelay(1000);
 80048c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048c8:	f00b fe00 	bl	80104cc <vTaskDelay>
	HAL_GPIO_WritePin(wifi.RST_PORT, wifi.RST_PIN, 0);
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <reset_wifi+0x38>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <reset_wifi+0x38>)
 80048d2:	8ad1      	ldrh	r1, [r2, #22]
 80048d4:	2200      	movs	r2, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f003 f956 	bl	8007b88 <HAL_GPIO_WritePin>
	vTaskDelay(1000);
 80048dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048e0:	f00b fdf4 	bl	80104cc <vTaskDelay>
	HAL_GPIO_WritePin(wifi.RST_PORT, wifi.RST_PIN, 1);
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <reset_wifi+0x38>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4a03      	ldr	r2, [pc, #12]	; (80048f8 <reset_wifi+0x38>)
 80048ea:	8ad1      	ldrh	r1, [r2, #22]
 80048ec:	2201      	movs	r2, #1
 80048ee:	4618      	mov	r0, r3
 80048f0:	f003 f94a 	bl	8007b88 <HAL_GPIO_WritePin>
}
 80048f4:	bf00      	nop
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	200104ac 	.word	0x200104ac

080048fc <wakeup_wifi>:

/*
 * Despierta el modulo WiFi
 */
void wakeup_wifi()
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(wifi.WKP_PORT, wifi.WKP_PIN, 1);
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <wakeup_wifi+0x18>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a03      	ldr	r2, [pc, #12]	; (8004914 <wakeup_wifi+0x18>)
 8004906:	8b11      	ldrh	r1, [r2, #24]
 8004908:	2201      	movs	r2, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f003 f93c 	bl	8007b88 <HAL_GPIO_WritePin>
}
 8004910:	bf00      	nop
 8004912:	bd80      	pop	{r7, pc}
 8004914:	200104ac 	.word	0x200104ac

08004918 <write_cmd_wifi>:
 *     cmd : comando para el modulo
 *    data : datos del comando usado(si se envia \0 solo manda el comando)
 * timeout : tiempo maximo de la operacion
 */
wifi_status write_cmd_wifi(char *cmd, char *data, uint32_t timeout)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]

	if(data[0] == '\0')
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d105      	bne.n	8004938 <write_cmd_wifi+0x20>
		sprintf(wifi.buffer_tx,"%s\r", cmd);
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4929      	ldr	r1, [pc, #164]	; (80049d4 <write_cmd_wifi+0xbc>)
 8004930:	4829      	ldr	r0, [pc, #164]	; (80049d8 <write_cmd_wifi+0xc0>)
 8004932:	f00d fd17 	bl	8012364 <siprintf>
 8004936:	e005      	b.n	8004944 <write_cmd_wifi+0x2c>
	else
		sprintf(wifi.buffer_tx,"%s=%s\r", cmd, data);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4927      	ldr	r1, [pc, #156]	; (80049dc <write_cmd_wifi+0xc4>)
 800493e:	4826      	ldr	r0, [pc, #152]	; (80049d8 <write_cmd_wifi+0xc0>)
 8004940:	f00d fd10 	bl	8012364 <siprintf>

	uint16_t len = strlen(wifi.buffer_tx);
 8004944:	4824      	ldr	r0, [pc, #144]	; (80049d8 <write_cmd_wifi+0xc0>)
 8004946:	f7fb fc4d 	bl	80001e4 <strlen>
 800494a:	4603      	mov	r3, r0
 800494c:	82fb      	strh	r3, [r7, #22]

	if(len&0x01)
 800494e:	8afb      	ldrh	r3, [r7, #22]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <write_cmd_wifi+0x52>
	{
		wifi.buffer_tx[len] = '\n';
 8004958:	8afb      	ldrh	r3, [r7, #22]
 800495a:	4a21      	ldr	r2, [pc, #132]	; (80049e0 <write_cmd_wifi+0xc8>)
 800495c:	4413      	add	r3, r2
 800495e:	220a      	movs	r2, #10
 8004960:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
		len++;
 8004964:	8afb      	ldrh	r3, [r7, #22]
 8004966:	3301      	adds	r3, #1
 8004968:	82fb      	strh	r3, [r7, #22]
	}

	if(wait_ready_wifi(timeout) != Timeout_OK)
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f99a 	bl	8004ca4 <wait_ready_wifi>
 8004970:	4603      	mov	r3, r0
 8004972:	2b04      	cmp	r3, #4
 8004974:	d001      	beq.n	800497a <write_cmd_wifi+0x62>
		return Timeout_ERROR;
 8004976:	2303      	movs	r3, #3
 8004978:	e027      	b.n	80049ca <write_cmd_wifi+0xb2>

	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 0);
 800497a:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <write_cmd_wifi+0xc8>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <write_cmd_wifi+0xc8>)
 8004980:	8a91      	ldrh	r1, [r2, #20]
 8004982:	2200      	movs	r2, #0
 8004984:	4618      	mov	r0, r3
 8004986:	f003 f8ff 	bl	8007b88 <HAL_GPIO_WritePin>
	vTaskDelay(1);
 800498a:	2001      	movs	r0, #1
 800498c:	f00b fd9e 	bl	80104cc <vTaskDelay>

	if(HAL_SPI_Transmit(wifi._hspi, (uint8_t *)wifi.buffer_tx,
 8004990:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <write_cmd_wifi+0xc8>)
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	8afb      	ldrh	r3, [r7, #22]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	490e      	ldr	r1, [pc, #56]	; (80049d8 <write_cmd_wifi+0xc0>)
 800499e:	f004 fcec 	bl	800937a <HAL_SPI_Transmit>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d004      	beq.n	80049b2 <write_cmd_wifi+0x9a>
			len/2, timeout) != HAL_OK)
		return error_wifi(SPI_ERROR);
 80049a8:	2002      	movs	r0, #2
 80049aa:	f000 f99d 	bl	8004ce8 <error_wifi>
 80049ae:	4603      	mov	r3, r0
 80049b0:	e00b      	b.n	80049ca <write_cmd_wifi+0xb2>

	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 1);
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <write_cmd_wifi+0xc8>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4a0a      	ldr	r2, [pc, #40]	; (80049e0 <write_cmd_wifi+0xc8>)
 80049b8:	8a91      	ldrh	r1, [r2, #20]
 80049ba:	2201      	movs	r2, #1
 80049bc:	4618      	mov	r0, r3
 80049be:	f003 f8e3 	bl	8007b88 <HAL_GPIO_WritePin>


	return read_wifi(timeout);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f906 	bl	8004bd4 <read_wifi>
 80049c8:	4603      	mov	r3, r0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	08016de0 	.word	0x08016de0
 80049d8:	20010cc8 	.word	0x20010cc8
 80049dc:	08016de4 	.word	0x08016de4
 80049e0:	200104ac 	.word	0x200104ac

080049e4 <write_data_wifi>:
 * Escribe solo datos al modulo
 *    data : datos a escribir
 * timeout : tiempo maximo de operacion
 */
wifi_status write_data_wifi(char *data, uint32_t timeout)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
	sprintf(wifi.buffer_tx, "%s", data);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4925      	ldr	r1, [pc, #148]	; (8004a88 <write_data_wifi+0xa4>)
 80049f2:	4826      	ldr	r0, [pc, #152]	; (8004a8c <write_data_wifi+0xa8>)
 80049f4:	f00d fcb6 	bl	8012364 <siprintf>

	uint16_t len = strlen(wifi.buffer_tx);
 80049f8:	4824      	ldr	r0, [pc, #144]	; (8004a8c <write_data_wifi+0xa8>)
 80049fa:	f7fb fbf3 	bl	80001e4 <strlen>
 80049fe:	4603      	mov	r3, r0
 8004a00:	81fb      	strh	r3, [r7, #14]

	if(len&0x01)
 8004a02:	89fb      	ldrh	r3, [r7, #14]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <write_data_wifi+0x3a>
	{
		wifi.buffer_tx[len] = 0x15;
 8004a0c:	89fb      	ldrh	r3, [r7, #14]
 8004a0e:	4a20      	ldr	r2, [pc, #128]	; (8004a90 <write_data_wifi+0xac>)
 8004a10:	4413      	add	r3, r2
 8004a12:	2215      	movs	r2, #21
 8004a14:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
		len++;
 8004a18:	89fb      	ldrh	r3, [r7, #14]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	81fb      	strh	r3, [r7, #14]
	}

	if(wait_ready_wifi(timeout) != Timeout_OK)
 8004a1e:	6838      	ldr	r0, [r7, #0]
 8004a20:	f000 f940 	bl	8004ca4 <wait_ready_wifi>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d001      	beq.n	8004a2e <write_data_wifi+0x4a>
		return Timeout_ERROR;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e027      	b.n	8004a7e <write_data_wifi+0x9a>

	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 0);
 8004a2e:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <write_data_wifi+0xac>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <write_data_wifi+0xac>)
 8004a34:	8a91      	ldrh	r1, [r2, #20]
 8004a36:	2200      	movs	r2, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f003 f8a5 	bl	8007b88 <HAL_GPIO_WritePin>
	vTaskDelay(1);
 8004a3e:	2001      	movs	r0, #1
 8004a40:	f00b fd44 	bl	80104cc <vTaskDelay>

	if(HAL_SPI_Transmit(wifi._hspi, (uint8_t *)wifi.buffer_tx,
 8004a44:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <write_data_wifi+0xac>)
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	89fb      	ldrh	r3, [r7, #14]
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	490e      	ldr	r1, [pc, #56]	; (8004a8c <write_data_wifi+0xa8>)
 8004a52:	f004 fc92 	bl	800937a <HAL_SPI_Transmit>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d004      	beq.n	8004a66 <write_data_wifi+0x82>
			len/2, timeout) != HAL_OK)
		return error_wifi(SPI_ERROR);
 8004a5c:	2002      	movs	r0, #2
 8004a5e:	f000 f943 	bl	8004ce8 <error_wifi>
 8004a62:	4603      	mov	r3, r0
 8004a64:	e00b      	b.n	8004a7e <write_data_wifi+0x9a>

	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 1);
 8004a66:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <write_data_wifi+0xac>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <write_data_wifi+0xac>)
 8004a6c:	8a91      	ldrh	r1, [r2, #20]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4618      	mov	r0, r3
 8004a72:	f003 f889 	bl	8007b88 <HAL_GPIO_WritePin>


	return read_wifi(timeout);
 8004a76:	6838      	ldr	r0, [r7, #0]
 8004a78:	f000 f8ac 	bl	8004bd4 <read_wifi>
 8004a7c:	4603      	mov	r3, r0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	08016dec 	.word	0x08016dec
 8004a8c:	20010cc8 	.word	0x20010cc8
 8004a90:	200104ac 	.word	0x200104ac

08004a94 <write_data_size_wifi>:

wifi_status write_data_size_wifi(char *data, uint16_t size, uint32_t timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	817b      	strh	r3, [r7, #10]
	//sprintf(wifi.buffer_tx, "%s", data);

	//uint16_t len = strlen(wifi.buffer_tx);

	for(uint16_t i=0; i<size; i++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	82fb      	strh	r3, [r7, #22]
 8004aa6:	e00c      	b.n	8004ac2 <write_data_size_wifi+0x2e>
		wifi.buffer_tx[i] = data[i];
 8004aa8:	8afb      	ldrh	r3, [r7, #22]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	441a      	add	r2, r3
 8004aae:	8afb      	ldrh	r3, [r7, #22]
 8004ab0:	7811      	ldrb	r1, [r2, #0]
 8004ab2:	4a27      	ldr	r2, [pc, #156]	; (8004b50 <write_data_size_wifi+0xbc>)
 8004ab4:	4413      	add	r3, r2
 8004ab6:	460a      	mov	r2, r1
 8004ab8:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
	for(uint16_t i=0; i<size; i++)
 8004abc:	8afb      	ldrh	r3, [r7, #22]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	82fb      	strh	r3, [r7, #22]
 8004ac2:	8afa      	ldrh	r2, [r7, #22]
 8004ac4:	897b      	ldrh	r3, [r7, #10]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d3ee      	bcc.n	8004aa8 <write_data_size_wifi+0x14>


	if(size&0x01)
 8004aca:	897b      	ldrh	r3, [r7, #10]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <write_data_size_wifi+0x52>
	{
		wifi.buffer_tx[size] = 0x15;
 8004ad4:	897b      	ldrh	r3, [r7, #10]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <write_data_size_wifi+0xbc>)
 8004ad8:	4413      	add	r3, r2
 8004ada:	2215      	movs	r2, #21
 8004adc:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
		size++;
 8004ae0:	897b      	ldrh	r3, [r7, #10]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	817b      	strh	r3, [r7, #10]
	}

	if(wait_ready_wifi(timeout) != Timeout_OK)
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8dc 	bl	8004ca4 <wait_ready_wifi>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d001      	beq.n	8004af6 <write_data_size_wifi+0x62>
		return Timeout_ERROR;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e027      	b.n	8004b46 <write_data_size_wifi+0xb2>

	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 0);
 8004af6:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <write_data_size_wifi+0xbc>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <write_data_size_wifi+0xbc>)
 8004afc:	8a91      	ldrh	r1, [r2, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	4618      	mov	r0, r3
 8004b02:	f003 f841 	bl	8007b88 <HAL_GPIO_WritePin>
	vTaskDelay(1);
 8004b06:	2001      	movs	r0, #1
 8004b08:	f00b fce0 	bl	80104cc <vTaskDelay>

	if(HAL_SPI_Transmit(wifi._hspi, (uint8_t *)wifi.buffer_tx,
 8004b0c:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <write_data_size_wifi+0xbc>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	897b      	ldrh	r3, [r7, #10]
 8004b12:	085b      	lsrs	r3, r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	490e      	ldr	r1, [pc, #56]	; (8004b54 <write_data_size_wifi+0xc0>)
 8004b1a:	f004 fc2e 	bl	800937a <HAL_SPI_Transmit>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <write_data_size_wifi+0x9a>
			size/2, timeout) != HAL_OK)
		return error_wifi(SPI_ERROR);
 8004b24:	2002      	movs	r0, #2
 8004b26:	f000 f8df 	bl	8004ce8 <error_wifi>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	e00b      	b.n	8004b46 <write_data_size_wifi+0xb2>

	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 1);
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <write_data_size_wifi+0xbc>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4a07      	ldr	r2, [pc, #28]	; (8004b50 <write_data_size_wifi+0xbc>)
 8004b34:	8a91      	ldrh	r1, [r2, #20]
 8004b36:	2201      	movs	r2, #1
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f003 f825 	bl	8007b88 <HAL_GPIO_WritePin>


	return read_wifi(timeout);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f848 	bl	8004bd4 <read_wifi>
 8004b44:	4603      	mov	r3, r0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	200104ac 	.word	0x200104ac
 8004b54:	20010cc8 	.word	0x20010cc8

08004b58 <write_direct_wifi>:

wifi_status write_direct_wifi(char *buffer, uint16_t size, uint32_t timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	460b      	mov	r3, r1
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	817b      	strh	r3, [r7, #10]

	if(wait_ready_wifi(timeout) != Timeout_OK)
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f89c 	bl	8004ca4 <wait_ready_wifi>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d001      	beq.n	8004b76 <write_direct_wifi+0x1e>
		return Timeout_ERROR;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e027      	b.n	8004bc6 <write_direct_wifi+0x6e>

	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 0);
 8004b76:	4b16      	ldr	r3, [pc, #88]	; (8004bd0 <write_direct_wifi+0x78>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4a15      	ldr	r2, [pc, #84]	; (8004bd0 <write_direct_wifi+0x78>)
 8004b7c:	8a91      	ldrh	r1, [r2, #20]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f003 f801 	bl	8007b88 <HAL_GPIO_WritePin>
	vTaskDelay(1);
 8004b86:	2001      	movs	r0, #1
 8004b88:	f00b fca0 	bl	80104cc <vTaskDelay>

	if(HAL_SPI_Transmit(wifi._hspi, (uint8_t *)buffer,
 8004b8c:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <write_direct_wifi+0x78>)
 8004b8e:	6818      	ldr	r0, [r3, #0]
 8004b90:	897b      	ldrh	r3, [r7, #10]
 8004b92:	085b      	lsrs	r3, r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68f9      	ldr	r1, [r7, #12]
 8004b9a:	f004 fbee 	bl	800937a <HAL_SPI_Transmit>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d004      	beq.n	8004bae <write_direct_wifi+0x56>
			size/2, timeout) != HAL_OK)
		return error_wifi(SPI_ERROR);
 8004ba4:	2002      	movs	r0, #2
 8004ba6:	f000 f89f 	bl	8004ce8 <error_wifi>
 8004baa:	4603      	mov	r3, r0
 8004bac:	e00b      	b.n	8004bc6 <write_direct_wifi+0x6e>

	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 1);
 8004bae:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <write_direct_wifi+0x78>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4a07      	ldr	r2, [pc, #28]	; (8004bd0 <write_direct_wifi+0x78>)
 8004bb4:	8a91      	ldrh	r1, [r2, #20]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f002 ffe5 	bl	8007b88 <HAL_GPIO_WritePin>

	return read_wifi(timeout);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f808 	bl	8004bd4 <read_wifi>
 8004bc4:	4603      	mov	r3, r0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200104ac 	.word	0x200104ac

08004bd4 <read_wifi>:
/*
 * Lee los datos enviados por el modulo y los guarda en WiFi.buffer_rx
 * timeout : tiempo maximo de la operacion
 */
wifi_status read_wifi(uint32_t timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	uint16_t i = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	81fb      	strh	r3, [r7, #14]

	memset(wifi.buffer_rx, '\0', MAX_RX_BUFFER_SIZE);
 8004be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be4:	2100      	movs	r1, #0
 8004be6:	482d      	ldr	r0, [pc, #180]	; (8004c9c <read_wifi+0xc8>)
 8004be8:	f00d fa90 	bl	801210c <memset>

	if(wait_ready_wifi(timeout) != Timeout_OK)
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f859 	bl	8004ca4 <wait_ready_wifi>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d001      	beq.n	8004bfc <read_wifi+0x28>
		return Timeout_ERROR;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e04a      	b.n	8004c92 <read_wifi+0xbe>

	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 0);
 8004bfc:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <read_wifi+0xcc>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <read_wifi+0xcc>)
 8004c02:	8a91      	ldrh	r1, [r2, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f002 ffbe 	bl	8007b88 <HAL_GPIO_WritePin>
	vTaskDelay(1);
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	f00b fc5d 	bl	80104cc <vTaskDelay>

	while(HAL_GPIO_ReadPin(wifi.RDY_PORT, wifi.RDY_PIN) == GPIO_PIN_SET)
 8004c12:	e025      	b.n	8004c60 <read_wifi+0x8c>
	{
		if(HAL_SPI_Receive(wifi._hspi, buffer, 1, timeout) != HAL_OK)
 8004c14:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <read_wifi+0xcc>)
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	f107 010c 	add.w	r1, r7, #12
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f004 fd19 	bl	8009656 <HAL_SPI_Receive>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <read_wifi+0x5a>
			return SPI_ERROR;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e031      	b.n	8004c92 <read_wifi+0xbe>
		if(i<MAX_RX_BUFFER_SIZE)
 8004c2e:	89fb      	ldrh	r3, [r7, #14]
 8004c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c34:	d212      	bcs.n	8004c5c <read_wifi+0x88>
		{
			wifi.buffer_rx[i] = buffer[0];
 8004c36:	89fb      	ldrh	r3, [r7, #14]
 8004c38:	7b39      	ldrb	r1, [r7, #12]
 8004c3a:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <read_wifi+0xcc>)
 8004c3c:	4413      	add	r3, r2
 8004c3e:	460a      	mov	r2, r1
 8004c40:	771a      	strb	r2, [r3, #28]
			i++;
 8004c42:	89fb      	ldrh	r3, [r7, #14]
 8004c44:	3301      	adds	r3, #1
 8004c46:	81fb      	strh	r3, [r7, #14]
			wifi.buffer_rx[i] = buffer[1];
 8004c48:	89fb      	ldrh	r3, [r7, #14]
 8004c4a:	7b79      	ldrb	r1, [r7, #13]
 8004c4c:	4a14      	ldr	r2, [pc, #80]	; (8004ca0 <read_wifi+0xcc>)
 8004c4e:	4413      	add	r3, r2
 8004c50:	460a      	mov	r2, r1
 8004c52:	771a      	strb	r2, [r3, #28]
			i++;
 8004c54:	89fb      	ldrh	r3, [r7, #14]
 8004c56:	3301      	adds	r3, #1
 8004c58:	81fb      	strh	r3, [r7, #14]
 8004c5a:	e001      	b.n	8004c60 <read_wifi+0x8c>
		}
		else
		{
			return OVER_FLOW_BUFFER;
 8004c5c:	2305      	movs	r3, #5
 8004c5e:	e018      	b.n	8004c92 <read_wifi+0xbe>
	while(HAL_GPIO_ReadPin(wifi.RDY_PORT, wifi.RDY_PIN) == GPIO_PIN_SET)
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <read_wifi+0xcc>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	4a0e      	ldr	r2, [pc, #56]	; (8004ca0 <read_wifi+0xcc>)
 8004c66:	8b52      	ldrh	r2, [r2, #26]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f002 ff74 	bl	8007b58 <HAL_GPIO_ReadPin>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d0ce      	beq.n	8004c14 <read_wifi+0x40>

		}
	}
	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 1);
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <read_wifi+0xcc>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <read_wifi+0xcc>)
 8004c7c:	8a91      	ldrh	r1, [r2, #20]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	4618      	mov	r0, r3
 8004c82:	f002 ff81 	bl	8007b88 <HAL_GPIO_WritePin>
	if(i == 0)
 8004c86:	89fb      	ldrh	r3, [r7, #14]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <read_wifi+0xbc>
		return WiFi_ERROR;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e000      	b.n	8004c92 <read_wifi+0xbe>
	return WiFi_OK;
 8004c90:	2301      	movs	r3, #1

}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200104c8 	.word	0x200104c8
 8004ca0:	200104ac 	.word	0x200104ac

08004ca4 <wait_ready_wifi>:
/*
 * Espera a que el modulo este listo para recibir o transmitir datos
 * timeout : tiempo maximo de operacion
 */
wifi_status wait_ready_wifi(uint32_t timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(wifi.RDY_PORT, wifi.RDY_PIN) == GPIO_PIN_RESET)
 8004cac:	e009      	b.n	8004cc2 <wait_ready_wifi+0x1e>
	{
        if((timeout--)==0)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	1e5a      	subs	r2, r3, #1
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <wait_ready_wifi+0x18>
		{
		  return Timeout_ERROR;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e00e      	b.n	8004cda <wait_ready_wifi+0x36>
		}
        vTaskDelay(1);
 8004cbc:	2001      	movs	r0, #1
 8004cbe:	f00b fc05 	bl	80104cc <vTaskDelay>
	while (HAL_GPIO_ReadPin(wifi.RDY_PORT, wifi.RDY_PIN) == GPIO_PIN_RESET)
 8004cc2:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <wait_ready_wifi+0x40>)
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	4a07      	ldr	r2, [pc, #28]	; (8004ce4 <wait_ready_wifi+0x40>)
 8004cc8:	8b52      	ldrh	r2, [r2, #26]
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f002 ff43 	bl	8007b58 <HAL_GPIO_ReadPin>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0ea      	beq.n	8004cae <wait_ready_wifi+0xa>
	}

	return Timeout_OK;
 8004cd8:	2304      	movs	r3, #4

}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	200104ac 	.word	0x200104ac

08004ce8 <error_wifi>:

/*
 * Gestiona los errores
 */
wifi_status error_wifi(wifi_status error_code)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 1);
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <error_wifi+0x24>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4a05      	ldr	r2, [pc, #20]	; (8004d0c <error_wifi+0x24>)
 8004cf8:	8a91      	ldrh	r1, [r2, #20]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f002 ff43 	bl	8007b88 <HAL_GPIO_WritePin>
	return error_code;
 8004d02:	79fb      	ldrb	r3, [r7, #7]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	200104ac 	.word	0x200104ac

08004d10 <error_check_wifi>:

wifi_status error_check_wifi(wifi_status status, char *response)
{
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	6039      	str	r1, [r7, #0]
 8004d1a:	71fb      	strb	r3, [r7, #7]
	if(status == WiFi_OK)
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d118      	bne.n	8004d54 <error_check_wifi+0x44>
	{
		for(uint16_t i=0; i<strlen(response); i++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	81fb      	strh	r3, [r7, #14]
 8004d26:	e00e      	b.n	8004d46 <error_check_wifi+0x36>
		{
			if(wifi.buffer_rx[i] != response[i])
 8004d28:	89fb      	ldrh	r3, [r7, #14]
 8004d2a:	4a0d      	ldr	r2, [pc, #52]	; (8004d60 <error_check_wifi+0x50>)
 8004d2c:	4413      	add	r3, r2
 8004d2e:	7f1a      	ldrb	r2, [r3, #28]
 8004d30:	89fb      	ldrh	r3, [r7, #14]
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	440b      	add	r3, r1
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <error_check_wifi+0x30>
			{
				return Operation_ERROR;
 8004d3c:	2306      	movs	r3, #6
 8004d3e:	e00a      	b.n	8004d56 <error_check_wifi+0x46>
		for(uint16_t i=0; i<strlen(response); i++)
 8004d40:	89fb      	ldrh	r3, [r7, #14]
 8004d42:	3301      	adds	r3, #1
 8004d44:	81fb      	strh	r3, [r7, #14]
 8004d46:	89fc      	ldrh	r4, [r7, #14]
 8004d48:	6838      	ldr	r0, [r7, #0]
 8004d4a:	f7fb fa4b 	bl	80001e4 <strlen>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	429c      	cmp	r4, r3
 8004d52:	d3e9      	bcc.n	8004d28 <error_check_wifi+0x18>
				//break;
			}
		}
	}

	return status;
 8004d54:	79fb      	ldrb	r3, [r7, #7]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd90      	pop	{r4, r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	200104ac 	.word	0x200104ac

08004d64 <response_check_wifi>:

wifi_status response_check_wifi(wifi_status status)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	71fb      	strb	r3, [r7, #7]
	return error_check_wifi(status, "\r\n\r\nOK\r\n> ");
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	4904      	ldr	r1, [pc, #16]	; (8004d84 <response_check_wifi+0x20>)
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff ffcc 	bl	8004d10 <error_check_wifi>
 8004d78:	4603      	mov	r3, r0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	08016df0 	.word	0x08016df0

08004d88 <write_transport_packet_wifi>:
	return response_check_wifi(write_cmd_wifi(SET_WRITE_TRANSPORT_PACKET_SIZE, buffer, timeout));
}

#define MAX_ARGS_SIZE		15
wifi_status write_transport_packet_wifi(uint32_t timeout, const char *format, ...)
{
 8004d88:	b40e      	push	{r1, r2, r3}
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b08d      	sub	sp, #52	; 0x34
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
	va_list args;

	char buffer[MAX_ARGS_SIZE];
	uint16_t len=3;
 8004d92:	2303      	movs	r3, #3
 8004d94:	85fb      	strh	r3, [r7, #46]	; 0x2e

	memset(wifi.buffer_tx, '\0', MAX_TX_BUFFER_SIZE);
 8004d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	487b      	ldr	r0, [pc, #492]	; (8004f8c <write_transport_packet_wifi+0x204>)
 8004d9e:	f00d f9b5 	bl	801210c <memset>
	memset(buffer, '\0', MAX_ARGS_SIZE);
 8004da2:	f107 030c 	add.w	r3, r7, #12
 8004da6:	220f      	movs	r2, #15
 8004da8:	2100      	movs	r1, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f00d f9ae 	bl	801210c <memset>

	strcat(wifi.buffer_tx, "S0\r");
 8004db0:	4876      	ldr	r0, [pc, #472]	; (8004f8c <write_transport_packet_wifi+0x204>)
 8004db2:	f7fb fa17 	bl	80001e4 <strlen>
 8004db6:	4603      	mov	r3, r0
 8004db8:	461a      	mov	r2, r3
 8004dba:	4b74      	ldr	r3, [pc, #464]	; (8004f8c <write_transport_packet_wifi+0x204>)
 8004dbc:	4413      	add	r3, r2
 8004dbe:	4a74      	ldr	r2, [pc, #464]	; (8004f90 <write_transport_packet_wifi+0x208>)
 8004dc0:	6810      	ldr	r0, [r2, #0]
 8004dc2:	6018      	str	r0, [r3, #0]

	va_start(args, format);
 8004dc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004dc8:	61fb      	str	r3, [r7, #28]

	while(*format != '\0')
 8004dca:	e060      	b.n	8004e8e <write_transport_packet_wifi+0x106>
	{
		if(*format == '%')
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b25      	cmp	r3, #37	; 0x25
 8004dd2:	d14c      	bne.n	8004e6e <write_transport_packet_wifi+0xe6>
		{
			format++;
 8004dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
            switch (*format)
 8004dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b73      	cmp	r3, #115	; 0x73
 8004de0:	d033      	beq.n	8004e4a <write_transport_packet_wifi+0xc2>
 8004de2:	2b73      	cmp	r3, #115	; 0x73
 8004de4:	dc4f      	bgt.n	8004e86 <write_transport_packet_wifi+0xfe>
 8004de6:	2b63      	cmp	r3, #99	; 0x63
 8004de8:	d01e      	beq.n	8004e28 <write_transport_packet_wifi+0xa0>
 8004dea:	2b64      	cmp	r3, #100	; 0x64
 8004dec:	d14b      	bne.n	8004e86 <write_transport_packet_wifi+0xfe>
            {
                case 'd':
                {
                    int i = va_arg(args, int);
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	1d1a      	adds	r2, r3, #4
 8004df2:	61fa      	str	r2, [r7, #28]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
                    sprintf(buffer, "%d", i);
 8004df8:	f107 030c 	add.w	r3, r7, #12
 8004dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfe:	4965      	ldr	r1, [pc, #404]	; (8004f94 <write_transport_packet_wifi+0x20c>)
 8004e00:	4618      	mov	r0, r3
 8004e02:	f00d faaf 	bl	8012364 <siprintf>
                    strcat(wifi.buffer_tx, buffer);
 8004e06:	f107 030c 	add.w	r3, r7, #12
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	485f      	ldr	r0, [pc, #380]	; (8004f8c <write_transport_packet_wifi+0x204>)
 8004e0e:	f00d fb0e 	bl	801242e <strcat>
                    len += strlen(buffer);
 8004e12:	f107 030c 	add.w	r3, r7, #12
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fb f9e4 	bl	80001e4 <strlen>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e22:	4413      	add	r3, r2
 8004e24:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
                break;
 8004e26:	e02f      	b.n	8004e88 <write_transport_packet_wifi+0x100>

                case 'c':
                {
                    int i = va_arg(args, int);
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	61fa      	str	r2, [r7, #28]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	623b      	str	r3, [r7, #32]
                    wifi.buffer_tx[len] = i;
 8004e32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e34:	6a3a      	ldr	r2, [r7, #32]
 8004e36:	b2d1      	uxtb	r1, r2
 8004e38:	4a57      	ldr	r2, [pc, #348]	; (8004f98 <write_transport_packet_wifi+0x210>)
 8004e3a:	4413      	add	r3, r2
 8004e3c:	460a      	mov	r2, r1
 8004e3e:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
                    len++;
 8004e42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e44:	3301      	adds	r3, #1
 8004e46:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
                break;
 8004e48:	e01e      	b.n	8004e88 <write_transport_packet_wifi+0x100>
                break;
                */

                case 's':
                {
                	char *ch = va_arg(args, char *);
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	1d1a      	adds	r2, r3, #4
 8004e4e:	61fa      	str	r2, [r7, #28]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	62bb      	str	r3, [r7, #40]	; 0x28
                	strcat(wifi.buffer_tx, ch);
 8004e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e56:	484d      	ldr	r0, [pc, #308]	; (8004f8c <write_transport_packet_wifi+0x204>)
 8004e58:	f00d fae9 	bl	801242e <strcat>
                	len += strlen(ch);
 8004e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e5e:	f7fb f9c1 	bl	80001e4 <strlen>
 8004e62:	4603      	mov	r3, r0
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e68:	4413      	add	r3, r2
 8004e6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
				}
                default:
                break;
 8004e6c:	e00b      	b.n	8004e86 <write_transport_packet_wifi+0xfe>
            }
		}

		else
		{
        	wifi.buffer_tx[len] = *format;
 8004e6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e72:	7811      	ldrb	r1, [r2, #0]
 8004e74:	4a48      	ldr	r2, [pc, #288]	; (8004f98 <write_transport_packet_wifi+0x210>)
 8004e76:	4413      	add	r3, r2
 8004e78:	460a      	mov	r2, r1
 8004e7a:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
        	len++;
 8004e7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e80:	3301      	adds	r3, #1
 8004e82:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004e84:	e000      	b.n	8004e88 <write_transport_packet_wifi+0x100>
                break;
 8004e86:	bf00      	nop
		}

		format++;
 8004e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(*format != '\0')
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d19a      	bne.n	8004dcc <write_transport_packet_wifi+0x44>
	//uint16_t len = strlen(wifi.buffer_tx);

	//status = write_transport_packet_size_wifi(len-3, timeout);
	//if(status != WiFi_OK) return status;

	sprintf(buffer,"%s=%d\r", SET_WRITE_TRANSPORT_PACKET_SIZE, len-3);
 8004e96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e98:	3b03      	subs	r3, #3
 8004e9a:	f107 000c 	add.w	r0, r7, #12
 8004e9e:	4a3f      	ldr	r2, [pc, #252]	; (8004f9c <write_transport_packet_wifi+0x214>)
 8004ea0:	493f      	ldr	r1, [pc, #252]	; (8004fa0 <write_transport_packet_wifi+0x218>)
 8004ea2:	f00d fa5f 	bl	8012364 <siprintf>
	if(strlen(buffer)&0x01)
 8004ea6:	f107 030c 	add.w	r3, r7, #12
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fb f99a 	bl	80001e4 <strlen>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <write_transport_packet_wifi+0x14a>
		buffer[strlen(buffer)] = '\n';
 8004eba:	f107 030c 	add.w	r3, r7, #12
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb f990 	bl	80001e4 <strlen>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004eca:	4413      	add	r3, r2
 8004ecc:	220a      	movs	r2, #10
 8004ece:	f803 2c24 	strb.w	r2, [r3, #-36]

	status = write_direct_wifi(buffer, strlen(buffer), timeout);
 8004ed2:	f107 030c 	add.w	r3, r7, #12
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fb f984 	bl	80001e4 <strlen>
 8004edc:	4603      	mov	r3, r0
 8004ede:	b299      	uxth	r1, r3
 8004ee0:	f107 030c 	add.w	r3, r7, #12
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fe36 	bl	8004b58 <write_direct_wifi>
 8004eec:	4603      	mov	r3, r0
 8004eee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if(status != WiFi_OK) return status;
 8004ef2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d002      	beq.n	8004f00 <write_transport_packet_wifi+0x178>
 8004efa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004efe:	e03d      	b.n	8004f7c <write_transport_packet_wifi+0x1f4>


	if(len&0x01)
 8004f00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <write_transport_packet_wifi+0x194>
	{
		wifi.buffer_tx[len] = 0x15;
 8004f0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f0c:	4a22      	ldr	r2, [pc, #136]	; (8004f98 <write_transport_packet_wifi+0x210>)
 8004f0e:	4413      	add	r3, r2
 8004f10:	2215      	movs	r2, #21
 8004f12:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
		len++;
 8004f16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f18:	3301      	adds	r3, #1
 8004f1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	if(wait_ready_wifi(timeout) != Timeout_OK)
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff fec1 	bl	8004ca4 <wait_ready_wifi>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d001      	beq.n	8004f2c <write_transport_packet_wifi+0x1a4>
		return Timeout_ERROR;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e027      	b.n	8004f7c <write_transport_packet_wifi+0x1f4>

	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 0);
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <write_transport_packet_wifi+0x210>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a19      	ldr	r2, [pc, #100]	; (8004f98 <write_transport_packet_wifi+0x210>)
 8004f32:	8a91      	ldrh	r1, [r2, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f002 fe26 	bl	8007b88 <HAL_GPIO_WritePin>
	vTaskDelay(1);
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	f00b fac5 	bl	80104cc <vTaskDelay>

	if(HAL_SPI_Transmit(wifi._hspi, (uint8_t *)wifi.buffer_tx,
 8004f42:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <write_transport_packet_wifi+0x210>)
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f48:	085b      	lsrs	r3, r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	490f      	ldr	r1, [pc, #60]	; (8004f8c <write_transport_packet_wifi+0x204>)
 8004f50:	f004 fa13 	bl	800937a <HAL_SPI_Transmit>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d004      	beq.n	8004f64 <write_transport_packet_wifi+0x1dc>
			len/2, timeout) != HAL_OK)
		return error_wifi(SPI_ERROR);
 8004f5a:	2002      	movs	r0, #2
 8004f5c:	f7ff fec4 	bl	8004ce8 <error_wifi>
 8004f60:	4603      	mov	r3, r0
 8004f62:	e00b      	b.n	8004f7c <write_transport_packet_wifi+0x1f4>

	HAL_GPIO_WritePin(wifi.CS_PORT, wifi.CS_PIN, 1);
 8004f64:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <write_transport_packet_wifi+0x210>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4a0b      	ldr	r2, [pc, #44]	; (8004f98 <write_transport_packet_wifi+0x210>)
 8004f6a:	8a91      	ldrh	r1, [r2, #20]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f002 fe0a 	bl	8007b88 <HAL_GPIO_WritePin>


	return read_wifi(timeout);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fe2d 	bl	8004bd4 <read_wifi>
 8004f7a:	4603      	mov	r3, r0

}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3734      	adds	r7, #52	; 0x34
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f86:	b003      	add	sp, #12
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	20010cc8 	.word	0x20010cc8
 8004f90:	08016e04 	.word	0x08016e04
 8004f94:	08016dfc 	.word	0x08016dfc
 8004f98:	200104ac 	.word	0x200104ac
 8004f9c:	08016e00 	.word	0x08016e00
 8004fa0:	08016e08 	.word	0x08016e08

08004fa4 <base64_encode>:
 *
 * 		  return : datos codificados en base 64
 */
char *base64_encode(const unsigned char *data, size_t input_length,
		size_t *output_length)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08c      	sub	sp, #48	; 0x30
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]

    *output_length = 4 * ((input_length + 2) / 3);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	3302      	adds	r3, #2
 8004fb4:	4a51      	ldr	r2, [pc, #324]	; (80050fc <base64_encode+0x158>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	009a      	lsls	r2, r3, #2
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]

    char *encoded_data = pvPortMalloc(*output_length);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f00c fc56 	bl	8011878 <pvPortMalloc>
 8004fcc:	6238      	str	r0, [r7, #32]
    if (encoded_data == NULL) return NULL;
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <base64_encode+0x34>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e08c      	b.n	80050f2 <base64_encode+0x14e>

    for (int i = 0, j = 0; i < input_length;)
 8004fd8:	2300      	movs	r3, #0
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fdc:	2300      	movs	r3, #0
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe0:	e064      	b.n	80050ac <base64_encode+0x108>
    {

        uint32_t octet_a = i < input_length ? (unsigned char)data[i++] : 0;
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d907      	bls.n	8004ffa <base64_encode+0x56>
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	e000      	b.n	8004ffc <base64_encode+0x58>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
        uint32_t octet_b = i < input_length ? (unsigned char)data[i++] : 0;
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	429a      	cmp	r2, r3
 8005004:	d907      	bls.n	8005016 <base64_encode+0x72>
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800500c:	461a      	mov	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	e000      	b.n	8005018 <base64_encode+0x74>
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
        uint32_t octet_c = i < input_length ? (unsigned char)data[i++] : 0;
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	d907      	bls.n	8005032 <base64_encode+0x8e>
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005028:	461a      	mov	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	e000      	b.n	8005034 <base64_encode+0x90>
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]

        uint32_t triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	041a      	lsls	r2, r3, #16
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	4413      	add	r3, r2
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4413      	add	r3, r2
 8005044:	613b      	str	r3, [r7, #16]

        encoded_data[j++] = encoding_table[(triple >> 3 * 6) & 0x3F];
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	0c9b      	lsrs	r3, r3, #18
 800504a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	1c59      	adds	r1, r3, #1
 8005052:	62b9      	str	r1, [r7, #40]	; 0x28
 8005054:	4619      	mov	r1, r3
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	440b      	add	r3, r1
 800505a:	4929      	ldr	r1, [pc, #164]	; (8005100 <base64_encode+0x15c>)
 800505c:	5c8a      	ldrb	r2, [r1, r2]
 800505e:	701a      	strb	r2, [r3, #0]
        encoded_data[j++] = encoding_table[(triple >> 2 * 6) & 0x3F];
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	0b1b      	lsrs	r3, r3, #12
 8005064:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	1c59      	adds	r1, r3, #1
 800506c:	62b9      	str	r1, [r7, #40]	; 0x28
 800506e:	4619      	mov	r1, r3
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	440b      	add	r3, r1
 8005074:	4922      	ldr	r1, [pc, #136]	; (8005100 <base64_encode+0x15c>)
 8005076:	5c8a      	ldrb	r2, [r1, r2]
 8005078:	701a      	strb	r2, [r3, #0]
        encoded_data[j++] = encoding_table[(triple >> 1 * 6) & 0x3F];
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	099b      	lsrs	r3, r3, #6
 800507e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	62b9      	str	r1, [r7, #40]	; 0x28
 8005088:	4619      	mov	r1, r3
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	440b      	add	r3, r1
 800508e:	491c      	ldr	r1, [pc, #112]	; (8005100 <base64_encode+0x15c>)
 8005090:	5c8a      	ldrb	r2, [r1, r2]
 8005092:	701a      	strb	r2, [r3, #0]
        encoded_data[j++] = encoding_table[(triple >> 0 * 6) & 0x3F];
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	1c59      	adds	r1, r3, #1
 800509e:	62b9      	str	r1, [r7, #40]	; 0x28
 80050a0:	4619      	mov	r1, r3
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	440b      	add	r3, r1
 80050a6:	4916      	ldr	r1, [pc, #88]	; (8005100 <base64_encode+0x15c>)
 80050a8:	5c8a      	ldrb	r2, [r1, r2]
 80050aa:	701a      	strb	r2, [r3, #0]
    for (int i = 0, j = 0; i < input_length;)
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d896      	bhi.n	8004fe2 <base64_encode+0x3e>
    }

    for (int i = 0; i < mod_table[input_length % 3]; i++)
 80050b4:	2300      	movs	r3, #0
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
 80050b8:	e00b      	b.n	80050d2 <base64_encode+0x12e>
        encoded_data[*output_length - 1 - i] = '=';
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	4413      	add	r3, r2
 80050c8:	223d      	movs	r2, #61	; 0x3d
 80050ca:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < mod_table[input_length % 3]; i++)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	3301      	adds	r3, #1
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	4b09      	ldr	r3, [pc, #36]	; (80050fc <base64_encode+0x158>)
 80050d6:	fba3 2301 	umull	r2, r3, r3, r1
 80050da:	085a      	lsrs	r2, r3, #1
 80050dc:	4613      	mov	r3, r2
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	4413      	add	r3, r2
 80050e2:	1aca      	subs	r2, r1, r3
 80050e4:	4b07      	ldr	r3, [pc, #28]	; (8005104 <base64_encode+0x160>)
 80050e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ec:	429a      	cmp	r2, r3
 80050ee:	dbe4      	blt.n	80050ba <base64_encode+0x116>

    return encoded_data;
 80050f0:	6a3b      	ldr	r3, [r7, #32]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3730      	adds	r7, #48	; 0x30
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	aaaaaaab 	.word	0xaaaaaaab
 8005100:	20000048 	.word	0x20000048
 8005104:	20000088 	.word	0x20000088

08005108 <str_copy>:

	str1[i] = '\0';
}

void str_copy(char *str1, char str2)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	70fb      	strb	r3, [r7, #3]
	uint16_t i=0;
 8005114:	2300      	movs	r3, #0
 8005116:	81fb      	strh	r3, [r7, #14]
	while(str1[i] != '\0')
 8005118:	e002      	b.n	8005120 <str_copy+0x18>
		i++;
 800511a:	89fb      	ldrh	r3, [r7, #14]
 800511c:	3301      	adds	r3, #1
 800511e:	81fb      	strh	r3, [r7, #14]
	while(str1[i] != '\0')
 8005120:	89fb      	ldrh	r3, [r7, #14]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1f6      	bne.n	800511a <str_copy+0x12>
	str1[i] = str2;
 800512c:	89fb      	ldrh	r3, [r7, #14]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	701a      	strb	r2, [r3, #0]
	str1[i+1] = '\0';
 8005136:	89fb      	ldrh	r3, [r7, #14]
 8005138:	3301      	adds	r3, #1
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <connect_wifi>:
 *   mode : modo de seguridad de conexion
 *timeout : tiempo maximo de la operacion
 */
wifi_status connect_wifi(char *_ssid, char *_pass, security_mode mode,
		uint32_t timeout)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	71fb      	strb	r3, [r7, #7]
	wifi_status status;
	char buffer;

	status = response_check_wifi(write_cmd_wifi(SET_NETWORK_SSID, _ssid, timeout));
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	4831      	ldr	r0, [pc, #196]	; (800522c <connect_wifi+0xdc>)
 8005166:	f7ff fbd7 	bl	8004918 <write_cmd_wifi>
 800516a:	4603      	mov	r3, r0
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fdf9 	bl	8004d64 <response_check_wifi>
 8005172:	4603      	mov	r3, r0
 8005174:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d001      	beq.n	8005180 <connect_wifi+0x30>
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	e050      	b.n	8005222 <connect_wifi+0xd2>
	status = response_check_wifi(write_cmd_wifi(SET_NETWORK_PASSPHRASE, _pass, timeout));
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	482a      	ldr	r0, [pc, #168]	; (8005230 <connect_wifi+0xe0>)
 8005186:	f7ff fbc7 	bl	8004918 <write_cmd_wifi>
 800518a:	4603      	mov	r3, r0
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fde9 	bl	8004d64 <response_check_wifi>
 8005192:	4603      	mov	r3, r0
 8005194:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d001      	beq.n	80051a0 <connect_wifi+0x50>
 800519c:	7dfb      	ldrb	r3, [r7, #23]
 800519e:	e040      	b.n	8005222 <connect_wifi+0xd2>

	switch(mode)
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	2b05      	cmp	r3, #5
 80051a4:	d820      	bhi.n	80051e8 <connect_wifi+0x98>
 80051a6:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <connect_wifi+0x5c>)
 80051a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ac:	080051c5 	.word	0x080051c5
 80051b0:	080051cb 	.word	0x080051cb
 80051b4:	080051d1 	.word	0x080051d1
 80051b8:	080051d7 	.word	0x080051d7
 80051bc:	080051dd 	.word	0x080051dd
 80051c0:	080051e3 	.word	0x080051e3
	{
	case Open:
		buffer = '0';
 80051c4:	2330      	movs	r3, #48	; 0x30
 80051c6:	75bb      	strb	r3, [r7, #22]
		break;
 80051c8:	e00e      	b.n	80051e8 <connect_wifi+0x98>
	case WEP:
		buffer = '1';
 80051ca:	2331      	movs	r3, #49	; 0x31
 80051cc:	75bb      	strb	r3, [r7, #22]
		break;
 80051ce:	e00b      	b.n	80051e8 <connect_wifi+0x98>
	case WPA:
		buffer = '2';
 80051d0:	2332      	movs	r3, #50	; 0x32
 80051d2:	75bb      	strb	r3, [r7, #22]
		break;
 80051d4:	e008      	b.n	80051e8 <connect_wifi+0x98>
	case WPA2:
		buffer = '3';
 80051d6:	2333      	movs	r3, #51	; 0x33
 80051d8:	75bb      	strb	r3, [r7, #22]
		break;
 80051da:	e005      	b.n	80051e8 <connect_wifi+0x98>
	case WPAandWPA2:
		buffer = '4';
 80051dc:	2334      	movs	r3, #52	; 0x34
 80051de:	75bb      	strb	r3, [r7, #22]
		break;
 80051e0:	e002      	b.n	80051e8 <connect_wifi+0x98>
	case WPA2_TKIP:
		buffer = '5';
 80051e2:	2335      	movs	r3, #53	; 0x35
 80051e4:	75bb      	strb	r3, [r7, #22]
		break;
 80051e6:	bf00      	nop
	}

	status = response_check_wifi(write_cmd_wifi(SET_NETWORK_SECURITY_TYPE, &buffer , timeout));
 80051e8:	f107 0316 	add.w	r3, r7, #22
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	4619      	mov	r1, r3
 80051f0:	4810      	ldr	r0, [pc, #64]	; (8005234 <connect_wifi+0xe4>)
 80051f2:	f7ff fb91 	bl	8004918 <write_cmd_wifi>
 80051f6:	4603      	mov	r3, r0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fdb3 	bl	8004d64 <response_check_wifi>
 80051fe:	4603      	mov	r3, r0
 8005200:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005202:	7dfb      	ldrb	r3, [r7, #23]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d001      	beq.n	800520c <connect_wifi+0xbc>
 8005208:	7dfb      	ldrb	r3, [r7, #23]
 800520a:	e00a      	b.n	8005222 <connect_wifi+0xd2>
	return error_check_wifi(write_cmd_wifi(JOIN_A_NETWORK, '\0', timeout), "\r\n[JOIN   ]");
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	2100      	movs	r1, #0
 8005210:	4809      	ldr	r0, [pc, #36]	; (8005238 <connect_wifi+0xe8>)
 8005212:	f7ff fb81 	bl	8004918 <write_cmd_wifi>
 8005216:	4603      	mov	r3, r0
 8005218:	4908      	ldr	r1, [pc, #32]	; (800523c <connect_wifi+0xec>)
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff fd78 	bl	8004d10 <error_check_wifi>
 8005220:	4603      	mov	r3, r0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	08016e10 	.word	0x08016e10
 8005230:	08016e14 	.word	0x08016e14
 8005234:	08016e18 	.word	0x08016e18
 8005238:	08016e1c 	.word	0x08016e1c
 800523c:	08016e20 	.word	0x08016e20

08005240 <rssi_soft_ap>:
 * timeout : tiempo maximo de la operacion
 *
 *  return : intensidad de la señal, si no esta conectado retorna 0
 */
int8_t rssi_soft_ap(uint32_t timeout)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	wifi_status status;

	status = write_cmd_wifi(GET_RSSS_OF_ASSOCIATED_NETWORK_ACCESS_POINT, '\0', timeout);
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	2100      	movs	r1, #0
 800524c:	481c      	ldr	r0, [pc, #112]	; (80052c0 <rssi_soft_ap+0x80>)
 800524e:	f7ff fb63 	bl	8004918 <write_cmd_wifi>
 8005252:	4603      	mov	r3, r0
 8005254:	737b      	strb	r3, [r7, #13]
	if(status != WiFi_OK) return status;
 8005256:	7b7b      	ldrb	r3, [r7, #13]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d002      	beq.n	8005262 <rssi_soft_ap+0x22>
 800525c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005260:	e02a      	b.n	80052b8 <rssi_soft_ap+0x78>
	char buffer_aux[4];
	memset(buffer_aux, '\0', 4);
 8005262:	f107 0308 	add.w	r3, r7, #8
 8005266:	2204      	movs	r2, #4
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f00c ff4e 	bl	801210c <memset>

	for(uint16_t i=2; i<MAX_RX_BUFFER_SIZE; i++)
 8005270:	2302      	movs	r3, #2
 8005272:	81fb      	strh	r3, [r7, #14]
 8005274:	e013      	b.n	800529e <rssi_soft_ap+0x5e>
	{
		if(wifi.buffer_rx[i]=='\r')
 8005276:	89fb      	ldrh	r3, [r7, #14]
 8005278:	4a12      	ldr	r2, [pc, #72]	; (80052c4 <rssi_soft_ap+0x84>)
 800527a:	4413      	add	r3, r2
 800527c:	7f1b      	ldrb	r3, [r3, #28]
 800527e:	2b0d      	cmp	r3, #13
 8005280:	d012      	beq.n	80052a8 <rssi_soft_ap+0x68>
			break;
		buffer_aux[i-2] = wifi.buffer_rx[i];
 8005282:	89fa      	ldrh	r2, [r7, #14]
 8005284:	89fb      	ldrh	r3, [r7, #14]
 8005286:	3b02      	subs	r3, #2
 8005288:	490e      	ldr	r1, [pc, #56]	; (80052c4 <rssi_soft_ap+0x84>)
 800528a:	440a      	add	r2, r1
 800528c:	7f12      	ldrb	r2, [r2, #28]
 800528e:	f107 0110 	add.w	r1, r7, #16
 8005292:	440b      	add	r3, r1
 8005294:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint16_t i=2; i<MAX_RX_BUFFER_SIZE; i++)
 8005298:	89fb      	ldrh	r3, [r7, #14]
 800529a:	3301      	adds	r3, #1
 800529c:	81fb      	strh	r3, [r7, #14]
 800529e:	89fb      	ldrh	r3, [r7, #14]
 80052a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a4:	d3e7      	bcc.n	8005276 <rssi_soft_ap+0x36>
 80052a6:	e000      	b.n	80052aa <rssi_soft_ap+0x6a>
			break;
 80052a8:	bf00      	nop
	}
	return atoi(buffer_aux);
 80052aa:	f107 0308 	add.w	r3, r7, #8
 80052ae:	4618      	mov	r0, r3
 80052b0:	f00c fccf 	bl	8011c52 <atoi>
 80052b4:	4603      	mov	r3, r0
 80052b6:	b25b      	sxtb	r3, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	08016e40 	.word	0x08016e40
 80052c4:	200104ac 	.word	0x200104ac

080052c8 <connect_smtp>:
 *   _host : dominio del servidor
 *   _port : puerto de conexion
 * timeout : tiempo maximo para la operacion
 */
wifi_status connect_smtp(char *_host, char *_port, uint32_t timeout)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
	wifi_status status;
	//char buffer[MAX_TX_BUFFER_SIZE];

	status = response_check_wifi(write_cmd_wifi(SET_TRANSPORT_PROTOCOL, "3", timeout));
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	492f      	ldr	r1, [pc, #188]	; (8005394 <connect_smtp+0xcc>)
 80052d8:	482f      	ldr	r0, [pc, #188]	; (8005398 <connect_smtp+0xd0>)
 80052da:	f7ff fb1d 	bl	8004918 <write_cmd_wifi>
 80052de:	4603      	mov	r3, r0
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fd3f 	bl	8004d64 <response_check_wifi>
 80052e6:	4603      	mov	r3, r0
 80052e8:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d001      	beq.n	80052f4 <connect_smtp+0x2c>
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	e04a      	b.n	800538a <connect_smtp+0xc2>
	status = response_check_wifi(write_cmd_wifi(SET_TRANSPORT_REMOTE_PORT_NUMBER, _port, timeout));
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	68b9      	ldr	r1, [r7, #8]
 80052f8:	4828      	ldr	r0, [pc, #160]	; (800539c <connect_smtp+0xd4>)
 80052fa:	f7ff fb0d 	bl	8004918 <write_cmd_wifi>
 80052fe:	4603      	mov	r3, r0
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff fd2f 	bl	8004d64 <response_check_wifi>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d001      	beq.n	8005314 <connect_smtp+0x4c>
 8005310:	7dfb      	ldrb	r3, [r7, #23]
 8005312:	e03a      	b.n	800538a <connect_smtp+0xc2>
	status = write_cmd_wifi(DNS_LOOKUP, _host, timeout);
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	4821      	ldr	r0, [pc, #132]	; (80053a0 <connect_smtp+0xd8>)
 800531a:	f7ff fafd 	bl	8004918 <write_cmd_wifi>
 800531e:	4603      	mov	r3, r0
 8005320:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d001      	beq.n	800532c <connect_smtp+0x64>
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	e02e      	b.n	800538a <connect_smtp+0xc2>
	status = write_cmd_wifi(STOP_START_TRANSPORT_CLIENT, "1", timeout);
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	491d      	ldr	r1, [pc, #116]	; (80053a4 <connect_smtp+0xdc>)
 8005330:	481d      	ldr	r0, [pc, #116]	; (80053a8 <connect_smtp+0xe0>)
 8005332:	f7ff faf1 	bl	8004918 <write_cmd_wifi>
 8005336:	4603      	mov	r3, r0
 8005338:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 800533a:	7dfb      	ldrb	r3, [r7, #23]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d001      	beq.n	8005344 <connect_smtp+0x7c>
 8005340:	7dfb      	ldrb	r3, [r7, #23]
 8005342:	e022      	b.n	800538a <connect_smtp+0xc2>
	vTaskDelay(10);
 8005344:	200a      	movs	r0, #10
 8005346:	f00b f8c1 	bl	80104cc <vTaskDelay>
	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	2100      	movs	r1, #0
 800534e:	4817      	ldr	r0, [pc, #92]	; (80053ac <connect_smtp+0xe4>)
 8005350:	f7ff fae2 	bl	8004918 <write_cmd_wifi>
 8005354:	4603      	mov	r3, r0
 8005356:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005358:	7dfb      	ldrb	r3, [r7, #23]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d001      	beq.n	8005362 <connect_smtp+0x9a>
 800535e:	7dfb      	ldrb	r3, [r7, #23]
 8005360:	e013      	b.n	800538a <connect_smtp+0xc2>
	status = write_data_wifi(buffer, timeout);
	if(status != WiFi_OK) return status;
	vTaskDelay(10);
	*/

	status = write_transport_packet_wifi(timeout, "HELO %s\r\n", _host);
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4912      	ldr	r1, [pc, #72]	; (80053b0 <connect_smtp+0xe8>)
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fd0e 	bl	8004d88 <write_transport_packet_wifi>
 800536c:	4603      	mov	r3, r0
 800536e:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d001      	beq.n	800537a <connect_smtp+0xb2>
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	e007      	b.n	800538a <connect_smtp+0xc2>

	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	2100      	movs	r1, #0
 800537e:	480b      	ldr	r0, [pc, #44]	; (80053ac <connect_smtp+0xe4>)
 8005380:	f7ff faca 	bl	8004918 <write_cmd_wifi>
 8005384:	4603      	mov	r3, r0
 8005386:	75fb      	strb	r3, [r7, #23]
	return status;
 8005388:	7dfb      	ldrb	r3, [r7, #23]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	08016e94 	.word	0x08016e94
 8005398:	08016e48 	.word	0x08016e48
 800539c:	08016e50 	.word	0x08016e50
 80053a0:	08016e4c 	.word	0x08016e4c
 80053a4:	08016e84 	.word	0x08016e84
 80053a8:	08016e88 	.word	0x08016e88
 80053ac:	08016e98 	.word	0x08016e98
 80053b0:	08016e9c 	.word	0x08016e9c

080053b4 <open_smtp>:
 *   _user : nombre de usuario
 *   _pass : constraseña
 * timeout : tiempo maximo para la operacion
 */
wifi_status open_smtp(char *_user, char *_pass, uint32_t timeout)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
	sprintf(buffer, "S0\rauth login\r\n");
	status = write_data_wifi(buffer, timeout);
	if(status != WiFi_OK) return status;
	vTaskDelay(10);
	*/
	status = write_transport_packet_wifi(timeout, "auth login\r\n");
 80053c0:	4933      	ldr	r1, [pc, #204]	; (8005490 <open_smtp+0xdc>)
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fce0 	bl	8004d88 <write_transport_packet_wifi>
 80053c8:	4603      	mov	r3, r0
 80053ca:	77fb      	strb	r3, [r7, #31]
	if(status != WiFi_OK) return status;
 80053cc:	7ffb      	ldrb	r3, [r7, #31]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d001      	beq.n	80053d6 <open_smtp+0x22>
 80053d2:	7ffb      	ldrb	r3, [r7, #31]
 80053d4:	e058      	b.n	8005488 <open_smtp+0xd4>
	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	2100      	movs	r1, #0
 80053da:	482e      	ldr	r0, [pc, #184]	; (8005494 <open_smtp+0xe0>)
 80053dc:	f7ff fa9c 	bl	8004918 <write_cmd_wifi>
 80053e0:	4603      	mov	r3, r0
 80053e2:	77fb      	strb	r3, [r7, #31]
	if(status != WiFi_OK) return status;
 80053e4:	7ffb      	ldrb	r3, [r7, #31]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d001      	beq.n	80053ee <open_smtp+0x3a>
 80053ea:	7ffb      	ldrb	r3, [r7, #31]
 80053ec:	e04c      	b.n	8005488 <open_smtp+0xd4>


	uint16_t base64_len;
	char *base64_user = base64_encode(_user, strlen(_user), &base64_len);
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7fa fef8 	bl	80001e4 <strlen>
 80053f4:	4601      	mov	r1, r0
 80053f6:	f107 0312 	add.w	r3, r7, #18
 80053fa:	461a      	mov	r2, r3
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff fdd1 	bl	8004fa4 <base64_encode>
 8005402:	61b8      	str	r0, [r7, #24]
	str_add(buffer, "\r\n", 2);
	status = write_data_wifi(buffer, timeout);
	if(status != WiFi_OK) return status;
	vTaskDelay(10);
	*/
	status = write_transport_packet_wifi(timeout, "%s\r\n", base64_user);
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4924      	ldr	r1, [pc, #144]	; (8005498 <open_smtp+0xe4>)
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fcbd 	bl	8004d88 <write_transport_packet_wifi>
 800540e:	4603      	mov	r3, r0
 8005410:	77fb      	strb	r3, [r7, #31]
	if(status != WiFi_OK) return status;
 8005412:	7ffb      	ldrb	r3, [r7, #31]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d001      	beq.n	800541c <open_smtp+0x68>
 8005418:	7ffb      	ldrb	r3, [r7, #31]
 800541a:	e035      	b.n	8005488 <open_smtp+0xd4>

	status = write_cmd_wifi(READ_TRANSPORT_DATA, "\0", timeout);
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	491f      	ldr	r1, [pc, #124]	; (800549c <open_smtp+0xe8>)
 8005420:	481c      	ldr	r0, [pc, #112]	; (8005494 <open_smtp+0xe0>)
 8005422:	f7ff fa79 	bl	8004918 <write_cmd_wifi>
 8005426:	4603      	mov	r3, r0
 8005428:	77fb      	strb	r3, [r7, #31]
	vPortFree(base64_user);
 800542a:	69b8      	ldr	r0, [r7, #24]
 800542c:	f00c faf0 	bl	8011a10 <vPortFree>
	if(status != WiFi_OK) return status;
 8005430:	7ffb      	ldrb	r3, [r7, #31]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d001      	beq.n	800543a <open_smtp+0x86>
 8005436:	7ffb      	ldrb	r3, [r7, #31]
 8005438:	e026      	b.n	8005488 <open_smtp+0xd4>


	char *base64_pass = base64_encode(_pass, strlen(_pass), &base64_len);
 800543a:	68b8      	ldr	r0, [r7, #8]
 800543c:	f7fa fed2 	bl	80001e4 <strlen>
 8005440:	4601      	mov	r1, r0
 8005442:	f107 0312 	add.w	r3, r7, #18
 8005446:	461a      	mov	r2, r3
 8005448:	68b8      	ldr	r0, [r7, #8]
 800544a:	f7ff fdab 	bl	8004fa4 <base64_encode>
 800544e:	6178      	str	r0, [r7, #20]
	str_add(buffer, "\r\n", 2);
	status = write_data_wifi(buffer, timeout);
	if(status != WiFi_OK) return status;
	vTaskDelay(10);
	*/
	status = write_transport_packet_wifi(timeout, "%s\r\n", base64_pass);
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4911      	ldr	r1, [pc, #68]	; (8005498 <open_smtp+0xe4>)
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff fc97 	bl	8004d88 <write_transport_packet_wifi>
 800545a:	4603      	mov	r3, r0
 800545c:	77fb      	strb	r3, [r7, #31]
	if(status != WiFi_OK) return status;
 800545e:	7ffb      	ldrb	r3, [r7, #31]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d001      	beq.n	8005468 <open_smtp+0xb4>
 8005464:	7ffb      	ldrb	r3, [r7, #31]
 8005466:	e00f      	b.n	8005488 <open_smtp+0xd4>

	status = write_cmd_wifi(READ_TRANSPORT_DATA, "\0", timeout);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	490c      	ldr	r1, [pc, #48]	; (800549c <open_smtp+0xe8>)
 800546c:	4809      	ldr	r0, [pc, #36]	; (8005494 <open_smtp+0xe0>)
 800546e:	f7ff fa53 	bl	8004918 <write_cmd_wifi>
 8005472:	4603      	mov	r3, r0
 8005474:	77fb      	strb	r3, [r7, #31]
	vPortFree(base64_pass);
 8005476:	6978      	ldr	r0, [r7, #20]
 8005478:	f00c faca 	bl	8011a10 <vPortFree>
	if(status != WiFi_OK) return status;
 800547c:	7ffb      	ldrb	r3, [r7, #31]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d001      	beq.n	8005486 <open_smtp+0xd2>
 8005482:	7ffb      	ldrb	r3, [r7, #31]
 8005484:	e000      	b.n	8005488 <open_smtp+0xd4>

	return status;
 8005486:	7ffb      	ldrb	r3, [r7, #31]

}
 8005488:	4618      	mov	r0, r3
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	08016ea8 	.word	0x08016ea8
 8005494:	08016e98 	.word	0x08016e98
 8005498:	08016eb8 	.word	0x08016eb8
 800549c:	08016ec0 	.word	0x08016ec0

080054a0 <send_email_smtp>:
 *      data : mensaje
 *   timeout : tiempo maximo para la operacion
 */
wifi_status send_email_smtp(char *sender, char *recipient, char *subject,
		char *data, uint32_t timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
	sprintf(buffer, "S0\rmail FROM:<%s>\r\n", sender);
	status = write_data_wifi(buffer, timeout);
	if(status != WiFi_OK) return status;
	vTaskDelay(10);
	*/
	status = write_transport_packet_wifi(timeout, "mail FROM:<%s>\r\n", sender);
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4948      	ldr	r1, [pc, #288]	; (80055d4 <send_email_smtp+0x134>)
 80054b2:	6a38      	ldr	r0, [r7, #32]
 80054b4:	f7ff fc68 	bl	8004d88 <write_transport_packet_wifi>
 80054b8:	4603      	mov	r3, r0
 80054ba:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d001      	beq.n	80054c6 <send_email_smtp+0x26>
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	e082      	b.n	80055cc <send_email_smtp+0x12c>

	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 80054c6:	6a3a      	ldr	r2, [r7, #32]
 80054c8:	2100      	movs	r1, #0
 80054ca:	4843      	ldr	r0, [pc, #268]	; (80055d8 <send_email_smtp+0x138>)
 80054cc:	f7ff fa24 	bl	8004918 <write_cmd_wifi>
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d001      	beq.n	80054de <send_email_smtp+0x3e>
 80054da:	7dfb      	ldrb	r3, [r7, #23]
 80054dc:	e076      	b.n	80055cc <send_email_smtp+0x12c>
	sprintf(buffer, "S0\rrcpt TO:<%s>\r\n", recipient);
	status = write_data_wifi(buffer, timeout);
	if(status != WiFi_OK) return status;
	vTaskDelay(10);
	*/
	status = write_transport_packet_wifi(timeout, "rcpt TO:<%s>\r\n", recipient);
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	493e      	ldr	r1, [pc, #248]	; (80055dc <send_email_smtp+0x13c>)
 80054e2:	6a38      	ldr	r0, [r7, #32]
 80054e4:	f7ff fc50 	bl	8004d88 <write_transport_packet_wifi>
 80054e8:	4603      	mov	r3, r0
 80054ea:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d001      	beq.n	80054f6 <send_email_smtp+0x56>
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	e06a      	b.n	80055cc <send_email_smtp+0x12c>

	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 80054f6:	6a3a      	ldr	r2, [r7, #32]
 80054f8:	2100      	movs	r1, #0
 80054fa:	4837      	ldr	r0, [pc, #220]	; (80055d8 <send_email_smtp+0x138>)
 80054fc:	f7ff fa0c 	bl	8004918 <write_cmd_wifi>
 8005500:	4603      	mov	r3, r0
 8005502:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005504:	7dfb      	ldrb	r3, [r7, #23]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d001      	beq.n	800550e <send_email_smtp+0x6e>
 800550a:	7dfb      	ldrb	r3, [r7, #23]
 800550c:	e05e      	b.n	80055cc <send_email_smtp+0x12c>
	sprintf(buffer, "S0\rdata\r\n");
	status = write_data_wifi(buffer, timeout);
	if(status != WiFi_OK) return status;
	vTaskDelay(10);
	*/
	status = write_transport_packet_wifi(timeout, "data\r\n");
 800550e:	4934      	ldr	r1, [pc, #208]	; (80055e0 <send_email_smtp+0x140>)
 8005510:	6a38      	ldr	r0, [r7, #32]
 8005512:	f7ff fc39 	bl	8004d88 <write_transport_packet_wifi>
 8005516:	4603      	mov	r3, r0
 8005518:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 800551a:	7dfb      	ldrb	r3, [r7, #23]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d001      	beq.n	8005524 <send_email_smtp+0x84>
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	e053      	b.n	80055cc <send_email_smtp+0x12c>
	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	2100      	movs	r1, #0
 8005528:	482b      	ldr	r0, [pc, #172]	; (80055d8 <send_email_smtp+0x138>)
 800552a:	f7ff f9f5 	bl	8004918 <write_cmd_wifi>
 800552e:	4603      	mov	r3, r0
 8005530:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005532:	7dfb      	ldrb	r3, [r7, #23]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <send_email_smtp+0x9c>
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	e047      	b.n	80055cc <send_email_smtp+0x12c>
	sprintf(buffer, "S0\rSubject: %s\r\n", subject);
	status = write_data_wifi(buffer, timeout);
	if(status != WiFi_OK) return status;
	vTaskDelay(10);
	*/
	status = write_transport_packet_wifi(timeout, "Subject: %s\r\n", subject);
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	4929      	ldr	r1, [pc, #164]	; (80055e4 <send_email_smtp+0x144>)
 8005540:	6a38      	ldr	r0, [r7, #32]
 8005542:	f7ff fc21 	bl	8004d88 <write_transport_packet_wifi>
 8005546:	4603      	mov	r3, r0
 8005548:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 800554a:	7dfb      	ldrb	r3, [r7, #23]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d001      	beq.n	8005554 <send_email_smtp+0xb4>
 8005550:	7dfb      	ldrb	r3, [r7, #23]
 8005552:	e03b      	b.n	80055cc <send_email_smtp+0x12c>
	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 8005554:	6a3a      	ldr	r2, [r7, #32]
 8005556:	2100      	movs	r1, #0
 8005558:	481f      	ldr	r0, [pc, #124]	; (80055d8 <send_email_smtp+0x138>)
 800555a:	f7ff f9dd 	bl	8004918 <write_cmd_wifi>
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005562:	7dfb      	ldrb	r3, [r7, #23]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d001      	beq.n	800556c <send_email_smtp+0xcc>
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	e02f      	b.n	80055cc <send_email_smtp+0x12c>
	sprintf(buffer, "S0\r%s\r\n", data);
	status = write_data_wifi(buffer, timeout);
	if(status != WiFi_OK) return status;
	vTaskDelay(10);
	*/
	status = write_transport_packet_wifi(timeout, "%s\r\n", data);
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	491e      	ldr	r1, [pc, #120]	; (80055e8 <send_email_smtp+0x148>)
 8005570:	6a38      	ldr	r0, [r7, #32]
 8005572:	f7ff fc09 	bl	8004d88 <write_transport_packet_wifi>
 8005576:	4603      	mov	r3, r0
 8005578:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 800557a:	7dfb      	ldrb	r3, [r7, #23]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d001      	beq.n	8005584 <send_email_smtp+0xe4>
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	e023      	b.n	80055cc <send_email_smtp+0x12c>
	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	2100      	movs	r1, #0
 8005588:	4813      	ldr	r0, [pc, #76]	; (80055d8 <send_email_smtp+0x138>)
 800558a:	f7ff f9c5 	bl	8004918 <write_cmd_wifi>
 800558e:	4603      	mov	r3, r0
 8005590:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d001      	beq.n	800559c <send_email_smtp+0xfc>
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	e017      	b.n	80055cc <send_email_smtp+0x12c>
	if(status != WiFi_OK) return status;
	status = write_data_wifi("S0\r.\r\n", timeout);
	if(status != WiFi_OK) return status;
	vTaskDelay(10);
	*/
	status = write_transport_packet_wifi(timeout, ".\r\n");
 800559c:	4913      	ldr	r1, [pc, #76]	; (80055ec <send_email_smtp+0x14c>)
 800559e:	6a38      	ldr	r0, [r7, #32]
 80055a0:	f7ff fbf2 	bl	8004d88 <write_transport_packet_wifi>
 80055a4:	4603      	mov	r3, r0
 80055a6:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d001      	beq.n	80055b2 <send_email_smtp+0x112>
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	e00c      	b.n	80055cc <send_email_smtp+0x12c>
	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 80055b2:	6a3a      	ldr	r2, [r7, #32]
 80055b4:	2100      	movs	r1, #0
 80055b6:	4808      	ldr	r0, [pc, #32]	; (80055d8 <send_email_smtp+0x138>)
 80055b8:	f7ff f9ae 	bl	8004918 <write_cmd_wifi>
 80055bc:	4603      	mov	r3, r0
 80055be:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d001      	beq.n	80055ca <send_email_smtp+0x12a>
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	e000      	b.n	80055cc <send_email_smtp+0x12c>

	return status;
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	08016ec4 	.word	0x08016ec4
 80055d8:	08016e98 	.word	0x08016e98
 80055dc:	08016ed8 	.word	0x08016ed8
 80055e0:	08016ee8 	.word	0x08016ee8
 80055e4:	08016ef0 	.word	0x08016ef0
 80055e8:	08016eb8 	.word	0x08016eb8
 80055ec:	08016f00 	.word	0x08016f00

080055f0 <close_smtp>:

/*
 * Termina la conexion con el cliente de correo (saliente)
 */
wifi_status close_smtp(uint32_t timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	status = write_data_wifi("S0\rquit\r\n", timeout);
	if(status != WiFi_OK) return status;
	vTaskDelay(10);
	*/

	status = write_transport_packet_wifi(timeout, "quit\r\n");
 80055f8:	4912      	ldr	r1, [pc, #72]	; (8005644 <close_smtp+0x54>)
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff fbc4 	bl	8004d88 <write_transport_packet_wifi>
 8005600:	4603      	mov	r3, r0
 8005602:	73fb      	strb	r3, [r7, #15]
	if(status != WiFi_OK) return status;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d001      	beq.n	800560e <close_smtp+0x1e>
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	e015      	b.n	800563a <close_smtp+0x4a>
	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	2100      	movs	r1, #0
 8005612:	480d      	ldr	r0, [pc, #52]	; (8005648 <close_smtp+0x58>)
 8005614:	f7ff f980 	bl	8004918 <write_cmd_wifi>
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]
	if(status != WiFi_OK) return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d001      	beq.n	8005626 <close_smtp+0x36>
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	e009      	b.n	800563a <close_smtp+0x4a>

	return response_check_wifi(write_cmd_wifi(STOP_START_TRANSPORT_CLIENT, "0", timeout));
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4908      	ldr	r1, [pc, #32]	; (800564c <close_smtp+0x5c>)
 800562a:	4809      	ldr	r0, [pc, #36]	; (8005650 <close_smtp+0x60>)
 800562c:	f7ff f974 	bl	8004918 <write_cmd_wifi>
 8005630:	4603      	mov	r3, r0
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff fb96 	bl	8004d64 <response_check_wifi>
 8005638:	4603      	mov	r3, r0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	08016f04 	.word	0x08016f04
 8005648:	08016e98 	.word	0x08016e98
 800564c:	08016e2c 	.word	0x08016e2c
 8005650:	08016e88 	.word	0x08016e88

08005654 <connect_sntp>:
 *   _host : dominio del servidor
 *   _port : puerto de conexion
 * timeout : tiempo maximo para la operacion
 */
wifi_status connect_sntp(char *_host, char *_port, uint32_t timeout)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
	wifi_status status;

	status = response_check_wifi(write_cmd_wifi(SET_TRANSPORT_PROTOCOL, "1", timeout));
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	491c      	ldr	r1, [pc, #112]	; (80056d4 <connect_sntp+0x80>)
 8005664:	481c      	ldr	r0, [pc, #112]	; (80056d8 <connect_sntp+0x84>)
 8005666:	f7ff f957 	bl	8004918 <write_cmd_wifi>
 800566a:	4603      	mov	r3, r0
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fb79 	bl	8004d64 <response_check_wifi>
 8005672:	4603      	mov	r3, r0
 8005674:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005676:	7dfb      	ldrb	r3, [r7, #23]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d001      	beq.n	8005680 <connect_sntp+0x2c>
 800567c:	7dfb      	ldrb	r3, [r7, #23]
 800567e:	e025      	b.n	80056cc <connect_sntp+0x78>
	status = response_check_wifi(write_cmd_wifi(SET_TRANSPORT_REMOTE_PORT_NUMBER, _port, timeout));
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	4815      	ldr	r0, [pc, #84]	; (80056dc <connect_sntp+0x88>)
 8005686:	f7ff f947 	bl	8004918 <write_cmd_wifi>
 800568a:	4603      	mov	r3, r0
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff fb69 	bl	8004d64 <response_check_wifi>
 8005692:	4603      	mov	r3, r0
 8005694:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d001      	beq.n	80056a0 <connect_sntp+0x4c>
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	e015      	b.n	80056cc <connect_sntp+0x78>
	status = write_cmd_wifi(DNS_LOOKUP, _host, timeout);
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	480e      	ldr	r0, [pc, #56]	; (80056e0 <connect_sntp+0x8c>)
 80056a6:	f7ff f937 	bl	8004918 <write_cmd_wifi>
 80056aa:	4603      	mov	r3, r0
 80056ac:	75fb      	strb	r3, [r7, #23]
	if(status != WiFi_OK) return status;
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d001      	beq.n	80056b8 <connect_sntp+0x64>
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
 80056b6:	e009      	b.n	80056cc <connect_sntp+0x78>
	return response_check_wifi(write_cmd_wifi(STOP_START_TRANSPORT_CLIENT, "1", timeout));
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4906      	ldr	r1, [pc, #24]	; (80056d4 <connect_sntp+0x80>)
 80056bc:	4809      	ldr	r0, [pc, #36]	; (80056e4 <connect_sntp+0x90>)
 80056be:	f7ff f92b 	bl	8004918 <write_cmd_wifi>
 80056c2:	4603      	mov	r3, r0
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff fb4d 	bl	8004d64 <response_check_wifi>
 80056ca:	4603      	mov	r3, r0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	08016e84 	.word	0x08016e84
 80056d8:	08016e48 	.word	0x08016e48
 80056dc:	08016e50 	.word	0x08016e50
 80056e0:	08016e4c 	.word	0x08016e4c
 80056e4:	08016e88 	.word	0x08016e88

080056e8 <get_time_sntp>:
 * Obtiene el tiempo en formato unix de la red
 * unix_time : tiempo en segundos de la red en formato unix
 *   timeout : tiempo maximo para la operacion
 */
wifi_status get_time_sntp(time_t *unix_time, uint32_t timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b090      	sub	sp, #64	; 0x40
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
	wifi_status status;
	char buffer[PACKET_SIZE_NTP+3];

	sprintf(buffer, "%d", PACKET_SIZE_NTP);
 80056f2:	f107 030c 	add.w	r3, r7, #12
 80056f6:	2230      	movs	r2, #48	; 0x30
 80056f8:	493b      	ldr	r1, [pc, #236]	; (80057e8 <get_time_sntp+0x100>)
 80056fa:	4618      	mov	r0, r3
 80056fc:	f00c fe32 	bl	8012364 <siprintf>
	status = response_check_wifi(write_cmd_wifi(SET_WRITE_TRANSPORT_PACKET_SIZE, buffer, timeout));
 8005700:	f107 030c 	add.w	r3, r7, #12
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	4619      	mov	r1, r3
 8005708:	4838      	ldr	r0, [pc, #224]	; (80057ec <get_time_sntp+0x104>)
 800570a:	f7ff f905 	bl	8004918 <write_cmd_wifi>
 800570e:	4603      	mov	r3, r0
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fb27 	bl	8004d64 <response_check_wifi>
 8005716:	4603      	mov	r3, r0
 8005718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(status != WiFi_OK) return status;
 800571c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005720:	2b01      	cmp	r3, #1
 8005722:	d002      	beq.n	800572a <get_time_sntp+0x42>
 8005724:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005728:	e059      	b.n	80057de <get_time_sntp+0xf6>

	memset(buffer, 0, PACKET_SIZE_NTP);
 800572a:	f107 030c 	add.w	r3, r7, #12
 800572e:	2230      	movs	r2, #48	; 0x30
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f00c fcea 	bl	801210c <memset>

	buffer[0] = 'S';
 8005738:	2353      	movs	r3, #83	; 0x53
 800573a:	733b      	strb	r3, [r7, #12]
	buffer[1] = '0';
 800573c:	2330      	movs	r3, #48	; 0x30
 800573e:	737b      	strb	r3, [r7, #13]
	buffer[2] = '\r';
 8005740:	230d      	movs	r3, #13
 8005742:	73bb      	strb	r3, [r7, #14]
	buffer[3] = 0b11100011;
 8005744:	23e3      	movs	r3, #227	; 0xe3
 8005746:	73fb      	strb	r3, [r7, #15]
	buffer[4] = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	743b      	strb	r3, [r7, #16]
	buffer[5] = 6;
 800574c:	2306      	movs	r3, #6
 800574e:	747b      	strb	r3, [r7, #17]
	buffer[6] = 0xEC;
 8005750:	23ec      	movs	r3, #236	; 0xec
 8005752:	74bb      	strb	r3, [r7, #18]

	buffer[15]  = 49;
 8005754:	2331      	movs	r3, #49	; 0x31
 8005756:	76fb      	strb	r3, [r7, #27]
	buffer[16]  = 0x4E;
 8005758:	234e      	movs	r3, #78	; 0x4e
 800575a:	773b      	strb	r3, [r7, #28]
	buffer[17]  = 49;
 800575c:	2331      	movs	r3, #49	; 0x31
 800575e:	777b      	strb	r3, [r7, #29]
	buffer[18]  = 52;
 8005760:	2334      	movs	r3, #52	; 0x34
 8005762:	77bb      	strb	r3, [r7, #30]

	status = write_data_size_wifi(buffer, PACKET_SIZE_NTP+3, timeout);
 8005764:	f107 030c 	add.w	r3, r7, #12
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	2133      	movs	r1, #51	; 0x33
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff f991 	bl	8004a94 <write_data_size_wifi>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(status != WiFi_OK) return status;
 8005778:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800577c:	2b01      	cmp	r3, #1
 800577e:	d002      	beq.n	8005786 <get_time_sntp+0x9e>
 8005780:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005784:	e02b      	b.n	80057de <get_time_sntp+0xf6>
	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	2100      	movs	r1, #0
 800578a:	4819      	ldr	r0, [pc, #100]	; (80057f0 <get_time_sntp+0x108>)
 800578c:	f7ff f8c4 	bl	8004918 <write_cmd_wifi>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(status != WiFi_OK) return status;
 8005796:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800579a:	2b01      	cmp	r3, #1
 800579c:	d002      	beq.n	80057a4 <get_time_sntp+0xbc>
 800579e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057a2:	e01c      	b.n	80057de <get_time_sntp+0xf6>

	*unix_time = ((uint8_t)wifi.buffer_rx[42]<<24|(uint8_t)wifi.buffer_rx[43]<<16
 80057a4:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <get_time_sntp+0x10c>)
 80057a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80057aa:	061a      	lsls	r2, r3, #24
 80057ac:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <get_time_sntp+0x10c>)
 80057ae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	431a      	orrs	r2, r3
			|(uint8_t)wifi.buffer_rx[44]<<8|(uint8_t)wifi.buffer_rx[45])-2208988800UL;
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <get_time_sntp+0x10c>)
 80057b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	4313      	orrs	r3, r2
 80057c0:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <get_time_sntp+0x10c>)
 80057c2:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 80057c6:	4313      	orrs	r3, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <get_time_sntp+0x110>)
 80057cc:	4413      	add	r3, r2
 80057ce:	461a      	mov	r2, r3
 80057d0:	f04f 0300 	mov.w	r3, #0
	*unix_time = ((uint8_t)wifi.buffer_rx[42]<<24|(uint8_t)wifi.buffer_rx[43]<<16
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	e9c1 2300 	strd	r2, r3, [r1]

	return status;
 80057da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 80057de:	4618      	mov	r0, r3
 80057e0:	3740      	adds	r7, #64	; 0x40
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	08016dfc 	.word	0x08016dfc
 80057ec:	08016e00 	.word	0x08016e00
 80057f0:	08016e98 	.word	0x08016e98
 80057f4:	200104ac 	.word	0x200104ac
 80057f8:	7c558180 	.word	0x7c558180

080057fc <disconnect_sntp>:

/*
 * Termina la conexion con el cliente de correo (entrante)
 */
wifi_status disconnect_sntp(uint32_t timeout)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	return response_check_wifi(write_cmd_wifi(STOP_START_TRANSPORT_CLIENT, "0", timeout));
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4906      	ldr	r1, [pc, #24]	; (8005820 <disconnect_sntp+0x24>)
 8005808:	4806      	ldr	r0, [pc, #24]	; (8005824 <disconnect_sntp+0x28>)
 800580a:	f7ff f885 	bl	8004918 <write_cmd_wifi>
 800580e:	4603      	mov	r3, r0
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff faa7 	bl	8004d64 <response_check_wifi>
 8005816:	4603      	mov	r3, r0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	08016e2c 	.word	0x08016e2c
 8005824:	08016e88 	.word	0x08016e88

08005828 <http_perform_as_stream_wheather>:
#define WHEATER_PORT						"80"
#define WHEATHER_ID							"f18ad0e6"
#define WEATHER_API_KEY						"16fb92203de55d70a4f397668c117d21"
#endif
wifi_status http_perform_as_stream_wheather(weather_info_t *info, char *location, uint32_t timeout)//wifi_status check_wheater(char *location, uint32_t timeout)
{
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800582e:	af02      	add	r7, sp, #8
 8005830:	f107 030c 	add.w	r3, r7, #12
 8005834:	6018      	str	r0, [r3, #0]
 8005836:	f107 0308 	add.w	r3, r7, #8
 800583a:	6019      	str	r1, [r3, #0]
 800583c:	1d3b      	adds	r3, r7, #4
 800583e:	601a      	str	r2, [r3, #0]
	wifi_status status;
	char buffer[MAX_TX_BUFFER_SIZE];

	status = write_cmd_wifi(SET_TRANSPORT_PROTOCOL, "0", timeout);
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	49c1      	ldr	r1, [pc, #772]	; (8005b4c <http_perform_as_stream_wheather+0x324>)
 8005846:	48c2      	ldr	r0, [pc, #776]	; (8005b50 <http_perform_as_stream_wheather+0x328>)
 8005848:	f7ff f866 	bl	8004918 <write_cmd_wifi>
 800584c:	4603      	mov	r3, r0
 800584e:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
	if(status != WiFi_OK) return status;
 8005852:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 8005856:	2b01      	cmp	r3, #1
 8005858:	d002      	beq.n	8005860 <http_perform_as_stream_wheather+0x38>
 800585a:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 800585e:	e16f      	b.n	8005b40 <http_perform_as_stream_wheather+0x318>
	status = write_cmd_wifi(SET_TRANSPORT_REMOTE_PORT_NUMBER, WHEATER_PORT, timeout);
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	49bb      	ldr	r1, [pc, #748]	; (8005b54 <http_perform_as_stream_wheather+0x32c>)
 8005866:	48bc      	ldr	r0, [pc, #752]	; (8005b58 <http_perform_as_stream_wheather+0x330>)
 8005868:	f7ff f856 	bl	8004918 <write_cmd_wifi>
 800586c:	4603      	mov	r3, r0
 800586e:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
	if(status != WiFi_OK) return status;
 8005872:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 8005876:	2b01      	cmp	r3, #1
 8005878:	d002      	beq.n	8005880 <http_perform_as_stream_wheather+0x58>
 800587a:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 800587e:	e15f      	b.n	8005b40 <http_perform_as_stream_wheather+0x318>
	status = write_cmd_wifi(DNS_LOOKUP, WHEATER_HOST, timeout);
 8005880:	1d3b      	adds	r3, r7, #4
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	49b5      	ldr	r1, [pc, #724]	; (8005b5c <http_perform_as_stream_wheather+0x334>)
 8005886:	48b6      	ldr	r0, [pc, #728]	; (8005b60 <http_perform_as_stream_wheather+0x338>)
 8005888:	f7ff f846 	bl	8004918 <write_cmd_wifi>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
	if(status != WiFi_OK) return status;
 8005892:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 8005896:	2b01      	cmp	r3, #1
 8005898:	d002      	beq.n	80058a0 <http_perform_as_stream_wheather+0x78>
 800589a:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 800589e:	e14f      	b.n	8005b40 <http_perform_as_stream_wheather+0x318>
	status = write_cmd_wifi(STOP_START_TRANSPORT_CLIENT, "1", timeout);
 80058a0:	1d3b      	adds	r3, r7, #4
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	49af      	ldr	r1, [pc, #700]	; (8005b64 <http_perform_as_stream_wheather+0x33c>)
 80058a6:	48b0      	ldr	r0, [pc, #704]	; (8005b68 <http_perform_as_stream_wheather+0x340>)
 80058a8:	f7ff f836 	bl	8004918 <write_cmd_wifi>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
	if(status != WiFi_OK) return status;
 80058b2:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d002      	beq.n	80058c0 <http_perform_as_stream_wheather+0x98>
 80058ba:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 80058be:	e13f      	b.n	8005b40 <http_perform_as_stream_wheather+0x318>

	sprintf(buffer, "%d", strlen(location)+strlen(WHEATHER_ID)+strlen(WEATHER_API_KEY)
 80058c0:	f107 0308 	add.w	r3, r7, #8
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	f7fa fc8d 	bl	80001e4 <strlen>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f103 0276 	add.w	r2, r3, #118	; 0x76
 80058d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058d4:	49a5      	ldr	r1, [pc, #660]	; (8005b6c <http_perform_as_stream_wheather+0x344>)
 80058d6:	4618      	mov	r0, r3
 80058d8:	f00c fd44 	bl	8012364 <siprintf>
			+strlen("GET /api/current/?app_id=&app_key= HTTP/1.1\r\nHost: \r\n\r\n")+strlen(WHEATER_HOST));
	status = write_cmd_wifi(SET_WRITE_TRANSPORT_PACKET_SIZE, buffer, timeout);
 80058dc:	1d3b      	adds	r3, r7, #4
 80058de:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	48a2      	ldr	r0, [pc, #648]	; (8005b70 <http_perform_as_stream_wheather+0x348>)
 80058e6:	f7ff f817 	bl	8004918 <write_cmd_wifi>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
	if(status != WiFi_OK) return status;
 80058f0:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d002      	beq.n	80058fe <http_perform_as_stream_wheather+0xd6>
 80058f8:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 80058fc:	e120      	b.n	8005b40 <http_perform_as_stream_wheather+0x318>

	sprintf(buffer, "S0\rGET /api/current/%s?app_id=%s&app_key=%s HTTP/1.1\r\nHost: %s\r\n\r\n",
 80058fe:	f107 0208 	add.w	r2, r7, #8
 8005902:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8005906:	4b95      	ldr	r3, [pc, #596]	; (8005b5c <http_perform_as_stream_wheather+0x334>)
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	4b9a      	ldr	r3, [pc, #616]	; (8005b74 <http_perform_as_stream_wheather+0x34c>)
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	4b9a      	ldr	r3, [pc, #616]	; (8005b78 <http_perform_as_stream_wheather+0x350>)
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	499a      	ldr	r1, [pc, #616]	; (8005b7c <http_perform_as_stream_wheather+0x354>)
 8005914:	f00c fd26 	bl	8012364 <siprintf>
			location, WHEATHER_ID, WEATHER_API_KEY, WHEATER_HOST);
	status = write_data_wifi(buffer, timeout);
 8005918:	1d3b      	adds	r3, r7, #4
 800591a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800591e:	6819      	ldr	r1, [r3, #0]
 8005920:	4610      	mov	r0, r2
 8005922:	f7ff f85f 	bl	80049e4 <write_data_wifi>
 8005926:	4603      	mov	r3, r0
 8005928:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
	if(status != WiFi_OK) return status;
 800592c:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 8005930:	2b01      	cmp	r3, #1
 8005932:	d002      	beq.n	800593a <http_perform_as_stream_wheather+0x112>
 8005934:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 8005938:	e102      	b.n	8005b40 <http_perform_as_stream_wheather+0x318>
	vTaskDelay(10);
 800593a:	200a      	movs	r0, #10
 800593c:	f00a fdc6 	bl	80104cc <vTaskDelay>
	status = write_cmd_wifi(READ_TRANSPORT_DATA, '\0', timeout);
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	2100      	movs	r1, #0
 8005946:	488e      	ldr	r0, [pc, #568]	; (8005b80 <http_perform_as_stream_wheather+0x358>)
 8005948:	f7fe ffe6 	bl	8004918 <write_cmd_wifi>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
	if(status != WiFi_OK) return status;
 8005952:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 8005956:	2b01      	cmp	r3, #1
 8005958:	d002      	beq.n	8005960 <http_perform_as_stream_wheather+0x138>
 800595a:	f897 322d 	ldrb.w	r3, [r7, #557]	; 0x22d
 800595e:	e0ef      	b.n	8005b40 <http_perform_as_stream_wheather+0x318>

    uint16_t i=0;
 8005960:	2300      	movs	r3, #0
 8005962:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
    char buffer_aux[25];

    while(i<strlen(wifi.buffer_rx))
 8005966:	e0db      	b.n	8005b20 <http_perform_as_stream_wheather+0x2f8>
    {
    	if(wifi.buffer_rx[i] == '"')
 8005968:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 800596c:	4a85      	ldr	r2, [pc, #532]	; (8005b84 <http_perform_as_stream_wheather+0x35c>)
 800596e:	4413      	add	r3, r2
 8005970:	7f1b      	ldrb	r3, [r3, #28]
 8005972:	2b22      	cmp	r3, #34	; 0x22
 8005974:	f040 80cf 	bne.w	8005b16 <http_perform_as_stream_wheather+0x2ee>
    	{
    		i++;
 8005978:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 800597c:	3301      	adds	r3, #1
 800597e:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
    		memset(buffer_aux, '\0', 25);
 8005982:	f107 0310 	add.w	r3, r7, #16
 8005986:	2219      	movs	r2, #25
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f00c fbbe 	bl	801210c <memset>
    		while(wifi.buffer_rx[i] != '"')
 8005990:	e00f      	b.n	80059b2 <http_perform_as_stream_wheather+0x18a>
    		{
    			str_copy(buffer_aux, wifi.buffer_rx[i]);
 8005992:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8005996:	4a7b      	ldr	r2, [pc, #492]	; (8005b84 <http_perform_as_stream_wheather+0x35c>)
 8005998:	4413      	add	r3, r2
 800599a:	7f1a      	ldrb	r2, [r3, #28]
 800599c:	f107 0310 	add.w	r3, r7, #16
 80059a0:	4611      	mov	r1, r2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fbb0 	bl	8005108 <str_copy>
    			i++;
 80059a8:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80059ac:	3301      	adds	r3, #1
 80059ae:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
    		while(wifi.buffer_rx[i] != '"')
 80059b2:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80059b6:	4a73      	ldr	r2, [pc, #460]	; (8005b84 <http_perform_as_stream_wheather+0x35c>)
 80059b8:	4413      	add	r3, r2
 80059ba:	7f1b      	ldrb	r3, [r3, #28]
 80059bc:	2b22      	cmp	r3, #34	; 0x22
 80059be:	d1e8      	bne.n	8005992 <http_perform_as_stream_wheather+0x16a>
    		}

    		i+=2;
 80059c0:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80059c4:	3302      	adds	r3, #2
 80059c6:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e

    		if(strcmp("temp_c", buffer_aux) == 0)
 80059ca:	f107 0310 	add.w	r3, r7, #16
 80059ce:	4619      	mov	r1, r3
 80059d0:	486d      	ldr	r0, [pc, #436]	; (8005b88 <http_perform_as_stream_wheather+0x360>)
 80059d2:	f7fa fbfd 	bl	80001d0 <strcmp>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d12f      	bne.n	8005a3c <http_perform_as_stream_wheather+0x214>
    		{

    			memset(buffer_aux, '\0', 25);
 80059dc:	f107 0310 	add.w	r3, r7, #16
 80059e0:	2219      	movs	r2, #25
 80059e2:	2100      	movs	r1, #0
 80059e4:	4618      	mov	r0, r3
 80059e6:	f00c fb91 	bl	801210c <memset>
    			while(wifi.buffer_rx[i] != ',')
 80059ea:	e00f      	b.n	8005a0c <http_perform_as_stream_wheather+0x1e4>
    			{
    				str_copy(buffer_aux, wifi.buffer_rx[i]);
 80059ec:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80059f0:	4a64      	ldr	r2, [pc, #400]	; (8005b84 <http_perform_as_stream_wheather+0x35c>)
 80059f2:	4413      	add	r3, r2
 80059f4:	7f1a      	ldrb	r2, [r3, #28]
 80059f6:	f107 0310 	add.w	r3, r7, #16
 80059fa:	4611      	mov	r1, r2
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff fb83 	bl	8005108 <str_copy>
    				i++;
 8005a02:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8005a06:	3301      	adds	r3, #1
 8005a08:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
    			while(wifi.buffer_rx[i] != ',')
 8005a0c:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8005a10:	4a5c      	ldr	r2, [pc, #368]	; (8005b84 <http_perform_as_stream_wheather+0x35c>)
 8005a12:	4413      	add	r3, r2
 8005a14:	7f1b      	ldrb	r3, [r3, #28]
 8005a16:	2b2c      	cmp	r3, #44	; 0x2c
 8005a18:	d1e8      	bne.n	80059ec <http_perform_as_stream_wheather+0x1c4>
    			}

    			info->temp = atof(buffer_aux);
 8005a1a:	f107 0310 	add.w	r3, r7, #16
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f00c f914 	bl	8011c4c <atof>
 8005a24:	ec53 2b10 	vmov	r2, r3, d0
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f7fb f8ae 	bl	8000b8c <__aeabi_d2f>
 8005a30:	4602      	mov	r2, r0
 8005a32:	f107 030c 	add.w	r3, r7, #12
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e071      	b.n	8005b20 <http_perform_as_stream_wheather+0x2f8>
    		}

    		else if(strcmp("wx_code", buffer_aux) == 0)
 8005a3c:	f107 0310 	add.w	r3, r7, #16
 8005a40:	4619      	mov	r1, r3
 8005a42:	4852      	ldr	r0, [pc, #328]	; (8005b8c <http_perform_as_stream_wheather+0x364>)
 8005a44:	f7fa fbc4 	bl	80001d0 <strcmp>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d12a      	bne.n	8005aa4 <http_perform_as_stream_wheather+0x27c>
    		{

    			memset(buffer_aux, '\0', 25);
 8005a4e:	f107 0310 	add.w	r3, r7, #16
 8005a52:	2219      	movs	r2, #25
 8005a54:	2100      	movs	r1, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f00c fb58 	bl	801210c <memset>
    			while(wifi.buffer_rx[i] != ',')
 8005a5c:	e00f      	b.n	8005a7e <http_perform_as_stream_wheather+0x256>
    			{
    				str_copy(buffer_aux, wifi.buffer_rx[i]);
 8005a5e:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8005a62:	4a48      	ldr	r2, [pc, #288]	; (8005b84 <http_perform_as_stream_wheather+0x35c>)
 8005a64:	4413      	add	r3, r2
 8005a66:	7f1a      	ldrb	r2, [r3, #28]
 8005a68:	f107 0310 	add.w	r3, r7, #16
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fb4a 	bl	8005108 <str_copy>
    				i++;
 8005a74:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
    			while(wifi.buffer_rx[i] != ',')
 8005a7e:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8005a82:	4a40      	ldr	r2, [pc, #256]	; (8005b84 <http_perform_as_stream_wheather+0x35c>)
 8005a84:	4413      	add	r3, r2
 8005a86:	7f1b      	ldrb	r3, [r3, #28]
 8005a88:	2b2c      	cmp	r3, #44	; 0x2c
 8005a8a:	d1e8      	bne.n	8005a5e <http_perform_as_stream_wheather+0x236>
    			}

    			info->weather_code = atoi(buffer_aux);
 8005a8c:	f107 0310 	add.w	r3, r7, #16
 8005a90:	4618      	mov	r0, r3
 8005a92:	f00c f8de 	bl	8011c52 <atoi>
 8005a96:	4603      	mov	r3, r0
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	f107 030c 	add.w	r3, r7, #12
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	721a      	strb	r2, [r3, #8]
 8005aa2:	e03d      	b.n	8005b20 <http_perform_as_stream_wheather+0x2f8>
    		}
    		else if(strcmp("humid_pct", buffer_aux) == 0)
 8005aa4:	f107 0310 	add.w	r3, r7, #16
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4839      	ldr	r0, [pc, #228]	; (8005b90 <http_perform_as_stream_wheather+0x368>)
 8005aac:	f7fa fb90 	bl	80001d0 <strcmp>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d134      	bne.n	8005b20 <http_perform_as_stream_wheather+0x2f8>
    		{
    			memset(buffer_aux, '\0', 25);
 8005ab6:	f107 0310 	add.w	r3, r7, #16
 8005aba:	2219      	movs	r2, #25
 8005abc:	2100      	movs	r1, #0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f00c fb24 	bl	801210c <memset>
    			while(wifi.buffer_rx[i] != ',')
 8005ac4:	e00f      	b.n	8005ae6 <http_perform_as_stream_wheather+0x2be>
    			{
    				str_copy(buffer_aux, wifi.buffer_rx[i]);
 8005ac6:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8005aca:	4a2e      	ldr	r2, [pc, #184]	; (8005b84 <http_perform_as_stream_wheather+0x35c>)
 8005acc:	4413      	add	r3, r2
 8005ace:	7f1a      	ldrb	r2, [r3, #28]
 8005ad0:	f107 0310 	add.w	r3, r7, #16
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff fb16 	bl	8005108 <str_copy>
    				i++;
 8005adc:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
    			while(wifi.buffer_rx[i] != ',')
 8005ae6:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8005aea:	4a26      	ldr	r2, [pc, #152]	; (8005b84 <http_perform_as_stream_wheather+0x35c>)
 8005aec:	4413      	add	r3, r2
 8005aee:	7f1b      	ldrb	r3, [r3, #28]
 8005af0:	2b2c      	cmp	r3, #44	; 0x2c
 8005af2:	d1e8      	bne.n	8005ac6 <http_perform_as_stream_wheather+0x29e>
    			}

    			info->humidity = atof(buffer_aux);
 8005af4:	f107 0310 	add.w	r3, r7, #16
 8005af8:	4618      	mov	r0, r3
 8005afa:	f00c f8a7 	bl	8011c4c <atof>
 8005afe:	ec53 2b10 	vmov	r2, r3, d0
 8005b02:	4610      	mov	r0, r2
 8005b04:	4619      	mov	r1, r3
 8005b06:	f7fb f841 	bl	8000b8c <__aeabi_d2f>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	f107 030c 	add.w	r3, r7, #12
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	605a      	str	r2, [r3, #4]
    			break;
 8005b14:	e00d      	b.n	8005b32 <http_perform_as_stream_wheather+0x30a>
    		}

    	}
    	else
    		i++;
 8005b16:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
    while(i<strlen(wifi.buffer_rx))
 8005b20:	f8b7 422e 	ldrh.w	r4, [r7, #558]	; 0x22e
 8005b24:	481b      	ldr	r0, [pc, #108]	; (8005b94 <http_perform_as_stream_wheather+0x36c>)
 8005b26:	f7fa fb5d 	bl	80001e4 <strlen>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	429c      	cmp	r4, r3
 8005b2e:	f4ff af1b 	bcc.w	8005968 <http_perform_as_stream_wheather+0x140>
    }

	return write_cmd_wifi(STOP_START_TRANSPORT_CLIENT, "0", timeout);
 8005b32:	1d3b      	adds	r3, r7, #4
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4905      	ldr	r1, [pc, #20]	; (8005b4c <http_perform_as_stream_wheather+0x324>)
 8005b38:	480b      	ldr	r0, [pc, #44]	; (8005b68 <http_perform_as_stream_wheather+0x340>)
 8005b3a:	f7fe feed 	bl	8004918 <write_cmd_wifi>
 8005b3e:	4603      	mov	r3, r0

}
 8005b40:	4618      	mov	r0, r3
 8005b42:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd90      	pop	{r4, r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	08016e2c 	.word	0x08016e2c
 8005b50:	08016e48 	.word	0x08016e48
 8005b54:	08016f8c 	.word	0x08016f8c
 8005b58:	08016e50 	.word	0x08016e50
 8005b5c:	08016f90 	.word	0x08016f90
 8005b60:	08016e4c 	.word	0x08016e4c
 8005b64:	08016e84 	.word	0x08016e84
 8005b68:	08016e88 	.word	0x08016e88
 8005b6c:	08016dfc 	.word	0x08016dfc
 8005b70:	08016e00 	.word	0x08016e00
 8005b74:	08016ff8 	.word	0x08016ff8
 8005b78:	08016fa8 	.word	0x08016fa8
 8005b7c:	08016fb4 	.word	0x08016fb4
 8005b80:	08016e98 	.word	0x08016e98
 8005b84:	200104ac 	.word	0x200104ac
 8005b88:	0801701c 	.word	0x0801701c
 8005b8c:	08017024 	.word	0x08017024
 8005b90:	0801702c 	.word	0x0801702c
 8005b94:	200104c8 	.word	0x200104c8

08005b98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005bd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005b9c:	f7fe fe14 	bl	80047c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005ba0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005ba2:	e003      	b.n	8005bac <LoopCopyDataInit>

08005ba4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005ba4:	4b0b      	ldr	r3, [pc, #44]	; (8005bd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005ba6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005ba8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005baa:	3104      	adds	r1, #4

08005bac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005bac:	480a      	ldr	r0, [pc, #40]	; (8005bd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005bae:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <LoopForever+0xe>)
	adds	r2, r0, r1
 8005bb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005bb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005bb4:	d3f6      	bcc.n	8005ba4 <CopyDataInit>
	ldr	r2, =_sbss
 8005bb6:	4a0a      	ldr	r2, [pc, #40]	; (8005be0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005bb8:	e002      	b.n	8005bc0 <LoopFillZerobss>

08005bba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005bba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005bbc:	f842 3b04 	str.w	r3, [r2], #4

08005bc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005bc0:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <LoopForever+0x16>)
	cmp	r2, r3
 8005bc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005bc4:	d3f9      	bcc.n	8005bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005bc6:	f00c f945 	bl	8011e54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bca:	f7fd f8a5 	bl	8002d18 <main>

08005bce <LoopForever>:

LoopForever:
    b LoopForever
 8005bce:	e7fe      	b.n	8005bce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005bd0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005bd4:	08021dcc 	.word	0x08021dcc
	ldr	r0, =_sdata
 8005bd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005bdc:	200002e8 	.word	0x200002e8
	ldr	r2, =_sbss
 8005be0:	200002e8 	.word	0x200002e8
	ldr	r3, = _ebss
 8005be4:	2001308c 	.word	0x2001308c

08005be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005be8:	e7fe      	b.n	8005be8 <ADC1_2_IRQHandler>

08005bea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bf4:	2003      	movs	r0, #3
 8005bf6:	f001 fcdc 	bl	80075b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f7fe fc68 	bl	80044d0 <HAL_InitTick>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	71fb      	strb	r3, [r7, #7]
 8005c0a:	e001      	b.n	8005c10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005c0c:	f7fe fa7c 	bl	8004108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005c10:	79fb      	ldrb	r3, [r7, #7]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <HAL_IncTick+0x20>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_IncTick+0x24>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	4a04      	ldr	r2, [pc, #16]	; (8005c40 <HAL_IncTick+0x24>)
 8005c2e:	6013      	str	r3, [r2, #0]
}
 8005c30:	bf00      	nop
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20000098 	.word	0x20000098
 8005c40:	20010fc4 	.word	0x20010fc4

08005c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return uwTick;
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <HAL_GetTick+0x14>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20010fc4 	.word	0x20010fc4

08005c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c64:	f7ff ffee 	bl	8005c44 <HAL_GetTick>
 8005c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d005      	beq.n	8005c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005c76:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <HAL_Delay+0x44>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c82:	bf00      	nop
 8005c84:	f7ff ffde 	bl	8005c44 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d8f7      	bhi.n	8005c84 <HAL_Delay+0x28>
  {
  }
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000098 	.word	0x20000098

08005ca4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	609a      	str	r2, [r3, #8]
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	609a      	str	r2, [r3, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3360      	adds	r3, #96	; 0x60
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <LL_ADC_SetOffset+0x44>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	03fff000 	.word	0x03fff000

08005d54 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3360      	adds	r3, #96	; 0x60
 8005d62:	461a      	mov	r2, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3360      	adds	r3, #96	; 0x60
 8005d90:	461a      	mov	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3330      	adds	r3, #48	; 0x30
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	4413      	add	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f003 031f 	and.w	r3, r3, #31
 8005de0:	211f      	movs	r1, #31
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	401a      	ands	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	0e9b      	lsrs	r3, r3, #26
 8005dee:	f003 011f 	and.w	r1, r3, #31
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b087      	sub	sp, #28
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3314      	adds	r3, #20
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	0e5b      	lsrs	r3, r3, #25
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	4413      	add	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	0d1b      	lsrs	r3, r3, #20
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2107      	movs	r1, #7
 8005e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	401a      	ands	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	0d1b      	lsrs	r3, r3, #20
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e52:	431a      	orrs	r2, r3
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	401a      	ands	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f003 0318 	and.w	r3, r3, #24
 8005e86:	4908      	ldr	r1, [pc, #32]	; (8005ea8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005e88:	40d9      	lsrs	r1, r3
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e92:	431a      	orrs	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	0007ffff 	.word	0x0007ffff

08005eac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 031f 	and.w	r3, r3, #31
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6093      	str	r3, [r2, #8]
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f00:	d101      	bne.n	8005f06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f50:	d101      	bne.n	8005f56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f78:	f043 0201 	orr.w	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fa0:	f043 0202 	orr.w	r2, r3, #2
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <LL_ADC_IsEnabled+0x18>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <LL_ADC_IsEnabled+0x1a>
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d101      	bne.n	8005ff2 <LL_ADC_IsDisableOngoing+0x18>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <LL_ADC_IsDisableOngoing+0x1a>
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006014:	f043 0204 	orr.w	r2, r3, #4
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006038:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800603c:	f043 0210 	orr.w	r2, r3, #16
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b04      	cmp	r3, #4
 8006062:	d101      	bne.n	8006068 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006086:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800608a:	f043 0220 	orr.w	r2, r3, #32
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d101      	bne.n	80060b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80060c4:	b590      	push	{r4, r7, lr}
 80060c6:	b089      	sub	sp, #36	; 0x24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e136      	b.n	800634c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7fe f833 	bl	8004158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff fef1 	bl	8005eec <LL_ADC_IsDeepPowerDownEnabled>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff fed7 	bl	8005ec8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff ff0c 	bl	8005f3c <LL_ADC_IsInternalRegulatorEnabled>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d115      	bne.n	8006156 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff fef0 	bl	8005f14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006134:	4b87      	ldr	r3, [pc, #540]	; (8006354 <HAL_ADC_Init+0x290>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	099b      	lsrs	r3, r3, #6
 800613a:	4a87      	ldr	r2, [pc, #540]	; (8006358 <HAL_ADC_Init+0x294>)
 800613c:	fba2 2303 	umull	r2, r3, r2, r3
 8006140:	099b      	lsrs	r3, r3, #6
 8006142:	3301      	adds	r3, #1
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006148:	e002      	b.n	8006150 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	3b01      	subs	r3, #1
 800614e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f9      	bne.n	800614a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff feee 	bl	8005f3c <LL_ADC_IsInternalRegulatorEnabled>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10d      	bne.n	8006182 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616a:	f043 0210 	orr.w	r2, r3, #16
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	f043 0201 	orr.w	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff ff62 	bl	8006050 <LL_ADC_REG_IsConversionOngoing>
 800618c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b00      	cmp	r3, #0
 8006198:	f040 80cf 	bne.w	800633a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f040 80cb 	bne.w	800633a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80061ac:	f043 0202 	orr.w	r2, r3, #2
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff fefb 	bl	8005fb4 <LL_ADC_IsEnabled>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d115      	bne.n	80061f0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061c4:	4865      	ldr	r0, [pc, #404]	; (800635c <HAL_ADC_Init+0x298>)
 80061c6:	f7ff fef5 	bl	8005fb4 <LL_ADC_IsEnabled>
 80061ca:	4604      	mov	r4, r0
 80061cc:	4864      	ldr	r0, [pc, #400]	; (8006360 <HAL_ADC_Init+0x29c>)
 80061ce:	f7ff fef1 	bl	8005fb4 <LL_ADC_IsEnabled>
 80061d2:	4603      	mov	r3, r0
 80061d4:	431c      	orrs	r4, r3
 80061d6:	4863      	ldr	r0, [pc, #396]	; (8006364 <HAL_ADC_Init+0x2a0>)
 80061d8:	f7ff feec 	bl	8005fb4 <LL_ADC_IsEnabled>
 80061dc:	4603      	mov	r3, r0
 80061de:	4323      	orrs	r3, r4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d105      	bne.n	80061f0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4619      	mov	r1, r3
 80061ea:	485f      	ldr	r0, [pc, #380]	; (8006368 <HAL_ADC_Init+0x2a4>)
 80061ec:	f7ff fd5a 	bl	8005ca4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	7e5b      	ldrb	r3, [r3, #25]
 80061f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006200:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006206:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800620e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006210:	4313      	orrs	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d106      	bne.n	800622c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	3b01      	subs	r3, #1
 8006224:	045b      	lsls	r3, r3, #17
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	4313      	orrs	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	2b00      	cmp	r3, #0
 8006232:	d009      	beq.n	8006248 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	4313      	orrs	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	4b47      	ldr	r3, [pc, #284]	; (800636c <HAL_ADC_Init+0x2a8>)
 8006250:	4013      	ands	r3, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6812      	ldr	r2, [r2, #0]
 8006256:	69b9      	ldr	r1, [r7, #24]
 8006258:	430b      	orrs	r3, r1
 800625a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fef5 	bl	8006050 <LL_ADC_REG_IsConversionOngoing>
 8006266:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff ff16 	bl	800609e <LL_ADC_INJ_IsConversionOngoing>
 8006272:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d13d      	bne.n	80062f6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d13a      	bne.n	80062f6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006284:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800628c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800628e:	4313      	orrs	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800629c:	f023 0302 	bic.w	r3, r3, #2
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	69b9      	ldr	r1, [r7, #24]
 80062a6:	430b      	orrs	r3, r1
 80062a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d118      	bne.n	80062e6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062be:	f023 0304 	bic.w	r3, r3, #4
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80062ca:	4311      	orrs	r1, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80062d0:	4311      	orrs	r1, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062d6:	430a      	orrs	r2, r1
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	611a      	str	r2, [r3, #16]
 80062e4:	e007      	b.n	80062f6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0201 	bic.w	r2, r2, #1
 80062f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d10c      	bne.n	8006318 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	f023 010f 	bic.w	r1, r3, #15
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	1e5a      	subs	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	631a      	str	r2, [r3, #48]	; 0x30
 8006316:	e007      	b.n	8006328 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 020f 	bic.w	r2, r2, #15
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632c:	f023 0303 	bic.w	r3, r3, #3
 8006330:	f043 0201 	orr.w	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	655a      	str	r2, [r3, #84]	; 0x54
 8006338:	e007      	b.n	800634a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633e:	f043 0210 	orr.w	r2, r3, #16
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800634a:	7ffb      	ldrb	r3, [r7, #31]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3724      	adds	r7, #36	; 0x24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd90      	pop	{r4, r7, pc}
 8006354:	20000044 	.word	0x20000044
 8006358:	053e2d63 	.word	0x053e2d63
 800635c:	50040000 	.word	0x50040000
 8006360:	50040100 	.word	0x50040100
 8006364:	50040200 	.word	0x50040200
 8006368:	50040300 	.word	0x50040300
 800636c:	fff0c007 	.word	0xfff0c007

08006370 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e116      	b.n	80065b0 <HAL_ADC_DeInit+0x240>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006386:	f043 0202 	orr.w	r2, r3, #2
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800638e:	2103      	movs	r1, #3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fe0d 	bl	8006fb0 <ADC_ConversionStop>
 8006396:	4603      	mov	r3, r0
 8006398:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80063a8:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 ff1b 	bl	80071ec <ADC_Disable>
 80063b6:	4603      	mov	r3, r0
 80063b8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	655a      	str	r2, [r3, #84]	; 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063d4:	f023 0307 	bic.w	r3, r3, #7
 80063d8:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80063e2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 80063f2:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006402:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68d9      	ldr	r1, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	4b6a      	ldr	r3, [pc, #424]	; (80065b8 <HAL_ADC_DeInit+0x248>)
 8006410:	400b      	ands	r3, r1
 8006412:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006422:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006432:	f023 0307 	bic.w	r3, r3, #7
 8006436:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8006446:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8006456:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6a1a      	ldr	r2, [r3, #32]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8006466:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8006476:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8006486:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b4a      	ldr	r3, [pc, #296]	; (80065bc <HAL_ADC_DeInit+0x24c>)
 8006494:	400b      	ands	r3, r1
 8006496:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4b47      	ldr	r3, [pc, #284]	; (80065c0 <HAL_ADC_DeInit+0x250>)
 80064a4:	400b      	ands	r3, r1
 80064a6:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b43      	ldr	r3, [pc, #268]	; (80065c0 <HAL_ADC_DeInit+0x250>)
 80064b4:	400b      	ands	r3, r1
 80064b6:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 80064c6:	f023 0307 	bic.w	r3, r3, #7
 80064ca:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b3b      	ldr	r3, [pc, #236]	; (80065c4 <HAL_ADC_DeInit+0x254>)
 80064d8:	400b      	ands	r3, r1
 80064da:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4b37      	ldr	r3, [pc, #220]	; (80065c4 <HAL_ADC_DeInit+0x254>)
 80064e8:	400b      	ands	r3, r1
 80064ea:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b33      	ldr	r3, [pc, #204]	; (80065c4 <HAL_ADC_DeInit+0x254>)
 80064f8:	400b      	ands	r3, r1
 80064fa:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	4b2f      	ldr	r3, [pc, #188]	; (80065c4 <HAL_ADC_DeInit+0x254>)
 8006508:	400b      	ands	r3, r1
 800650a:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6812      	ldr	r2, [r2, #0]
 8006518:	0cdb      	lsrs	r3, r3, #19
 800651a:	04db      	lsls	r3, r3, #19
 800651c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	0cdb      	lsrs	r3, r3, #19
 800652e:	04db      	lsls	r3, r3, #19
 8006530:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	0cdb      	lsrs	r3, r3, #19
 8006542:	04db      	lsls	r3, r3, #19
 8006544:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8006558:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800655c:	481a      	ldr	r0, [pc, #104]	; (80065c8 <HAL_ADC_DeInit+0x258>)
 800655e:	f7ff fd29 	bl	8005fb4 <LL_ADC_IsEnabled>
 8006562:	4604      	mov	r4, r0
 8006564:	4819      	ldr	r0, [pc, #100]	; (80065cc <HAL_ADC_DeInit+0x25c>)
 8006566:	f7ff fd25 	bl	8005fb4 <LL_ADC_IsEnabled>
 800656a:	4603      	mov	r3, r0
 800656c:	431c      	orrs	r4, r3
 800656e:	4818      	ldr	r0, [pc, #96]	; (80065d0 <HAL_ADC_DeInit+0x260>)
 8006570:	f7ff fd20 	bl	8005fb4 <LL_ADC_IsEnabled>
 8006574:	4603      	mov	r3, r0
 8006576:	4323      	orrs	r3, r4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d108      	bne.n	800658e <HAL_ADC_DeInit+0x21e>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 800657c:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <HAL_ADC_DeInit+0x264>)
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	4914      	ldr	r1, [pc, #80]	; (80065d4 <HAL_ADC_DeInit+0x264>)
 8006582:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <HAL_ADC_DeInit+0x268>)
 8006584:	4013      	ands	r3, r2
 8006586:	608b      	str	r3, [r1, #8]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7fd fe65 	bl	8004258 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	65da      	str	r2, [r3, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd90      	pop	{r4, r7, pc}
 80065b8:	80008004 	.word	0x80008004
 80065bc:	e0820830 	.word	0xe0820830
 80065c0:	e0820820 	.word	0xe0820820
 80065c4:	03fff000 	.word	0x03fff000
 80065c8:	50040000 	.word	0x50040000
 80065cc:	50040100 	.word	0x50040100
 80065d0:	50040200 	.word	0x50040200
 80065d4:	50040300 	.word	0x50040300
 80065d8:	fe0010e0 	.word	0xfe0010e0

080065dc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065e4:	4857      	ldr	r0, [pc, #348]	; (8006744 <HAL_ADC_Start+0x168>)
 80065e6:	f7ff fc61 	bl	8005eac <LL_ADC_GetMultimode>
 80065ea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff fd2d 	bl	8006050 <LL_ADC_REG_IsConversionOngoing>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f040 809c 	bne.w	8006736 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_ADC_Start+0x30>
 8006608:	2302      	movs	r3, #2
 800660a:	e097      	b.n	800673c <HAL_ADC_Start+0x160>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fd87 	bl	8007128 <ADC_Enable>
 800661a:	4603      	mov	r3, r0
 800661c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800661e:	7dfb      	ldrb	r3, [r7, #23]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 8083 	bne.w	800672c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800662e:	f023 0301 	bic.w	r3, r3, #1
 8006632:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a42      	ldr	r2, [pc, #264]	; (8006748 <HAL_ADC_Start+0x16c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d002      	beq.n	800664a <HAL_ADC_Start+0x6e>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	e000      	b.n	800664c <HAL_ADC_Start+0x70>
 800664a:	4b40      	ldr	r3, [pc, #256]	; (800674c <HAL_ADC_Start+0x170>)
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	4293      	cmp	r3, r2
 8006652:	d002      	beq.n	800665a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d105      	bne.n	8006666 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800666e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006672:	d106      	bne.n	8006682 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006678:	f023 0206 	bic.w	r2, r3, #6
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	659a      	str	r2, [r3, #88]	; 0x58
 8006680:	e002      	b.n	8006688 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	221c      	movs	r2, #28
 800668e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a2a      	ldr	r2, [pc, #168]	; (8006748 <HAL_ADC_Start+0x16c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d002      	beq.n	80066a8 <HAL_ADC_Start+0xcc>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	e000      	b.n	80066aa <HAL_ADC_Start+0xce>
 80066a8:	4b28      	ldr	r3, [pc, #160]	; (800674c <HAL_ADC_Start+0x170>)
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d008      	beq.n	80066c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2b05      	cmp	r3, #5
 80066bc:	d002      	beq.n	80066c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b09      	cmp	r3, #9
 80066c2:	d114      	bne.n	80066ee <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d007      	beq.n	80066e2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fc8a 	bl	8006000 <LL_ADC_REG_StartConversion>
 80066ec:	e025      	b.n	800673a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a12      	ldr	r2, [pc, #72]	; (8006748 <HAL_ADC_Start+0x16c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d002      	beq.n	800670a <HAL_ADC_Start+0x12e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	e000      	b.n	800670c <HAL_ADC_Start+0x130>
 800670a:	4b10      	ldr	r3, [pc, #64]	; (800674c <HAL_ADC_Start+0x170>)
 800670c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00f      	beq.n	800673a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006722:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	655a      	str	r2, [r3, #84]	; 0x54
 800672a:	e006      	b.n	800673a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006734:	e001      	b.n	800673a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006736:	2302      	movs	r3, #2
 8006738:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800673a:	7dfb      	ldrb	r3, [r7, #23]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	50040300 	.word	0x50040300
 8006748:	50040100 	.word	0x50040100
 800674c:	50040000 	.word	0x50040000

08006750 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_ADC_Stop+0x16>
 8006762:	2302      	movs	r3, #2
 8006764:	e023      	b.n	80067ae <HAL_ADC_Stop+0x5e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800676e:	2103      	movs	r1, #3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fc1d 	bl	8006fb0 <ADC_ConversionStop>
 8006776:	4603      	mov	r3, r0
 8006778:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d111      	bne.n	80067a4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fd33 	bl	80071ec <ADC_Disable>
 8006786:	4603      	mov	r3, r0
 8006788:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d109      	bne.n	80067a4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006794:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	f043 0201 	orr.w	r2, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b0b6      	sub	sp, #216	; 0xd8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HAL_ADC_ConfigChannel+0x22>
 80067ee:	2302      	movs	r3, #2
 80067f0:	e3c7      	b.n	8006f82 <HAL_ADC_ConfigChannel+0x7b2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fc26 	bl	8006050 <LL_ADC_REG_IsConversionOngoing>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 83a8 	bne.w	8006f5c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b05      	cmp	r3, #5
 8006812:	d824      	bhi.n	800685e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	3b02      	subs	r3, #2
 800681a:	2b03      	cmp	r3, #3
 800681c:	d81b      	bhi.n	8006856 <HAL_ADC_ConfigChannel+0x86>
 800681e:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <HAL_ADC_ConfigChannel+0x54>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006835 	.word	0x08006835
 8006828:	0800683d 	.word	0x0800683d
 800682c:	08006845 	.word	0x08006845
 8006830:	0800684d 	.word	0x0800684d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	220c      	movs	r2, #12
 8006838:	605a      	str	r2, [r3, #4]
          break;
 800683a:	e011      	b.n	8006860 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2212      	movs	r2, #18
 8006840:	605a      	str	r2, [r3, #4]
          break;
 8006842:	e00d      	b.n	8006860 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2218      	movs	r2, #24
 8006848:	605a      	str	r2, [r3, #4]
          break;
 800684a:	e009      	b.n	8006860 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006852:	605a      	str	r2, [r3, #4]
          break;
 8006854:	e004      	b.n	8006860 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2206      	movs	r2, #6
 800685a:	605a      	str	r2, [r3, #4]
          break;
 800685c:	e000      	b.n	8006860 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800685e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	6859      	ldr	r1, [r3, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	f7ff faa2 	bl	8005db6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff fbea 	bl	8006050 <LL_ADC_REG_IsConversionOngoing>
 800687c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff fc0a 	bl	800609e <LL_ADC_INJ_IsConversionOngoing>
 800688a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800688e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006892:	2b00      	cmp	r3, #0
 8006894:	f040 81a6 	bne.w	8006be4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800689c:	2b00      	cmp	r3, #0
 800689e:	f040 81a1 	bne.w	8006be4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6819      	ldr	r1, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f7ff faad 	bl	8005e0e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	695a      	ldr	r2, [r3, #20]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	08db      	lsrs	r3, r3, #3
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d00a      	beq.n	80068ec <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	6919      	ldr	r1, [r3, #16]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068e6:	f7ff fa11 	bl	8005d0c <LL_ADC_SetOffset>
 80068ea:	e17b      	b.n	8006be4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2100      	movs	r1, #0
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff fa2e 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <HAL_ADC_ConfigChannel+0x148>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff fa23 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 800690e:	4603      	mov	r3, r0
 8006910:	0e9b      	lsrs	r3, r3, #26
 8006912:	f003 021f 	and.w	r2, r3, #31
 8006916:	e01e      	b.n	8006956 <HAL_ADC_ConfigChannel+0x186>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2100      	movs	r1, #0
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff fa18 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 8006924:	4603      	mov	r3, r0
 8006926:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800692e:	fa93 f3a3 	rbit	r3, r3
 8006932:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800693a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800693e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8006946:	2320      	movs	r3, #32
 8006948:	e004      	b.n	8006954 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800694a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800694e:	fab3 f383 	clz	r3, r3
 8006952:	b2db      	uxtb	r3, r3
 8006954:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800695e:	2b00      	cmp	r3, #0
 8006960:	d105      	bne.n	800696e <HAL_ADC_ConfigChannel+0x19e>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	0e9b      	lsrs	r3, r3, #26
 8006968:	f003 031f 	and.w	r3, r3, #31
 800696c:	e018      	b.n	80069a0 <HAL_ADC_ConfigChannel+0x1d0>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006976:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800697a:	fa93 f3a3 	rbit	r3, r3
 800697e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006986:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800698a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8006992:	2320      	movs	r3, #32
 8006994:	e004      	b.n	80069a0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8006996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800699a:	fab3 f383 	clz	r3, r3
 800699e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d106      	bne.n	80069b2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2200      	movs	r2, #0
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff f9e7 	bl	8005d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2101      	movs	r1, #1
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff f9cb 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 80069be:	4603      	mov	r3, r0
 80069c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <HAL_ADC_ConfigChannel+0x20e>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2101      	movs	r1, #1
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff f9c0 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 80069d4:	4603      	mov	r3, r0
 80069d6:	0e9b      	lsrs	r3, r3, #26
 80069d8:	f003 021f 	and.w	r2, r3, #31
 80069dc:	e01e      	b.n	8006a1c <HAL_ADC_ConfigChannel+0x24c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2101      	movs	r1, #1
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff f9b5 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069f4:	fa93 f3a3 	rbit	r3, r3
 80069f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80069fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006a04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8006a0c:	2320      	movs	r3, #32
 8006a0e:	e004      	b.n	8006a1a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8006a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a14:	fab3 f383 	clz	r3, r3
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d105      	bne.n	8006a34 <HAL_ADC_ConfigChannel+0x264>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	0e9b      	lsrs	r3, r3, #26
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	e018      	b.n	8006a66 <HAL_ADC_ConfigChannel+0x296>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a40:	fa93 f3a3 	rbit	r3, r3
 8006a44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006a48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8006a58:	2320      	movs	r3, #32
 8006a5a:	e004      	b.n	8006a66 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8006a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a60:	fab3 f383 	clz	r3, r3
 8006a64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d106      	bne.n	8006a78 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2101      	movs	r1, #1
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff f984 	bl	8005d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff f968 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <HAL_ADC_ConfigChannel+0x2d4>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2102      	movs	r1, #2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7ff f95d 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	0e9b      	lsrs	r3, r3, #26
 8006a9e:	f003 021f 	and.w	r2, r3, #31
 8006aa2:	e01e      	b.n	8006ae2 <HAL_ADC_ConfigChannel+0x312>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2102      	movs	r1, #2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff f952 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aba:	fa93 f3a3 	rbit	r3, r3
 8006abe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006ac2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006aca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8006ad2:	2320      	movs	r3, #32
 8006ad4:	e004      	b.n	8006ae0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ada:	fab3 f383 	clz	r3, r3
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d105      	bne.n	8006afa <HAL_ADC_ConfigChannel+0x32a>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	0e9b      	lsrs	r3, r3, #26
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	e016      	b.n	8006b28 <HAL_ADC_ConfigChannel+0x358>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b06:	fa93 f3a3 	rbit	r3, r3
 8006b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006b0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006b12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8006b1a:	2320      	movs	r3, #32
 8006b1c:	e004      	b.n	8006b28 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8006b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b22:	fab3 f383 	clz	r3, r3
 8006b26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d106      	bne.n	8006b3a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2200      	movs	r2, #0
 8006b32:	2102      	movs	r1, #2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff f923 	bl	8005d80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2103      	movs	r1, #3
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff f907 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <HAL_ADC_ConfigChannel+0x396>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2103      	movs	r1, #3
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff f8fc 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	0e9b      	lsrs	r3, r3, #26
 8006b60:	f003 021f 	and.w	r2, r3, #31
 8006b64:	e017      	b.n	8006b96 <HAL_ADC_ConfigChannel+0x3c6>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2103      	movs	r1, #3
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff f8f1 	bl	8005d54 <LL_ADC_GetOffsetChannel>
 8006b72:	4603      	mov	r3, r0
 8006b74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b78:	fa93 f3a3 	rbit	r3, r3
 8006b7c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b80:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8006b88:	2320      	movs	r3, #32
 8006b8a:	e003      	b.n	8006b94 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8006b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b8e:	fab3 f383 	clz	r3, r3
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d105      	bne.n	8006bae <HAL_ADC_ConfigChannel+0x3de>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	0e9b      	lsrs	r3, r3, #26
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	e011      	b.n	8006bd2 <HAL_ADC_ConfigChannel+0x402>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bb6:	fa93 f3a3 	rbit	r3, r3
 8006bba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8006bc6:	2320      	movs	r3, #32
 8006bc8:	e003      	b.n	8006bd2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8006bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bcc:	fab3 f383 	clz	r3, r3
 8006bd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d106      	bne.n	8006be4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2103      	movs	r1, #3
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff f8ce 	bl	8005d80 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff f9e3 	bl	8005fb4 <LL_ADC_IsEnabled>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f040 813f 	bne.w	8006e74 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	6819      	ldr	r1, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	461a      	mov	r2, r3
 8006c04:	f7ff f92e 	bl	8005e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	4a8e      	ldr	r2, [pc, #568]	; (8006e48 <HAL_ADC_ConfigChannel+0x678>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	f040 8130 	bne.w	8006e74 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10b      	bne.n	8006c3c <HAL_ADC_ConfigChannel+0x46c>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	0e9b      	lsrs	r3, r3, #26
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f003 031f 	and.w	r3, r3, #31
 8006c30:	2b09      	cmp	r3, #9
 8006c32:	bf94      	ite	ls
 8006c34:	2301      	movls	r3, #1
 8006c36:	2300      	movhi	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	e019      	b.n	8006c70 <HAL_ADC_ConfigChannel+0x4a0>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c44:	fa93 f3a3 	rbit	r3, r3
 8006c48:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006c54:	2320      	movs	r3, #32
 8006c56:	e003      	b.n	8006c60 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c5a:	fab3 f383 	clz	r3, r3
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	3301      	adds	r3, #1
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	2b09      	cmp	r3, #9
 8006c68:	bf94      	ite	ls
 8006c6a:	2301      	movls	r3, #1
 8006c6c:	2300      	movhi	r3, #0
 8006c6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d079      	beq.n	8006d68 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d107      	bne.n	8006c90 <HAL_ADC_ConfigChannel+0x4c0>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	0e9b      	lsrs	r3, r3, #26
 8006c86:	3301      	adds	r3, #1
 8006c88:	069b      	lsls	r3, r3, #26
 8006c8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c8e:	e015      	b.n	8006cbc <HAL_ADC_ConfigChannel+0x4ec>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c98:	fa93 f3a3 	rbit	r3, r3
 8006c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8006ca8:	2320      	movs	r3, #32
 8006caa:	e003      	b.n	8006cb4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8006cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cae:	fab3 f383 	clz	r3, r3
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	069b      	lsls	r3, r3, #26
 8006cb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d109      	bne.n	8006cdc <HAL_ADC_ConfigChannel+0x50c>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	0e9b      	lsrs	r3, r3, #26
 8006cce:	3301      	adds	r3, #1
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cda:	e017      	b.n	8006d0c <HAL_ADC_ConfigChannel+0x53c>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce4:	fa93 f3a3 	rbit	r3, r3
 8006ce8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8006cf4:	2320      	movs	r3, #32
 8006cf6:	e003      	b.n	8006d00 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8006cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cfa:	fab3 f383 	clz	r3, r3
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	3301      	adds	r3, #1
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	2101      	movs	r1, #1
 8006d08:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0c:	ea42 0103 	orr.w	r1, r2, r3
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <HAL_ADC_ConfigChannel+0x562>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	0e9b      	lsrs	r3, r3, #26
 8006d22:	3301      	adds	r3, #1
 8006d24:	f003 021f 	and.w	r2, r3, #31
 8006d28:	4613      	mov	r3, r2
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	4413      	add	r3, r2
 8006d2e:	051b      	lsls	r3, r3, #20
 8006d30:	e018      	b.n	8006d64 <HAL_ADC_ConfigChannel+0x594>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	fa93 f3a3 	rbit	r3, r3
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8006d4a:	2320      	movs	r3, #32
 8006d4c:	e003      	b.n	8006d56 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d50:	fab3 f383 	clz	r3, r3
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	3301      	adds	r3, #1
 8006d58:	f003 021f 	and.w	r2, r3, #31
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	4413      	add	r3, r2
 8006d62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d64:	430b      	orrs	r3, r1
 8006d66:	e080      	b.n	8006e6a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d107      	bne.n	8006d84 <HAL_ADC_ConfigChannel+0x5b4>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	0e9b      	lsrs	r3, r3, #26
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	069b      	lsls	r3, r3, #26
 8006d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d82:	e015      	b.n	8006db0 <HAL_ADC_ConfigChannel+0x5e0>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	fa93 f3a3 	rbit	r3, r3
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8006d9c:	2320      	movs	r3, #32
 8006d9e:	e003      	b.n	8006da8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	fab3 f383 	clz	r3, r3
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	3301      	adds	r3, #1
 8006daa:	069b      	lsls	r3, r3, #26
 8006dac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d109      	bne.n	8006dd0 <HAL_ADC_ConfigChannel+0x600>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	0e9b      	lsrs	r3, r3, #26
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	2101      	movs	r1, #1
 8006dca:	fa01 f303 	lsl.w	r3, r1, r3
 8006dce:	e017      	b.n	8006e00 <HAL_ADC_ConfigChannel+0x630>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	fa93 f3a3 	rbit	r3, r3
 8006ddc:	61fb      	str	r3, [r7, #28]
  return result;
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8006de8:	2320      	movs	r3, #32
 8006dea:	e003      	b.n	8006df4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	fab3 f383 	clz	r3, r3
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	3301      	adds	r3, #1
 8006df6:	f003 031f 	and.w	r3, r3, #31
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006e00:	ea42 0103 	orr.w	r1, r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10d      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x65c>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	0e9b      	lsrs	r3, r3, #26
 8006e16:	3301      	adds	r3, #1
 8006e18:	f003 021f 	and.w	r2, r3, #31
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	4413      	add	r3, r2
 8006e22:	3b1e      	subs	r3, #30
 8006e24:	051b      	lsls	r3, r3, #20
 8006e26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006e2a:	e01d      	b.n	8006e68 <HAL_ADC_ConfigChannel+0x698>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	fa93 f3a3 	rbit	r3, r3
 8006e38:	613b      	str	r3, [r7, #16]
  return result;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d103      	bne.n	8006e4c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8006e44:	2320      	movs	r3, #32
 8006e46:	e005      	b.n	8006e54 <HAL_ADC_ConfigChannel+0x684>
 8006e48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	fab3 f383 	clz	r3, r3
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	3301      	adds	r3, #1
 8006e56:	f003 021f 	and.w	r2, r3, #31
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	4413      	add	r3, r2
 8006e60:	3b1e      	subs	r3, #30
 8006e62:	051b      	lsls	r3, r3, #20
 8006e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	6892      	ldr	r2, [r2, #8]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	f7fe ffcd 	bl	8005e0e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4b44      	ldr	r3, [pc, #272]	; (8006f8c <HAL_ADC_ConfigChannel+0x7bc>)
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d07a      	beq.n	8006f76 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006e80:	4843      	ldr	r0, [pc, #268]	; (8006f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8006e82:	f7fe ff35 	bl	8005cf0 <LL_ADC_GetCommonPathInternalCh>
 8006e86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a41      	ldr	r2, [pc, #260]	; (8006f94 <HAL_ADC_ConfigChannel+0x7c4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d12c      	bne.n	8006eee <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d126      	bne.n	8006eee <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a3c      	ldr	r2, [pc, #240]	; (8006f98 <HAL_ADC_ConfigChannel+0x7c8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d004      	beq.n	8006eb4 <HAL_ADC_ConfigChannel+0x6e4>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a3b      	ldr	r2, [pc, #236]	; (8006f9c <HAL_ADC_ConfigChannel+0x7cc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d15d      	bne.n	8006f70 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006eb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4834      	ldr	r0, [pc, #208]	; (8006f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8006ec0:	f7fe ff03 	bl	8005cca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ec4:	4b36      	ldr	r3, [pc, #216]	; (8006fa0 <HAL_ADC_ConfigChannel+0x7d0>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	099b      	lsrs	r3, r3, #6
 8006eca:	4a36      	ldr	r2, [pc, #216]	; (8006fa4 <HAL_ADC_ConfigChannel+0x7d4>)
 8006ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed0:	099b      	lsrs	r3, r3, #6
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006ede:	e002      	b.n	8006ee6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f9      	bne.n	8006ee0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006eec:	e040      	b.n	8006f70 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a2d      	ldr	r2, [pc, #180]	; (8006fa8 <HAL_ADC_ConfigChannel+0x7d8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d118      	bne.n	8006f2a <HAL_ADC_ConfigChannel+0x75a>
 8006ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d112      	bne.n	8006f2a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a23      	ldr	r2, [pc, #140]	; (8006f98 <HAL_ADC_ConfigChannel+0x7c8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d004      	beq.n	8006f18 <HAL_ADC_ConfigChannel+0x748>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a22      	ldr	r2, [pc, #136]	; (8006f9c <HAL_ADC_ConfigChannel+0x7cc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d12d      	bne.n	8006f74 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f20:	4619      	mov	r1, r3
 8006f22:	481b      	ldr	r0, [pc, #108]	; (8006f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8006f24:	f7fe fed1 	bl	8005cca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006f28:	e024      	b.n	8006f74 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <HAL_ADC_ConfigChannel+0x7dc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d120      	bne.n	8006f76 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006f34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11a      	bne.n	8006f76 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a14      	ldr	r2, [pc, #80]	; (8006f98 <HAL_ADC_ConfigChannel+0x7c8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d115      	bne.n	8006f76 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f52:	4619      	mov	r1, r3
 8006f54:	480e      	ldr	r0, [pc, #56]	; (8006f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8006f56:	f7fe feb8 	bl	8005cca <LL_ADC_SetCommonPathInternalCh>
 8006f5a:	e00c      	b.n	8006f76 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f60:	f043 0220 	orr.w	r2, r3, #32
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006f6e:	e002      	b.n	8006f76 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006f70:	bf00      	nop
 8006f72:	e000      	b.n	8006f76 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006f74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006f7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	37d8      	adds	r7, #216	; 0xd8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	80080000 	.word	0x80080000
 8006f90:	50040300 	.word	0x50040300
 8006f94:	c7520000 	.word	0xc7520000
 8006f98:	50040000 	.word	0x50040000
 8006f9c:	50040200 	.word	0x50040200
 8006fa0:	20000044 	.word	0x20000044
 8006fa4:	053e2d63 	.word	0x053e2d63
 8006fa8:	cb840000 	.word	0xcb840000
 8006fac:	80000001 	.word	0x80000001

08006fb0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff f842 	bl	8006050 <LL_ADC_REG_IsConversionOngoing>
 8006fcc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff f863 	bl	800609e <LL_ADC_INJ_IsConversionOngoing>
 8006fd8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d103      	bne.n	8006fe8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8098 	beq.w	8007118 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d02a      	beq.n	800704c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7e5b      	ldrb	r3, [r3, #25]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d126      	bne.n	800704c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	7e1b      	ldrb	r3, [r3, #24]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d122      	bne.n	800704c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8007006:	2301      	movs	r3, #1
 8007008:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800700a:	e014      	b.n	8007036 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4a45      	ldr	r2, [pc, #276]	; (8007124 <ADC_ConversionStop+0x174>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d90d      	bls.n	8007030 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007018:	f043 0210 	orr.w	r2, r3, #16
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007024:	f043 0201 	orr.w	r2, r3, #1
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e074      	b.n	800711a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	3301      	adds	r3, #1
 8007034:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b40      	cmp	r3, #64	; 0x40
 8007042:	d1e3      	bne.n	800700c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2240      	movs	r2, #64	; 0x40
 800704a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d014      	beq.n	800707c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fffa 	bl	8006050 <LL_ADC_REG_IsConversionOngoing>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00c      	beq.n	800707c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe ffb7 	bl	8005fda <LL_ADC_IsDisableOngoing>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d104      	bne.n	800707c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe ffd6 	bl	8006028 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d014      	beq.n	80070ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff f809 	bl	800609e <LL_ADC_INJ_IsConversionOngoing>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00c      	beq.n	80070ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe ff9f 	bl	8005fda <LL_ADC_IsDisableOngoing>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d104      	bne.n	80070ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe ffe5 	bl	8006076 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d005      	beq.n	80070be <ADC_ConversionStop+0x10e>
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d105      	bne.n	80070c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80070b8:	230c      	movs	r3, #12
 80070ba:	617b      	str	r3, [r7, #20]
        break;
 80070bc:	e005      	b.n	80070ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80070be:	2308      	movs	r3, #8
 80070c0:	617b      	str	r3, [r7, #20]
        break;
 80070c2:	e002      	b.n	80070ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80070c4:	2304      	movs	r3, #4
 80070c6:	617b      	str	r3, [r7, #20]
        break;
 80070c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80070ca:	f7fe fdbb 	bl	8005c44 <HAL_GetTick>
 80070ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80070d0:	e01b      	b.n	800710a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80070d2:	f7fe fdb7 	bl	8005c44 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b05      	cmp	r3, #5
 80070de:	d914      	bls.n	800710a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	4013      	ands	r3, r2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00d      	beq.n	800710a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f2:	f043 0210 	orr.w	r2, r3, #16
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fe:	f043 0201 	orr.w	r2, r3, #1
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e007      	b.n	800711a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	4013      	ands	r3, r2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1dc      	bne.n	80070d2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3720      	adds	r7, #32
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	a33fffff 	.word	0xa33fffff

08007128 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe ff3d 	bl	8005fb4 <LL_ADC_IsEnabled>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d14d      	bne.n	80071dc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	4b28      	ldr	r3, [pc, #160]	; (80071e8 <ADC_Enable+0xc0>)
 8007148:	4013      	ands	r3, r2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00d      	beq.n	800716a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007152:	f043 0210 	orr.w	r2, r3, #16
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715e:	f043 0201 	orr.w	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e039      	b.n	80071de <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe fef8 	bl	8005f64 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007174:	f7fe fd66 	bl	8005c44 <HAL_GetTick>
 8007178:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800717a:	e028      	b.n	80071ce <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f7fe ff17 	bl	8005fb4 <LL_ADC_IsEnabled>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d104      	bne.n	8007196 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fee7 	bl	8005f64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007196:	f7fe fd55 	bl	8005c44 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d914      	bls.n	80071ce <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d00d      	beq.n	80071ce <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b6:	f043 0210 	orr.w	r2, r3, #16
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c2:	f043 0201 	orr.w	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e007      	b.n	80071de <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d1cf      	bne.n	800717c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	8000003f 	.word	0x8000003f

080071ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe feee 	bl	8005fda <LL_ADC_IsDisableOngoing>
 80071fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe fed5 	bl	8005fb4 <LL_ADC_IsEnabled>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d047      	beq.n	80072a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d144      	bne.n	80072a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 030d 	and.w	r3, r3, #13
 8007220:	2b01      	cmp	r3, #1
 8007222:	d10c      	bne.n	800723e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe feaf 	bl	8005f8c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2203      	movs	r2, #3
 8007234:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007236:	f7fe fd05 	bl	8005c44 <HAL_GetTick>
 800723a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800723c:	e029      	b.n	8007292 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007242:	f043 0210 	orr.w	r2, r3, #16
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724e:	f043 0201 	orr.w	r2, r3, #1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e023      	b.n	80072a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800725a:	f7fe fcf3 	bl	8005c44 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b02      	cmp	r3, #2
 8007266:	d914      	bls.n	8007292 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00d      	beq.n	8007292 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727a:	f043 0210 	orr.w	r2, r3, #16
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007286:	f043 0201 	orr.w	r2, r3, #1
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e007      	b.n	80072a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1dc      	bne.n	800725a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <LL_ADC_IsEnabled>:
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <LL_ADC_IsEnabled+0x18>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <LL_ADC_IsEnabled+0x1a>
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <LL_ADC_REG_IsConversionOngoing>:
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d101      	bne.n	80072e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80072e4:	2301      	movs	r3, #1
 80072e6:	e000      	b.n	80072ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
	...

080072f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80072f8:	b590      	push	{r4, r7, lr}
 80072fa:	b09f      	sub	sp, #124	; 0x7c
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800730e:	2b01      	cmp	r3, #1
 8007310:	d101      	bne.n	8007316 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007312:	2302      	movs	r3, #2
 8007314:	e093      	b.n	800743e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800731e:	2300      	movs	r3, #0
 8007320:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8007322:	2300      	movs	r3, #0
 8007324:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a47      	ldr	r2, [pc, #284]	; (8007448 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d102      	bne.n	8007336 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007330:	4b46      	ldr	r3, [pc, #280]	; (800744c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8007332:	60bb      	str	r3, [r7, #8]
 8007334:	e001      	b.n	800733a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007336:	2300      	movs	r3, #0
 8007338:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10b      	bne.n	8007358 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007344:	f043 0220 	orr.w	r2, r3, #32
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e072      	b.n	800743e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff ffb8 	bl	80072d0 <LL_ADC_REG_IsConversionOngoing>
 8007360:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff ffb2 	bl	80072d0 <LL_ADC_REG_IsConversionOngoing>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d154      	bne.n	800741c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007374:	2b00      	cmp	r3, #0
 8007376:	d151      	bne.n	800741c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007378:	4b35      	ldr	r3, [pc, #212]	; (8007450 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800737a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d02c      	beq.n	80073de <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	6859      	ldr	r1, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007396:	035b      	lsls	r3, r3, #13
 8007398:	430b      	orrs	r3, r1
 800739a:	431a      	orrs	r2, r3
 800739c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073a0:	4829      	ldr	r0, [pc, #164]	; (8007448 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80073a2:	f7ff ff82 	bl	80072aa <LL_ADC_IsEnabled>
 80073a6:	4604      	mov	r4, r0
 80073a8:	4828      	ldr	r0, [pc, #160]	; (800744c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80073aa:	f7ff ff7e 	bl	80072aa <LL_ADC_IsEnabled>
 80073ae:	4603      	mov	r3, r0
 80073b0:	431c      	orrs	r4, r3
 80073b2:	4828      	ldr	r0, [pc, #160]	; (8007454 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80073b4:	f7ff ff79 	bl	80072aa <LL_ADC_IsEnabled>
 80073b8:	4603      	mov	r3, r0
 80073ba:	4323      	orrs	r3, r4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d137      	bne.n	8007430 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80073c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80073c8:	f023 030f 	bic.w	r3, r3, #15
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	6811      	ldr	r1, [r2, #0]
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	6892      	ldr	r2, [r2, #8]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	431a      	orrs	r2, r3
 80073d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80073dc:	e028      	b.n	8007430 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80073de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073ea:	4817      	ldr	r0, [pc, #92]	; (8007448 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80073ec:	f7ff ff5d 	bl	80072aa <LL_ADC_IsEnabled>
 80073f0:	4604      	mov	r4, r0
 80073f2:	4816      	ldr	r0, [pc, #88]	; (800744c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80073f4:	f7ff ff59 	bl	80072aa <LL_ADC_IsEnabled>
 80073f8:	4603      	mov	r3, r0
 80073fa:	431c      	orrs	r4, r3
 80073fc:	4815      	ldr	r0, [pc, #84]	; (8007454 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80073fe:	f7ff ff54 	bl	80072aa <LL_ADC_IsEnabled>
 8007402:	4603      	mov	r3, r0
 8007404:	4323      	orrs	r3, r4
 8007406:	2b00      	cmp	r3, #0
 8007408:	d112      	bne.n	8007430 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800740a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007412:	f023 030f 	bic.w	r3, r3, #15
 8007416:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007418:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800741a:	e009      	b.n	8007430 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007420:	f043 0220 	orr.w	r2, r3, #32
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800742e:	e000      	b.n	8007432 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007430:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800743a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800743e:	4618      	mov	r0, r3
 8007440:	377c      	adds	r7, #124	; 0x7c
 8007442:	46bd      	mov	sp, r7
 8007444:	bd90      	pop	{r4, r7, pc}
 8007446:	bf00      	nop
 8007448:	50040000 	.word	0x50040000
 800744c:	50040100 	.word	0x50040100
 8007450:	50040300 	.word	0x50040300
 8007454:	50040200 	.word	0x50040200

08007458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007468:	4b0c      	ldr	r3, [pc, #48]	; (800749c <__NVIC_SetPriorityGrouping+0x44>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007474:	4013      	ands	r3, r2
 8007476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800748a:	4a04      	ldr	r2, [pc, #16]	; (800749c <__NVIC_SetPriorityGrouping+0x44>)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	60d3      	str	r3, [r2, #12]
}
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	e000ed00 	.word	0xe000ed00

080074a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074a4:	4b04      	ldr	r3, [pc, #16]	; (80074b8 <__NVIC_GetPriorityGrouping+0x18>)
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	0a1b      	lsrs	r3, r3, #8
 80074aa:	f003 0307 	and.w	r3, r3, #7
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	e000ed00 	.word	0xe000ed00

080074bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	db0b      	blt.n	80074e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	f003 021f 	and.w	r2, r3, #31
 80074d4:	4907      	ldr	r1, [pc, #28]	; (80074f4 <__NVIC_EnableIRQ+0x38>)
 80074d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	2001      	movs	r0, #1
 80074de:	fa00 f202 	lsl.w	r2, r0, r2
 80074e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	e000e100 	.word	0xe000e100

080074f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	6039      	str	r1, [r7, #0]
 8007502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007508:	2b00      	cmp	r3, #0
 800750a:	db0a      	blt.n	8007522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	b2da      	uxtb	r2, r3
 8007510:	490c      	ldr	r1, [pc, #48]	; (8007544 <__NVIC_SetPriority+0x4c>)
 8007512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007516:	0112      	lsls	r2, r2, #4
 8007518:	b2d2      	uxtb	r2, r2
 800751a:	440b      	add	r3, r1
 800751c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007520:	e00a      	b.n	8007538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	b2da      	uxtb	r2, r3
 8007526:	4908      	ldr	r1, [pc, #32]	; (8007548 <__NVIC_SetPriority+0x50>)
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	3b04      	subs	r3, #4
 8007530:	0112      	lsls	r2, r2, #4
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	440b      	add	r3, r1
 8007536:	761a      	strb	r2, [r3, #24]
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	e000e100 	.word	0xe000e100
 8007548:	e000ed00 	.word	0xe000ed00

0800754c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800754c:	b480      	push	{r7}
 800754e:	b089      	sub	sp, #36	; 0x24
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f1c3 0307 	rsb	r3, r3, #7
 8007566:	2b04      	cmp	r3, #4
 8007568:	bf28      	it	cs
 800756a:	2304      	movcs	r3, #4
 800756c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	3304      	adds	r3, #4
 8007572:	2b06      	cmp	r3, #6
 8007574:	d902      	bls.n	800757c <NVIC_EncodePriority+0x30>
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	3b03      	subs	r3, #3
 800757a:	e000      	b.n	800757e <NVIC_EncodePriority+0x32>
 800757c:	2300      	movs	r3, #0
 800757e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007580:	f04f 32ff 	mov.w	r2, #4294967295
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	fa02 f303 	lsl.w	r3, r2, r3
 800758a:	43da      	mvns	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	401a      	ands	r2, r3
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007594:	f04f 31ff 	mov.w	r1, #4294967295
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	fa01 f303 	lsl.w	r3, r1, r3
 800759e:	43d9      	mvns	r1, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075a4:	4313      	orrs	r3, r2
         );
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3724      	adds	r7, #36	; 0x24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff ff4c 	bl	8007458 <__NVIC_SetPriorityGrouping>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80075d6:	2300      	movs	r3, #0
 80075d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80075da:	f7ff ff61 	bl	80074a0 <__NVIC_GetPriorityGrouping>
 80075de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	6978      	ldr	r0, [r7, #20]
 80075e6:	f7ff ffb1 	bl	800754c <NVIC_EncodePriority>
 80075ea:	4602      	mov	r2, r0
 80075ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075f0:	4611      	mov	r1, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff ff80 	bl	80074f8 <__NVIC_SetPriority>
}
 80075f8:	bf00      	nop
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800760a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff ff54 	bl	80074bc <__NVIC_EnableIRQ>
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800762a:	e17f      	b.n	800792c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	2101      	movs	r1, #1
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	fa01 f303 	lsl.w	r3, r1, r3
 8007638:	4013      	ands	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8171 	beq.w	8007926 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d00b      	beq.n	8007664 <HAL_GPIO_Init+0x48>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b02      	cmp	r3, #2
 8007652:	d007      	beq.n	8007664 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007658:	2b11      	cmp	r3, #17
 800765a:	d003      	beq.n	8007664 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b12      	cmp	r3, #18
 8007662:	d130      	bne.n	80076c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	2203      	movs	r2, #3
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	43db      	mvns	r3, r3
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4013      	ands	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	fa02 f303 	lsl.w	r3, r2, r3
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800769a:	2201      	movs	r2, #1
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	fa02 f303 	lsl.w	r3, r2, r3
 80076a2:	43db      	mvns	r3, r3
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4013      	ands	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	091b      	lsrs	r3, r3, #4
 80076b0:	f003 0201 	and.w	r2, r3, #1
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d118      	bne.n	8007704 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80076d8:	2201      	movs	r2, #1
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	fa02 f303 	lsl.w	r3, r2, r3
 80076e0:	43db      	mvns	r3, r3
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4013      	ands	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	08db      	lsrs	r3, r3, #3
 80076ee:	f003 0201 	and.w	r2, r3, #1
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	fa02 f303 	lsl.w	r3, r2, r3
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	2203      	movs	r2, #3
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	43db      	mvns	r3, r3
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4013      	ands	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4313      	orrs	r3, r2
 800772c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d003      	beq.n	8007744 <HAL_GPIO_Init+0x128>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b12      	cmp	r3, #18
 8007742:	d123      	bne.n	800778c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	08da      	lsrs	r2, r3, #3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3208      	adds	r2, #8
 800774c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007750:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	220f      	movs	r2, #15
 800775c:	fa02 f303 	lsl.w	r3, r2, r3
 8007760:	43db      	mvns	r3, r3
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4013      	ands	r3, r2
 8007766:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	fa02 f303 	lsl.w	r3, r2, r3
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	08da      	lsrs	r2, r3, #3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3208      	adds	r2, #8
 8007786:	6939      	ldr	r1, [r7, #16]
 8007788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	2203      	movs	r2, #3
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	43db      	mvns	r3, r3
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4013      	ands	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f003 0203 	and.w	r2, r3, #3
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 80ac 	beq.w	8007926 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077ce:	4b5f      	ldr	r3, [pc, #380]	; (800794c <HAL_GPIO_Init+0x330>)
 80077d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d2:	4a5e      	ldr	r2, [pc, #376]	; (800794c <HAL_GPIO_Init+0x330>)
 80077d4:	f043 0301 	orr.w	r3, r3, #1
 80077d8:	6613      	str	r3, [r2, #96]	; 0x60
 80077da:	4b5c      	ldr	r3, [pc, #368]	; (800794c <HAL_GPIO_Init+0x330>)
 80077dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	60bb      	str	r3, [r7, #8]
 80077e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80077e6:	4a5a      	ldr	r2, [pc, #360]	; (8007950 <HAL_GPIO_Init+0x334>)
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	089b      	lsrs	r3, r3, #2
 80077ec:	3302      	adds	r3, #2
 80077ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	220f      	movs	r2, #15
 80077fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007802:	43db      	mvns	r3, r3
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4013      	ands	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007810:	d025      	beq.n	800785e <HAL_GPIO_Init+0x242>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a4f      	ldr	r2, [pc, #316]	; (8007954 <HAL_GPIO_Init+0x338>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d01f      	beq.n	800785a <HAL_GPIO_Init+0x23e>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a4e      	ldr	r2, [pc, #312]	; (8007958 <HAL_GPIO_Init+0x33c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d019      	beq.n	8007856 <HAL_GPIO_Init+0x23a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a4d      	ldr	r2, [pc, #308]	; (800795c <HAL_GPIO_Init+0x340>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d013      	beq.n	8007852 <HAL_GPIO_Init+0x236>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a4c      	ldr	r2, [pc, #304]	; (8007960 <HAL_GPIO_Init+0x344>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00d      	beq.n	800784e <HAL_GPIO_Init+0x232>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a4b      	ldr	r2, [pc, #300]	; (8007964 <HAL_GPIO_Init+0x348>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d007      	beq.n	800784a <HAL_GPIO_Init+0x22e>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a4a      	ldr	r2, [pc, #296]	; (8007968 <HAL_GPIO_Init+0x34c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d101      	bne.n	8007846 <HAL_GPIO_Init+0x22a>
 8007842:	2306      	movs	r3, #6
 8007844:	e00c      	b.n	8007860 <HAL_GPIO_Init+0x244>
 8007846:	2307      	movs	r3, #7
 8007848:	e00a      	b.n	8007860 <HAL_GPIO_Init+0x244>
 800784a:	2305      	movs	r3, #5
 800784c:	e008      	b.n	8007860 <HAL_GPIO_Init+0x244>
 800784e:	2304      	movs	r3, #4
 8007850:	e006      	b.n	8007860 <HAL_GPIO_Init+0x244>
 8007852:	2303      	movs	r3, #3
 8007854:	e004      	b.n	8007860 <HAL_GPIO_Init+0x244>
 8007856:	2302      	movs	r3, #2
 8007858:	e002      	b.n	8007860 <HAL_GPIO_Init+0x244>
 800785a:	2301      	movs	r3, #1
 800785c:	e000      	b.n	8007860 <HAL_GPIO_Init+0x244>
 800785e:	2300      	movs	r3, #0
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	f002 0203 	and.w	r2, r2, #3
 8007866:	0092      	lsls	r2, r2, #2
 8007868:	4093      	lsls	r3, r2
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007870:	4937      	ldr	r1, [pc, #220]	; (8007950 <HAL_GPIO_Init+0x334>)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	089b      	lsrs	r3, r3, #2
 8007876:	3302      	adds	r3, #2
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800787e:	4b3b      	ldr	r3, [pc, #236]	; (800796c <HAL_GPIO_Init+0x350>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	43db      	mvns	r3, r3
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4013      	ands	r3, r2
 800788c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80078a2:	4a32      	ldr	r2, [pc, #200]	; (800796c <HAL_GPIO_Init+0x350>)
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80078a8:	4b30      	ldr	r3, [pc, #192]	; (800796c <HAL_GPIO_Init+0x350>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	43db      	mvns	r3, r3
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	4013      	ands	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80078cc:	4a27      	ldr	r2, [pc, #156]	; (800796c <HAL_GPIO_Init+0x350>)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078d2:	4b26      	ldr	r3, [pc, #152]	; (800796c <HAL_GPIO_Init+0x350>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	43db      	mvns	r3, r3
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4013      	ands	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80078f6:	4a1d      	ldr	r2, [pc, #116]	; (800796c <HAL_GPIO_Init+0x350>)
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80078fc:	4b1b      	ldr	r3, [pc, #108]	; (800796c <HAL_GPIO_Init+0x350>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	43db      	mvns	r3, r3
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4013      	ands	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007920:	4a12      	ldr	r2, [pc, #72]	; (800796c <HAL_GPIO_Init+0x350>)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	3301      	adds	r3, #1
 800792a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	fa22 f303 	lsr.w	r3, r2, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	f47f ae78 	bne.w	800762c <HAL_GPIO_Init+0x10>
  }
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	40021000 	.word	0x40021000
 8007950:	40010000 	.word	0x40010000
 8007954:	48000400 	.word	0x48000400
 8007958:	48000800 	.word	0x48000800
 800795c:	48000c00 	.word	0x48000c00
 8007960:	48001000 	.word	0x48001000
 8007964:	48001400 	.word	0x48001400
 8007968:	48001800 	.word	0x48001800
 800796c:	40010400 	.word	0x40010400

08007970 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800797a:	2300      	movs	r3, #0
 800797c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800797e:	e0cd      	b.n	8007b1c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007980:	2201      	movs	r2, #1
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	fa02 f303 	lsl.w	r3, r2, r3
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	4013      	ands	r3, r2
 800798c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 80c0 	beq.w	8007b16 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007996:	4a68      	ldr	r2, [pc, #416]	; (8007b38 <HAL_GPIO_DeInit+0x1c8>)
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	089b      	lsrs	r3, r3, #2
 800799c:	3302      	adds	r3, #2
 800799e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	220f      	movs	r2, #15
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4013      	ands	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80079be:	d025      	beq.n	8007a0c <HAL_GPIO_DeInit+0x9c>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a5e      	ldr	r2, [pc, #376]	; (8007b3c <HAL_GPIO_DeInit+0x1cc>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d01f      	beq.n	8007a08 <HAL_GPIO_DeInit+0x98>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a5d      	ldr	r2, [pc, #372]	; (8007b40 <HAL_GPIO_DeInit+0x1d0>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d019      	beq.n	8007a04 <HAL_GPIO_DeInit+0x94>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a5c      	ldr	r2, [pc, #368]	; (8007b44 <HAL_GPIO_DeInit+0x1d4>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <HAL_GPIO_DeInit+0x90>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a5b      	ldr	r2, [pc, #364]	; (8007b48 <HAL_GPIO_DeInit+0x1d8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d00d      	beq.n	80079fc <HAL_GPIO_DeInit+0x8c>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a5a      	ldr	r2, [pc, #360]	; (8007b4c <HAL_GPIO_DeInit+0x1dc>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d007      	beq.n	80079f8 <HAL_GPIO_DeInit+0x88>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a59      	ldr	r2, [pc, #356]	; (8007b50 <HAL_GPIO_DeInit+0x1e0>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d101      	bne.n	80079f4 <HAL_GPIO_DeInit+0x84>
 80079f0:	2306      	movs	r3, #6
 80079f2:	e00c      	b.n	8007a0e <HAL_GPIO_DeInit+0x9e>
 80079f4:	2307      	movs	r3, #7
 80079f6:	e00a      	b.n	8007a0e <HAL_GPIO_DeInit+0x9e>
 80079f8:	2305      	movs	r3, #5
 80079fa:	e008      	b.n	8007a0e <HAL_GPIO_DeInit+0x9e>
 80079fc:	2304      	movs	r3, #4
 80079fe:	e006      	b.n	8007a0e <HAL_GPIO_DeInit+0x9e>
 8007a00:	2303      	movs	r3, #3
 8007a02:	e004      	b.n	8007a0e <HAL_GPIO_DeInit+0x9e>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e002      	b.n	8007a0e <HAL_GPIO_DeInit+0x9e>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <HAL_GPIO_DeInit+0x9e>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	f002 0203 	and.w	r2, r2, #3
 8007a14:	0092      	lsls	r2, r2, #2
 8007a16:	4093      	lsls	r3, r2
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d132      	bne.n	8007a84 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007a1e:	4b4d      	ldr	r3, [pc, #308]	; (8007b54 <HAL_GPIO_DeInit+0x1e4>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	43db      	mvns	r3, r3
 8007a26:	494b      	ldr	r1, [pc, #300]	; (8007b54 <HAL_GPIO_DeInit+0x1e4>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007a2c:	4b49      	ldr	r3, [pc, #292]	; (8007b54 <HAL_GPIO_DeInit+0x1e4>)
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	43db      	mvns	r3, r3
 8007a34:	4947      	ldr	r1, [pc, #284]	; (8007b54 <HAL_GPIO_DeInit+0x1e4>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8007a3a:	4b46      	ldr	r3, [pc, #280]	; (8007b54 <HAL_GPIO_DeInit+0x1e4>)
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	43db      	mvns	r3, r3
 8007a42:	4944      	ldr	r1, [pc, #272]	; (8007b54 <HAL_GPIO_DeInit+0x1e4>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8007a48:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <HAL_GPIO_DeInit+0x1e4>)
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	43db      	mvns	r3, r3
 8007a50:	4940      	ldr	r1, [pc, #256]	; (8007b54 <HAL_GPIO_DeInit+0x1e4>)
 8007a52:	4013      	ands	r3, r2
 8007a54:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	220f      	movs	r2, #15
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007a66:	4a34      	ldr	r2, [pc, #208]	; (8007b38 <HAL_GPIO_DeInit+0x1c8>)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	089b      	lsrs	r3, r3, #2
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	43da      	mvns	r2, r3
 8007a76:	4830      	ldr	r0, [pc, #192]	; (8007b38 <HAL_GPIO_DeInit+0x1c8>)
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	089b      	lsrs	r3, r3, #2
 8007a7c:	400a      	ands	r2, r1
 8007a7e:	3302      	adds	r3, #2
 8007a80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	2103      	movs	r1, #3
 8007a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a92:	431a      	orrs	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	08da      	lsrs	r2, r3, #3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3208      	adds	r2, #8
 8007aa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	220f      	movs	r2, #15
 8007aae:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	08d2      	lsrs	r2, r2, #3
 8007ab8:	4019      	ands	r1, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3208      	adds	r2, #8
 8007abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	2103      	movs	r1, #3
 8007acc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	401a      	ands	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	2101      	movs	r1, #1
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae4:	43db      	mvns	r3, r3
 8007ae6:	401a      	ands	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	2103      	movs	r1, #3
 8007af6:	fa01 f303 	lsl.w	r3, r1, r3
 8007afa:	43db      	mvns	r3, r3
 8007afc:	401a      	ands	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b06:	2101      	movs	r1, #1
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b0e:	43db      	mvns	r3, r3
 8007b10:	401a      	ands	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f47f af2b 	bne.w	8007980 <HAL_GPIO_DeInit+0x10>
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	bf00      	nop
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	40010000 	.word	0x40010000
 8007b3c:	48000400 	.word	0x48000400
 8007b40:	48000800 	.word	0x48000800
 8007b44:	48000c00 	.word	0x48000c00
 8007b48:	48001000 	.word	0x48001000
 8007b4c:	48001400 	.word	0x48001400
 8007b50:	48001800 	.word	0x48001800
 8007b54:	40010400 	.word	0x40010400

08007b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	887b      	ldrh	r3, [r7, #2]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b70:	2301      	movs	r3, #1
 8007b72:	73fb      	strb	r3, [r7, #15]
 8007b74:	e001      	b.n	8007b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b76:	2300      	movs	r3, #0
 8007b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	807b      	strh	r3, [r7, #2]
 8007b94:	4613      	mov	r3, r2
 8007b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b98:	787b      	ldrb	r3, [r7, #1]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007b9e:	887a      	ldrh	r2, [r7, #2]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007ba4:	e002      	b.n	8007bac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007ba6:	887a      	ldrh	r2, [r7, #2]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007bbc:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	40007000 	.word	0x40007000

08007bd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be2:	d130      	bne.n	8007c46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007be4:	4b23      	ldr	r3, [pc, #140]	; (8007c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bf0:	d038      	beq.n	8007c64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007bf2:	4b20      	ldr	r3, [pc, #128]	; (8007c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007bfa:	4a1e      	ldr	r2, [pc, #120]	; (8007c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c02:	4b1d      	ldr	r3, [pc, #116]	; (8007c78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2232      	movs	r2, #50	; 0x32
 8007c08:	fb02 f303 	mul.w	r3, r2, r3
 8007c0c:	4a1b      	ldr	r2, [pc, #108]	; (8007c7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c12:	0c9b      	lsrs	r3, r3, #18
 8007c14:	3301      	adds	r3, #1
 8007c16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c18:	e002      	b.n	8007c20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c20:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c2c:	d102      	bne.n	8007c34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1f2      	bne.n	8007c1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c34:	4b0f      	ldr	r3, [pc, #60]	; (8007c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c40:	d110      	bne.n	8007c64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e00f      	b.n	8007c66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c46:	4b0b      	ldr	r3, [pc, #44]	; (8007c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c52:	d007      	beq.n	8007c64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c54:	4b07      	ldr	r3, [pc, #28]	; (8007c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c5c:	4a05      	ldr	r2, [pc, #20]	; (8007c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	40007000 	.word	0x40007000
 8007c78:	20000044 	.word	0x20000044
 8007c7c:	431bde83 	.word	0x431bde83

08007c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e3d4      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c92:	4ba1      	ldr	r3, [pc, #644]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f003 030c 	and.w	r3, r3, #12
 8007c9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c9c:	4b9e      	ldr	r3, [pc, #632]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0310 	and.w	r3, r3, #16
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 80e4 	beq.w	8007e7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d007      	beq.n	8007cca <HAL_RCC_OscConfig+0x4a>
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b0c      	cmp	r3, #12
 8007cbe:	f040 808b 	bne.w	8007dd8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	f040 8087 	bne.w	8007dd8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007cca:	4b93      	ldr	r3, [pc, #588]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x62>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e3ac      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1a      	ldr	r2, [r3, #32]
 8007ce6:	4b8c      	ldr	r3, [pc, #560]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0308 	and.w	r3, r3, #8
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <HAL_RCC_OscConfig+0x7c>
 8007cf2:	4b89      	ldr	r3, [pc, #548]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cfa:	e005      	b.n	8007d08 <HAL_RCC_OscConfig+0x88>
 8007cfc:	4b86      	ldr	r3, [pc, #536]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d02:	091b      	lsrs	r3, r3, #4
 8007d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d223      	bcs.n	8007d54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fd73 	bl	80087fc <RCC_SetFlashLatencyFromMSIRange>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e38d      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d20:	4b7d      	ldr	r3, [pc, #500]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a7c      	ldr	r2, [pc, #496]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d26:	f043 0308 	orr.w	r3, r3, #8
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	4b7a      	ldr	r3, [pc, #488]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	4977      	ldr	r1, [pc, #476]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d3e:	4b76      	ldr	r3, [pc, #472]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	021b      	lsls	r3, r3, #8
 8007d4c:	4972      	ldr	r1, [pc, #456]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	604b      	str	r3, [r1, #4]
 8007d52:	e025      	b.n	8007da0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d54:	4b70      	ldr	r3, [pc, #448]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a6f      	ldr	r2, [pc, #444]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d5a:	f043 0308 	orr.w	r3, r3, #8
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	4b6d      	ldr	r3, [pc, #436]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	496a      	ldr	r1, [pc, #424]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d72:	4b69      	ldr	r3, [pc, #420]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	4965      	ldr	r1, [pc, #404]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d109      	bne.n	8007da0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fd33 	bl	80087fc <RCC_SetFlashLatencyFromMSIRange>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e34d      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007da0:	f000 fc36 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 8007da4:	4602      	mov	r2, r0
 8007da6:	4b5c      	ldr	r3, [pc, #368]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	091b      	lsrs	r3, r3, #4
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	495a      	ldr	r1, [pc, #360]	; (8007f1c <HAL_RCC_OscConfig+0x29c>)
 8007db2:	5ccb      	ldrb	r3, [r1, r3]
 8007db4:	f003 031f 	and.w	r3, r3, #31
 8007db8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dbc:	4a58      	ldr	r2, [pc, #352]	; (8007f20 <HAL_RCC_OscConfig+0x2a0>)
 8007dbe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007dc0:	4b58      	ldr	r3, [pc, #352]	; (8007f24 <HAL_RCC_OscConfig+0x2a4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fc fb83 	bl	80044d0 <HAL_InitTick>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d052      	beq.n	8007e7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	e331      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d032      	beq.n	8007e46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007de0:	4b4d      	ldr	r3, [pc, #308]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a4c      	ldr	r2, [pc, #304]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007de6:	f043 0301 	orr.w	r3, r3, #1
 8007dea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007dec:	f7fd ff2a 	bl	8005c44 <HAL_GetTick>
 8007df0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007df4:	f7fd ff26 	bl	8005c44 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e31a      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e06:	4b44      	ldr	r3, [pc, #272]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0f0      	beq.n	8007df4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e12:	4b41      	ldr	r3, [pc, #260]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a40      	ldr	r2, [pc, #256]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007e18:	f043 0308 	orr.w	r3, r3, #8
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	4b3e      	ldr	r3, [pc, #248]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	493b      	ldr	r1, [pc, #236]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e30:	4b39      	ldr	r3, [pc, #228]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	4936      	ldr	r1, [pc, #216]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	604b      	str	r3, [r1, #4]
 8007e44:	e01a      	b.n	8007e7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007e46:	4b34      	ldr	r3, [pc, #208]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a33      	ldr	r2, [pc, #204]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007e4c:	f023 0301 	bic.w	r3, r3, #1
 8007e50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e52:	f7fd fef7 	bl	8005c44 <HAL_GetTick>
 8007e56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007e58:	e008      	b.n	8007e6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e5a:	f7fd fef3 	bl	8005c44 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e2e7      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007e6c:	4b2a      	ldr	r3, [pc, #168]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1f0      	bne.n	8007e5a <HAL_RCC_OscConfig+0x1da>
 8007e78:	e000      	b.n	8007e7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007e7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d074      	beq.n	8007f72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	2b08      	cmp	r3, #8
 8007e8c:	d005      	beq.n	8007e9a <HAL_RCC_OscConfig+0x21a>
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	2b0c      	cmp	r3, #12
 8007e92:	d10e      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d10b      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e9a:	4b1f      	ldr	r3, [pc, #124]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d064      	beq.n	8007f70 <HAL_RCC_OscConfig+0x2f0>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d160      	bne.n	8007f70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e2c4      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eba:	d106      	bne.n	8007eca <HAL_RCC_OscConfig+0x24a>
 8007ebc:	4b16      	ldr	r3, [pc, #88]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	e01d      	b.n	8007f06 <HAL_RCC_OscConfig+0x286>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ed2:	d10c      	bne.n	8007eee <HAL_RCC_OscConfig+0x26e>
 8007ed4:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a0f      	ldr	r2, [pc, #60]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007eda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	4b0d      	ldr	r3, [pc, #52]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a0c      	ldr	r2, [pc, #48]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	e00b      	b.n	8007f06 <HAL_RCC_OscConfig+0x286>
 8007eee:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a09      	ldr	r2, [pc, #36]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	4b07      	ldr	r3, [pc, #28]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a06      	ldr	r2, [pc, #24]	; (8007f18 <HAL_RCC_OscConfig+0x298>)
 8007f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01c      	beq.n	8007f48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0e:	f7fd fe99 	bl	8005c44 <HAL_GetTick>
 8007f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f14:	e011      	b.n	8007f3a <HAL_RCC_OscConfig+0x2ba>
 8007f16:	bf00      	nop
 8007f18:	40021000 	.word	0x40021000
 8007f1c:	08021168 	.word	0x08021168
 8007f20:	20000044 	.word	0x20000044
 8007f24:	20000094 	.word	0x20000094
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f28:	f7fd fe8c 	bl	8005c44 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b64      	cmp	r3, #100	; 0x64
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e280      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f3a:	4baf      	ldr	r3, [pc, #700]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0f0      	beq.n	8007f28 <HAL_RCC_OscConfig+0x2a8>
 8007f46:	e014      	b.n	8007f72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7fd fe7c 	bl	8005c44 <HAL_GetTick>
 8007f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f50:	f7fd fe78 	bl	8005c44 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b64      	cmp	r3, #100	; 0x64
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e26c      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f62:	4ba5      	ldr	r3, [pc, #660]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1f0      	bne.n	8007f50 <HAL_RCC_OscConfig+0x2d0>
 8007f6e:	e000      	b.n	8007f72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d060      	beq.n	8008040 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d005      	beq.n	8007f90 <HAL_RCC_OscConfig+0x310>
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b0c      	cmp	r3, #12
 8007f88:	d119      	bne.n	8007fbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d116      	bne.n	8007fbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f90:	4b99      	ldr	r3, [pc, #612]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x328>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e249      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fa8:	4b93      	ldr	r3, [pc, #588]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	061b      	lsls	r3, r3, #24
 8007fb6:	4990      	ldr	r1, [pc, #576]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fbc:	e040      	b.n	8008040 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d023      	beq.n	800800e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fc6:	4b8c      	ldr	r3, [pc, #560]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a8b      	ldr	r2, [pc, #556]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8007fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd2:	f7fd fe37 	bl	8005c44 <HAL_GetTick>
 8007fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fd8:	e008      	b.n	8007fec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fda:	f7fd fe33 	bl	8005c44 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d901      	bls.n	8007fec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e227      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fec:	4b82      	ldr	r3, [pc, #520]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0f0      	beq.n	8007fda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ff8:	4b7f      	ldr	r3, [pc, #508]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	061b      	lsls	r3, r3, #24
 8008006:	497c      	ldr	r1, [pc, #496]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008008:	4313      	orrs	r3, r2
 800800a:	604b      	str	r3, [r1, #4]
 800800c:	e018      	b.n	8008040 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800800e:	4b7a      	ldr	r3, [pc, #488]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a79      	ldr	r2, [pc, #484]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801a:	f7fd fe13 	bl	8005c44 <HAL_GetTick>
 800801e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008020:	e008      	b.n	8008034 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008022:	f7fd fe0f 	bl	8005c44 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e203      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008034:	4b70      	ldr	r3, [pc, #448]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f0      	bne.n	8008022 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b00      	cmp	r3, #0
 800804a:	d03c      	beq.n	80080c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01c      	beq.n	800808e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008054:	4b68      	ldr	r3, [pc, #416]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800805a:	4a67      	ldr	r2, [pc, #412]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 800805c:	f043 0301 	orr.w	r3, r3, #1
 8008060:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008064:	f7fd fdee 	bl	8005c44 <HAL_GetTick>
 8008068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800806a:	e008      	b.n	800807e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800806c:	f7fd fdea 	bl	8005c44 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d901      	bls.n	800807e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e1de      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800807e:	4b5e      	ldr	r3, [pc, #376]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0ef      	beq.n	800806c <HAL_RCC_OscConfig+0x3ec>
 800808c:	e01b      	b.n	80080c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800808e:	4b5a      	ldr	r3, [pc, #360]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008094:	4a58      	ldr	r2, [pc, #352]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800809e:	f7fd fdd1 	bl	8005c44 <HAL_GetTick>
 80080a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080a4:	e008      	b.n	80080b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080a6:	f7fd fdcd 	bl	8005c44 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e1c1      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080b8:	4b4f      	ldr	r3, [pc, #316]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 80080ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1ef      	bne.n	80080a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0304 	and.w	r3, r3, #4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 80a6 	beq.w	8008220 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080d4:	2300      	movs	r3, #0
 80080d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80080d8:	4b47      	ldr	r3, [pc, #284]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 80080da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10d      	bne.n	8008100 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080e4:	4b44      	ldr	r3, [pc, #272]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 80080e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e8:	4a43      	ldr	r2, [pc, #268]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 80080ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ee:	6593      	str	r3, [r2, #88]	; 0x58
 80080f0:	4b41      	ldr	r3, [pc, #260]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 80080f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080f8:	60bb      	str	r3, [r7, #8]
 80080fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080fc:	2301      	movs	r3, #1
 80080fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008100:	4b3e      	ldr	r3, [pc, #248]	; (80081fc <HAL_RCC_OscConfig+0x57c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008108:	2b00      	cmp	r3, #0
 800810a:	d118      	bne.n	800813e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800810c:	4b3b      	ldr	r3, [pc, #236]	; (80081fc <HAL_RCC_OscConfig+0x57c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a3a      	ldr	r2, [pc, #232]	; (80081fc <HAL_RCC_OscConfig+0x57c>)
 8008112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008118:	f7fd fd94 	bl	8005c44 <HAL_GetTick>
 800811c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008120:	f7fd fd90 	bl	8005c44 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e184      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008132:	4b32      	ldr	r3, [pc, #200]	; (80081fc <HAL_RCC_OscConfig+0x57c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0f0      	beq.n	8008120 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d108      	bne.n	8008158 <HAL_RCC_OscConfig+0x4d8>
 8008146:	4b2c      	ldr	r3, [pc, #176]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814c:	4a2a      	ldr	r2, [pc, #168]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 800814e:	f043 0301 	orr.w	r3, r3, #1
 8008152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008156:	e024      	b.n	80081a2 <HAL_RCC_OscConfig+0x522>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	2b05      	cmp	r3, #5
 800815e:	d110      	bne.n	8008182 <HAL_RCC_OscConfig+0x502>
 8008160:	4b25      	ldr	r3, [pc, #148]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008166:	4a24      	ldr	r2, [pc, #144]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008168:	f043 0304 	orr.w	r3, r3, #4
 800816c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008170:	4b21      	ldr	r3, [pc, #132]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008176:	4a20      	ldr	r2, [pc, #128]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008178:	f043 0301 	orr.w	r3, r3, #1
 800817c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008180:	e00f      	b.n	80081a2 <HAL_RCC_OscConfig+0x522>
 8008182:	4b1d      	ldr	r3, [pc, #116]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008188:	4a1b      	ldr	r2, [pc, #108]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 800818a:	f023 0301 	bic.w	r3, r3, #1
 800818e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008192:	4b19      	ldr	r3, [pc, #100]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 8008194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008198:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 800819a:	f023 0304 	bic.w	r3, r3, #4
 800819e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d016      	beq.n	80081d8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081aa:	f7fd fd4b 	bl	8005c44 <HAL_GetTick>
 80081ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081b0:	e00a      	b.n	80081c8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081b2:	f7fd fd47 	bl	8005c44 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d901      	bls.n	80081c8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e139      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081c8:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <HAL_RCC_OscConfig+0x578>)
 80081ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0ed      	beq.n	80081b2 <HAL_RCC_OscConfig+0x532>
 80081d6:	e01a      	b.n	800820e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d8:	f7fd fd34 	bl	8005c44 <HAL_GetTick>
 80081dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081de:	e00f      	b.n	8008200 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081e0:	f7fd fd30 	bl	8005c44 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d906      	bls.n	8008200 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e122      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
 80081f6:	bf00      	nop
 80081f8:	40021000 	.word	0x40021000
 80081fc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008200:	4b90      	ldr	r3, [pc, #576]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e8      	bne.n	80081e0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800820e:	7ffb      	ldrb	r3, [r7, #31]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d105      	bne.n	8008220 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008214:	4b8b      	ldr	r3, [pc, #556]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008218:	4a8a      	ldr	r2, [pc, #552]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 800821a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800821e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 8108 	beq.w	800843a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822e:	2b02      	cmp	r3, #2
 8008230:	f040 80d0 	bne.w	80083d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008234:	4b83      	ldr	r3, [pc, #524]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f003 0203 	and.w	r2, r3, #3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	429a      	cmp	r2, r3
 8008246:	d130      	bne.n	80082aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	3b01      	subs	r3, #1
 8008254:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008256:	429a      	cmp	r2, r3
 8008258:	d127      	bne.n	80082aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008264:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008266:	429a      	cmp	r2, r3
 8008268:	d11f      	bne.n	80082aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008274:	2a07      	cmp	r2, #7
 8008276:	bf14      	ite	ne
 8008278:	2201      	movne	r2, #1
 800827a:	2200      	moveq	r2, #0
 800827c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800827e:	4293      	cmp	r3, r2
 8008280:	d113      	bne.n	80082aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828c:	085b      	lsrs	r3, r3, #1
 800828e:	3b01      	subs	r3, #1
 8008290:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008292:	429a      	cmp	r2, r3
 8008294:	d109      	bne.n	80082aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a0:	085b      	lsrs	r3, r3, #1
 80082a2:	3b01      	subs	r3, #1
 80082a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d06e      	beq.n	8008388 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	2b0c      	cmp	r3, #12
 80082ae:	d069      	beq.n	8008384 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80082b0:	4b64      	ldr	r3, [pc, #400]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d105      	bne.n	80082c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80082bc:	4b61      	ldr	r3, [pc, #388]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e0b7      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80082cc:	4b5d      	ldr	r3, [pc, #372]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a5c      	ldr	r2, [pc, #368]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80082d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80082d8:	f7fd fcb4 	bl	8005c44 <HAL_GetTick>
 80082dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082de:	e008      	b.n	80082f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082e0:	f7fd fcb0 	bl	8005c44 <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d901      	bls.n	80082f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e0a4      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082f2:	4b54      	ldr	r3, [pc, #336]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1f0      	bne.n	80082e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082fe:	4b51      	ldr	r3, [pc, #324]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	4b51      	ldr	r3, [pc, #324]	; (8008448 <HAL_RCC_OscConfig+0x7c8>)
 8008304:	4013      	ands	r3, r2
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800830e:	3a01      	subs	r2, #1
 8008310:	0112      	lsls	r2, r2, #4
 8008312:	4311      	orrs	r1, r2
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008318:	0212      	lsls	r2, r2, #8
 800831a:	4311      	orrs	r1, r2
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008320:	0852      	lsrs	r2, r2, #1
 8008322:	3a01      	subs	r2, #1
 8008324:	0552      	lsls	r2, r2, #21
 8008326:	4311      	orrs	r1, r2
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800832c:	0852      	lsrs	r2, r2, #1
 800832e:	3a01      	subs	r2, #1
 8008330:	0652      	lsls	r2, r2, #25
 8008332:	4311      	orrs	r1, r2
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008338:	0912      	lsrs	r2, r2, #4
 800833a:	0452      	lsls	r2, r2, #17
 800833c:	430a      	orrs	r2, r1
 800833e:	4941      	ldr	r1, [pc, #260]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008340:	4313      	orrs	r3, r2
 8008342:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008344:	4b3f      	ldr	r3, [pc, #252]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a3e      	ldr	r2, [pc, #248]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 800834a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800834e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008350:	4b3c      	ldr	r3, [pc, #240]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	4a3b      	ldr	r2, [pc, #236]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800835a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800835c:	f7fd fc72 	bl	8005c44 <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008364:	f7fd fc6e 	bl	8005c44 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e062      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008376:	4b33      	ldr	r3, [pc, #204]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0f0      	beq.n	8008364 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008382:	e05a      	b.n	800843a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e059      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008388:	4b2e      	ldr	r3, [pc, #184]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d152      	bne.n	800843a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008394:	4b2b      	ldr	r3, [pc, #172]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a2a      	ldr	r2, [pc, #168]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 800839a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800839e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80083a0:	4b28      	ldr	r3, [pc, #160]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	4a27      	ldr	r2, [pc, #156]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80083a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80083ac:	f7fd fc4a 	bl	8005c44 <HAL_GetTick>
 80083b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083b2:	e008      	b.n	80083c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083b4:	f7fd fc46 	bl	8005c44 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d901      	bls.n	80083c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e03a      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083c6:	4b1f      	ldr	r3, [pc, #124]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0f0      	beq.n	80083b4 <HAL_RCC_OscConfig+0x734>
 80083d2:	e032      	b.n	800843a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	2b0c      	cmp	r3, #12
 80083d8:	d02d      	beq.n	8008436 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083da:	4b1a      	ldr	r3, [pc, #104]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a19      	ldr	r2, [pc, #100]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80083e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80083e6:	4b17      	ldr	r3, [pc, #92]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d105      	bne.n	80083fe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80083f2:	4b14      	ldr	r3, [pc, #80]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	4a13      	ldr	r2, [pc, #76]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 80083f8:	f023 0303 	bic.w	r3, r3, #3
 80083fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80083fe:	4b11      	ldr	r3, [pc, #68]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	4a10      	ldr	r2, [pc, #64]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 8008404:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800840c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840e:	f7fd fc19 	bl	8005c44 <HAL_GetTick>
 8008412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008414:	e008      	b.n	8008428 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008416:	f7fd fc15 	bl	8005c44 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	2b02      	cmp	r3, #2
 8008422:	d901      	bls.n	8008428 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e009      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008428:	4b06      	ldr	r3, [pc, #24]	; (8008444 <HAL_RCC_OscConfig+0x7c4>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1f0      	bne.n	8008416 <HAL_RCC_OscConfig+0x796>
 8008434:	e001      	b.n	800843a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3720      	adds	r7, #32
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	40021000 	.word	0x40021000
 8008448:	f99d808c 	.word	0xf99d808c

0800844c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e0c8      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008460:	4b66      	ldr	r3, [pc, #408]	; (80085fc <HAL_RCC_ClockConfig+0x1b0>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0307 	and.w	r3, r3, #7
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	429a      	cmp	r2, r3
 800846c:	d910      	bls.n	8008490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800846e:	4b63      	ldr	r3, [pc, #396]	; (80085fc <HAL_RCC_ClockConfig+0x1b0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f023 0207 	bic.w	r2, r3, #7
 8008476:	4961      	ldr	r1, [pc, #388]	; (80085fc <HAL_RCC_ClockConfig+0x1b0>)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	4313      	orrs	r3, r2
 800847c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800847e:	4b5f      	ldr	r3, [pc, #380]	; (80085fc <HAL_RCC_ClockConfig+0x1b0>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d001      	beq.n	8008490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e0b0      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	d04c      	beq.n	8008536 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d107      	bne.n	80084b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084a4:	4b56      	ldr	r3, [pc, #344]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d121      	bne.n	80084f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e09e      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d107      	bne.n	80084cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084bc:	4b50      	ldr	r3, [pc, #320]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d115      	bne.n	80084f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e092      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d107      	bne.n	80084e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80084d4:	4b4a      	ldr	r3, [pc, #296]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e086      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084e4:	4b46      	ldr	r3, [pc, #280]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e07e      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084f4:	4b42      	ldr	r3, [pc, #264]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f023 0203 	bic.w	r2, r3, #3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	493f      	ldr	r1, [pc, #252]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 8008502:	4313      	orrs	r3, r2
 8008504:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008506:	f7fd fb9d 	bl	8005c44 <HAL_GetTick>
 800850a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800850c:	e00a      	b.n	8008524 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800850e:	f7fd fb99 	bl	8005c44 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f241 3288 	movw	r2, #5000	; 0x1388
 800851c:	4293      	cmp	r3, r2
 800851e:	d901      	bls.n	8008524 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e066      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008524:	4b36      	ldr	r3, [pc, #216]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f003 020c 	and.w	r2, r3, #12
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	429a      	cmp	r2, r3
 8008534:	d1eb      	bne.n	800850e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d008      	beq.n	8008554 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008542:	4b2f      	ldr	r3, [pc, #188]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	492c      	ldr	r1, [pc, #176]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 8008550:	4313      	orrs	r3, r2
 8008552:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008554:	4b29      	ldr	r3, [pc, #164]	; (80085fc <HAL_RCC_ClockConfig+0x1b0>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0307 	and.w	r3, r3, #7
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d210      	bcs.n	8008584 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008562:	4b26      	ldr	r3, [pc, #152]	; (80085fc <HAL_RCC_ClockConfig+0x1b0>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f023 0207 	bic.w	r2, r3, #7
 800856a:	4924      	ldr	r1, [pc, #144]	; (80085fc <HAL_RCC_ClockConfig+0x1b0>)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	4313      	orrs	r3, r2
 8008570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008572:	4b22      	ldr	r3, [pc, #136]	; (80085fc <HAL_RCC_ClockConfig+0x1b0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d001      	beq.n	8008584 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e036      	b.n	80085f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008590:	4b1b      	ldr	r3, [pc, #108]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	4918      	ldr	r1, [pc, #96]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d009      	beq.n	80085c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085ae:	4b14      	ldr	r3, [pc, #80]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	4910      	ldr	r1, [pc, #64]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80085c2:	f000 f825 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 80085c6:	4602      	mov	r2, r0
 80085c8:	4b0d      	ldr	r3, [pc, #52]	; (8008600 <HAL_RCC_ClockConfig+0x1b4>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	091b      	lsrs	r3, r3, #4
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	490c      	ldr	r1, [pc, #48]	; (8008604 <HAL_RCC_ClockConfig+0x1b8>)
 80085d4:	5ccb      	ldrb	r3, [r1, r3]
 80085d6:	f003 031f 	and.w	r3, r3, #31
 80085da:	fa22 f303 	lsr.w	r3, r2, r3
 80085de:	4a0a      	ldr	r2, [pc, #40]	; (8008608 <HAL_RCC_ClockConfig+0x1bc>)
 80085e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80085e2:	4b0a      	ldr	r3, [pc, #40]	; (800860c <HAL_RCC_ClockConfig+0x1c0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fb ff72 	bl	80044d0 <HAL_InitTick>
 80085ec:	4603      	mov	r3, r0
 80085ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80085f0:	7afb      	ldrb	r3, [r7, #11]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	40022000 	.word	0x40022000
 8008600:	40021000 	.word	0x40021000
 8008604:	08021168 	.word	0x08021168
 8008608:	20000044 	.word	0x20000044
 800860c:	20000094 	.word	0x20000094

08008610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008610:	b480      	push	{r7}
 8008612:	b089      	sub	sp, #36	; 0x24
 8008614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	61fb      	str	r3, [r7, #28]
 800861a:	2300      	movs	r3, #0
 800861c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800861e:	4b3e      	ldr	r3, [pc, #248]	; (8008718 <HAL_RCC_GetSysClockFreq+0x108>)
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f003 030c 	and.w	r3, r3, #12
 8008626:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008628:	4b3b      	ldr	r3, [pc, #236]	; (8008718 <HAL_RCC_GetSysClockFreq+0x108>)
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f003 0303 	and.w	r3, r3, #3
 8008630:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <HAL_RCC_GetSysClockFreq+0x34>
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	2b0c      	cmp	r3, #12
 800863c:	d121      	bne.n	8008682 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d11e      	bne.n	8008682 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008644:	4b34      	ldr	r3, [pc, #208]	; (8008718 <HAL_RCC_GetSysClockFreq+0x108>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0308 	and.w	r3, r3, #8
 800864c:	2b00      	cmp	r3, #0
 800864e:	d107      	bne.n	8008660 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008650:	4b31      	ldr	r3, [pc, #196]	; (8008718 <HAL_RCC_GetSysClockFreq+0x108>)
 8008652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	f003 030f 	and.w	r3, r3, #15
 800865c:	61fb      	str	r3, [r7, #28]
 800865e:	e005      	b.n	800866c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008660:	4b2d      	ldr	r3, [pc, #180]	; (8008718 <HAL_RCC_GetSysClockFreq+0x108>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	091b      	lsrs	r3, r3, #4
 8008666:	f003 030f 	and.w	r3, r3, #15
 800866a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800866c:	4a2b      	ldr	r2, [pc, #172]	; (800871c <HAL_RCC_GetSysClockFreq+0x10c>)
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008674:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10d      	bne.n	8008698 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008680:	e00a      	b.n	8008698 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2b04      	cmp	r3, #4
 8008686:	d102      	bne.n	800868e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008688:	4b25      	ldr	r3, [pc, #148]	; (8008720 <HAL_RCC_GetSysClockFreq+0x110>)
 800868a:	61bb      	str	r3, [r7, #24]
 800868c:	e004      	b.n	8008698 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	2b08      	cmp	r3, #8
 8008692:	d101      	bne.n	8008698 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008694:	4b23      	ldr	r3, [pc, #140]	; (8008724 <HAL_RCC_GetSysClockFreq+0x114>)
 8008696:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	2b0c      	cmp	r3, #12
 800869c:	d134      	bne.n	8008708 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800869e:	4b1e      	ldr	r3, [pc, #120]	; (8008718 <HAL_RCC_GetSysClockFreq+0x108>)
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f003 0303 	and.w	r3, r3, #3
 80086a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d003      	beq.n	80086b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d003      	beq.n	80086bc <HAL_RCC_GetSysClockFreq+0xac>
 80086b4:	e005      	b.n	80086c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80086b6:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <HAL_RCC_GetSysClockFreq+0x110>)
 80086b8:	617b      	str	r3, [r7, #20]
      break;
 80086ba:	e005      	b.n	80086c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80086bc:	4b19      	ldr	r3, [pc, #100]	; (8008724 <HAL_RCC_GetSysClockFreq+0x114>)
 80086be:	617b      	str	r3, [r7, #20]
      break;
 80086c0:	e002      	b.n	80086c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	617b      	str	r3, [r7, #20]
      break;
 80086c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086c8:	4b13      	ldr	r3, [pc, #76]	; (8008718 <HAL_RCC_GetSysClockFreq+0x108>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	091b      	lsrs	r3, r3, #4
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	3301      	adds	r3, #1
 80086d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80086d6:	4b10      	ldr	r3, [pc, #64]	; (8008718 <HAL_RCC_GetSysClockFreq+0x108>)
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	0a1b      	lsrs	r3, r3, #8
 80086dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	fb02 f203 	mul.w	r2, r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80086ee:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <HAL_RCC_GetSysClockFreq+0x108>)
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	0e5b      	lsrs	r3, r3, #25
 80086f4:	f003 0303 	and.w	r3, r3, #3
 80086f8:	3301      	adds	r3, #1
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	fbb2 f3f3 	udiv	r3, r2, r3
 8008706:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008708:	69bb      	ldr	r3, [r7, #24]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3724      	adds	r7, #36	; 0x24
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	40021000 	.word	0x40021000
 800871c:	08021180 	.word	0x08021180
 8008720:	00f42400 	.word	0x00f42400
 8008724:	007a1200 	.word	0x007a1200

08008728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800872c:	4b03      	ldr	r3, [pc, #12]	; (800873c <HAL_RCC_GetHCLKFreq+0x14>)
 800872e:	681b      	ldr	r3, [r3, #0]
}
 8008730:	4618      	mov	r0, r3
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20000044 	.word	0x20000044

08008740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008744:	f7ff fff0 	bl	8008728 <HAL_RCC_GetHCLKFreq>
 8008748:	4602      	mov	r2, r0
 800874a:	4b06      	ldr	r3, [pc, #24]	; (8008764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	0a1b      	lsrs	r3, r3, #8
 8008750:	f003 0307 	and.w	r3, r3, #7
 8008754:	4904      	ldr	r1, [pc, #16]	; (8008768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008756:	5ccb      	ldrb	r3, [r1, r3]
 8008758:	f003 031f 	and.w	r3, r3, #31
 800875c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008760:	4618      	mov	r0, r3
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40021000 	.word	0x40021000
 8008768:	08021178 	.word	0x08021178

0800876c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008770:	f7ff ffda 	bl	8008728 <HAL_RCC_GetHCLKFreq>
 8008774:	4602      	mov	r2, r0
 8008776:	4b06      	ldr	r3, [pc, #24]	; (8008790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	0adb      	lsrs	r3, r3, #11
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	4904      	ldr	r1, [pc, #16]	; (8008794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008782:	5ccb      	ldrb	r3, [r1, r3]
 8008784:	f003 031f 	and.w	r3, r3, #31
 8008788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800878c:	4618      	mov	r0, r3
 800878e:	bd80      	pop	{r7, pc}
 8008790:	40021000 	.word	0x40021000
 8008794:	08021178 	.word	0x08021178

08008798 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	220f      	movs	r2, #15
 80087a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80087a8:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <HAL_RCC_GetClockConfig+0x5c>)
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f003 0203 	and.w	r2, r3, #3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80087b4:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <HAL_RCC_GetClockConfig+0x5c>)
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80087c0:	4b0c      	ldr	r3, [pc, #48]	; (80087f4 <HAL_RCC_GetClockConfig+0x5c>)
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80087cc:	4b09      	ldr	r3, [pc, #36]	; (80087f4 <HAL_RCC_GetClockConfig+0x5c>)
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	08db      	lsrs	r3, r3, #3
 80087d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80087da:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <HAL_RCC_GetClockConfig+0x60>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0207 	and.w	r2, r3, #7
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	601a      	str	r2, [r3, #0]
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	40021000 	.word	0x40021000
 80087f8:	40022000 	.word	0x40022000

080087fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008804:	2300      	movs	r3, #0
 8008806:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008808:	4b2a      	ldr	r3, [pc, #168]	; (80088b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800880a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800880c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008814:	f7ff f9d0 	bl	8007bb8 <HAL_PWREx_GetVoltageRange>
 8008818:	6178      	str	r0, [r7, #20]
 800881a:	e014      	b.n	8008846 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800881c:	4b25      	ldr	r3, [pc, #148]	; (80088b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800881e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008820:	4a24      	ldr	r2, [pc, #144]	; (80088b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008826:	6593      	str	r3, [r2, #88]	; 0x58
 8008828:	4b22      	ldr	r3, [pc, #136]	; (80088b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800882a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008834:	f7ff f9c0 	bl	8007bb8 <HAL_PWREx_GetVoltageRange>
 8008838:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800883a:	4b1e      	ldr	r3, [pc, #120]	; (80088b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800883c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883e:	4a1d      	ldr	r2, [pc, #116]	; (80088b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008844:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800884c:	d10b      	bne.n	8008866 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b80      	cmp	r3, #128	; 0x80
 8008852:	d919      	bls.n	8008888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2ba0      	cmp	r3, #160	; 0xa0
 8008858:	d902      	bls.n	8008860 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800885a:	2302      	movs	r3, #2
 800885c:	613b      	str	r3, [r7, #16]
 800885e:	e013      	b.n	8008888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008860:	2301      	movs	r3, #1
 8008862:	613b      	str	r3, [r7, #16]
 8008864:	e010      	b.n	8008888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b80      	cmp	r3, #128	; 0x80
 800886a:	d902      	bls.n	8008872 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800886c:	2303      	movs	r3, #3
 800886e:	613b      	str	r3, [r7, #16]
 8008870:	e00a      	b.n	8008888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b80      	cmp	r3, #128	; 0x80
 8008876:	d102      	bne.n	800887e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008878:	2302      	movs	r3, #2
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	e004      	b.n	8008888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b70      	cmp	r3, #112	; 0x70
 8008882:	d101      	bne.n	8008888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008884:	2301      	movs	r3, #1
 8008886:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008888:	4b0b      	ldr	r3, [pc, #44]	; (80088b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f023 0207 	bic.w	r2, r3, #7
 8008890:	4909      	ldr	r1, [pc, #36]	; (80088b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008898:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0307 	and.w	r3, r3, #7
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d001      	beq.n	80088aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e000      	b.n	80088ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	40021000 	.word	0x40021000
 80088b8:	40022000 	.word	0x40022000

080088bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088c4:	2300      	movs	r3, #0
 80088c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088c8:	2300      	movs	r3, #0
 80088ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d041      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80088e0:	d02a      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80088e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80088e6:	d824      	bhi.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80088e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088ec:	d008      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80088ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088f2:	d81e      	bhi.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00a      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80088f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088fc:	d010      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80088fe:	e018      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008900:	4b86      	ldr	r3, [pc, #536]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	4a85      	ldr	r2, [pc, #532]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800890a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800890c:	e015      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3304      	adds	r3, #4
 8008912:	2100      	movs	r1, #0
 8008914:	4618      	mov	r0, r3
 8008916:	f000 fabb 	bl	8008e90 <RCCEx_PLLSAI1_Config>
 800891a:	4603      	mov	r3, r0
 800891c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800891e:	e00c      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3320      	adds	r3, #32
 8008924:	2100      	movs	r1, #0
 8008926:	4618      	mov	r0, r3
 8008928:	f000 fba6 	bl	8009078 <RCCEx_PLLSAI2_Config>
 800892c:	4603      	mov	r3, r0
 800892e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008930:	e003      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	74fb      	strb	r3, [r7, #19]
      break;
 8008936:	e000      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800893a:	7cfb      	ldrb	r3, [r7, #19]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10b      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008940:	4b76      	ldr	r3, [pc, #472]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008946:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800894e:	4973      	ldr	r1, [pc, #460]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008950:	4313      	orrs	r3, r2
 8008952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008956:	e001      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008958:	7cfb      	ldrb	r3, [r7, #19]
 800895a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d041      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800896c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008970:	d02a      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008972:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008976:	d824      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800897c:	d008      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800897e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008982:	d81e      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800898c:	d010      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800898e:	e018      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008990:	4b62      	ldr	r3, [pc, #392]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	4a61      	ldr	r2, [pc, #388]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800899a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800899c:	e015      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3304      	adds	r3, #4
 80089a2:	2100      	movs	r1, #0
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 fa73 	bl	8008e90 <RCCEx_PLLSAI1_Config>
 80089aa:	4603      	mov	r3, r0
 80089ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80089ae:	e00c      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	3320      	adds	r3, #32
 80089b4:	2100      	movs	r1, #0
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fb5e 	bl	8009078 <RCCEx_PLLSAI2_Config>
 80089bc:	4603      	mov	r3, r0
 80089be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80089c0:	e003      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	74fb      	strb	r3, [r7, #19]
      break;
 80089c6:	e000      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80089c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ca:	7cfb      	ldrb	r3, [r7, #19]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10b      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80089d0:	4b52      	ldr	r3, [pc, #328]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80089d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089de:	494f      	ldr	r1, [pc, #316]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80089e6:	e001      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e8:	7cfb      	ldrb	r3, [r7, #19]
 80089ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 80a0 	beq.w	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089fa:	2300      	movs	r3, #0
 80089fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80089fe:	4b47      	ldr	r3, [pc, #284]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00d      	beq.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a14:	4b41      	ldr	r3, [pc, #260]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a18:	4a40      	ldr	r2, [pc, #256]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8008a20:	4b3e      	ldr	r3, [pc, #248]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a28:	60bb      	str	r3, [r7, #8]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a30:	4b3b      	ldr	r3, [pc, #236]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a3a      	ldr	r2, [pc, #232]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a3c:	f7fd f902 	bl	8005c44 <HAL_GetTick>
 8008a40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008a42:	e009      	b.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a44:	f7fd f8fe 	bl	8005c44 <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d902      	bls.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	74fb      	strb	r3, [r7, #19]
        break;
 8008a56:	e005      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008a58:	4b31      	ldr	r3, [pc, #196]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0ef      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008a64:	7cfb      	ldrb	r3, [r7, #19]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d15c      	bne.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008a6a:	4b2c      	ldr	r3, [pc, #176]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01f      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d019      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008a88:	4b24      	ldr	r3, [pc, #144]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a94:	4b21      	ldr	r3, [pc, #132]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a9a:	4a20      	ldr	r2, [pc, #128]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008aa4:	4b1d      	ldr	r3, [pc, #116]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aaa:	4a1c      	ldr	r2, [pc, #112]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008ab4:	4a19      	ldr	r2, [pc, #100]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d016      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac6:	f7fd f8bd 	bl	8005c44 <HAL_GetTick>
 8008aca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008acc:	e00b      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ace:	f7fd f8b9 	bl	8005c44 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d902      	bls.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	74fb      	strb	r3, [r7, #19]
            break;
 8008ae4:	e006      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ae6:	4b0d      	ldr	r3, [pc, #52]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aec:	f003 0302 	and.w	r3, r3, #2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0ec      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008af4:	7cfb      	ldrb	r3, [r7, #19]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10c      	bne.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008afa:	4b08      	ldr	r3, [pc, #32]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b0a:	4904      	ldr	r1, [pc, #16]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008b12:	e009      	b.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b14:	7cfb      	ldrb	r3, [r7, #19]
 8008b16:	74bb      	strb	r3, [r7, #18]
 8008b18:	e006      	b.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008b1a:	bf00      	nop
 8008b1c:	40021000 	.word	0x40021000
 8008b20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b24:	7cfb      	ldrb	r3, [r7, #19]
 8008b26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b28:	7c7b      	ldrb	r3, [r7, #17]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d105      	bne.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b2e:	4b9e      	ldr	r3, [pc, #632]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b32:	4a9d      	ldr	r2, [pc, #628]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b46:	4b98      	ldr	r3, [pc, #608]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b4c:	f023 0203 	bic.w	r2, r3, #3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b54:	4994      	ldr	r1, [pc, #592]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b68:	4b8f      	ldr	r3, [pc, #572]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b6e:	f023 020c 	bic.w	r2, r3, #12
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b76:	498c      	ldr	r1, [pc, #560]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0304 	and.w	r3, r3, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b8a:	4b87      	ldr	r3, [pc, #540]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b98:	4983      	ldr	r1, [pc, #524]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0308 	and.w	r3, r3, #8
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00a      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008bac:	4b7e      	ldr	r3, [pc, #504]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bba:	497b      	ldr	r1, [pc, #492]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0310 	and.w	r3, r3, #16
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008bce:	4b76      	ldr	r3, [pc, #472]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bdc:	4972      	ldr	r1, [pc, #456]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0320 	and.w	r3, r3, #32
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00a      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008bf0:	4b6d      	ldr	r3, [pc, #436]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bfe:	496a      	ldr	r1, [pc, #424]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00a      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c12:	4b65      	ldr	r3, [pc, #404]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c20:	4961      	ldr	r1, [pc, #388]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c22:	4313      	orrs	r3, r2
 8008c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00a      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c34:	4b5c      	ldr	r3, [pc, #368]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c42:	4959      	ldr	r1, [pc, #356]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c44:	4313      	orrs	r3, r2
 8008c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00a      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c56:	4b54      	ldr	r3, [pc, #336]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c64:	4950      	ldr	r1, [pc, #320]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00a      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c78:	4b4b      	ldr	r3, [pc, #300]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c86:	4948      	ldr	r1, [pc, #288]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008c9a:	4b43      	ldr	r3, [pc, #268]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca8:	493f      	ldr	r1, [pc, #252]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d028      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cbc:	4b3a      	ldr	r3, [pc, #232]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cca:	4937      	ldr	r1, [pc, #220]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cda:	d106      	bne.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cdc:	4b32      	ldr	r3, [pc, #200]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	4a31      	ldr	r2, [pc, #196]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ce6:	60d3      	str	r3, [r2, #12]
 8008ce8:	e011      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cf2:	d10c      	bne.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 f8c8 	bl	8008e90 <RCCEx_PLLSAI1_Config>
 8008d00:	4603      	mov	r3, r0
 8008d02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008d04:	7cfb      	ldrb	r3, [r7, #19]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008d0a:	7cfb      	ldrb	r3, [r7, #19]
 8008d0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d028      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008d1a:	4b23      	ldr	r3, [pc, #140]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d28:	491f      	ldr	r1, [pc, #124]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d38:	d106      	bne.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	4a1a      	ldr	r2, [pc, #104]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d44:	60d3      	str	r3, [r2, #12]
 8008d46:	e011      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d50:	d10c      	bne.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3304      	adds	r3, #4
 8008d56:	2101      	movs	r1, #1
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 f899 	bl	8008e90 <RCCEx_PLLSAI1_Config>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008d62:	7cfb      	ldrb	r3, [r7, #19]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008d68:	7cfb      	ldrb	r3, [r7, #19]
 8008d6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d02b      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d78:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d86:	4908      	ldr	r1, [pc, #32]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d96:	d109      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d98:	4b03      	ldr	r3, [pc, #12]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	4a02      	ldr	r2, [pc, #8]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008da2:	60d3      	str	r3, [r2, #12]
 8008da4:	e014      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008da6:	bf00      	nop
 8008da8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008db4:	d10c      	bne.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3304      	adds	r3, #4
 8008dba:	2101      	movs	r1, #1
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 f867 	bl	8008e90 <RCCEx_PLLSAI1_Config>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008dc6:	7cfb      	ldrb	r3, [r7, #19]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008dcc:	7cfb      	ldrb	r3, [r7, #19]
 8008dce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d02f      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ddc:	4b2b      	ldr	r3, [pc, #172]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dea:	4928      	ldr	r1, [pc, #160]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dfa:	d10d      	bne.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3304      	adds	r3, #4
 8008e00:	2102      	movs	r1, #2
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 f844 	bl	8008e90 <RCCEx_PLLSAI1_Config>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008e0c:	7cfb      	ldrb	r3, [r7, #19]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d014      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008e12:	7cfb      	ldrb	r3, [r7, #19]
 8008e14:	74bb      	strb	r3, [r7, #18]
 8008e16:	e011      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e20:	d10c      	bne.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3320      	adds	r3, #32
 8008e26:	2102      	movs	r1, #2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 f925 	bl	8009078 <RCCEx_PLLSAI2_Config>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008e32:	7cfb      	ldrb	r3, [r7, #19]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008e38:	7cfb      	ldrb	r3, [r7, #19]
 8008e3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00a      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008e48:	4b10      	ldr	r3, [pc, #64]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e56:	490d      	ldr	r1, [pc, #52]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00b      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e6a:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e7a:	4904      	ldr	r1, [pc, #16]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008e82:	7cbb      	ldrb	r3, [r7, #18]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	40021000 	.word	0x40021000

08008e90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008e9e:	4b75      	ldr	r3, [pc, #468]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d018      	beq.n	8008edc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008eaa:	4b72      	ldr	r3, [pc, #456]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f003 0203 	and.w	r2, r3, #3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d10d      	bne.n	8008ed6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
       ||
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008ec2:	4b6c      	ldr	r3, [pc, #432]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	091b      	lsrs	r3, r3, #4
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
       ||
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d047      	beq.n	8008f66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	73fb      	strb	r3, [r7, #15]
 8008eda:	e044      	b.n	8008f66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d018      	beq.n	8008f16 <RCCEx_PLLSAI1_Config+0x86>
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d825      	bhi.n	8008f34 <RCCEx_PLLSAI1_Config+0xa4>
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d002      	beq.n	8008ef2 <RCCEx_PLLSAI1_Config+0x62>
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d009      	beq.n	8008f04 <RCCEx_PLLSAI1_Config+0x74>
 8008ef0:	e020      	b.n	8008f34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008ef2:	4b60      	ldr	r3, [pc, #384]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d11d      	bne.n	8008f3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f02:	e01a      	b.n	8008f3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008f04:	4b5b      	ldr	r3, [pc, #364]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d116      	bne.n	8008f3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f14:	e013      	b.n	8008f3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008f16:	4b57      	ldr	r3, [pc, #348]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10f      	bne.n	8008f42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008f22:	4b54      	ldr	r3, [pc, #336]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d109      	bne.n	8008f42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f32:	e006      	b.n	8008f42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	73fb      	strb	r3, [r7, #15]
      break;
 8008f38:	e004      	b.n	8008f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008f3a:	bf00      	nop
 8008f3c:	e002      	b.n	8008f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008f3e:	bf00      	nop
 8008f40:	e000      	b.n	8008f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008f42:	bf00      	nop
    }

    if(status == HAL_OK)
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10d      	bne.n	8008f66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008f4a:	4b4a      	ldr	r3, [pc, #296]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6819      	ldr	r1, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	011b      	lsls	r3, r3, #4
 8008f5e:	430b      	orrs	r3, r1
 8008f60:	4944      	ldr	r1, [pc, #272]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d17d      	bne.n	8009068 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008f6c:	4b41      	ldr	r3, [pc, #260]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a40      	ldr	r2, [pc, #256]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f78:	f7fc fe64 	bl	8005c44 <HAL_GetTick>
 8008f7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008f7e:	e009      	b.n	8008f94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f80:	f7fc fe60 	bl	8005c44 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d902      	bls.n	8008f94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	73fb      	strb	r3, [r7, #15]
        break;
 8008f92:	e005      	b.n	8008fa0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008f94:	4b37      	ldr	r3, [pc, #220]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1ef      	bne.n	8008f80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d160      	bne.n	8009068 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d111      	bne.n	8008fd0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008fac:	4b31      	ldr	r3, [pc, #196]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	6892      	ldr	r2, [r2, #8]
 8008fbc:	0211      	lsls	r1, r2, #8
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	68d2      	ldr	r2, [r2, #12]
 8008fc2:	0912      	lsrs	r2, r2, #4
 8008fc4:	0452      	lsls	r2, r2, #17
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	492a      	ldr	r1, [pc, #168]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	610b      	str	r3, [r1, #16]
 8008fce:	e027      	b.n	8009020 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d112      	bne.n	8008ffc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008fd6:	4b27      	ldr	r3, [pc, #156]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008fde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	6892      	ldr	r2, [r2, #8]
 8008fe6:	0211      	lsls	r1, r2, #8
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6912      	ldr	r2, [r2, #16]
 8008fec:	0852      	lsrs	r2, r2, #1
 8008fee:	3a01      	subs	r2, #1
 8008ff0:	0552      	lsls	r2, r2, #21
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	491f      	ldr	r1, [pc, #124]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	610b      	str	r3, [r1, #16]
 8008ffa:	e011      	b.n	8009020 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ffc:	4b1d      	ldr	r3, [pc, #116]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	6892      	ldr	r2, [r2, #8]
 800900c:	0211      	lsls	r1, r2, #8
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6952      	ldr	r2, [r2, #20]
 8009012:	0852      	lsrs	r2, r2, #1
 8009014:	3a01      	subs	r2, #1
 8009016:	0652      	lsls	r2, r2, #25
 8009018:	430a      	orrs	r2, r1
 800901a:	4916      	ldr	r1, [pc, #88]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800901c:	4313      	orrs	r3, r2
 800901e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009020:	4b14      	ldr	r3, [pc, #80]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a13      	ldr	r2, [pc, #76]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009026:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800902a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800902c:	f7fc fe0a 	bl	8005c44 <HAL_GetTick>
 8009030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009032:	e009      	b.n	8009048 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009034:	f7fc fe06 	bl	8005c44 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d902      	bls.n	8009048 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	73fb      	strb	r3, [r7, #15]
          break;
 8009046:	e005      	b.n	8009054 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009048:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d0ef      	beq.n	8009034 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d106      	bne.n	8009068 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800905a:	4b06      	ldr	r3, [pc, #24]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800905c:	691a      	ldr	r2, [r3, #16]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	4904      	ldr	r1, [pc, #16]	; (8009074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009064:	4313      	orrs	r3, r2
 8009066:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009068:	7bfb      	ldrb	r3, [r7, #15]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40021000 	.word	0x40021000

08009078 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009086:	4b6a      	ldr	r3, [pc, #424]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d018      	beq.n	80090c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009092:	4b67      	ldr	r3, [pc, #412]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f003 0203 	and.w	r2, r3, #3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d10d      	bne.n	80090be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
       ||
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d009      	beq.n	80090be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80090aa:	4b61      	ldr	r3, [pc, #388]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	091b      	lsrs	r3, r3, #4
 80090b0:	f003 0307 	and.w	r3, r3, #7
 80090b4:	1c5a      	adds	r2, r3, #1
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
       ||
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d047      	beq.n	800914e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	73fb      	strb	r3, [r7, #15]
 80090c2:	e044      	b.n	800914e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d018      	beq.n	80090fe <RCCEx_PLLSAI2_Config+0x86>
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d825      	bhi.n	800911c <RCCEx_PLLSAI2_Config+0xa4>
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d002      	beq.n	80090da <RCCEx_PLLSAI2_Config+0x62>
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d009      	beq.n	80090ec <RCCEx_PLLSAI2_Config+0x74>
 80090d8:	e020      	b.n	800911c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80090da:	4b55      	ldr	r3, [pc, #340]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d11d      	bne.n	8009122 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80090ea:	e01a      	b.n	8009122 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80090ec:	4b50      	ldr	r3, [pc, #320]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d116      	bne.n	8009126 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80090fc:	e013      	b.n	8009126 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80090fe:	4b4c      	ldr	r3, [pc, #304]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10f      	bne.n	800912a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800910a:	4b49      	ldr	r3, [pc, #292]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d109      	bne.n	800912a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800911a:	e006      	b.n	800912a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	73fb      	strb	r3, [r7, #15]
      break;
 8009120:	e004      	b.n	800912c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009122:	bf00      	nop
 8009124:	e002      	b.n	800912c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009126:	bf00      	nop
 8009128:	e000      	b.n	800912c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800912a:	bf00      	nop
    }

    if(status == HAL_OK)
 800912c:	7bfb      	ldrb	r3, [r7, #15]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10d      	bne.n	800914e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009132:	4b3f      	ldr	r3, [pc, #252]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6819      	ldr	r1, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	3b01      	subs	r3, #1
 8009144:	011b      	lsls	r3, r3, #4
 8009146:	430b      	orrs	r3, r1
 8009148:	4939      	ldr	r1, [pc, #228]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800914a:	4313      	orrs	r3, r2
 800914c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d167      	bne.n	8009224 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009154:	4b36      	ldr	r3, [pc, #216]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a35      	ldr	r2, [pc, #212]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800915a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800915e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009160:	f7fc fd70 	bl	8005c44 <HAL_GetTick>
 8009164:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009166:	e009      	b.n	800917c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009168:	f7fc fd6c 	bl	8005c44 <HAL_GetTick>
 800916c:	4602      	mov	r2, r0
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	2b02      	cmp	r3, #2
 8009174:	d902      	bls.n	800917c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	73fb      	strb	r3, [r7, #15]
        break;
 800917a:	e005      	b.n	8009188 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800917c:	4b2c      	ldr	r3, [pc, #176]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1ef      	bne.n	8009168 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d14a      	bne.n	8009224 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d111      	bne.n	80091b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009194:	4b26      	ldr	r3, [pc, #152]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800919c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	6892      	ldr	r2, [r2, #8]
 80091a4:	0211      	lsls	r1, r2, #8
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	68d2      	ldr	r2, [r2, #12]
 80091aa:	0912      	lsrs	r2, r2, #4
 80091ac:	0452      	lsls	r2, r2, #17
 80091ae:	430a      	orrs	r2, r1
 80091b0:	491f      	ldr	r1, [pc, #124]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	614b      	str	r3, [r1, #20]
 80091b6:	e011      	b.n	80091dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80091b8:	4b1d      	ldr	r3, [pc, #116]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80091c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6892      	ldr	r2, [r2, #8]
 80091c8:	0211      	lsls	r1, r2, #8
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	6912      	ldr	r2, [r2, #16]
 80091ce:	0852      	lsrs	r2, r2, #1
 80091d0:	3a01      	subs	r2, #1
 80091d2:	0652      	lsls	r2, r2, #25
 80091d4:	430a      	orrs	r2, r1
 80091d6:	4916      	ldr	r1, [pc, #88]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80091dc:	4b14      	ldr	r3, [pc, #80]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a13      	ldr	r2, [pc, #76]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091e8:	f7fc fd2c 	bl	8005c44 <HAL_GetTick>
 80091ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80091ee:	e009      	b.n	8009204 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80091f0:	f7fc fd28 	bl	8005c44 <HAL_GetTick>
 80091f4:	4602      	mov	r2, r0
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d902      	bls.n	8009204 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	73fb      	strb	r3, [r7, #15]
          break;
 8009202:	e005      	b.n	8009210 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009204:	4b0a      	ldr	r3, [pc, #40]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d0ef      	beq.n	80091f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d106      	bne.n	8009224 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009216:	4b06      	ldr	r3, [pc, #24]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009218:	695a      	ldr	r2, [r3, #20]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	4904      	ldr	r1, [pc, #16]	; (8009230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009220:	4313      	orrs	r3, r2
 8009222:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009224:	7bfb      	ldrb	r3, [r7, #15]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40021000 	.word	0x40021000

08009234 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e095      	b.n	8009372 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924a:	2b00      	cmp	r3, #0
 800924c:	d108      	bne.n	8009260 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009256:	d009      	beq.n	800926c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	61da      	str	r2, [r3, #28]
 800925e:	e005      	b.n	800926c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d106      	bne.n	800928c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7fb f82a 	bl	80042e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2202      	movs	r2, #2
 8009290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092ac:	d902      	bls.n	80092b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
 80092b2:	e002      	b.n	80092ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80092b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80092c2:	d007      	beq.n	80092d4 <HAL_SPI_Init+0xa0>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092cc:	d002      	beq.n	80092d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	431a      	orrs	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	431a      	orrs	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009302:	431a      	orrs	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800930c:	431a      	orrs	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009316:	ea42 0103 	orr.w	r1, r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	430a      	orrs	r2, r1
 8009328:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	0c1b      	lsrs	r3, r3, #16
 8009330:	f003 0204 	and.w	r2, r3, #4
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	f003 0310 	and.w	r3, r3, #16
 800933c:	431a      	orrs	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009342:	f003 0308 	and.w	r3, r3, #8
 8009346:	431a      	orrs	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009350:	ea42 0103 	orr.w	r1, r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b088      	sub	sp, #32
 800937e:	af00      	add	r7, sp, #0
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	60b9      	str	r1, [r7, #8]
 8009384:	603b      	str	r3, [r7, #0]
 8009386:	4613      	mov	r3, r2
 8009388:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009394:	2b01      	cmp	r3, #1
 8009396:	d101      	bne.n	800939c <HAL_SPI_Transmit+0x22>
 8009398:	2302      	movs	r3, #2
 800939a:	e158      	b.n	800964e <HAL_SPI_Transmit+0x2d4>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093a4:	f7fc fc4e 	bl	8005c44 <HAL_GetTick>
 80093a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80093aa:	88fb      	ldrh	r3, [r7, #6]
 80093ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d002      	beq.n	80093c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80093ba:	2302      	movs	r3, #2
 80093bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093be:	e13d      	b.n	800963c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <HAL_SPI_Transmit+0x52>
 80093c6:	88fb      	ldrh	r3, [r7, #6]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d102      	bne.n	80093d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093d0:	e134      	b.n	800963c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2203      	movs	r2, #3
 80093d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	88fa      	ldrh	r2, [r7, #6]
 80093ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	88fa      	ldrh	r2, [r7, #6]
 80093f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800941c:	d10f      	bne.n	800943e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800942c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800943c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009448:	2b40      	cmp	r3, #64	; 0x40
 800944a:	d007      	beq.n	800945c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800945a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009464:	d94b      	bls.n	80094fe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <HAL_SPI_Transmit+0xfa>
 800946e:	8afb      	ldrh	r3, [r7, #22]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d13e      	bne.n	80094f2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	881a      	ldrh	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009484:	1c9a      	adds	r2, r3, #2
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800948e:	b29b      	uxth	r3, r3
 8009490:	3b01      	subs	r3, #1
 8009492:	b29a      	uxth	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009498:	e02b      	b.n	80094f2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d112      	bne.n	80094ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ac:	881a      	ldrh	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b8:	1c9a      	adds	r2, r3, #2
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	3b01      	subs	r3, #1
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094cc:	e011      	b.n	80094f2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094ce:	f7fc fbb9 	bl	8005c44 <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d803      	bhi.n	80094e6 <HAL_SPI_Transmit+0x16c>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d102      	bne.n	80094ec <HAL_SPI_Transmit+0x172>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d102      	bne.n	80094f2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094f0:	e0a4      	b.n	800963c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1ce      	bne.n	800949a <HAL_SPI_Transmit+0x120>
 80094fc:	e07c      	b.n	80095f8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d002      	beq.n	800950c <HAL_SPI_Transmit+0x192>
 8009506:	8afb      	ldrh	r3, [r7, #22]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d170      	bne.n	80095ee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009510:	b29b      	uxth	r3, r3
 8009512:	2b01      	cmp	r3, #1
 8009514:	d912      	bls.n	800953c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	881a      	ldrh	r2, [r3, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009526:	1c9a      	adds	r2, r3, #2
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009530:	b29b      	uxth	r3, r3
 8009532:	3b02      	subs	r3, #2
 8009534:	b29a      	uxth	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	87da      	strh	r2, [r3, #62]	; 0x3e
 800953a:	e058      	b.n	80095ee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	330c      	adds	r3, #12
 8009546:	7812      	ldrb	r2, [r2, #0]
 8009548:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	b29a      	uxth	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009562:	e044      	b.n	80095ee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	2b02      	cmp	r3, #2
 8009570:	d12b      	bne.n	80095ca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009576:	b29b      	uxth	r3, r3
 8009578:	2b01      	cmp	r3, #1
 800957a:	d912      	bls.n	80095a2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009580:	881a      	ldrh	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958c:	1c9a      	adds	r2, r3, #2
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009596:	b29b      	uxth	r3, r3
 8009598:	3b02      	subs	r3, #2
 800959a:	b29a      	uxth	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095a0:	e025      	b.n	80095ee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	330c      	adds	r3, #12
 80095ac:	7812      	ldrb	r2, [r2, #0]
 80095ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095be:	b29b      	uxth	r3, r3
 80095c0:	3b01      	subs	r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095c8:	e011      	b.n	80095ee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095ca:	f7fc fb3b 	bl	8005c44 <HAL_GetTick>
 80095ce:	4602      	mov	r2, r0
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d803      	bhi.n	80095e2 <HAL_SPI_Transmit+0x268>
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e0:	d102      	bne.n	80095e8 <HAL_SPI_Transmit+0x26e>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d102      	bne.n	80095ee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80095e8:	2303      	movs	r3, #3
 80095ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80095ec:	e026      	b.n	800963c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1b5      	bne.n	8009564 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f000 fcdf 	bl	8009fc0 <SPI_EndRxTxTransaction>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2220      	movs	r2, #32
 800960c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10a      	bne.n	800962c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009616:	2300      	movs	r3, #0
 8009618:	613b      	str	r3, [r7, #16]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	613b      	str	r3, [r7, #16]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	613b      	str	r3, [r7, #16]
 800962a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	77fb      	strb	r3, [r7, #31]
 8009638:	e000      	b.n	800963c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800963a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800964c:	7ffb      	ldrb	r3, [r7, #31]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3720      	adds	r7, #32
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b088      	sub	sp, #32
 800965a:	af02      	add	r7, sp, #8
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	4613      	mov	r3, r2
 8009664:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009672:	d112      	bne.n	800969a <HAL_SPI_Receive+0x44>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10e      	bne.n	800969a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2204      	movs	r2, #4
 8009680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009684:	88fa      	ldrh	r2, [r7, #6]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	4613      	mov	r3, r2
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 f910 	bl	80098b6 <HAL_SPI_TransmitReceive>
 8009696:	4603      	mov	r3, r0
 8009698:	e109      	b.n	80098ae <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d101      	bne.n	80096a8 <HAL_SPI_Receive+0x52>
 80096a4:	2302      	movs	r3, #2
 80096a6:	e102      	b.n	80098ae <HAL_SPI_Receive+0x258>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096b0:	f7fc fac8 	bl	8005c44 <HAL_GetTick>
 80096b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d002      	beq.n	80096c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80096c2:	2302      	movs	r3, #2
 80096c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80096c6:	e0e9      	b.n	800989c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <HAL_SPI_Receive+0x7e>
 80096ce:	88fb      	ldrh	r3, [r7, #6]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d102      	bne.n	80096da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80096d8:	e0e0      	b.n	800989c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2204      	movs	r2, #4
 80096de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	88fa      	ldrh	r2, [r7, #6]
 80096f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	88fa      	ldrh	r2, [r7, #6]
 80096fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009724:	d908      	bls.n	8009738 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	e007      	b.n	8009748 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009746:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009750:	d10f      	bne.n	8009772 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009760:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009770:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800977c:	2b40      	cmp	r3, #64	; 0x40
 800977e:	d007      	beq.n	8009790 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800978e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009798:	d867      	bhi.n	800986a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800979a:	e030      	b.n	80097fe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d117      	bne.n	80097da <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f103 020c 	add.w	r2, r3, #12
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	7812      	ldrb	r2, [r2, #0]
 80097b8:	b2d2      	uxtb	r2, r2
 80097ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80097d8:	e011      	b.n	80097fe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097da:	f7fc fa33 	bl	8005c44 <HAL_GetTick>
 80097de:	4602      	mov	r2, r0
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d803      	bhi.n	80097f2 <HAL_SPI_Receive+0x19c>
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f0:	d102      	bne.n	80097f8 <HAL_SPI_Receive+0x1a2>
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d102      	bne.n	80097fe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80097fc:	e04e      	b.n	800989c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1c8      	bne.n	800979c <HAL_SPI_Receive+0x146>
 800980a:	e034      	b.n	8009876 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b01      	cmp	r3, #1
 8009818:	d115      	bne.n	8009846 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009824:	b292      	uxth	r2, r2
 8009826:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982c:	1c9a      	adds	r2, r3, #2
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009838:	b29b      	uxth	r3, r3
 800983a:	3b01      	subs	r3, #1
 800983c:	b29a      	uxth	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009844:	e011      	b.n	800986a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009846:	f7fc f9fd 	bl	8005c44 <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	429a      	cmp	r2, r3
 8009854:	d803      	bhi.n	800985e <HAL_SPI_Receive+0x208>
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800985c:	d102      	bne.n	8009864 <HAL_SPI_Receive+0x20e>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d102      	bne.n	800986a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009868:	e018      	b.n	800989c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009870:	b29b      	uxth	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1ca      	bne.n	800980c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 fb48 	bl	8009f10 <SPI_EndRxTransaction>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2220      	movs	r2, #32
 800988a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	75fb      	strb	r3, [r7, #23]
 8009898:	e000      	b.n	800989c <HAL_SPI_Receive+0x246>
  }

error :
 800989a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b08a      	sub	sp, #40	; 0x28
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	60f8      	str	r0, [r7, #12]
 80098be:	60b9      	str	r1, [r7, #8]
 80098c0:	607a      	str	r2, [r7, #4]
 80098c2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098c4:	2301      	movs	r3, #1
 80098c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d101      	bne.n	80098dc <HAL_SPI_TransmitReceive+0x26>
 80098d8:	2302      	movs	r3, #2
 80098da:	e1fb      	b.n	8009cd4 <HAL_SPI_TransmitReceive+0x41e>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098e4:	f7fc f9ae 	bl	8005c44 <HAL_GetTick>
 80098e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80098f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80098f8:	887b      	ldrh	r3, [r7, #2]
 80098fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80098fc:	887b      	ldrh	r3, [r7, #2]
 80098fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009900:	7efb      	ldrb	r3, [r7, #27]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d00e      	beq.n	8009924 <HAL_SPI_TransmitReceive+0x6e>
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800990c:	d106      	bne.n	800991c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d102      	bne.n	800991c <HAL_SPI_TransmitReceive+0x66>
 8009916:	7efb      	ldrb	r3, [r7, #27]
 8009918:	2b04      	cmp	r3, #4
 800991a:	d003      	beq.n	8009924 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800991c:	2302      	movs	r3, #2
 800991e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009922:	e1cd      	b.n	8009cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d005      	beq.n	8009936 <HAL_SPI_TransmitReceive+0x80>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <HAL_SPI_TransmitReceive+0x80>
 8009930:	887b      	ldrh	r3, [r7, #2]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d103      	bne.n	800993e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800993c:	e1c0      	b.n	8009cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b04      	cmp	r3, #4
 8009948:	d003      	beq.n	8009952 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2205      	movs	r2, #5
 800994e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	887a      	ldrh	r2, [r7, #2]
 8009962:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	887a      	ldrh	r2, [r7, #2]
 800996a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	887a      	ldrh	r2, [r7, #2]
 8009978:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	887a      	ldrh	r2, [r7, #2]
 800997e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009994:	d802      	bhi.n	800999c <HAL_SPI_TransmitReceive+0xe6>
 8009996:	8a3b      	ldrh	r3, [r7, #16]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d908      	bls.n	80099ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80099aa:	605a      	str	r2, [r3, #4]
 80099ac:	e007      	b.n	80099be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c8:	2b40      	cmp	r3, #64	; 0x40
 80099ca:	d007      	beq.n	80099dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80099e4:	d97c      	bls.n	8009ae0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <HAL_SPI_TransmitReceive+0x13e>
 80099ee:	8a7b      	ldrh	r3, [r7, #18]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d169      	bne.n	8009ac8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f8:	881a      	ldrh	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a04:	1c9a      	adds	r2, r3, #2
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	3b01      	subs	r3, #1
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a18:	e056      	b.n	8009ac8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d11b      	bne.n	8009a60 <HAL_SPI_TransmitReceive+0x1aa>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d016      	beq.n	8009a60 <HAL_SPI_TransmitReceive+0x1aa>
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d113      	bne.n	8009a60 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3c:	881a      	ldrh	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a48:	1c9a      	adds	r2, r3, #2
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	3b01      	subs	r3, #1
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d11c      	bne.n	8009aa8 <HAL_SPI_TransmitReceive+0x1f2>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d016      	beq.n	8009aa8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a84:	b292      	uxth	r2, r2
 8009a86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8c:	1c9a      	adds	r2, r3, #2
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009aa8:	f7fc f8cc 	bl	8005c44 <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d807      	bhi.n	8009ac8 <HAL_SPI_TransmitReceive+0x212>
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abe:	d003      	beq.n	8009ac8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009ac6:	e0fb      	b.n	8009cc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1a3      	bne.n	8009a1a <HAL_SPI_TransmitReceive+0x164>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d19d      	bne.n	8009a1a <HAL_SPI_TransmitReceive+0x164>
 8009ade:	e0df      	b.n	8009ca0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d003      	beq.n	8009af0 <HAL_SPI_TransmitReceive+0x23a>
 8009ae8:	8a7b      	ldrh	r3, [r7, #18]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	f040 80cb 	bne.w	8009c86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d912      	bls.n	8009b20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afe:	881a      	ldrh	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0a:	1c9a      	adds	r2, r3, #2
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	3b02      	subs	r3, #2
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b1e:	e0b2      	b.n	8009c86 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	330c      	adds	r3, #12
 8009b2a:	7812      	ldrb	r2, [r2, #0]
 8009b2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b46:	e09e      	b.n	8009c86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f003 0302 	and.w	r3, r3, #2
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d134      	bne.n	8009bc0 <HAL_SPI_TransmitReceive+0x30a>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d02f      	beq.n	8009bc0 <HAL_SPI_TransmitReceive+0x30a>
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d12c      	bne.n	8009bc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d912      	bls.n	8009b96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b74:	881a      	ldrh	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b80:	1c9a      	adds	r2, r3, #2
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	3b02      	subs	r3, #2
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b94:	e012      	b.n	8009bbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	330c      	adds	r3, #12
 8009ba0:	7812      	ldrb	r2, [r2, #0]
 8009ba2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d148      	bne.n	8009c60 <HAL_SPI_TransmitReceive+0x3aa>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d042      	beq.n	8009c60 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d923      	bls.n	8009c2e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68da      	ldr	r2, [r3, #12]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf0:	b292      	uxth	r2, r2
 8009bf2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf8:	1c9a      	adds	r2, r3, #2
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b02      	subs	r3, #2
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d81f      	bhi.n	8009c5c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c2a:	605a      	str	r2, [r3, #4]
 8009c2c:	e016      	b.n	8009c5c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f103 020c 	add.w	r2, r3, #12
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3a:	7812      	ldrb	r2, [r2, #0]
 8009c3c:	b2d2      	uxtb	r2, r2
 8009c3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	3b01      	subs	r3, #1
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c60:	f7fb fff0 	bl	8005c44 <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d803      	bhi.n	8009c78 <HAL_SPI_TransmitReceive+0x3c2>
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c76:	d102      	bne.n	8009c7e <HAL_SPI_TransmitReceive+0x3c8>
 8009c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d103      	bne.n	8009c86 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009c84:	e01c      	b.n	8009cc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f47f af5b 	bne.w	8009b48 <HAL_SPI_TransmitReceive+0x292>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f47f af54 	bne.w	8009b48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ca0:	69fa      	ldr	r2, [r7, #28]
 8009ca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 f98b 	bl	8009fc0 <SPI_EndRxTxTransaction>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d006      	beq.n	8009cbe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	661a      	str	r2, [r3, #96]	; 0x60
 8009cbc:	e000      	b.n	8009cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009cbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3728      	adds	r7, #40	; 0x28
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	603b      	str	r3, [r7, #0]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009cec:	f7fb ffaa 	bl	8005c44 <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	1a9b      	subs	r3, r3, r2
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009cfc:	f7fb ffa2 	bl	8005c44 <HAL_GetTick>
 8009d00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d02:	4b39      	ldr	r3, [pc, #228]	; (8009de8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	015b      	lsls	r3, r3, #5
 8009d08:	0d1b      	lsrs	r3, r3, #20
 8009d0a:	69fa      	ldr	r2, [r7, #28]
 8009d0c:	fb02 f303 	mul.w	r3, r2, r3
 8009d10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d12:	e054      	b.n	8009dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1a:	d050      	beq.n	8009dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d1c:	f7fb ff92 	bl	8005c44 <HAL_GetTick>
 8009d20:	4602      	mov	r2, r0
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d902      	bls.n	8009d32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d13d      	bne.n	8009dae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d4a:	d111      	bne.n	8009d70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d54:	d004      	beq.n	8009d60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d5e:	d107      	bne.n	8009d70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d78:	d10f      	bne.n	8009d9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d88:	601a      	str	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e017      	b.n	8009dde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689a      	ldr	r2, [r3, #8]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	bf0c      	ite	eq
 8009dce:	2301      	moveq	r3, #1
 8009dd0:	2300      	movne	r3, #0
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	79fb      	ldrb	r3, [r7, #7]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d19b      	bne.n	8009d14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3720      	adds	r7, #32
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	20000044 	.word	0x20000044

08009dec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b088      	sub	sp, #32
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009dfa:	f7fb ff23 	bl	8005c44 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	1a9b      	subs	r3, r3, r2
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	4413      	add	r3, r2
 8009e08:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e0a:	f7fb ff1b 	bl	8005c44 <HAL_GetTick>
 8009e0e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009e10:	4b3e      	ldr	r3, [pc, #248]	; (8009f0c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	00da      	lsls	r2, r3, #3
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	0d1b      	lsrs	r3, r3, #20
 8009e20:	69fa      	ldr	r2, [r7, #28]
 8009e22:	fb02 f303 	mul.w	r3, r2, r3
 8009e26:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8009e28:	e062      	b.n	8009ef0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009e30:	d109      	bne.n	8009e46 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d106      	bne.n	8009e46 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	330c      	adds	r3, #12
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8009e44:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4c:	d050      	beq.n	8009ef0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e4e:	f7fb fef9 	bl	8005c44 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	69fa      	ldr	r2, [r7, #28]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d902      	bls.n	8009e64 <SPI_WaitFifoStateUntilTimeout+0x78>
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d13d      	bne.n	8009ee0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	685a      	ldr	r2, [r3, #4]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e7c:	d111      	bne.n	8009ea2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e86:	d004      	beq.n	8009e92 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e90:	d107      	bne.n	8009ea2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ea0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eaa:	d10f      	bne.n	8009ecc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009eca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e010      	b.n	8009f02 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d101      	bne.n	8009eea <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	3b01      	subs	r3, #1
 8009eee:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689a      	ldr	r2, [r3, #8]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	4013      	ands	r3, r2
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d194      	bne.n	8009e2a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3720      	adds	r7, #32
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20000044 	.word	0x20000044

08009f10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af02      	add	r7, sp, #8
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f24:	d111      	bne.n	8009f4a <SPI_EndRxTransaction+0x3a>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f2e:	d004      	beq.n	8009f3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f38:	d107      	bne.n	8009f4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f48:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	2200      	movs	r2, #0
 8009f52:	2180      	movs	r1, #128	; 0x80
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7ff fec1 	bl	8009cdc <SPI_WaitFlagStateUntilTimeout>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d007      	beq.n	8009f70 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f64:	f043 0220 	orr.w	r2, r3, #32
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e023      	b.n	8009fb8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f78:	d11d      	bne.n	8009fb6 <SPI_EndRxTransaction+0xa6>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f82:	d004      	beq.n	8009f8e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f8c:	d113      	bne.n	8009fb6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff ff26 	bl	8009dec <SPI_WaitFifoStateUntilTimeout>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d007      	beq.n	8009fb6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009faa:	f043 0220 	orr.w	r2, r3, #32
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e000      	b.n	8009fb8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff ff07 	bl	8009dec <SPI_WaitFifoStateUntilTimeout>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d007      	beq.n	8009ff4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fe8:	f043 0220 	orr.w	r2, r3, #32
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e027      	b.n	800a044 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2180      	movs	r1, #128	; 0x80
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f7ff fe6c 	bl	8009cdc <SPI_WaitFlagStateUntilTimeout>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d007      	beq.n	800a01a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a00e:	f043 0220 	orr.w	r2, r3, #32
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e014      	b.n	800a044 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2200      	movs	r2, #0
 800a022:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f7ff fee0 	bl	8009dec <SPI_WaitFifoStateUntilTimeout>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d007      	beq.n	800a042 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a036:	f043 0220 	orr.w	r2, r3, #32
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e000      	b.n	800a044 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e049      	b.n	800a0f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d106      	bne.n	800a078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7fa f9aa 	bl	80043cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3304      	adds	r3, #4
 800a088:	4619      	mov	r1, r3
 800a08a:	4610      	mov	r0, r2
 800a08c:	f000 fab4 	bl	800a5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d001      	beq.n	800a114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e04f      	b.n	800a1b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f042 0201 	orr.w	r2, r2, #1
 800a12a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a23      	ldr	r2, [pc, #140]	; (800a1c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d01d      	beq.n	800a172 <HAL_TIM_Base_Start_IT+0x76>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a13e:	d018      	beq.n	800a172 <HAL_TIM_Base_Start_IT+0x76>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a1f      	ldr	r2, [pc, #124]	; (800a1c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d013      	beq.n	800a172 <HAL_TIM_Base_Start_IT+0x76>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a1e      	ldr	r2, [pc, #120]	; (800a1c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d00e      	beq.n	800a172 <HAL_TIM_Base_Start_IT+0x76>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a1c      	ldr	r2, [pc, #112]	; (800a1cc <HAL_TIM_Base_Start_IT+0xd0>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d009      	beq.n	800a172 <HAL_TIM_Base_Start_IT+0x76>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a1b      	ldr	r2, [pc, #108]	; (800a1d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d004      	beq.n	800a172 <HAL_TIM_Base_Start_IT+0x76>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a19      	ldr	r2, [pc, #100]	; (800a1d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d115      	bne.n	800a19e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689a      	ldr	r2, [r3, #8]
 800a178:	4b17      	ldr	r3, [pc, #92]	; (800a1d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a17a:	4013      	ands	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b06      	cmp	r3, #6
 800a182:	d015      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xb4>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a18a:	d011      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0201 	orr.w	r2, r2, #1
 800a19a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a19c:	e008      	b.n	800a1b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f042 0201 	orr.w	r2, r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	e000      	b.n	800a1b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	40012c00 	.word	0x40012c00
 800a1c4:	40000400 	.word	0x40000400
 800a1c8:	40000800 	.word	0x40000800
 800a1cc:	40000c00 	.word	0x40000c00
 800a1d0:	40013400 	.word	0x40013400
 800a1d4:	40014000 	.word	0x40014000
 800a1d8:	00010007 	.word	0x00010007

0800a1dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	f003 0302 	and.w	r3, r3, #2
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d122      	bne.n	800a238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d11b      	bne.n	800a238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f06f 0202 	mvn.w	r2, #2
 800a208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f9cb 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 800a224:	e005      	b.n	800a232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f9bd 	bl	800a5a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f9ce 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	f003 0304 	and.w	r3, r3, #4
 800a242:	2b04      	cmp	r3, #4
 800a244:	d122      	bne.n	800a28c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b04      	cmp	r3, #4
 800a252:	d11b      	bne.n	800a28c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f06f 0204 	mvn.w	r2, #4
 800a25c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2202      	movs	r2, #2
 800a262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f9a1 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 800a278:	e005      	b.n	800a286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f993 	bl	800a5a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f9a4 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	f003 0308 	and.w	r3, r3, #8
 800a296:	2b08      	cmp	r3, #8
 800a298:	d122      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	f003 0308 	and.w	r3, r3, #8
 800a2a4:	2b08      	cmp	r3, #8
 800a2a6:	d11b      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f06f 0208 	mvn.w	r2, #8
 800a2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2204      	movs	r2, #4
 800a2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	69db      	ldr	r3, [r3, #28]
 800a2be:	f003 0303 	and.w	r3, r3, #3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f977 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 800a2cc:	e005      	b.n	800a2da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f969 	bl	800a5a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f97a 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	f003 0310 	and.w	r3, r3, #16
 800a2ea:	2b10      	cmp	r3, #16
 800a2ec:	d122      	bne.n	800a334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f003 0310 	and.w	r3, r3, #16
 800a2f8:	2b10      	cmp	r3, #16
 800a2fa:	d11b      	bne.n	800a334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f06f 0210 	mvn.w	r2, #16
 800a304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2208      	movs	r2, #8
 800a30a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f94d 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 800a320:	e005      	b.n	800a32e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f93f 	bl	800a5a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f950 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d10e      	bne.n	800a360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d107      	bne.n	800a360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f06f 0201 	mvn.w	r2, #1
 800a358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7f9 fd6e 	bl	8003e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a36a:	2b80      	cmp	r3, #128	; 0x80
 800a36c:	d10e      	bne.n	800a38c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a378:	2b80      	cmp	r3, #128	; 0x80
 800a37a:	d107      	bne.n	800a38c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fafc 	bl	800a984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39a:	d10e      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a6:	2b80      	cmp	r3, #128	; 0x80
 800a3a8:	d107      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a3b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 faef 	bl	800a998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c4:	2b40      	cmp	r3, #64	; 0x40
 800a3c6:	d10e      	bne.n	800a3e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d2:	2b40      	cmp	r3, #64	; 0x40
 800a3d4:	d107      	bne.n	800a3e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f8fe 	bl	800a5e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	f003 0320 	and.w	r3, r3, #32
 800a3f0:	2b20      	cmp	r3, #32
 800a3f2:	d10e      	bne.n	800a412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b20      	cmp	r3, #32
 800a400:	d107      	bne.n	800a412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f06f 0220 	mvn.w	r2, #32
 800a40a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 faaf 	bl	800a970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a412:	bf00      	nop
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d101      	bne.n	800a432 <HAL_TIM_ConfigClockSource+0x18>
 800a42e:	2302      	movs	r3, #2
 800a430:	e0b5      	b.n	800a59e <HAL_TIM_ConfigClockSource+0x184>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2202      	movs	r2, #2
 800a43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a450:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a454:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a45c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a46e:	d03e      	beq.n	800a4ee <HAL_TIM_ConfigClockSource+0xd4>
 800a470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a474:	f200 8087 	bhi.w	800a586 <HAL_TIM_ConfigClockSource+0x16c>
 800a478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a47c:	f000 8085 	beq.w	800a58a <HAL_TIM_ConfigClockSource+0x170>
 800a480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a484:	d87f      	bhi.n	800a586 <HAL_TIM_ConfigClockSource+0x16c>
 800a486:	2b70      	cmp	r3, #112	; 0x70
 800a488:	d01a      	beq.n	800a4c0 <HAL_TIM_ConfigClockSource+0xa6>
 800a48a:	2b70      	cmp	r3, #112	; 0x70
 800a48c:	d87b      	bhi.n	800a586 <HAL_TIM_ConfigClockSource+0x16c>
 800a48e:	2b60      	cmp	r3, #96	; 0x60
 800a490:	d050      	beq.n	800a534 <HAL_TIM_ConfigClockSource+0x11a>
 800a492:	2b60      	cmp	r3, #96	; 0x60
 800a494:	d877      	bhi.n	800a586 <HAL_TIM_ConfigClockSource+0x16c>
 800a496:	2b50      	cmp	r3, #80	; 0x50
 800a498:	d03c      	beq.n	800a514 <HAL_TIM_ConfigClockSource+0xfa>
 800a49a:	2b50      	cmp	r3, #80	; 0x50
 800a49c:	d873      	bhi.n	800a586 <HAL_TIM_ConfigClockSource+0x16c>
 800a49e:	2b40      	cmp	r3, #64	; 0x40
 800a4a0:	d058      	beq.n	800a554 <HAL_TIM_ConfigClockSource+0x13a>
 800a4a2:	2b40      	cmp	r3, #64	; 0x40
 800a4a4:	d86f      	bhi.n	800a586 <HAL_TIM_ConfigClockSource+0x16c>
 800a4a6:	2b30      	cmp	r3, #48	; 0x30
 800a4a8:	d064      	beq.n	800a574 <HAL_TIM_ConfigClockSource+0x15a>
 800a4aa:	2b30      	cmp	r3, #48	; 0x30
 800a4ac:	d86b      	bhi.n	800a586 <HAL_TIM_ConfigClockSource+0x16c>
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	d060      	beq.n	800a574 <HAL_TIM_ConfigClockSource+0x15a>
 800a4b2:	2b20      	cmp	r3, #32
 800a4b4:	d867      	bhi.n	800a586 <HAL_TIM_ConfigClockSource+0x16c>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d05c      	beq.n	800a574 <HAL_TIM_ConfigClockSource+0x15a>
 800a4ba:	2b10      	cmp	r3, #16
 800a4bc:	d05a      	beq.n	800a574 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a4be:	e062      	b.n	800a586 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6818      	ldr	r0, [r3, #0]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	6899      	ldr	r1, [r3, #8]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f000 f9a6 	bl	800a820 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	609a      	str	r2, [r3, #8]
      break;
 800a4ec:	e04e      	b.n	800a58c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	6899      	ldr	r1, [r3, #8]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	f000 f98f 	bl	800a820 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a510:	609a      	str	r2, [r3, #8]
      break;
 800a512:	e03b      	b.n	800a58c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6818      	ldr	r0, [r3, #0]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	6859      	ldr	r1, [r3, #4]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	461a      	mov	r2, r3
 800a522:	f000 f903 	bl	800a72c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2150      	movs	r1, #80	; 0x50
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 f95c 	bl	800a7ea <TIM_ITRx_SetConfig>
      break;
 800a532:	e02b      	b.n	800a58c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6818      	ldr	r0, [r3, #0]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	6859      	ldr	r1, [r3, #4]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	461a      	mov	r2, r3
 800a542:	f000 f922 	bl	800a78a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2160      	movs	r1, #96	; 0x60
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 f94c 	bl	800a7ea <TIM_ITRx_SetConfig>
      break;
 800a552:	e01b      	b.n	800a58c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6818      	ldr	r0, [r3, #0]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	6859      	ldr	r1, [r3, #4]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	461a      	mov	r2, r3
 800a562:	f000 f8e3 	bl	800a72c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2140      	movs	r1, #64	; 0x40
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 f93c 	bl	800a7ea <TIM_ITRx_SetConfig>
      break;
 800a572:	e00b      	b.n	800a58c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4619      	mov	r1, r3
 800a57e:	4610      	mov	r0, r2
 800a580:	f000 f933 	bl	800a7ea <TIM_ITRx_SetConfig>
        break;
 800a584:	e002      	b.n	800a58c <HAL_TIM_ConfigClockSource+0x172>
      break;
 800a586:	bf00      	nop
 800a588:	e000      	b.n	800a58c <HAL_TIM_ConfigClockSource+0x172>
      break;
 800a58a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5ae:	bf00      	nop
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5c2:	bf00      	nop
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b083      	sub	sp, #12
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5d6:	bf00      	nop
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a40      	ldr	r2, [pc, #256]	; (800a70c <TIM_Base_SetConfig+0x114>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d013      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a616:	d00f      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a3d      	ldr	r2, [pc, #244]	; (800a710 <TIM_Base_SetConfig+0x118>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d00b      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a3c      	ldr	r2, [pc, #240]	; (800a714 <TIM_Base_SetConfig+0x11c>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d007      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a3b      	ldr	r2, [pc, #236]	; (800a718 <TIM_Base_SetConfig+0x120>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d003      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a3a      	ldr	r2, [pc, #232]	; (800a71c <TIM_Base_SetConfig+0x124>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d108      	bne.n	800a64a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a63e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	4313      	orrs	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a2f      	ldr	r2, [pc, #188]	; (800a70c <TIM_Base_SetConfig+0x114>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d01f      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a658:	d01b      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a2c      	ldr	r2, [pc, #176]	; (800a710 <TIM_Base_SetConfig+0x118>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d017      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a2b      	ldr	r2, [pc, #172]	; (800a714 <TIM_Base_SetConfig+0x11c>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d013      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a2a      	ldr	r2, [pc, #168]	; (800a718 <TIM_Base_SetConfig+0x120>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d00f      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a29      	ldr	r2, [pc, #164]	; (800a71c <TIM_Base_SetConfig+0x124>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d00b      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a28      	ldr	r2, [pc, #160]	; (800a720 <TIM_Base_SetConfig+0x128>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d007      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a27      	ldr	r2, [pc, #156]	; (800a724 <TIM_Base_SetConfig+0x12c>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d003      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a26      	ldr	r2, [pc, #152]	; (800a728 <TIM_Base_SetConfig+0x130>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d108      	bne.n	800a6a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a10      	ldr	r2, [pc, #64]	; (800a70c <TIM_Base_SetConfig+0x114>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d00f      	beq.n	800a6f0 <TIM_Base_SetConfig+0xf8>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a12      	ldr	r2, [pc, #72]	; (800a71c <TIM_Base_SetConfig+0x124>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d00b      	beq.n	800a6f0 <TIM_Base_SetConfig+0xf8>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a11      	ldr	r2, [pc, #68]	; (800a720 <TIM_Base_SetConfig+0x128>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d007      	beq.n	800a6f0 <TIM_Base_SetConfig+0xf8>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4a10      	ldr	r2, [pc, #64]	; (800a724 <TIM_Base_SetConfig+0x12c>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d003      	beq.n	800a6f0 <TIM_Base_SetConfig+0xf8>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a0f      	ldr	r2, [pc, #60]	; (800a728 <TIM_Base_SetConfig+0x130>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d103      	bne.n	800a6f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	691a      	ldr	r2, [r3, #16]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	615a      	str	r2, [r3, #20]
}
 800a6fe:	bf00      	nop
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	40012c00 	.word	0x40012c00
 800a710:	40000400 	.word	0x40000400
 800a714:	40000800 	.word	0x40000800
 800a718:	40000c00 	.word	0x40000c00
 800a71c:	40013400 	.word	0x40013400
 800a720:	40014000 	.word	0x40014000
 800a724:	40014400 	.word	0x40014400
 800a728:	40014800 	.word	0x40014800

0800a72c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b087      	sub	sp, #28
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6a1b      	ldr	r3, [r3, #32]
 800a73c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	f023 0201 	bic.w	r2, r3, #1
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	011b      	lsls	r3, r3, #4
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	4313      	orrs	r3, r2
 800a760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f023 030a 	bic.w	r3, r3, #10
 800a768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	4313      	orrs	r3, r2
 800a770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	621a      	str	r2, [r3, #32]
}
 800a77e:	bf00      	nop
 800a780:	371c      	adds	r7, #28
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b087      	sub	sp, #28
 800a78e:	af00      	add	r7, sp, #0
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	60b9      	str	r1, [r7, #8]
 800a794:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	f023 0210 	bic.w	r2, r3, #16
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
 800a7ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	031b      	lsls	r3, r3, #12
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	011b      	lsls	r3, r3, #4
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	621a      	str	r2, [r3, #32]
}
 800a7de:	bf00      	nop
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	4313      	orrs	r3, r2
 800a808:	f043 0307 	orr.w	r3, r3, #7
 800a80c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	609a      	str	r2, [r3, #8]
}
 800a814:	bf00      	nop
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a83a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	021a      	lsls	r2, r3, #8
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	431a      	orrs	r2, r3
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	4313      	orrs	r3, r2
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	697a      	ldr	r2, [r7, #20]
 800a852:	609a      	str	r2, [r3, #8]
}
 800a854:	bf00      	nop
 800a856:	371c      	adds	r7, #28
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a870:	2b01      	cmp	r3, #1
 800a872:	d101      	bne.n	800a878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a874:	2302      	movs	r3, #2
 800a876:	e068      	b.n	800a94a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2202      	movs	r2, #2
 800a884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a2e      	ldr	r2, [pc, #184]	; (800a958 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d004      	beq.n	800a8ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a2d      	ldr	r2, [pc, #180]	; (800a95c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d108      	bne.n	800a8be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a8b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a1e      	ldr	r2, [pc, #120]	; (800a958 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d01d      	beq.n	800a91e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ea:	d018      	beq.n	800a91e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a1b      	ldr	r2, [pc, #108]	; (800a960 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d013      	beq.n	800a91e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a1a      	ldr	r2, [pc, #104]	; (800a964 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d00e      	beq.n	800a91e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a18      	ldr	r2, [pc, #96]	; (800a968 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d009      	beq.n	800a91e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a13      	ldr	r2, [pc, #76]	; (800a95c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d004      	beq.n	800a91e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a14      	ldr	r2, [pc, #80]	; (800a96c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d10c      	bne.n	800a938 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	40012c00 	.word	0x40012c00
 800a95c:	40013400 	.word	0x40013400
 800a960:	40000400 	.word	0x40000400
 800a964:	40000800 	.word	0x40000800
 800a968:	40000c00 	.word	0x40000c00
 800a96c:	40014000 	.word	0x40014000

0800a970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e040      	b.n	800aa40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d106      	bne.n	800a9d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7f9 fd20 	bl	8004414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2224      	movs	r2, #36	; 0x24
 800a9d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f022 0201 	bic.w	r2, r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f82c 	bl	800aa48 <UART_SetConfig>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d101      	bne.n	800a9fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e022      	b.n	800aa40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d002      	beq.n	800aa08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 faaa 	bl	800af5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	689a      	ldr	r2, [r3, #8]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f042 0201 	orr.w	r2, r2, #1
 800aa36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fb31 	bl	800b0a0 <UART_CheckIdleState>
 800aa3e:	4603      	mov	r3, r0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa48:	b5b0      	push	{r4, r5, r7, lr}
 800aa4a:	b088      	sub	sp, #32
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	689a      	ldr	r2, [r3, #8]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	431a      	orrs	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	431a      	orrs	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	69db      	ldr	r3, [r3, #28]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	4bad      	ldr	r3, [pc, #692]	; (800ad28 <UART_SetConfig+0x2e0>)
 800aa74:	4013      	ands	r3, r2
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	6812      	ldr	r2, [r2, #0]
 800aa7a:	69f9      	ldr	r1, [r7, #28]
 800aa7c:	430b      	orrs	r3, r1
 800aa7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	68da      	ldr	r2, [r3, #12]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4aa2      	ldr	r2, [pc, #648]	; (800ad2c <UART_SetConfig+0x2e4>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d004      	beq.n	800aab0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	69fa      	ldr	r2, [r7, #28]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	69fa      	ldr	r2, [r7, #28]
 800aac0:	430a      	orrs	r2, r1
 800aac2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a99      	ldr	r2, [pc, #612]	; (800ad30 <UART_SetConfig+0x2e8>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d121      	bne.n	800ab12 <UART_SetConfig+0xca>
 800aace:	4b99      	ldr	r3, [pc, #612]	; (800ad34 <UART_SetConfig+0x2ec>)
 800aad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad4:	f003 0303 	and.w	r3, r3, #3
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d817      	bhi.n	800ab0c <UART_SetConfig+0xc4>
 800aadc:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <UART_SetConfig+0x9c>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800aaf5 	.word	0x0800aaf5
 800aae8:	0800ab01 	.word	0x0800ab01
 800aaec:	0800aafb 	.word	0x0800aafb
 800aaf0:	0800ab07 	.word	0x0800ab07
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	76fb      	strb	r3, [r7, #27]
 800aaf8:	e0e7      	b.n	800acca <UART_SetConfig+0x282>
 800aafa:	2302      	movs	r3, #2
 800aafc:	76fb      	strb	r3, [r7, #27]
 800aafe:	e0e4      	b.n	800acca <UART_SetConfig+0x282>
 800ab00:	2304      	movs	r3, #4
 800ab02:	76fb      	strb	r3, [r7, #27]
 800ab04:	e0e1      	b.n	800acca <UART_SetConfig+0x282>
 800ab06:	2308      	movs	r3, #8
 800ab08:	76fb      	strb	r3, [r7, #27]
 800ab0a:	e0de      	b.n	800acca <UART_SetConfig+0x282>
 800ab0c:	2310      	movs	r3, #16
 800ab0e:	76fb      	strb	r3, [r7, #27]
 800ab10:	e0db      	b.n	800acca <UART_SetConfig+0x282>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a88      	ldr	r2, [pc, #544]	; (800ad38 <UART_SetConfig+0x2f0>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d132      	bne.n	800ab82 <UART_SetConfig+0x13a>
 800ab1c:	4b85      	ldr	r3, [pc, #532]	; (800ad34 <UART_SetConfig+0x2ec>)
 800ab1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab22:	f003 030c 	and.w	r3, r3, #12
 800ab26:	2b0c      	cmp	r3, #12
 800ab28:	d828      	bhi.n	800ab7c <UART_SetConfig+0x134>
 800ab2a:	a201      	add	r2, pc, #4	; (adr r2, 800ab30 <UART_SetConfig+0xe8>)
 800ab2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab30:	0800ab65 	.word	0x0800ab65
 800ab34:	0800ab7d 	.word	0x0800ab7d
 800ab38:	0800ab7d 	.word	0x0800ab7d
 800ab3c:	0800ab7d 	.word	0x0800ab7d
 800ab40:	0800ab71 	.word	0x0800ab71
 800ab44:	0800ab7d 	.word	0x0800ab7d
 800ab48:	0800ab7d 	.word	0x0800ab7d
 800ab4c:	0800ab7d 	.word	0x0800ab7d
 800ab50:	0800ab6b 	.word	0x0800ab6b
 800ab54:	0800ab7d 	.word	0x0800ab7d
 800ab58:	0800ab7d 	.word	0x0800ab7d
 800ab5c:	0800ab7d 	.word	0x0800ab7d
 800ab60:	0800ab77 	.word	0x0800ab77
 800ab64:	2300      	movs	r3, #0
 800ab66:	76fb      	strb	r3, [r7, #27]
 800ab68:	e0af      	b.n	800acca <UART_SetConfig+0x282>
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	76fb      	strb	r3, [r7, #27]
 800ab6e:	e0ac      	b.n	800acca <UART_SetConfig+0x282>
 800ab70:	2304      	movs	r3, #4
 800ab72:	76fb      	strb	r3, [r7, #27]
 800ab74:	e0a9      	b.n	800acca <UART_SetConfig+0x282>
 800ab76:	2308      	movs	r3, #8
 800ab78:	76fb      	strb	r3, [r7, #27]
 800ab7a:	e0a6      	b.n	800acca <UART_SetConfig+0x282>
 800ab7c:	2310      	movs	r3, #16
 800ab7e:	76fb      	strb	r3, [r7, #27]
 800ab80:	e0a3      	b.n	800acca <UART_SetConfig+0x282>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a6d      	ldr	r2, [pc, #436]	; (800ad3c <UART_SetConfig+0x2f4>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d120      	bne.n	800abce <UART_SetConfig+0x186>
 800ab8c:	4b69      	ldr	r3, [pc, #420]	; (800ad34 <UART_SetConfig+0x2ec>)
 800ab8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab96:	2b30      	cmp	r3, #48	; 0x30
 800ab98:	d013      	beq.n	800abc2 <UART_SetConfig+0x17a>
 800ab9a:	2b30      	cmp	r3, #48	; 0x30
 800ab9c:	d814      	bhi.n	800abc8 <UART_SetConfig+0x180>
 800ab9e:	2b20      	cmp	r3, #32
 800aba0:	d009      	beq.n	800abb6 <UART_SetConfig+0x16e>
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d810      	bhi.n	800abc8 <UART_SetConfig+0x180>
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d002      	beq.n	800abb0 <UART_SetConfig+0x168>
 800abaa:	2b10      	cmp	r3, #16
 800abac:	d006      	beq.n	800abbc <UART_SetConfig+0x174>
 800abae:	e00b      	b.n	800abc8 <UART_SetConfig+0x180>
 800abb0:	2300      	movs	r3, #0
 800abb2:	76fb      	strb	r3, [r7, #27]
 800abb4:	e089      	b.n	800acca <UART_SetConfig+0x282>
 800abb6:	2302      	movs	r3, #2
 800abb8:	76fb      	strb	r3, [r7, #27]
 800abba:	e086      	b.n	800acca <UART_SetConfig+0x282>
 800abbc:	2304      	movs	r3, #4
 800abbe:	76fb      	strb	r3, [r7, #27]
 800abc0:	e083      	b.n	800acca <UART_SetConfig+0x282>
 800abc2:	2308      	movs	r3, #8
 800abc4:	76fb      	strb	r3, [r7, #27]
 800abc6:	e080      	b.n	800acca <UART_SetConfig+0x282>
 800abc8:	2310      	movs	r3, #16
 800abca:	76fb      	strb	r3, [r7, #27]
 800abcc:	e07d      	b.n	800acca <UART_SetConfig+0x282>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a5b      	ldr	r2, [pc, #364]	; (800ad40 <UART_SetConfig+0x2f8>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d120      	bne.n	800ac1a <UART_SetConfig+0x1d2>
 800abd8:	4b56      	ldr	r3, [pc, #344]	; (800ad34 <UART_SetConfig+0x2ec>)
 800abda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800abe2:	2bc0      	cmp	r3, #192	; 0xc0
 800abe4:	d013      	beq.n	800ac0e <UART_SetConfig+0x1c6>
 800abe6:	2bc0      	cmp	r3, #192	; 0xc0
 800abe8:	d814      	bhi.n	800ac14 <UART_SetConfig+0x1cc>
 800abea:	2b80      	cmp	r3, #128	; 0x80
 800abec:	d009      	beq.n	800ac02 <UART_SetConfig+0x1ba>
 800abee:	2b80      	cmp	r3, #128	; 0x80
 800abf0:	d810      	bhi.n	800ac14 <UART_SetConfig+0x1cc>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <UART_SetConfig+0x1b4>
 800abf6:	2b40      	cmp	r3, #64	; 0x40
 800abf8:	d006      	beq.n	800ac08 <UART_SetConfig+0x1c0>
 800abfa:	e00b      	b.n	800ac14 <UART_SetConfig+0x1cc>
 800abfc:	2300      	movs	r3, #0
 800abfe:	76fb      	strb	r3, [r7, #27]
 800ac00:	e063      	b.n	800acca <UART_SetConfig+0x282>
 800ac02:	2302      	movs	r3, #2
 800ac04:	76fb      	strb	r3, [r7, #27]
 800ac06:	e060      	b.n	800acca <UART_SetConfig+0x282>
 800ac08:	2304      	movs	r3, #4
 800ac0a:	76fb      	strb	r3, [r7, #27]
 800ac0c:	e05d      	b.n	800acca <UART_SetConfig+0x282>
 800ac0e:	2308      	movs	r3, #8
 800ac10:	76fb      	strb	r3, [r7, #27]
 800ac12:	e05a      	b.n	800acca <UART_SetConfig+0x282>
 800ac14:	2310      	movs	r3, #16
 800ac16:	76fb      	strb	r3, [r7, #27]
 800ac18:	e057      	b.n	800acca <UART_SetConfig+0x282>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a49      	ldr	r2, [pc, #292]	; (800ad44 <UART_SetConfig+0x2fc>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d125      	bne.n	800ac70 <UART_SetConfig+0x228>
 800ac24:	4b43      	ldr	r3, [pc, #268]	; (800ad34 <UART_SetConfig+0x2ec>)
 800ac26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac32:	d017      	beq.n	800ac64 <UART_SetConfig+0x21c>
 800ac34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac38:	d817      	bhi.n	800ac6a <UART_SetConfig+0x222>
 800ac3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac3e:	d00b      	beq.n	800ac58 <UART_SetConfig+0x210>
 800ac40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac44:	d811      	bhi.n	800ac6a <UART_SetConfig+0x222>
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <UART_SetConfig+0x20a>
 800ac4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac4e:	d006      	beq.n	800ac5e <UART_SetConfig+0x216>
 800ac50:	e00b      	b.n	800ac6a <UART_SetConfig+0x222>
 800ac52:	2300      	movs	r3, #0
 800ac54:	76fb      	strb	r3, [r7, #27]
 800ac56:	e038      	b.n	800acca <UART_SetConfig+0x282>
 800ac58:	2302      	movs	r3, #2
 800ac5a:	76fb      	strb	r3, [r7, #27]
 800ac5c:	e035      	b.n	800acca <UART_SetConfig+0x282>
 800ac5e:	2304      	movs	r3, #4
 800ac60:	76fb      	strb	r3, [r7, #27]
 800ac62:	e032      	b.n	800acca <UART_SetConfig+0x282>
 800ac64:	2308      	movs	r3, #8
 800ac66:	76fb      	strb	r3, [r7, #27]
 800ac68:	e02f      	b.n	800acca <UART_SetConfig+0x282>
 800ac6a:	2310      	movs	r3, #16
 800ac6c:	76fb      	strb	r3, [r7, #27]
 800ac6e:	e02c      	b.n	800acca <UART_SetConfig+0x282>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a2d      	ldr	r2, [pc, #180]	; (800ad2c <UART_SetConfig+0x2e4>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d125      	bne.n	800acc6 <UART_SetConfig+0x27e>
 800ac7a:	4b2e      	ldr	r3, [pc, #184]	; (800ad34 <UART_SetConfig+0x2ec>)
 800ac7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac88:	d017      	beq.n	800acba <UART_SetConfig+0x272>
 800ac8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac8e:	d817      	bhi.n	800acc0 <UART_SetConfig+0x278>
 800ac90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac94:	d00b      	beq.n	800acae <UART_SetConfig+0x266>
 800ac96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac9a:	d811      	bhi.n	800acc0 <UART_SetConfig+0x278>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <UART_SetConfig+0x260>
 800aca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aca4:	d006      	beq.n	800acb4 <UART_SetConfig+0x26c>
 800aca6:	e00b      	b.n	800acc0 <UART_SetConfig+0x278>
 800aca8:	2300      	movs	r3, #0
 800acaa:	76fb      	strb	r3, [r7, #27]
 800acac:	e00d      	b.n	800acca <UART_SetConfig+0x282>
 800acae:	2302      	movs	r3, #2
 800acb0:	76fb      	strb	r3, [r7, #27]
 800acb2:	e00a      	b.n	800acca <UART_SetConfig+0x282>
 800acb4:	2304      	movs	r3, #4
 800acb6:	76fb      	strb	r3, [r7, #27]
 800acb8:	e007      	b.n	800acca <UART_SetConfig+0x282>
 800acba:	2308      	movs	r3, #8
 800acbc:	76fb      	strb	r3, [r7, #27]
 800acbe:	e004      	b.n	800acca <UART_SetConfig+0x282>
 800acc0:	2310      	movs	r3, #16
 800acc2:	76fb      	strb	r3, [r7, #27]
 800acc4:	e001      	b.n	800acca <UART_SetConfig+0x282>
 800acc6:	2310      	movs	r3, #16
 800acc8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a17      	ldr	r2, [pc, #92]	; (800ad2c <UART_SetConfig+0x2e4>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	f040 8087 	bne.w	800ade4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800acd6:	7efb      	ldrb	r3, [r7, #27]
 800acd8:	2b08      	cmp	r3, #8
 800acda:	d837      	bhi.n	800ad4c <UART_SetConfig+0x304>
 800acdc:	a201      	add	r2, pc, #4	; (adr r2, 800ace4 <UART_SetConfig+0x29c>)
 800acde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace2:	bf00      	nop
 800ace4:	0800ad09 	.word	0x0800ad09
 800ace8:	0800ad4d 	.word	0x0800ad4d
 800acec:	0800ad11 	.word	0x0800ad11
 800acf0:	0800ad4d 	.word	0x0800ad4d
 800acf4:	0800ad17 	.word	0x0800ad17
 800acf8:	0800ad4d 	.word	0x0800ad4d
 800acfc:	0800ad4d 	.word	0x0800ad4d
 800ad00:	0800ad4d 	.word	0x0800ad4d
 800ad04:	0800ad1f 	.word	0x0800ad1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad08:	f7fd fd1a 	bl	8008740 <HAL_RCC_GetPCLK1Freq>
 800ad0c:	6178      	str	r0, [r7, #20]
        break;
 800ad0e:	e022      	b.n	800ad56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad10:	4b0d      	ldr	r3, [pc, #52]	; (800ad48 <UART_SetConfig+0x300>)
 800ad12:	617b      	str	r3, [r7, #20]
        break;
 800ad14:	e01f      	b.n	800ad56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad16:	f7fd fc7b 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 800ad1a:	6178      	str	r0, [r7, #20]
        break;
 800ad1c:	e01b      	b.n	800ad56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad22:	617b      	str	r3, [r7, #20]
        break;
 800ad24:	e017      	b.n	800ad56 <UART_SetConfig+0x30e>
 800ad26:	bf00      	nop
 800ad28:	efff69f3 	.word	0xefff69f3
 800ad2c:	40008000 	.word	0x40008000
 800ad30:	40013800 	.word	0x40013800
 800ad34:	40021000 	.word	0x40021000
 800ad38:	40004400 	.word	0x40004400
 800ad3c:	40004800 	.word	0x40004800
 800ad40:	40004c00 	.word	0x40004c00
 800ad44:	40005000 	.word	0x40005000
 800ad48:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	76bb      	strb	r3, [r7, #26]
        break;
 800ad54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f000 80f1 	beq.w	800af40 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	4613      	mov	r3, r2
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	4413      	add	r3, r2
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d305      	bcc.n	800ad7a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d902      	bls.n	800ad80 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	76bb      	strb	r3, [r7, #26]
 800ad7e:	e0df      	b.n	800af40 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f04f 0100 	mov.w	r1, #0
 800ad88:	f04f 0200 	mov.w	r2, #0
 800ad8c:	f04f 0300 	mov.w	r3, #0
 800ad90:	020b      	lsls	r3, r1, #8
 800ad92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad96:	0202      	lsls	r2, r0, #8
 800ad98:	6879      	ldr	r1, [r7, #4]
 800ad9a:	6849      	ldr	r1, [r1, #4]
 800ad9c:	0849      	lsrs	r1, r1, #1
 800ad9e:	4608      	mov	r0, r1
 800ada0:	f04f 0100 	mov.w	r1, #0
 800ada4:	1814      	adds	r4, r2, r0
 800ada6:	eb43 0501 	adc.w	r5, r3, r1
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	461a      	mov	r2, r3
 800adb0:	f04f 0300 	mov.w	r3, #0
 800adb4:	4620      	mov	r0, r4
 800adb6:	4629      	mov	r1, r5
 800adb8:	f7f5 ff88 	bl	8000ccc <__aeabi_uldivmod>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	4613      	mov	r3, r2
 800adc2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adca:	d308      	bcc.n	800adde <UART_SetConfig+0x396>
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800add2:	d204      	bcs.n	800adde <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	60da      	str	r2, [r3, #12]
 800addc:	e0b0      	b.n	800af40 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	76bb      	strb	r3, [r7, #26]
 800ade2:	e0ad      	b.n	800af40 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	69db      	ldr	r3, [r3, #28]
 800ade8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adec:	d15c      	bne.n	800aea8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800adee:	7efb      	ldrb	r3, [r7, #27]
 800adf0:	2b08      	cmp	r3, #8
 800adf2:	d828      	bhi.n	800ae46 <UART_SetConfig+0x3fe>
 800adf4:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <UART_SetConfig+0x3b4>)
 800adf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfa:	bf00      	nop
 800adfc:	0800ae21 	.word	0x0800ae21
 800ae00:	0800ae29 	.word	0x0800ae29
 800ae04:	0800ae31 	.word	0x0800ae31
 800ae08:	0800ae47 	.word	0x0800ae47
 800ae0c:	0800ae37 	.word	0x0800ae37
 800ae10:	0800ae47 	.word	0x0800ae47
 800ae14:	0800ae47 	.word	0x0800ae47
 800ae18:	0800ae47 	.word	0x0800ae47
 800ae1c:	0800ae3f 	.word	0x0800ae3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae20:	f7fd fc8e 	bl	8008740 <HAL_RCC_GetPCLK1Freq>
 800ae24:	6178      	str	r0, [r7, #20]
        break;
 800ae26:	e013      	b.n	800ae50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae28:	f7fd fca0 	bl	800876c <HAL_RCC_GetPCLK2Freq>
 800ae2c:	6178      	str	r0, [r7, #20]
        break;
 800ae2e:	e00f      	b.n	800ae50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae30:	4b49      	ldr	r3, [pc, #292]	; (800af58 <UART_SetConfig+0x510>)
 800ae32:	617b      	str	r3, [r7, #20]
        break;
 800ae34:	e00c      	b.n	800ae50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae36:	f7fd fbeb 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 800ae3a:	6178      	str	r0, [r7, #20]
        break;
 800ae3c:	e008      	b.n	800ae50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae42:	617b      	str	r3, [r7, #20]
        break;
 800ae44:	e004      	b.n	800ae50 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800ae46:	2300      	movs	r3, #0
 800ae48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	76bb      	strb	r3, [r7, #26]
        break;
 800ae4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d074      	beq.n	800af40 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	005a      	lsls	r2, r3, #1
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	085b      	lsrs	r3, r3, #1
 800ae60:	441a      	add	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2b0f      	cmp	r3, #15
 800ae72:	d916      	bls.n	800aea2 <UART_SetConfig+0x45a>
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae7a:	d212      	bcs.n	800aea2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	f023 030f 	bic.w	r3, r3, #15
 800ae84:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	085b      	lsrs	r3, r3, #1
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	f003 0307 	and.w	r3, r3, #7
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	89fb      	ldrh	r3, [r7, #14]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	89fa      	ldrh	r2, [r7, #14]
 800ae9e:	60da      	str	r2, [r3, #12]
 800aea0:	e04e      	b.n	800af40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	76bb      	strb	r3, [r7, #26]
 800aea6:	e04b      	b.n	800af40 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aea8:	7efb      	ldrb	r3, [r7, #27]
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	d827      	bhi.n	800aefe <UART_SetConfig+0x4b6>
 800aeae:	a201      	add	r2, pc, #4	; (adr r2, 800aeb4 <UART_SetConfig+0x46c>)
 800aeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb4:	0800aed9 	.word	0x0800aed9
 800aeb8:	0800aee1 	.word	0x0800aee1
 800aebc:	0800aee9 	.word	0x0800aee9
 800aec0:	0800aeff 	.word	0x0800aeff
 800aec4:	0800aeef 	.word	0x0800aeef
 800aec8:	0800aeff 	.word	0x0800aeff
 800aecc:	0800aeff 	.word	0x0800aeff
 800aed0:	0800aeff 	.word	0x0800aeff
 800aed4:	0800aef7 	.word	0x0800aef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aed8:	f7fd fc32 	bl	8008740 <HAL_RCC_GetPCLK1Freq>
 800aedc:	6178      	str	r0, [r7, #20]
        break;
 800aede:	e013      	b.n	800af08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aee0:	f7fd fc44 	bl	800876c <HAL_RCC_GetPCLK2Freq>
 800aee4:	6178      	str	r0, [r7, #20]
        break;
 800aee6:	e00f      	b.n	800af08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aee8:	4b1b      	ldr	r3, [pc, #108]	; (800af58 <UART_SetConfig+0x510>)
 800aeea:	617b      	str	r3, [r7, #20]
        break;
 800aeec:	e00c      	b.n	800af08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aeee:	f7fd fb8f 	bl	8008610 <HAL_RCC_GetSysClockFreq>
 800aef2:	6178      	str	r0, [r7, #20]
        break;
 800aef4:	e008      	b.n	800af08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aefa:	617b      	str	r3, [r7, #20]
        break;
 800aefc:	e004      	b.n	800af08 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	76bb      	strb	r3, [r7, #26]
        break;
 800af06:	bf00      	nop
    }

    if (pclk != 0U)
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d018      	beq.n	800af40 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	085a      	lsrs	r2, r3, #1
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	441a      	add	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af20:	b29b      	uxth	r3, r3
 800af22:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	2b0f      	cmp	r3, #15
 800af28:	d908      	bls.n	800af3c <UART_SetConfig+0x4f4>
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af30:	d204      	bcs.n	800af3c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	60da      	str	r2, [r3, #12]
 800af3a:	e001      	b.n	800af40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800af4c:	7ebb      	ldrb	r3, [r7, #26]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3720      	adds	r7, #32
 800af52:	46bd      	mov	sp, r7
 800af54:	bdb0      	pop	{r4, r5, r7, pc}
 800af56:	bf00      	nop
 800af58:	00f42400 	.word	0x00f42400

0800af5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00a      	beq.n	800af86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	430a      	orrs	r2, r1
 800af84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8a:	f003 0302 	and.w	r3, r3, #2
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00a      	beq.n	800afa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	430a      	orrs	r2, r1
 800afa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	f003 0304 	and.w	r3, r3, #4
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00a      	beq.n	800afca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	430a      	orrs	r2, r1
 800afc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	f003 0308 	and.w	r3, r3, #8
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00a      	beq.n	800afec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	430a      	orrs	r2, r1
 800afea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00a      	beq.n	800b00e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	430a      	orrs	r2, r1
 800b00c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	f003 0320 	and.w	r3, r3, #32
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00a      	beq.n	800b030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	430a      	orrs	r2, r1
 800b02e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d01a      	beq.n	800b072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	430a      	orrs	r2, r1
 800b050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b05a:	d10a      	bne.n	800b072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	430a      	orrs	r2, r1
 800b070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00a      	beq.n	800b094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	430a      	orrs	r2, r1
 800b092:	605a      	str	r2, [r3, #4]
  }
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af02      	add	r7, sp, #8
 800b0a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0b0:	f7fa fdc8 	bl	8005c44 <HAL_GetTick>
 800b0b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 0308 	and.w	r3, r3, #8
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d10e      	bne.n	800b0e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f82d 	bl	800b132 <UART_WaitOnFlagUntilTimeout>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e023      	b.n	800b12a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b04      	cmp	r3, #4
 800b0ee:	d10e      	bne.n	800b10e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f817 	bl	800b132 <UART_WaitOnFlagUntilTimeout>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b10a:	2303      	movs	r3, #3
 800b10c:	e00d      	b.n	800b12a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2220      	movs	r2, #32
 800b112:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2220      	movs	r2, #32
 800b118:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b084      	sub	sp, #16
 800b136:	af00      	add	r7, sp, #0
 800b138:	60f8      	str	r0, [r7, #12]
 800b13a:	60b9      	str	r1, [r7, #8]
 800b13c:	603b      	str	r3, [r7, #0]
 800b13e:	4613      	mov	r3, r2
 800b140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b142:	e05e      	b.n	800b202 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14a:	d05a      	beq.n	800b202 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b14c:	f7fa fd7a 	bl	8005c44 <HAL_GetTick>
 800b150:	4602      	mov	r2, r0
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	1ad3      	subs	r3, r2, r3
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d302      	bcc.n	800b162 <UART_WaitOnFlagUntilTimeout+0x30>
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d11b      	bne.n	800b19a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b170:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	689a      	ldr	r2, [r3, #8]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f022 0201 	bic.w	r2, r2, #1
 800b180:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2220      	movs	r2, #32
 800b186:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2220      	movs	r2, #32
 800b18c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b196:	2303      	movs	r3, #3
 800b198:	e043      	b.n	800b222 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0304 	and.w	r3, r3, #4
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d02c      	beq.n	800b202 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	69db      	ldr	r3, [r3, #28]
 800b1ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1b6:	d124      	bne.n	800b202 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1c0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b1d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	689a      	ldr	r2, [r3, #8]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f022 0201 	bic.w	r2, r2, #1
 800b1e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2220      	movs	r2, #32
 800b1ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b1fe:	2303      	movs	r3, #3
 800b200:	e00f      	b.n	800b222 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	69da      	ldr	r2, [r3, #28]
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	4013      	ands	r3, r2
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	429a      	cmp	r2, r3
 800b210:	bf0c      	ite	eq
 800b212:	2301      	moveq	r3, #1
 800b214:	2300      	movne	r3, #0
 800b216:	b2db      	uxtb	r3, r3
 800b218:	461a      	mov	r2, r3
 800b21a:	79fb      	ldrb	r3, [r7, #7]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d091      	beq.n	800b144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
	...

0800b22c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b230:	4904      	ldr	r1, [pc, #16]	; (800b244 <MX_FATFS_Init+0x18>)
 800b232:	4805      	ldr	r0, [pc, #20]	; (800b248 <MX_FATFS_Init+0x1c>)
 800b234:	f003 fd04 	bl	800ec40 <FATFS_LinkDriver>
 800b238:	4603      	mov	r3, r0
 800b23a:	461a      	mov	r2, r3
 800b23c:	4b03      	ldr	r3, [pc, #12]	; (800b24c <MX_FATFS_Init+0x20>)
 800b23e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b240:	bf00      	nop
 800b242:	bd80      	pop	{r7, pc}
 800b244:	20010fc8 	.word	0x20010fc8
 800b248:	2000009c 	.word	0x2000009c
 800b24c:	20010fcc 	.word	0x20010fcc

0800b250 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b250:	b480      	push	{r7}
 800b252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b254:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b256:	4618      	mov	r0, r3
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800b26a:	79fb      	ldrb	r3, [r7, #7]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7f6 f891 	bl	8001394 <SD_disk_initialize>
 800b272:	4603      	mov	r3, r0
 800b274:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b276:	4618      	mov	r0, r3
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b082      	sub	sp, #8
 800b282:	af00      	add	r7, sp, #0
 800b284:	4603      	mov	r3, r0
 800b286:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800b288:	79fb      	ldrb	r3, [r7, #7]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7f6 f968 	bl	8001560 <SD_disk_status>
 800b290:	4603      	mov	r3, r0
 800b292:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b294:	4618      	mov	r0, r3
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60b9      	str	r1, [r7, #8]
 800b2a4:	607a      	str	r2, [r7, #4]
 800b2a6:	603b      	str	r3, [r7, #0]
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800b2ac:	7bf8      	ldrb	r0, [r7, #15]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	68b9      	ldr	r1, [r7, #8]
 800b2b4:	f7f6 f96a 	bl	800158c <SD_disk_read>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60b9      	str	r1, [r7, #8]
 800b2cc:	607a      	str	r2, [r7, #4]
 800b2ce:	603b      	str	r3, [r7, #0]
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800b2d4:	7bf8      	ldrb	r0, [r7, #15]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	68b9      	ldr	r1, [r7, #8]
 800b2dc:	f7f6 f9c0 	bl	8001660 <SD_disk_write>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3710      	adds	r7, #16
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	603a      	str	r2, [r7, #0]
 800b2f6:	71fb      	strb	r3, [r7, #7]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	79b9      	ldrb	r1, [r7, #6]
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	4618      	mov	r0, r3
 800b304:	f7f6 fa30 	bl	8001768 <SD_disk_ioctl>
 800b308:	4603      	mov	r3, r0
 800b30a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	4603      	mov	r3, r0
 800b31c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b31e:	79fb      	ldrb	r3, [r7, #7]
 800b320:	4a08      	ldr	r2, [pc, #32]	; (800b344 <disk_status+0x30>)
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	79fa      	ldrb	r2, [r7, #7]
 800b32c:	4905      	ldr	r1, [pc, #20]	; (800b344 <disk_status+0x30>)
 800b32e:	440a      	add	r2, r1
 800b330:	7a12      	ldrb	r2, [r2, #8]
 800b332:	4610      	mov	r0, r2
 800b334:	4798      	blx	r3
 800b336:	4603      	mov	r3, r0
 800b338:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	20000608 	.word	0x20000608

0800b348 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4603      	mov	r3, r0
 800b350:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b356:	79fb      	ldrb	r3, [r7, #7]
 800b358:	4a0d      	ldr	r2, [pc, #52]	; (800b390 <disk_initialize+0x48>)
 800b35a:	5cd3      	ldrb	r3, [r2, r3]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d111      	bne.n	800b384 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b360:	79fb      	ldrb	r3, [r7, #7]
 800b362:	4a0b      	ldr	r2, [pc, #44]	; (800b390 <disk_initialize+0x48>)
 800b364:	2101      	movs	r1, #1
 800b366:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b368:	79fb      	ldrb	r3, [r7, #7]
 800b36a:	4a09      	ldr	r2, [pc, #36]	; (800b390 <disk_initialize+0x48>)
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	4413      	add	r3, r2
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	79fa      	ldrb	r2, [r7, #7]
 800b376:	4906      	ldr	r1, [pc, #24]	; (800b390 <disk_initialize+0x48>)
 800b378:	440a      	add	r2, r1
 800b37a:	7a12      	ldrb	r2, [r2, #8]
 800b37c:	4610      	mov	r0, r2
 800b37e:	4798      	blx	r3
 800b380:	4603      	mov	r3, r0
 800b382:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b384:	7bfb      	ldrb	r3, [r7, #15]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	20000608 	.word	0x20000608

0800b394 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b394:	b590      	push	{r4, r7, lr}
 800b396:	b087      	sub	sp, #28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60b9      	str	r1, [r7, #8]
 800b39c:	607a      	str	r2, [r7, #4]
 800b39e:	603b      	str	r3, [r7, #0]
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
 800b3a6:	4a0a      	ldr	r2, [pc, #40]	; (800b3d0 <disk_read+0x3c>)
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	689c      	ldr	r4, [r3, #8]
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	4a07      	ldr	r2, [pc, #28]	; (800b3d0 <disk_read+0x3c>)
 800b3b4:	4413      	add	r3, r2
 800b3b6:	7a18      	ldrb	r0, [r3, #8]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	68b9      	ldr	r1, [r7, #8]
 800b3be:	47a0      	blx	r4
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	371c      	adds	r7, #28
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd90      	pop	{r4, r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000608 	.word	0x20000608

0800b3d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b3d4:	b590      	push	{r4, r7, lr}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60b9      	str	r1, [r7, #8]
 800b3dc:	607a      	str	r2, [r7, #4]
 800b3de:	603b      	str	r3, [r7, #0]
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
 800b3e6:	4a0a      	ldr	r2, [pc, #40]	; (800b410 <disk_write+0x3c>)
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	4413      	add	r3, r2
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	68dc      	ldr	r4, [r3, #12]
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	4a07      	ldr	r2, [pc, #28]	; (800b410 <disk_write+0x3c>)
 800b3f4:	4413      	add	r3, r2
 800b3f6:	7a18      	ldrb	r0, [r3, #8]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	68b9      	ldr	r1, [r7, #8]
 800b3fe:	47a0      	blx	r4
 800b400:	4603      	mov	r3, r0
 800b402:	75fb      	strb	r3, [r7, #23]
  return res;
 800b404:	7dfb      	ldrb	r3, [r7, #23]
}
 800b406:	4618      	mov	r0, r3
 800b408:	371c      	adds	r7, #28
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd90      	pop	{r4, r7, pc}
 800b40e:	bf00      	nop
 800b410:	20000608 	.word	0x20000608

0800b414 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	4603      	mov	r3, r0
 800b41c:	603a      	str	r2, [r7, #0]
 800b41e:	71fb      	strb	r3, [r7, #7]
 800b420:	460b      	mov	r3, r1
 800b422:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b424:	79fb      	ldrb	r3, [r7, #7]
 800b426:	4a09      	ldr	r2, [pc, #36]	; (800b44c <disk_ioctl+0x38>)
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	4413      	add	r3, r2
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	79fa      	ldrb	r2, [r7, #7]
 800b432:	4906      	ldr	r1, [pc, #24]	; (800b44c <disk_ioctl+0x38>)
 800b434:	440a      	add	r2, r1
 800b436:	7a10      	ldrb	r0, [r2, #8]
 800b438:	79b9      	ldrb	r1, [r7, #6]
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	4798      	blx	r3
 800b43e:	4603      	mov	r3, r0
 800b440:	73fb      	strb	r3, [r7, #15]
  return res;
 800b442:	7bfb      	ldrb	r3, [r7, #15]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	20000608 	.word	0x20000608

0800b450 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3301      	adds	r3, #1
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b460:	89fb      	ldrh	r3, [r7, #14]
 800b462:	021b      	lsls	r3, r3, #8
 800b464:	b21a      	sxth	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	b21b      	sxth	r3, r3
 800b46c:	4313      	orrs	r3, r2
 800b46e:	b21b      	sxth	r3, r3
 800b470:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b472:	89fb      	ldrh	r3, [r7, #14]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3303      	adds	r3, #3
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	021b      	lsls	r3, r3, #8
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	3202      	adds	r2, #2
 800b498:	7812      	ldrb	r2, [r2, #0]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	021b      	lsls	r3, r3, #8
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	3201      	adds	r2, #1
 800b4a6:	7812      	ldrb	r2, [r2, #0]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	021b      	lsls	r3, r3, #8
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	7812      	ldrb	r2, [r2, #0]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]
	return rv;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b083      	sub	sp, #12
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	887a      	ldrh	r2, [r7, #2]
 800b4da:	b2d2      	uxtb	r2, r2
 800b4dc:	701a      	strb	r2, [r3, #0]
 800b4de:	887b      	ldrh	r3, [r7, #2]
 800b4e0:	0a1b      	lsrs	r3, r3, #8
 800b4e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	607a      	str	r2, [r7, #4]
 800b4ea:	887a      	ldrh	r2, [r7, #2]
 800b4ec:	b2d2      	uxtb	r2, r2
 800b4ee:	701a      	strb	r2, [r3, #0]
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	1c5a      	adds	r2, r3, #1
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	b2d2      	uxtb	r2, r2
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	0a1b      	lsrs	r3, r3, #8
 800b516:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	607a      	str	r2, [r7, #4]
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	b2d2      	uxtb	r2, r2
 800b522:	701a      	strb	r2, [r3, #0]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	0a1b      	lsrs	r3, r3, #8
 800b528:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	1c5a      	adds	r2, r3, #1
 800b52e:	607a      	str	r2, [r7, #4]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	701a      	strb	r2, [r3, #0]
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	0a1b      	lsrs	r3, r3, #8
 800b53a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	607a      	str	r2, [r7, #4]
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	b2d2      	uxtb	r2, r2
 800b546:	701a      	strb	r2, [r3, #0]
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00d      	beq.n	800b58a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	1c53      	adds	r3, r2, #1
 800b572:	613b      	str	r3, [r7, #16]
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	1c59      	adds	r1, r3, #1
 800b578:	6179      	str	r1, [r7, #20]
 800b57a:	7812      	ldrb	r2, [r2, #0]
 800b57c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	3b01      	subs	r3, #1
 800b582:	607b      	str	r3, [r7, #4]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1f1      	bne.n	800b56e <mem_cpy+0x1a>
	}
}
 800b58a:	bf00      	nop
 800b58c:	371c      	adds	r7, #28
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b596:	b480      	push	{r7}
 800b598:	b087      	sub	sp, #28
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	60f8      	str	r0, [r7, #12]
 800b59e:	60b9      	str	r1, [r7, #8]
 800b5a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	617a      	str	r2, [r7, #20]
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	b2d2      	uxtb	r2, r2
 800b5b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	607b      	str	r3, [r7, #4]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1f3      	bne.n	800b5a6 <mem_set+0x10>
}
 800b5be:	bf00      	nop
 800b5c0:	bf00      	nop
 800b5c2:	371c      	adds	r7, #28
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b5cc:	b480      	push	{r7}
 800b5ce:	b089      	sub	sp, #36	; 0x24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	61fb      	str	r3, [r7, #28]
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	61fa      	str	r2, [r7, #28]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	61ba      	str	r2, [r7, #24]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	1acb      	subs	r3, r1, r3
 800b5f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	607b      	str	r3, [r7, #4]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d002      	beq.n	800b60c <mem_cmp+0x40>
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d0eb      	beq.n	800b5e4 <mem_cmp+0x18>

	return r;
 800b60c:	697b      	ldr	r3, [r7, #20]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3724      	adds	r7, #36	; 0x24
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b61a:	b480      	push	{r7}
 800b61c:	b083      	sub	sp, #12
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b624:	e002      	b.n	800b62c <chk_chr+0x12>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	3301      	adds	r3, #1
 800b62a:	607b      	str	r3, [r7, #4]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d005      	beq.n	800b640 <chk_chr+0x26>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	461a      	mov	r2, r3
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d1f2      	bne.n	800b626 <chk_chr+0xc>
	return *str;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	781b      	ldrb	r3, [r3, #0]
}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d009      	beq.n	800b672 <lock_fs+0x22>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	4618      	mov	r0, r3
 800b664:	f003 fbee 	bl	800ee44 <ff_req_grant>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <lock_fs+0x22>
 800b66e:	2301      	movs	r3, #1
 800b670:	e000      	b.n	800b674 <lock_fs+0x24>
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	460b      	mov	r3, r1
 800b686:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00d      	beq.n	800b6aa <unlock_fs+0x2e>
 800b68e:	78fb      	ldrb	r3, [r7, #3]
 800b690:	2b0c      	cmp	r3, #12
 800b692:	d00a      	beq.n	800b6aa <unlock_fs+0x2e>
 800b694:	78fb      	ldrb	r3, [r7, #3]
 800b696:	2b0b      	cmp	r3, #11
 800b698:	d007      	beq.n	800b6aa <unlock_fs+0x2e>
 800b69a:	78fb      	ldrb	r3, [r7, #3]
 800b69c:	2b0f      	cmp	r3, #15
 800b69e:	d004      	beq.n	800b6aa <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f003 fbe2 	bl	800ee6e <ff_rel_grant>
	}
}
 800b6aa:	bf00      	nop
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
	...

0800b6b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b6be:	2300      	movs	r3, #0
 800b6c0:	60bb      	str	r3, [r7, #8]
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	60fb      	str	r3, [r7, #12]
 800b6c6:	e029      	b.n	800b71c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b6c8:	4a27      	ldr	r2, [pc, #156]	; (800b768 <chk_lock+0xb4>)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	011b      	lsls	r3, r3, #4
 800b6ce:	4413      	add	r3, r2
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d01d      	beq.n	800b712 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b6d6:	4a24      	ldr	r2, [pc, #144]	; (800b768 <chk_lock+0xb4>)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	011b      	lsls	r3, r3, #4
 800b6dc:	4413      	add	r3, r2
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d116      	bne.n	800b716 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b6e8:	4a1f      	ldr	r2, [pc, #124]	; (800b768 <chk_lock+0xb4>)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	011b      	lsls	r3, r3, #4
 800b6ee:	4413      	add	r3, r2
 800b6f0:	3304      	adds	r3, #4
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d10c      	bne.n	800b716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b6fc:	4a1a      	ldr	r2, [pc, #104]	; (800b768 <chk_lock+0xb4>)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	011b      	lsls	r3, r3, #4
 800b702:	4413      	add	r3, r2
 800b704:	3308      	adds	r3, #8
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d102      	bne.n	800b716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b710:	e007      	b.n	800b722 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b712:	2301      	movs	r3, #1
 800b714:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	3301      	adds	r3, #1
 800b71a:	60fb      	str	r3, [r7, #12]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d9d2      	bls.n	800b6c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2b02      	cmp	r3, #2
 800b726:	d109      	bne.n	800b73c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d102      	bne.n	800b734 <chk_lock+0x80>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b02      	cmp	r3, #2
 800b732:	d101      	bne.n	800b738 <chk_lock+0x84>
 800b734:	2300      	movs	r3, #0
 800b736:	e010      	b.n	800b75a <chk_lock+0xa6>
 800b738:	2312      	movs	r3, #18
 800b73a:	e00e      	b.n	800b75a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d108      	bne.n	800b754 <chk_lock+0xa0>
 800b742:	4a09      	ldr	r2, [pc, #36]	; (800b768 <chk_lock+0xb4>)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	011b      	lsls	r3, r3, #4
 800b748:	4413      	add	r3, r2
 800b74a:	330c      	adds	r3, #12
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b752:	d101      	bne.n	800b758 <chk_lock+0xa4>
 800b754:	2310      	movs	r3, #16
 800b756:	e000      	b.n	800b75a <chk_lock+0xa6>
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	200005e8 	.word	0x200005e8

0800b76c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b772:	2300      	movs	r3, #0
 800b774:	607b      	str	r3, [r7, #4]
 800b776:	e002      	b.n	800b77e <enq_lock+0x12>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	3301      	adds	r3, #1
 800b77c:	607b      	str	r3, [r7, #4]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d806      	bhi.n	800b792 <enq_lock+0x26>
 800b784:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <enq_lock+0x40>)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	011b      	lsls	r3, r3, #4
 800b78a:	4413      	add	r3, r2
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1f2      	bne.n	800b778 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b02      	cmp	r3, #2
 800b796:	bf14      	ite	ne
 800b798:	2301      	movne	r3, #1
 800b79a:	2300      	moveq	r3, #0
 800b79c:	b2db      	uxtb	r3, r3
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	200005e8 	.word	0x200005e8

0800b7b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	60fb      	str	r3, [r7, #12]
 800b7be:	e01f      	b.n	800b800 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b7c0:	4a41      	ldr	r2, [pc, #260]	; (800b8c8 <inc_lock+0x118>)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	011b      	lsls	r3, r3, #4
 800b7c6:	4413      	add	r3, r2
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d113      	bne.n	800b7fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b7d2:	4a3d      	ldr	r2, [pc, #244]	; (800b8c8 <inc_lock+0x118>)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	011b      	lsls	r3, r3, #4
 800b7d8:	4413      	add	r3, r2
 800b7da:	3304      	adds	r3, #4
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d109      	bne.n	800b7fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b7e6:	4a38      	ldr	r2, [pc, #224]	; (800b8c8 <inc_lock+0x118>)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	011b      	lsls	r3, r3, #4
 800b7ec:	4413      	add	r3, r2
 800b7ee:	3308      	adds	r3, #8
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d006      	beq.n	800b808 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d9dc      	bls.n	800b7c0 <inc_lock+0x10>
 800b806:	e000      	b.n	800b80a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b808:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d132      	bne.n	800b876 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b810:	2300      	movs	r3, #0
 800b812:	60fb      	str	r3, [r7, #12]
 800b814:	e002      	b.n	800b81c <inc_lock+0x6c>
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3301      	adds	r3, #1
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d806      	bhi.n	800b830 <inc_lock+0x80>
 800b822:	4a29      	ldr	r2, [pc, #164]	; (800b8c8 <inc_lock+0x118>)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	4413      	add	r3, r2
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1f2      	bne.n	800b816 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2b02      	cmp	r3, #2
 800b834:	d101      	bne.n	800b83a <inc_lock+0x8a>
 800b836:	2300      	movs	r3, #0
 800b838:	e040      	b.n	800b8bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	4922      	ldr	r1, [pc, #136]	; (800b8c8 <inc_lock+0x118>)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	011b      	lsls	r3, r3, #4
 800b844:	440b      	add	r3, r1
 800b846:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	689a      	ldr	r2, [r3, #8]
 800b84c:	491e      	ldr	r1, [pc, #120]	; (800b8c8 <inc_lock+0x118>)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	011b      	lsls	r3, r3, #4
 800b852:	440b      	add	r3, r1
 800b854:	3304      	adds	r3, #4
 800b856:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	695a      	ldr	r2, [r3, #20]
 800b85c:	491a      	ldr	r1, [pc, #104]	; (800b8c8 <inc_lock+0x118>)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	011b      	lsls	r3, r3, #4
 800b862:	440b      	add	r3, r1
 800b864:	3308      	adds	r3, #8
 800b866:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b868:	4a17      	ldr	r2, [pc, #92]	; (800b8c8 <inc_lock+0x118>)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	011b      	lsls	r3, r3, #4
 800b86e:	4413      	add	r3, r2
 800b870:	330c      	adds	r3, #12
 800b872:	2200      	movs	r2, #0
 800b874:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d009      	beq.n	800b890 <inc_lock+0xe0>
 800b87c:	4a12      	ldr	r2, [pc, #72]	; (800b8c8 <inc_lock+0x118>)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	011b      	lsls	r3, r3, #4
 800b882:	4413      	add	r3, r2
 800b884:	330c      	adds	r3, #12
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <inc_lock+0xe0>
 800b88c:	2300      	movs	r3, #0
 800b88e:	e015      	b.n	800b8bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d108      	bne.n	800b8a8 <inc_lock+0xf8>
 800b896:	4a0c      	ldr	r2, [pc, #48]	; (800b8c8 <inc_lock+0x118>)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	011b      	lsls	r3, r3, #4
 800b89c:	4413      	add	r3, r2
 800b89e:	330c      	adds	r3, #12
 800b8a0:	881b      	ldrh	r3, [r3, #0]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	e001      	b.n	800b8ac <inc_lock+0xfc>
 800b8a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8ac:	4906      	ldr	r1, [pc, #24]	; (800b8c8 <inc_lock+0x118>)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	011b      	lsls	r3, r3, #4
 800b8b2:	440b      	add	r3, r1
 800b8b4:	330c      	adds	r3, #12
 800b8b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	3301      	adds	r3, #1
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3714      	adds	r7, #20
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	200005e8 	.word	0x200005e8

0800b8cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	607b      	str	r3, [r7, #4]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d825      	bhi.n	800b92c <dec_lock+0x60>
		n = Files[i].ctr;
 800b8e0:	4a17      	ldr	r2, [pc, #92]	; (800b940 <dec_lock+0x74>)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	011b      	lsls	r3, r3, #4
 800b8e6:	4413      	add	r3, r2
 800b8e8:	330c      	adds	r3, #12
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b8ee:	89fb      	ldrh	r3, [r7, #14]
 800b8f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8f4:	d101      	bne.n	800b8fa <dec_lock+0x2e>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b8fa:	89fb      	ldrh	r3, [r7, #14]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <dec_lock+0x3a>
 800b900:	89fb      	ldrh	r3, [r7, #14]
 800b902:	3b01      	subs	r3, #1
 800b904:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b906:	4a0e      	ldr	r2, [pc, #56]	; (800b940 <dec_lock+0x74>)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	011b      	lsls	r3, r3, #4
 800b90c:	4413      	add	r3, r2
 800b90e:	330c      	adds	r3, #12
 800b910:	89fa      	ldrh	r2, [r7, #14]
 800b912:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b914:	89fb      	ldrh	r3, [r7, #14]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d105      	bne.n	800b926 <dec_lock+0x5a>
 800b91a:	4a09      	ldr	r2, [pc, #36]	; (800b940 <dec_lock+0x74>)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	011b      	lsls	r3, r3, #4
 800b920:	4413      	add	r3, r2
 800b922:	2200      	movs	r2, #0
 800b924:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	737b      	strb	r3, [r7, #13]
 800b92a:	e001      	b.n	800b930 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b92c:	2302      	movs	r3, #2
 800b92e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b930:	7b7b      	ldrb	r3, [r7, #13]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	200005e8 	.word	0x200005e8

0800b944 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b94c:	2300      	movs	r3, #0
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	e010      	b.n	800b974 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b952:	4a0d      	ldr	r2, [pc, #52]	; (800b988 <clear_lock+0x44>)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	011b      	lsls	r3, r3, #4
 800b958:	4413      	add	r3, r2
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d105      	bne.n	800b96e <clear_lock+0x2a>
 800b962:	4a09      	ldr	r2, [pc, #36]	; (800b988 <clear_lock+0x44>)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	011b      	lsls	r3, r3, #4
 800b968:	4413      	add	r3, r2
 800b96a:	2200      	movs	r2, #0
 800b96c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3301      	adds	r3, #1
 800b972:	60fb      	str	r3, [r7, #12]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d9eb      	bls.n	800b952 <clear_lock+0xe>
	}
}
 800b97a:	bf00      	nop
 800b97c:	bf00      	nop
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	200005e8 	.word	0x200005e8

0800b98c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	78db      	ldrb	r3, [r3, #3]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d034      	beq.n	800ba0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	7858      	ldrb	r0, [r3, #1]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	f7ff fd0e 	bl	800b3d4 <disk_write>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d002      	beq.n	800b9c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	73fb      	strb	r3, [r7, #15]
 800b9c2:	e022      	b.n	800ba0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	1ad2      	subs	r2, r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d217      	bcs.n	800ba0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	789b      	ldrb	r3, [r3, #2]
 800b9de:	613b      	str	r3, [r7, #16]
 800b9e0:	e010      	b.n	800ba04 <sync_window+0x78>
					wsect += fs->fsize;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	7858      	ldrb	r0, [r3, #1]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	697a      	ldr	r2, [r7, #20]
 800b9fa:	f7ff fceb 	bl	800b3d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	613b      	str	r3, [r7, #16]
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d8eb      	bhi.n	800b9e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d01b      	beq.n	800ba64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff ffad 	bl	800b98c <sync_window>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d113      	bne.n	800ba64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	7858      	ldrb	r0, [r3, #1]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ba46:	2301      	movs	r3, #1
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	f7ff fca3 	bl	800b394 <disk_read>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d004      	beq.n	800ba5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ba54:	f04f 33ff 	mov.w	r3, #4294967295
 800ba58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	683a      	ldr	r2, [r7, #0]
 800ba62:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f7ff ff87 	bl	800b98c <sync_window>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d159      	bne.n	800bb3c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	d149      	bne.n	800bb24 <sync_fs+0xb4>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	791b      	ldrb	r3, [r3, #4]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d145      	bne.n	800bb24 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	899b      	ldrh	r3, [r3, #12]
 800baa2:	461a      	mov	r2, r3
 800baa4:	2100      	movs	r1, #0
 800baa6:	f7ff fd76 	bl	800b596 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	333c      	adds	r3, #60	; 0x3c
 800baae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bab2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7ff fd05 	bl	800b4c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	333c      	adds	r3, #60	; 0x3c
 800bac0:	4921      	ldr	r1, [pc, #132]	; (800bb48 <sync_fs+0xd8>)
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7ff fd1a 	bl	800b4fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	333c      	adds	r3, #60	; 0x3c
 800bacc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bad0:	491e      	ldr	r1, [pc, #120]	; (800bb4c <sync_fs+0xdc>)
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7ff fd12 	bl	800b4fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	333c      	adds	r3, #60	; 0x3c
 800badc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	69db      	ldr	r3, [r3, #28]
 800bae4:	4619      	mov	r1, r3
 800bae6:	4610      	mov	r0, r2
 800bae8:	f7ff fd08 	bl	800b4fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	333c      	adds	r3, #60	; 0x3c
 800baf0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	699b      	ldr	r3, [r3, #24]
 800baf8:	4619      	mov	r1, r3
 800bafa:	4610      	mov	r0, r2
 800bafc:	f7ff fcfe 	bl	800b4fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb04:	1c5a      	adds	r2, r3, #1
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	7858      	ldrb	r0, [r3, #1]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f7ff fc5b 	bl	800b3d4 <disk_write>
			fs->fsi_flag = 0;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	785b      	ldrb	r3, [r3, #1]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7ff fc71 	bl	800b414 <disk_ioctl>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <sync_fs+0xcc>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	41615252 	.word	0x41615252
 800bb4c:	61417272 	.word	0x61417272

0800bb50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	3b02      	subs	r3, #2
 800bb5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a1b      	ldr	r3, [r3, #32]
 800bb64:	3b02      	subs	r3, #2
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d301      	bcc.n	800bb70 <clust2sect+0x20>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	e008      	b.n	800bb82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	895b      	ldrh	r3, [r3, #10]
 800bb74:	461a      	mov	r2, r3
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	fb03 f202 	mul.w	r2, r3, r2
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb80:	4413      	add	r3, r2
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b086      	sub	sp, #24
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
 800bb96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d904      	bls.n	800bbae <get_fat+0x20>
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	6a1b      	ldr	r3, [r3, #32]
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d302      	bcc.n	800bbb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bbae:	2301      	movs	r3, #1
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e0bb      	b.n	800bd2c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bbb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	2b03      	cmp	r3, #3
 800bbc0:	f000 8083 	beq.w	800bcca <get_fat+0x13c>
 800bbc4:	2b03      	cmp	r3, #3
 800bbc6:	f300 80a7 	bgt.w	800bd18 <get_fat+0x18a>
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d002      	beq.n	800bbd4 <get_fat+0x46>
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d056      	beq.n	800bc80 <get_fat+0xf2>
 800bbd2:	e0a1      	b.n	800bd18 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	60fb      	str	r3, [r7, #12]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	085b      	lsrs	r3, r3, #1
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	4413      	add	r3, r2
 800bbe0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	899b      	ldrh	r3, [r3, #12]
 800bbea:	4619      	mov	r1, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbf2:	4413      	add	r3, r2
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6938      	ldr	r0, [r7, #16]
 800bbf8:	f7ff ff0c 	bl	800ba14 <move_window>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f040 808d 	bne.w	800bd1e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	1c5a      	adds	r2, r3, #1
 800bc08:	60fa      	str	r2, [r7, #12]
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	8992      	ldrh	r2, [r2, #12]
 800bc0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc12:	fb02 f201 	mul.w	r2, r2, r1
 800bc16:	1a9b      	subs	r3, r3, r2
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	899b      	ldrh	r3, [r3, #12]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc32:	4413      	add	r3, r2
 800bc34:	4619      	mov	r1, r3
 800bc36:	6938      	ldr	r0, [r7, #16]
 800bc38:	f7ff feec 	bl	800ba14 <move_window>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d16f      	bne.n	800bd22 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	899b      	ldrh	r3, [r3, #12]
 800bc46:	461a      	mov	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc4e:	fb02 f201 	mul.w	r2, r2, r1
 800bc52:	1a9b      	subs	r3, r3, r2
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	4413      	add	r3, r2
 800bc58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc5c:	021b      	lsls	r3, r3, #8
 800bc5e:	461a      	mov	r2, r3
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <get_fat+0xe8>
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	091b      	lsrs	r3, r3, #4
 800bc74:	e002      	b.n	800bc7c <get_fat+0xee>
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc7c:	617b      	str	r3, [r7, #20]
			break;
 800bc7e:	e055      	b.n	800bd2c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	899b      	ldrh	r3, [r3, #12]
 800bc88:	085b      	lsrs	r3, r3, #1
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc94:	4413      	add	r3, r2
 800bc96:	4619      	mov	r1, r3
 800bc98:	6938      	ldr	r0, [r7, #16]
 800bc9a:	f7ff febb 	bl	800ba14 <move_window>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d140      	bne.n	800bd26 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	8992      	ldrh	r2, [r2, #12]
 800bcb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bcb6:	fb02 f200 	mul.w	r2, r2, r0
 800bcba:	1a9b      	subs	r3, r3, r2
 800bcbc:	440b      	add	r3, r1
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7ff fbc6 	bl	800b450 <ld_word>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	617b      	str	r3, [r7, #20]
			break;
 800bcc8:	e030      	b.n	800bd2c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	899b      	ldrh	r3, [r3, #12]
 800bcd2:	089b      	lsrs	r3, r3, #2
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcde:	4413      	add	r3, r2
 800bce0:	4619      	mov	r1, r3
 800bce2:	6938      	ldr	r0, [r7, #16]
 800bce4:	f7ff fe96 	bl	800ba14 <move_window>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d11d      	bne.n	800bd2a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	8992      	ldrh	r2, [r2, #12]
 800bcfc:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd00:	fb02 f200 	mul.w	r2, r2, r0
 800bd04:	1a9b      	subs	r3, r3, r2
 800bd06:	440b      	add	r3, r1
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff fbb9 	bl	800b480 <ld_dword>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bd14:	617b      	str	r3, [r7, #20]
			break;
 800bd16:	e009      	b.n	800bd2c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bd18:	2301      	movs	r3, #1
 800bd1a:	617b      	str	r3, [r7, #20]
 800bd1c:	e006      	b.n	800bd2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd1e:	bf00      	nop
 800bd20:	e004      	b.n	800bd2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd22:	bf00      	nop
 800bd24:	e002      	b.n	800bd2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd26:	bf00      	nop
 800bd28:	e000      	b.n	800bd2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd2a:	bf00      	nop
		}
	}

	return val;
 800bd2c:	697b      	ldr	r3, [r7, #20]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bd36:	b590      	push	{r4, r7, lr}
 800bd38:	b089      	sub	sp, #36	; 0x24
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	60f8      	str	r0, [r7, #12]
 800bd3e:	60b9      	str	r1, [r7, #8]
 800bd40:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bd42:	2302      	movs	r3, #2
 800bd44:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	f240 8102 	bls.w	800bf52 <put_fat+0x21c>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	f080 80fc 	bcs.w	800bf52 <put_fat+0x21c>
		switch (fs->fs_type) {
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	f000 80b6 	beq.w	800bed0 <put_fat+0x19a>
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	f300 80fd 	bgt.w	800bf64 <put_fat+0x22e>
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d003      	beq.n	800bd76 <put_fat+0x40>
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	f000 8083 	beq.w	800be7a <put_fat+0x144>
 800bd74:	e0f6      	b.n	800bf64 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	61bb      	str	r3, [r7, #24]
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	085b      	lsrs	r3, r3, #1
 800bd7e:	69ba      	ldr	r2, [r7, #24]
 800bd80:	4413      	add	r3, r2
 800bd82:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	899b      	ldrh	r3, [r3, #12]
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd94:	4413      	add	r3, r2
 800bd96:	4619      	mov	r1, r3
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f7ff fe3b 	bl	800ba14 <move_window>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bda2:	7ffb      	ldrb	r3, [r7, #31]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f040 80d6 	bne.w	800bf56 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	61ba      	str	r2, [r7, #24]
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	8992      	ldrh	r2, [r2, #12]
 800bdba:	fbb3 f0f2 	udiv	r0, r3, r2
 800bdbe:	fb02 f200 	mul.w	r2, r2, r0
 800bdc2:	1a9b      	subs	r3, r3, r2
 800bdc4:	440b      	add	r3, r1
 800bdc6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00d      	beq.n	800bdee <put_fat+0xb8>
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	b25b      	sxtb	r3, r3
 800bdd8:	f003 030f 	and.w	r3, r3, #15
 800bddc:	b25a      	sxtb	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	011b      	lsls	r3, r3, #4
 800bde4:	b25b      	sxtb	r3, r3
 800bde6:	4313      	orrs	r3, r2
 800bde8:	b25b      	sxtb	r3, r3
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	e001      	b.n	800bdf2 <put_fat+0xbc>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	899b      	ldrh	r3, [r3, #12]
 800be04:	4619      	mov	r1, r3
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	fbb3 f3f1 	udiv	r3, r3, r1
 800be0c:	4413      	add	r3, r2
 800be0e:	4619      	mov	r1, r3
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f7ff fdff 	bl	800ba14 <move_window>
 800be16:	4603      	mov	r3, r0
 800be18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be1a:	7ffb      	ldrb	r3, [r7, #31]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f040 809c 	bne.w	800bf5a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	899b      	ldrh	r3, [r3, #12]
 800be2c:	461a      	mov	r2, r3
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	fbb3 f0f2 	udiv	r0, r3, r2
 800be34:	fb02 f200 	mul.w	r2, r2, r0
 800be38:	1a9b      	subs	r3, r3, r2
 800be3a:	440b      	add	r3, r1
 800be3c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b00      	cmp	r3, #0
 800be46:	d003      	beq.n	800be50 <put_fat+0x11a>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	091b      	lsrs	r3, r3, #4
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	e00e      	b.n	800be6e <put_fat+0x138>
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	b25b      	sxtb	r3, r3
 800be56:	f023 030f 	bic.w	r3, r3, #15
 800be5a:	b25a      	sxtb	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	0a1b      	lsrs	r3, r3, #8
 800be60:	b25b      	sxtb	r3, r3
 800be62:	f003 030f 	and.w	r3, r3, #15
 800be66:	b25b      	sxtb	r3, r3
 800be68:	4313      	orrs	r3, r2
 800be6a:	b25b      	sxtb	r3, r3
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2201      	movs	r2, #1
 800be76:	70da      	strb	r2, [r3, #3]
			break;
 800be78:	e074      	b.n	800bf64 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	899b      	ldrh	r3, [r3, #12]
 800be82:	085b      	lsrs	r3, r3, #1
 800be84:	b29b      	uxth	r3, r3
 800be86:	4619      	mov	r1, r3
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800be8e:	4413      	add	r3, r2
 800be90:	4619      	mov	r1, r3
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f7ff fdbe 	bl	800ba14 <move_window>
 800be98:	4603      	mov	r3, r0
 800be9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be9c:	7ffb      	ldrb	r3, [r7, #31]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d15d      	bne.n	800bf5e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	8992      	ldrh	r2, [r2, #12]
 800beb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800beb4:	fb02 f200 	mul.w	r2, r2, r0
 800beb8:	1a9b      	subs	r3, r3, r2
 800beba:	440b      	add	r3, r1
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	b292      	uxth	r2, r2
 800bec0:	4611      	mov	r1, r2
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff faff 	bl	800b4c6 <st_word>
			fs->wflag = 1;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2201      	movs	r2, #1
 800becc:	70da      	strb	r2, [r3, #3]
			break;
 800bece:	e049      	b.n	800bf64 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	899b      	ldrh	r3, [r3, #12]
 800bed8:	089b      	lsrs	r3, r3, #2
 800beda:	b29b      	uxth	r3, r3
 800bedc:	4619      	mov	r1, r3
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	fbb3 f3f1 	udiv	r3, r3, r1
 800bee4:	4413      	add	r3, r2
 800bee6:	4619      	mov	r1, r3
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f7ff fd93 	bl	800ba14 <move_window>
 800beee:	4603      	mov	r3, r0
 800bef0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bef2:	7ffb      	ldrb	r3, [r7, #31]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d134      	bne.n	800bf62 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	8992      	ldrh	r2, [r2, #12]
 800bf0c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf10:	fb02 f200 	mul.w	r2, r2, r0
 800bf14:	1a9b      	subs	r3, r3, r2
 800bf16:	440b      	add	r3, r1
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff fab1 	bl	800b480 <ld_dword>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bf24:	4323      	orrs	r3, r4
 800bf26:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	8992      	ldrh	r2, [r2, #12]
 800bf36:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf3a:	fb02 f200 	mul.w	r2, r2, r0
 800bf3e:	1a9b      	subs	r3, r3, r2
 800bf40:	440b      	add	r3, r1
 800bf42:	6879      	ldr	r1, [r7, #4]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff fad9 	bl	800b4fc <st_dword>
			fs->wflag = 1;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	70da      	strb	r2, [r3, #3]
			break;
 800bf50:	e008      	b.n	800bf64 <put_fat+0x22e>
		}
	}
 800bf52:	bf00      	nop
 800bf54:	e006      	b.n	800bf64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bf56:	bf00      	nop
 800bf58:	e004      	b.n	800bf64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bf5a:	bf00      	nop
 800bf5c:	e002      	b.n	800bf64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bf5e:	bf00      	nop
 800bf60:	e000      	b.n	800bf64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bf62:	bf00      	nop
	return res;
 800bf64:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3724      	adds	r7, #36	; 0x24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd90      	pop	{r4, r7, pc}

0800bf6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b088      	sub	sp, #32
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	60f8      	str	r0, [r7, #12]
 800bf76:	60b9      	str	r1, [r7, #8]
 800bf78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d904      	bls.n	800bf94 <remove_chain+0x26>
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d301      	bcc.n	800bf98 <remove_chain+0x2a>
 800bf94:	2302      	movs	r3, #2
 800bf96:	e04b      	b.n	800c030 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00c      	beq.n	800bfb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bf9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa2:	6879      	ldr	r1, [r7, #4]
 800bfa4:	69b8      	ldr	r0, [r7, #24]
 800bfa6:	f7ff fec6 	bl	800bd36 <put_fat>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bfae:	7ffb      	ldrb	r3, [r7, #31]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <remove_chain+0x4a>
 800bfb4:	7ffb      	ldrb	r3, [r7, #31]
 800bfb6:	e03b      	b.n	800c030 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bfb8:	68b9      	ldr	r1, [r7, #8]
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f7ff fde7 	bl	800bb8e <get_fat>
 800bfc0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d031      	beq.n	800c02c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d101      	bne.n	800bfd2 <remove_chain+0x64>
 800bfce:	2302      	movs	r3, #2
 800bfd0:	e02e      	b.n	800c030 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd8:	d101      	bne.n	800bfde <remove_chain+0x70>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e028      	b.n	800c030 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bfde:	2200      	movs	r2, #0
 800bfe0:	68b9      	ldr	r1, [r7, #8]
 800bfe2:	69b8      	ldr	r0, [r7, #24]
 800bfe4:	f7ff fea7 	bl	800bd36 <put_fat>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bfec:	7ffb      	ldrb	r3, [r7, #31]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <remove_chain+0x88>
 800bff2:	7ffb      	ldrb	r3, [r7, #31]
 800bff4:	e01c      	b.n	800c030 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	69da      	ldr	r2, [r3, #28]
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	3b02      	subs	r3, #2
 800c000:	429a      	cmp	r2, r3
 800c002:	d20b      	bcs.n	800c01c <remove_chain+0xae>
			fs->free_clst++;
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	69db      	ldr	r3, [r3, #28]
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	791b      	ldrb	r3, [r3, #4]
 800c012:	f043 0301 	orr.w	r3, r3, #1
 800c016:	b2da      	uxtb	r2, r3
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	6a1b      	ldr	r3, [r3, #32]
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	429a      	cmp	r2, r3
 800c028:	d3c6      	bcc.n	800bfb8 <remove_chain+0x4a>
 800c02a:	e000      	b.n	800c02e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c02c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3720      	adds	r7, #32
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10d      	bne.n	800c06a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	699b      	ldr	r3, [r3, #24]
 800c052:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d004      	beq.n	800c064 <create_chain+0x2c>
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	429a      	cmp	r2, r3
 800c062:	d31b      	bcc.n	800c09c <create_chain+0x64>
 800c064:	2301      	movs	r3, #1
 800c066:	61bb      	str	r3, [r7, #24]
 800c068:	e018      	b.n	800c09c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7ff fd8e 	bl	800bb8e <get_fat>
 800c072:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d801      	bhi.n	800c07e <create_chain+0x46>
 800c07a:	2301      	movs	r3, #1
 800c07c:	e070      	b.n	800c160 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c084:	d101      	bne.n	800c08a <create_chain+0x52>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	e06a      	b.n	800c160 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	6a1b      	ldr	r3, [r3, #32]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	429a      	cmp	r2, r3
 800c092:	d201      	bcs.n	800c098 <create_chain+0x60>
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	e063      	b.n	800c160 <create_chain+0x128>
		scl = clst;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	6a1b      	ldr	r3, [r3, #32]
 800c0aa:	69fa      	ldr	r2, [r7, #28]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d307      	bcc.n	800c0c0 <create_chain+0x88>
				ncl = 2;
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c0b4:	69fa      	ldr	r2, [r7, #28]
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d901      	bls.n	800c0c0 <create_chain+0x88>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	e04f      	b.n	800c160 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c0c0:	69f9      	ldr	r1, [r7, #28]
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7ff fd63 	bl	800bb8e <get_fat>
 800c0c8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00e      	beq.n	800c0ee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d003      	beq.n	800c0de <create_chain+0xa6>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0dc:	d101      	bne.n	800c0e2 <create_chain+0xaa>
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	e03e      	b.n	800c160 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c0e2:	69fa      	ldr	r2, [r7, #28]
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d1da      	bne.n	800c0a0 <create_chain+0x68>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	e038      	b.n	800c160 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c0ee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f4:	69f9      	ldr	r1, [r7, #28]
 800c0f6:	6938      	ldr	r0, [r7, #16]
 800c0f8:	f7ff fe1d 	bl	800bd36 <put_fat>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c100:	7dfb      	ldrb	r3, [r7, #23]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d109      	bne.n	800c11a <create_chain+0xe2>
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d006      	beq.n	800c11a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c10c:	69fa      	ldr	r2, [r7, #28]
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6938      	ldr	r0, [r7, #16]
 800c112:	f7ff fe10 	bl	800bd36 <put_fat>
 800c116:	4603      	mov	r3, r0
 800c118:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c11a:	7dfb      	ldrb	r3, [r7, #23]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d116      	bne.n	800c14e <create_chain+0x116>
		fs->last_clst = ncl;
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	69fa      	ldr	r2, [r7, #28]
 800c124:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	69da      	ldr	r2, [r3, #28]
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	3b02      	subs	r3, #2
 800c130:	429a      	cmp	r2, r3
 800c132:	d804      	bhi.n	800c13e <create_chain+0x106>
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	69db      	ldr	r3, [r3, #28]
 800c138:	1e5a      	subs	r2, r3, #1
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	791b      	ldrb	r3, [r3, #4]
 800c142:	f043 0301 	orr.w	r3, r3, #1
 800c146:	b2da      	uxtb	r2, r3
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	711a      	strb	r2, [r3, #4]
 800c14c:	e007      	b.n	800c15e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c14e:	7dfb      	ldrb	r3, [r7, #23]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d102      	bne.n	800c15a <create_chain+0x122>
 800c154:	f04f 33ff 	mov.w	r3, #4294967295
 800c158:	e000      	b.n	800c15c <create_chain+0x124>
 800c15a:	2301      	movs	r3, #1
 800c15c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c15e:	69fb      	ldr	r3, [r7, #28]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3720      	adds	r7, #32
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c168:	b480      	push	{r7}
 800c16a:	b087      	sub	sp, #28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17c:	3304      	adds	r3, #4
 800c17e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	899b      	ldrh	r3, [r3, #12]
 800c184:	461a      	mov	r2, r3
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	fbb3 f3f2 	udiv	r3, r3, r2
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	8952      	ldrh	r2, [r2, #10]
 800c190:	fbb3 f3f2 	udiv	r3, r3, r2
 800c194:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	1d1a      	adds	r2, r3, #4
 800c19a:	613a      	str	r2, [r7, #16]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <clmt_clust+0x42>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	e010      	b.n	800c1cc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c1aa:	697a      	ldr	r2, [r7, #20]
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d307      	bcc.n	800c1c2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c1b2:	697a      	ldr	r2, [r7, #20]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	617b      	str	r3, [r7, #20]
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c1c0:	e7e9      	b.n	800c196 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c1c2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	4413      	add	r3, r2
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	371c      	adds	r7, #28
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b086      	sub	sp, #24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1ee:	d204      	bcs.n	800c1fa <dir_sdi+0x22>
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	f003 031f 	and.w	r3, r3, #31
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d001      	beq.n	800c1fe <dir_sdi+0x26>
		return FR_INT_ERR;
 800c1fa:	2302      	movs	r3, #2
 800c1fc:	e071      	b.n	800c2e2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d106      	bne.n	800c21e <dir_sdi+0x46>
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	2b02      	cmp	r3, #2
 800c216:	d902      	bls.n	800c21e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10c      	bne.n	800c23e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	095b      	lsrs	r3, r3, #5
 800c228:	693a      	ldr	r2, [r7, #16]
 800c22a:	8912      	ldrh	r2, [r2, #8]
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d301      	bcc.n	800c234 <dir_sdi+0x5c>
 800c230:	2302      	movs	r3, #2
 800c232:	e056      	b.n	800c2e2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	61da      	str	r2, [r3, #28]
 800c23c:	e02d      	b.n	800c29a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	895b      	ldrh	r3, [r3, #10]
 800c242:	461a      	mov	r2, r3
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	899b      	ldrh	r3, [r3, #12]
 800c248:	fb03 f302 	mul.w	r3, r3, r2
 800c24c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c24e:	e019      	b.n	800c284 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6979      	ldr	r1, [r7, #20]
 800c254:	4618      	mov	r0, r3
 800c256:	f7ff fc9a 	bl	800bb8e <get_fat>
 800c25a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c262:	d101      	bne.n	800c268 <dir_sdi+0x90>
 800c264:	2301      	movs	r3, #1
 800c266:	e03c      	b.n	800c2e2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d904      	bls.n	800c278 <dir_sdi+0xa0>
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	6a1b      	ldr	r3, [r3, #32]
 800c272:	697a      	ldr	r2, [r7, #20]
 800c274:	429a      	cmp	r2, r3
 800c276:	d301      	bcc.n	800c27c <dir_sdi+0xa4>
 800c278:	2302      	movs	r3, #2
 800c27a:	e032      	b.n	800c2e2 <dir_sdi+0x10a>
			ofs -= csz;
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	1ad3      	subs	r3, r2, r3
 800c282:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c284:	683a      	ldr	r2, [r7, #0]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d2e1      	bcs.n	800c250 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c28c:	6979      	ldr	r1, [r7, #20]
 800c28e:	6938      	ldr	r0, [r7, #16]
 800c290:	f7ff fc5e 	bl	800bb50 <clust2sect>
 800c294:	4602      	mov	r2, r0
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	69db      	ldr	r3, [r3, #28]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d101      	bne.n	800c2ac <dir_sdi+0xd4>
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	e01a      	b.n	800c2e2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	69da      	ldr	r2, [r3, #28]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	899b      	ldrh	r3, [r3, #12]
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c2bc:	441a      	add	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	899b      	ldrh	r3, [r3, #12]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800c2d4:	fb02 f200 	mul.w	r2, r2, r0
 800c2d8:	1a9b      	subs	r3, r3, r2
 800c2da:	18ca      	adds	r2, r1, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3718      	adds	r7, #24
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b086      	sub	sp, #24
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	3320      	adds	r3, #32
 800c300:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d003      	beq.n	800c312 <dir_next+0x28>
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c310:	d301      	bcc.n	800c316 <dir_next+0x2c>
 800c312:	2304      	movs	r3, #4
 800c314:	e0bb      	b.n	800c48e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	899b      	ldrh	r3, [r3, #12]
 800c31a:	461a      	mov	r2, r3
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c322:	fb02 f201 	mul.w	r2, r2, r1
 800c326:	1a9b      	subs	r3, r3, r2
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f040 809d 	bne.w	800c468 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	69db      	ldr	r3, [r3, #28]
 800c332:	1c5a      	adds	r2, r3, #1
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	699b      	ldr	r3, [r3, #24]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10b      	bne.n	800c358 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	095b      	lsrs	r3, r3, #5
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	8912      	ldrh	r2, [r2, #8]
 800c348:	4293      	cmp	r3, r2
 800c34a:	f0c0 808d 	bcc.w	800c468 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	61da      	str	r2, [r3, #28]
 800c354:	2304      	movs	r3, #4
 800c356:	e09a      	b.n	800c48e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	899b      	ldrh	r3, [r3, #12]
 800c35c:	461a      	mov	r2, r3
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	fbb3 f3f2 	udiv	r3, r3, r2
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	8952      	ldrh	r2, [r2, #10]
 800c368:	3a01      	subs	r2, #1
 800c36a:	4013      	ands	r3, r2
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d17b      	bne.n	800c468 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	699b      	ldr	r3, [r3, #24]
 800c376:	4619      	mov	r1, r3
 800c378:	4610      	mov	r0, r2
 800c37a:	f7ff fc08 	bl	800bb8e <get_fat>
 800c37e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d801      	bhi.n	800c38a <dir_next+0xa0>
 800c386:	2302      	movs	r3, #2
 800c388:	e081      	b.n	800c48e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c390:	d101      	bne.n	800c396 <dir_next+0xac>
 800c392:	2301      	movs	r3, #1
 800c394:	e07b      	b.n	800c48e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6a1b      	ldr	r3, [r3, #32]
 800c39a:	697a      	ldr	r2, [r7, #20]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d359      	bcc.n	800c454 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d104      	bne.n	800c3b0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	61da      	str	r2, [r3, #28]
 800c3ac:	2304      	movs	r3, #4
 800c3ae:	e06e      	b.n	800c48e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	f7ff fe3d 	bl	800c038 <create_chain>
 800c3be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d101      	bne.n	800c3ca <dir_next+0xe0>
 800c3c6:	2307      	movs	r3, #7
 800c3c8:	e061      	b.n	800c48e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d101      	bne.n	800c3d4 <dir_next+0xea>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e05c      	b.n	800c48e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3da:	d101      	bne.n	800c3e0 <dir_next+0xf6>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e056      	b.n	800c48e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f7ff fad3 	bl	800b98c <sync_window>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <dir_next+0x106>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e04e      	b.n	800c48e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	899b      	ldrh	r3, [r3, #12]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	f7ff f8ca 	bl	800b596 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c402:	2300      	movs	r3, #0
 800c404:	613b      	str	r3, [r7, #16]
 800c406:	6979      	ldr	r1, [r7, #20]
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f7ff fba1 	bl	800bb50 <clust2sect>
 800c40e:	4602      	mov	r2, r0
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	639a      	str	r2, [r3, #56]	; 0x38
 800c414:	e012      	b.n	800c43c <dir_next+0x152>
						fs->wflag = 1;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2201      	movs	r2, #1
 800c41a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f7ff fab5 	bl	800b98c <sync_window>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d001      	beq.n	800c42c <dir_next+0x142>
 800c428:	2301      	movs	r3, #1
 800c42a:	e030      	b.n	800c48e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	3301      	adds	r3, #1
 800c430:	613b      	str	r3, [r7, #16]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c436:	1c5a      	adds	r2, r3, #1
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	639a      	str	r2, [r3, #56]	; 0x38
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	895b      	ldrh	r3, [r3, #10]
 800c440:	461a      	mov	r2, r3
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	4293      	cmp	r3, r2
 800c446:	d3e6      	bcc.n	800c416 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	1ad2      	subs	r2, r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c45a:	6979      	ldr	r1, [r7, #20]
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f7ff fb77 	bl	800bb50 <clust2sect>
 800c462:	4602      	mov	r2, r0
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	899b      	ldrh	r3, [r3, #12]
 800c478:	461a      	mov	r2, r3
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c480:	fb02 f200 	mul.w	r2, r2, r0
 800c484:	1a9b      	subs	r3, r3, r2
 800c486:	18ca      	adds	r2, r1, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b086      	sub	sp, #24
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f7ff fe95 	bl	800c1d8 <dir_sdi>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4b2:	7dfb      	ldrb	r3, [r7, #23]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d12b      	bne.n	800c510 <dir_alloc+0x7a>
		n = 0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	69db      	ldr	r3, [r3, #28]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f7ff faa6 	bl	800ba14 <move_window>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c4cc:	7dfb      	ldrb	r3, [r7, #23]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d11d      	bne.n	800c50e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a1b      	ldr	r3, [r3, #32]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2be5      	cmp	r3, #229	; 0xe5
 800c4da:	d004      	beq.n	800c4e6 <dir_alloc+0x50>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6a1b      	ldr	r3, [r3, #32]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d107      	bne.n	800c4f6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	613b      	str	r3, [r7, #16]
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d102      	bne.n	800c4fa <dir_alloc+0x64>
 800c4f4:	e00c      	b.n	800c510 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f7ff fef4 	bl	800c2ea <dir_next>
 800c502:	4603      	mov	r3, r0
 800c504:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c506:	7dfb      	ldrb	r3, [r7, #23]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d0d7      	beq.n	800c4bc <dir_alloc+0x26>
 800c50c:	e000      	b.n	800c510 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c50e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c510:	7dfb      	ldrb	r3, [r7, #23]
 800c512:	2b04      	cmp	r3, #4
 800c514:	d101      	bne.n	800c51a <dir_alloc+0x84>
 800c516:	2307      	movs	r3, #7
 800c518:	75fb      	strb	r3, [r7, #23]
	return res;
 800c51a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	331a      	adds	r3, #26
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe ff8c 	bl	800b450 <ld_word>
 800c538:	4603      	mov	r3, r0
 800c53a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	2b03      	cmp	r3, #3
 800c542:	d109      	bne.n	800c558 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	3314      	adds	r3, #20
 800c548:	4618      	mov	r0, r3
 800c54a:	f7fe ff81 	bl	800b450 <ld_word>
 800c54e:	4603      	mov	r3, r0
 800c550:	041b      	lsls	r3, r3, #16
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	4313      	orrs	r3, r2
 800c556:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c558:	68fb      	ldr	r3, [r7, #12]
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b084      	sub	sp, #16
 800c566:	af00      	add	r7, sp, #0
 800c568:	60f8      	str	r0, [r7, #12]
 800c56a:	60b9      	str	r1, [r7, #8]
 800c56c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	331a      	adds	r3, #26
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	b292      	uxth	r2, r2
 800c576:	4611      	mov	r1, r2
 800c578:	4618      	mov	r0, r3
 800c57a:	f7fe ffa4 	bl	800b4c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	2b03      	cmp	r3, #3
 800c584:	d109      	bne.n	800c59a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	f103 0214 	add.w	r2, r3, #20
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	0c1b      	lsrs	r3, r3, #16
 800c590:	b29b      	uxth	r3, r3
 800c592:	4619      	mov	r1, r3
 800c594:	4610      	mov	r0, r2
 800c596:	f7fe ff96 	bl	800b4c6 <st_word>
	}
}
 800c59a:	bf00      	nop
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
	...

0800c5a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c5a4:	b590      	push	{r4, r7, lr}
 800c5a6:	b087      	sub	sp, #28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	331a      	adds	r3, #26
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fe ff4c 	bl	800b450 <ld_word>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <cmp_lfn+0x1e>
 800c5be:	2300      	movs	r3, #0
 800c5c0:	e059      	b.n	800c676 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5ca:	1e5a      	subs	r2, r3, #1
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	005b      	lsls	r3, r3, #1
 800c5d0:	4413      	add	r3, r2
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	4413      	add	r3, r2
 800c5d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c5d8:	2301      	movs	r3, #1
 800c5da:	81fb      	strh	r3, [r7, #14]
 800c5dc:	2300      	movs	r3, #0
 800c5de:	613b      	str	r3, [r7, #16]
 800c5e0:	e033      	b.n	800c64a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c5e2:	4a27      	ldr	r2, [pc, #156]	; (800c680 <cmp_lfn+0xdc>)
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fe ff2d 	bl	800b450 <ld_word>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c5fa:	89fb      	ldrh	r3, [r7, #14]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d01a      	beq.n	800c636 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	2bfe      	cmp	r3, #254	; 0xfe
 800c604:	d812      	bhi.n	800c62c <cmp_lfn+0x88>
 800c606:	89bb      	ldrh	r3, [r7, #12]
 800c608:	4618      	mov	r0, r3
 800c60a:	f002 fb65 	bl	800ecd8 <ff_wtoupper>
 800c60e:	4603      	mov	r3, r0
 800c610:	461c      	mov	r4, r3
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	1c5a      	adds	r2, r3, #1
 800c616:	617a      	str	r2, [r7, #20]
 800c618:	005b      	lsls	r3, r3, #1
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	4413      	add	r3, r2
 800c61e:	881b      	ldrh	r3, [r3, #0]
 800c620:	4618      	mov	r0, r3
 800c622:	f002 fb59 	bl	800ecd8 <ff_wtoupper>
 800c626:	4603      	mov	r3, r0
 800c628:	429c      	cmp	r4, r3
 800c62a:	d001      	beq.n	800c630 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c62c:	2300      	movs	r3, #0
 800c62e:	e022      	b.n	800c676 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c630:	89bb      	ldrh	r3, [r7, #12]
 800c632:	81fb      	strh	r3, [r7, #14]
 800c634:	e006      	b.n	800c644 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c636:	89bb      	ldrh	r3, [r7, #12]
 800c638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d001      	beq.n	800c644 <cmp_lfn+0xa0>
 800c640:	2300      	movs	r3, #0
 800c642:	e018      	b.n	800c676 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	3301      	adds	r3, #1
 800c648:	613b      	str	r3, [r7, #16]
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	2b0c      	cmp	r3, #12
 800c64e:	d9c8      	bls.n	800c5e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00b      	beq.n	800c674 <cmp_lfn+0xd0>
 800c65c:	89fb      	ldrh	r3, [r7, #14]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d008      	beq.n	800c674 <cmp_lfn+0xd0>
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	4413      	add	r3, r2
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d001      	beq.n	800c674 <cmp_lfn+0xd0>
 800c670:	2300      	movs	r3, #0
 800c672:	e000      	b.n	800c676 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c674:	2301      	movs	r3, #1
}
 800c676:	4618      	mov	r0, r3
 800c678:	371c      	adds	r7, #28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd90      	pop	{r4, r7, pc}
 800c67e:	bf00      	nop
 800c680:	08021230 	.word	0x08021230

0800c684 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	331a      	adds	r3, #26
 800c692:	4618      	mov	r0, r3
 800c694:	f7fe fedc 	bl	800b450 <ld_word>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <pick_lfn+0x1e>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e04d      	b.n	800c73e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6aa:	1e5a      	subs	r2, r3, #1
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	005b      	lsls	r3, r3, #1
 800c6b0:	4413      	add	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	81fb      	strh	r3, [r7, #14]
 800c6bc:	2300      	movs	r3, #0
 800c6be:	613b      	str	r3, [r7, #16]
 800c6c0:	e028      	b.n	800c714 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c6c2:	4a21      	ldr	r2, [pc, #132]	; (800c748 <pick_lfn+0xc4>)
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fe febd 	bl	800b450 <ld_word>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c6da:	89fb      	ldrh	r3, [r7, #14]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00f      	beq.n	800c700 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	2bfe      	cmp	r3, #254	; 0xfe
 800c6e4:	d901      	bls.n	800c6ea <pick_lfn+0x66>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	e029      	b.n	800c73e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c6ea:	89bb      	ldrh	r3, [r7, #12]
 800c6ec:	81fb      	strh	r3, [r7, #14]
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	1c5a      	adds	r2, r3, #1
 800c6f2:	617a      	str	r2, [r7, #20]
 800c6f4:	005b      	lsls	r3, r3, #1
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	89fa      	ldrh	r2, [r7, #14]
 800c6fc:	801a      	strh	r2, [r3, #0]
 800c6fe:	e006      	b.n	800c70e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c700:	89bb      	ldrh	r3, [r7, #12]
 800c702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c706:	4293      	cmp	r3, r2
 800c708:	d001      	beq.n	800c70e <pick_lfn+0x8a>
 800c70a:	2300      	movs	r3, #0
 800c70c:	e017      	b.n	800c73e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	3301      	adds	r3, #1
 800c712:	613b      	str	r3, [r7, #16]
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	2b0c      	cmp	r3, #12
 800c718:	d9d3      	bls.n	800c6c2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00a      	beq.n	800c73c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	2bfe      	cmp	r3, #254	; 0xfe
 800c72a:	d901      	bls.n	800c730 <pick_lfn+0xac>
 800c72c:	2300      	movs	r3, #0
 800c72e:	e006      	b.n	800c73e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	4413      	add	r3, r2
 800c738:	2200      	movs	r2, #0
 800c73a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c73c:	2301      	movs	r3, #1
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	08021230 	.word	0x08021230

0800c74c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b088      	sub	sp, #32
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	4611      	mov	r1, r2
 800c758:	461a      	mov	r2, r3
 800c75a:	460b      	mov	r3, r1
 800c75c:	71fb      	strb	r3, [r7, #7]
 800c75e:	4613      	mov	r3, r2
 800c760:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	330d      	adds	r3, #13
 800c766:	79ba      	ldrb	r2, [r7, #6]
 800c768:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	330b      	adds	r3, #11
 800c76e:	220f      	movs	r2, #15
 800c770:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	330c      	adds	r3, #12
 800c776:	2200      	movs	r2, #0
 800c778:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	331a      	adds	r3, #26
 800c77e:	2100      	movs	r1, #0
 800c780:	4618      	mov	r0, r3
 800c782:	f7fe fea0 	bl	800b4c6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c786:	79fb      	ldrb	r3, [r7, #7]
 800c788:	1e5a      	subs	r2, r3, #1
 800c78a:	4613      	mov	r3, r2
 800c78c:	005b      	lsls	r3, r3, #1
 800c78e:	4413      	add	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c796:	2300      	movs	r3, #0
 800c798:	82fb      	strh	r3, [r7, #22]
 800c79a:	2300      	movs	r3, #0
 800c79c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c79e:	8afb      	ldrh	r3, [r7, #22]
 800c7a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d007      	beq.n	800c7b8 <put_lfn+0x6c>
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	1c5a      	adds	r2, r3, #1
 800c7ac:	61fa      	str	r2, [r7, #28]
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c7b8:	4a17      	ldr	r2, [pc, #92]	; (800c818 <put_lfn+0xcc>)
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	4413      	add	r3, r2
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	8afa      	ldrh	r2, [r7, #22]
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fe fe7b 	bl	800b4c6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c7d0:	8afb      	ldrh	r3, [r7, #22]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d102      	bne.n	800c7dc <put_lfn+0x90>
 800c7d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	61bb      	str	r3, [r7, #24]
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	2b0c      	cmp	r3, #12
 800c7e6:	d9da      	bls.n	800c79e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c7e8:	8afb      	ldrh	r3, [r7, #22]
 800c7ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d006      	beq.n	800c800 <put_lfn+0xb4>
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	005b      	lsls	r3, r3, #1
 800c7f6:	68fa      	ldr	r2, [r7, #12]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	881b      	ldrh	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d103      	bne.n	800c808 <put_lfn+0xbc>
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c806:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	79fa      	ldrb	r2, [r7, #7]
 800c80c:	701a      	strb	r2, [r3, #0]
}
 800c80e:	bf00      	nop
 800c810:	3720      	adds	r7, #32
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	08021230 	.word	0x08021230

0800c81c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b08c      	sub	sp, #48	; 0x30
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
 800c828:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c82a:	220b      	movs	r2, #11
 800c82c:	68b9      	ldr	r1, [r7, #8]
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f7fe fe90 	bl	800b554 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	2b05      	cmp	r3, #5
 800c838:	d92b      	bls.n	800c892 <gen_numname+0x76>
		sr = seq;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c83e:	e022      	b.n	800c886 <gen_numname+0x6a>
			wc = *lfn++;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	1c9a      	adds	r2, r3, #2
 800c844:	607a      	str	r2, [r7, #4]
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c84a:	2300      	movs	r3, #0
 800c84c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c84e:	e017      	b.n	800c880 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	005a      	lsls	r2, r3, #1
 800c854:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c856:	f003 0301 	and.w	r3, r3, #1
 800c85a:	4413      	add	r3, r2
 800c85c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c85e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c860:	085b      	lsrs	r3, r3, #1
 800c862:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d005      	beq.n	800c87a <gen_numname+0x5e>
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c874:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c878:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87c:	3301      	adds	r3, #1
 800c87e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	2b0f      	cmp	r3, #15
 800c884:	d9e4      	bls.n	800c850 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	881b      	ldrh	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1d8      	bne.n	800c840 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c892:	2307      	movs	r3, #7
 800c894:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	f003 030f 	and.w	r3, r3, #15
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	3330      	adds	r3, #48	; 0x30
 800c8a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c8a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8aa:	2b39      	cmp	r3, #57	; 0x39
 800c8ac:	d904      	bls.n	800c8b8 <gen_numname+0x9c>
 800c8ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8b2:	3307      	adds	r3, #7
 800c8b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ba:	1e5a      	subs	r2, r3, #1
 800c8bc:	62ba      	str	r2, [r7, #40]	; 0x28
 800c8be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c8c2:	4413      	add	r3, r2
 800c8c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c8c8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	091b      	lsrs	r3, r3, #4
 800c8d0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1de      	bne.n	800c896 <gen_numname+0x7a>
	ns[i] = '~';
 800c8d8:	f107 0214 	add.w	r2, r7, #20
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	4413      	add	r3, r2
 800c8e0:	227e      	movs	r2, #126	; 0x7e
 800c8e2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	627b      	str	r3, [r7, #36]	; 0x24
 800c8e8:	e002      	b.n	800c8f0 <gen_numname+0xd4>
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	627b      	str	r3, [r7, #36]	; 0x24
 800c8f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d205      	bcs.n	800c904 <gen_numname+0xe8>
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fc:	4413      	add	r3, r2
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	2b20      	cmp	r3, #32
 800c902:	d1f2      	bne.n	800c8ea <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c906:	2b07      	cmp	r3, #7
 800c908:	d808      	bhi.n	800c91c <gen_numname+0x100>
 800c90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90c:	1c5a      	adds	r2, r3, #1
 800c90e:	62ba      	str	r2, [r7, #40]	; 0x28
 800c910:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c914:	4413      	add	r3, r2
 800c916:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c91a:	e000      	b.n	800c91e <gen_numname+0x102>
 800c91c:	2120      	movs	r1, #32
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	1c5a      	adds	r2, r3, #1
 800c922:	627a      	str	r2, [r7, #36]	; 0x24
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	4413      	add	r3, r2
 800c928:	460a      	mov	r2, r1
 800c92a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	2b07      	cmp	r3, #7
 800c930:	d9e8      	bls.n	800c904 <gen_numname+0xe8>
}
 800c932:	bf00      	nop
 800c934:	bf00      	nop
 800c936:	3730      	adds	r7, #48	; 0x30
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c944:	2300      	movs	r3, #0
 800c946:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c948:	230b      	movs	r3, #11
 800c94a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	0852      	lsrs	r2, r2, #1
 800c952:	01db      	lsls	r3, r3, #7
 800c954:	4313      	orrs	r3, r2
 800c956:	b2da      	uxtb	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	1c59      	adds	r1, r3, #1
 800c95c:	6079      	str	r1, [r7, #4]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	4413      	add	r3, r2
 800c962:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	3b01      	subs	r3, #1
 800c968:	60bb      	str	r3, [r7, #8]
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1ed      	bne.n	800c94c <sum_sfn+0x10>
	return sum;
 800c970:	7bfb      	ldrb	r3, [r7, #15]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr

0800c97e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b086      	sub	sp, #24
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c988:	2304      	movs	r3, #4
 800c98a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c992:	23ff      	movs	r3, #255	; 0xff
 800c994:	757b      	strb	r3, [r7, #21]
 800c996:	23ff      	movs	r3, #255	; 0xff
 800c998:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c99a:	e081      	b.n	800caa0 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	69db      	ldr	r3, [r3, #28]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6938      	ldr	r0, [r7, #16]
 800c9a4:	f7ff f836 	bl	800ba14 <move_window>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c9ac:	7dfb      	ldrb	r3, [r7, #23]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d17c      	bne.n	800caac <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6a1b      	ldr	r3, [r3, #32]
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c9ba:	7dbb      	ldrb	r3, [r7, #22]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d102      	bne.n	800c9c6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c9c0:	2304      	movs	r3, #4
 800c9c2:	75fb      	strb	r3, [r7, #23]
 800c9c4:	e077      	b.n	800cab6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6a1b      	ldr	r3, [r3, #32]
 800c9ca:	330b      	adds	r3, #11
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9d2:	73fb      	strb	r3, [r7, #15]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	7bfa      	ldrb	r2, [r7, #15]
 800c9d8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c9da:	7dbb      	ldrb	r3, [r7, #22]
 800c9dc:	2be5      	cmp	r3, #229	; 0xe5
 800c9de:	d00e      	beq.n	800c9fe <dir_read+0x80>
 800c9e0:	7dbb      	ldrb	r3, [r7, #22]
 800c9e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c9e4:	d00b      	beq.n	800c9fe <dir_read+0x80>
 800c9e6:	7bfb      	ldrb	r3, [r7, #15]
 800c9e8:	f023 0320 	bic.w	r3, r3, #32
 800c9ec:	2b08      	cmp	r3, #8
 800c9ee:	bf0c      	ite	eq
 800c9f0:	2301      	moveq	r3, #1
 800c9f2:	2300      	movne	r3, #0
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d002      	beq.n	800ca04 <dir_read+0x86>
				ord = 0xFF;
 800c9fe:	23ff      	movs	r3, #255	; 0xff
 800ca00:	757b      	strb	r3, [r7, #21]
 800ca02:	e044      	b.n	800ca8e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	2b0f      	cmp	r3, #15
 800ca08:	d12f      	bne.n	800ca6a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ca0a:	7dbb      	ldrb	r3, [r7, #22]
 800ca0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d00d      	beq.n	800ca30 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6a1b      	ldr	r3, [r3, #32]
 800ca18:	7b5b      	ldrb	r3, [r3, #13]
 800ca1a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ca1c:	7dbb      	ldrb	r3, [r7, #22]
 800ca1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca22:	75bb      	strb	r3, [r7, #22]
 800ca24:	7dbb      	ldrb	r3, [r7, #22]
 800ca26:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	695a      	ldr	r2, [r3, #20]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ca30:	7dba      	ldrb	r2, [r7, #22]
 800ca32:	7d7b      	ldrb	r3, [r7, #21]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d115      	bne.n	800ca64 <dir_read+0xe6>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a1b      	ldr	r3, [r3, #32]
 800ca3c:	330d      	adds	r3, #13
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	7d3a      	ldrb	r2, [r7, #20]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d10e      	bne.n	800ca64 <dir_read+0xe6>
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	691a      	ldr	r2, [r3, #16]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6a1b      	ldr	r3, [r3, #32]
 800ca4e:	4619      	mov	r1, r3
 800ca50:	4610      	mov	r0, r2
 800ca52:	f7ff fe17 	bl	800c684 <pick_lfn>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d003      	beq.n	800ca64 <dir_read+0xe6>
 800ca5c:	7d7b      	ldrb	r3, [r7, #21]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	e000      	b.n	800ca66 <dir_read+0xe8>
 800ca64:	23ff      	movs	r3, #255	; 0xff
 800ca66:	757b      	strb	r3, [r7, #21]
 800ca68:	e011      	b.n	800ca8e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ca6a:	7d7b      	ldrb	r3, [r7, #21]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d109      	bne.n	800ca84 <dir_read+0x106>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6a1b      	ldr	r3, [r3, #32]
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7ff ff61 	bl	800c93c <sum_sfn>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	7d3b      	ldrb	r3, [r7, #20]
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d015      	beq.n	800cab0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f04f 32ff 	mov.w	r2, #4294967295
 800ca8a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800ca8c:	e010      	b.n	800cab0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ca8e:	2100      	movs	r1, #0
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f7ff fc2a 	bl	800c2ea <dir_next>
 800ca96:	4603      	mov	r3, r0
 800ca98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d109      	bne.n	800cab4 <dir_read+0x136>
	while (dp->sect) {
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	69db      	ldr	r3, [r3, #28]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f47f af79 	bne.w	800c99c <dir_read+0x1e>
 800caaa:	e004      	b.n	800cab6 <dir_read+0x138>
		if (res != FR_OK) break;
 800caac:	bf00      	nop
 800caae:	e002      	b.n	800cab6 <dir_read+0x138>
					break;
 800cab0:	bf00      	nop
 800cab2:	e000      	b.n	800cab6 <dir_read+0x138>
		if (res != FR_OK) break;
 800cab4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cab6:	7dfb      	ldrb	r3, [r7, #23]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <dir_read+0x144>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	61da      	str	r2, [r3, #28]
	return res;
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cada:	2100      	movs	r1, #0
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7ff fb7b 	bl	800c1d8 <dir_sdi>
 800cae2:	4603      	mov	r3, r0
 800cae4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cae6:	7dfb      	ldrb	r3, [r7, #23]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d001      	beq.n	800caf0 <dir_find+0x24>
 800caec:	7dfb      	ldrb	r3, [r7, #23]
 800caee:	e0a9      	b.n	800cc44 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800caf0:	23ff      	movs	r3, #255	; 0xff
 800caf2:	753b      	strb	r3, [r7, #20]
 800caf4:	7d3b      	ldrb	r3, [r7, #20]
 800caf6:	757b      	strb	r3, [r7, #21]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f04f 32ff 	mov.w	r2, #4294967295
 800cafe:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	69db      	ldr	r3, [r3, #28]
 800cb04:	4619      	mov	r1, r3
 800cb06:	6938      	ldr	r0, [r7, #16]
 800cb08:	f7fe ff84 	bl	800ba14 <move_window>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb10:	7dfb      	ldrb	r3, [r7, #23]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f040 8090 	bne.w	800cc38 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6a1b      	ldr	r3, [r3, #32]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb20:	7dbb      	ldrb	r3, [r7, #22]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d102      	bne.n	800cb2c <dir_find+0x60>
 800cb26:	2304      	movs	r3, #4
 800cb28:	75fb      	strb	r3, [r7, #23]
 800cb2a:	e08a      	b.n	800cc42 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
 800cb30:	330b      	adds	r3, #11
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb38:	73fb      	strb	r3, [r7, #15]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	7bfa      	ldrb	r2, [r7, #15]
 800cb3e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cb40:	7dbb      	ldrb	r3, [r7, #22]
 800cb42:	2be5      	cmp	r3, #229	; 0xe5
 800cb44:	d007      	beq.n	800cb56 <dir_find+0x8a>
 800cb46:	7bfb      	ldrb	r3, [r7, #15]
 800cb48:	f003 0308 	and.w	r3, r3, #8
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d009      	beq.n	800cb64 <dir_find+0x98>
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	2b0f      	cmp	r3, #15
 800cb54:	d006      	beq.n	800cb64 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb56:	23ff      	movs	r3, #255	; 0xff
 800cb58:	757b      	strb	r3, [r7, #21]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb60:	631a      	str	r2, [r3, #48]	; 0x30
 800cb62:	e05e      	b.n	800cc22 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cb64:	7bfb      	ldrb	r3, [r7, #15]
 800cb66:	2b0f      	cmp	r3, #15
 800cb68:	d136      	bne.n	800cbd8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d154      	bne.n	800cc22 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cb78:	7dbb      	ldrb	r3, [r7, #22]
 800cb7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00d      	beq.n	800cb9e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6a1b      	ldr	r3, [r3, #32]
 800cb86:	7b5b      	ldrb	r3, [r3, #13]
 800cb88:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cb8a:	7dbb      	ldrb	r3, [r7, #22]
 800cb8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb90:	75bb      	strb	r3, [r7, #22]
 800cb92:	7dbb      	ldrb	r3, [r7, #22]
 800cb94:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	695a      	ldr	r2, [r3, #20]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cb9e:	7dba      	ldrb	r2, [r7, #22]
 800cba0:	7d7b      	ldrb	r3, [r7, #21]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d115      	bne.n	800cbd2 <dir_find+0x106>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a1b      	ldr	r3, [r3, #32]
 800cbaa:	330d      	adds	r3, #13
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	7d3a      	ldrb	r2, [r7, #20]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d10e      	bne.n	800cbd2 <dir_find+0x106>
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	691a      	ldr	r2, [r3, #16]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4610      	mov	r0, r2
 800cbc0:	f7ff fcf0 	bl	800c5a4 <cmp_lfn>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d003      	beq.n	800cbd2 <dir_find+0x106>
 800cbca:	7d7b      	ldrb	r3, [r7, #21]
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	e000      	b.n	800cbd4 <dir_find+0x108>
 800cbd2:	23ff      	movs	r3, #255	; 0xff
 800cbd4:	757b      	strb	r3, [r7, #21]
 800cbd6:	e024      	b.n	800cc22 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cbd8:	7d7b      	ldrb	r3, [r7, #21]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d109      	bne.n	800cbf2 <dir_find+0x126>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a1b      	ldr	r3, [r3, #32]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7ff feaa 	bl	800c93c <sum_sfn>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	461a      	mov	r2, r3
 800cbec:	7d3b      	ldrb	r3, [r7, #20]
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d024      	beq.n	800cc3c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10a      	bne.n	800cc16 <dir_find+0x14a>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a18      	ldr	r0, [r3, #32]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	3324      	adds	r3, #36	; 0x24
 800cc08:	220b      	movs	r2, #11
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	f7fe fcde 	bl	800b5cc <mem_cmp>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d014      	beq.n	800cc40 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc16:	23ff      	movs	r3, #255	; 0xff
 800cc18:	757b      	strb	r3, [r7, #21]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc20:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cc22:	2100      	movs	r1, #0
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff fb60 	bl	800c2ea <dir_next>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f43f af65 	beq.w	800cb00 <dir_find+0x34>
 800cc36:	e004      	b.n	800cc42 <dir_find+0x176>
		if (res != FR_OK) break;
 800cc38:	bf00      	nop
 800cc3a:	e002      	b.n	800cc42 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc3c:	bf00      	nop
 800cc3e:	e000      	b.n	800cc42 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc40:	bf00      	nop

	return res;
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3718      	adds	r7, #24
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b08c      	sub	sp, #48	; 0x30
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc60:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <dir_register+0x20>
 800cc68:	2306      	movs	r3, #6
 800cc6a:	e0e0      	b.n	800ce2e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc70:	e002      	b.n	800cc78 <dir_register+0x2c>
 800cc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc74:	3301      	adds	r3, #1
 800cc76:	627b      	str	r3, [r7, #36]	; 0x24
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	691a      	ldr	r2, [r3, #16]
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7e:	005b      	lsls	r3, r3, #1
 800cc80:	4413      	add	r3, r2
 800cc82:	881b      	ldrh	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1f4      	bne.n	800cc72 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cc8e:	f107 030c 	add.w	r3, r7, #12
 800cc92:	220c      	movs	r2, #12
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fe fc5d 	bl	800b554 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d032      	beq.n	800cd0a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2240      	movs	r2, #64	; 0x40
 800cca8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ccac:	2301      	movs	r3, #1
 800ccae:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccb0:	e016      	b.n	800cce0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	691a      	ldr	r2, [r3, #16]
 800ccbc:	f107 010c 	add.w	r1, r7, #12
 800ccc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc2:	f7ff fdab 	bl	800c81c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff ff00 	bl	800cacc <dir_find>
 800cccc:	4603      	mov	r3, r0
 800ccce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ccd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d106      	bne.n	800cce8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ccda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccdc:	3301      	adds	r3, #1
 800ccde:	62bb      	str	r3, [r7, #40]	; 0x28
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	2b63      	cmp	r3, #99	; 0x63
 800cce4:	d9e5      	bls.n	800ccb2 <dir_register+0x66>
 800cce6:	e000      	b.n	800ccea <dir_register+0x9e>
			if (res != FR_OK) break;
 800cce8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ccea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccec:	2b64      	cmp	r3, #100	; 0x64
 800ccee:	d101      	bne.n	800ccf4 <dir_register+0xa8>
 800ccf0:	2307      	movs	r3, #7
 800ccf2:	e09c      	b.n	800ce2e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ccf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccf8:	2b04      	cmp	r3, #4
 800ccfa:	d002      	beq.n	800cd02 <dir_register+0xb6>
 800ccfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd00:	e095      	b.n	800ce2e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cd02:	7dfa      	ldrb	r2, [r7, #23]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cd0a:	7dfb      	ldrb	r3, [r7, #23]
 800cd0c:	f003 0302 	and.w	r3, r3, #2
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d007      	beq.n	800cd24 <dir_register+0xd8>
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	330c      	adds	r3, #12
 800cd18:	4a47      	ldr	r2, [pc, #284]	; (800ce38 <dir_register+0x1ec>)
 800cd1a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd1e:	089b      	lsrs	r3, r3, #2
 800cd20:	3301      	adds	r3, #1
 800cd22:	e000      	b.n	800cd26 <dir_register+0xda>
 800cd24:	2301      	movs	r3, #1
 800cd26:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cd28:	6a39      	ldr	r1, [r7, #32]
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7ff fbb3 	bl	800c496 <dir_alloc>
 800cd30:	4603      	mov	r3, r0
 800cd32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cd36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d148      	bne.n	800cdd0 <dir_register+0x184>
 800cd3e:	6a3b      	ldr	r3, [r7, #32]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	623b      	str	r3, [r7, #32]
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d042      	beq.n	800cdd0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	695a      	ldr	r2, [r3, #20]
 800cd4e:	6a3b      	ldr	r3, [r7, #32]
 800cd50:	015b      	lsls	r3, r3, #5
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	4619      	mov	r1, r3
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7ff fa3e 	bl	800c1d8 <dir_sdi>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cd62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d132      	bne.n	800cdd0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	3324      	adds	r3, #36	; 0x24
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7ff fde4 	bl	800c93c <sum_sfn>
 800cd74:	4603      	mov	r3, r0
 800cd76:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	69db      	ldr	r3, [r3, #28]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	69f8      	ldr	r0, [r7, #28]
 800cd80:	f7fe fe48 	bl	800ba14 <move_window>
 800cd84:	4603      	mov	r3, r0
 800cd86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cd8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d11d      	bne.n	800cdce <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	6918      	ldr	r0, [r3, #16]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6a19      	ldr	r1, [r3, #32]
 800cd9a:	6a3b      	ldr	r3, [r7, #32]
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	7efb      	ldrb	r3, [r7, #27]
 800cda0:	f7ff fcd4 	bl	800c74c <put_lfn>
				fs->wflag = 1;
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	2201      	movs	r2, #1
 800cda8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cdaa:	2100      	movs	r1, #0
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7ff fa9c 	bl	800c2ea <dir_next>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cdb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d107      	bne.n	800cdd0 <dir_register+0x184>
 800cdc0:	6a3b      	ldr	r3, [r7, #32]
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	623b      	str	r3, [r7, #32]
 800cdc6:	6a3b      	ldr	r3, [r7, #32]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1d5      	bne.n	800cd78 <dir_register+0x12c>
 800cdcc:	e000      	b.n	800cdd0 <dir_register+0x184>
				if (res != FR_OK) break;
 800cdce:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cdd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d128      	bne.n	800ce2a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	69db      	ldr	r3, [r3, #28]
 800cddc:	4619      	mov	r1, r3
 800cdde:	69f8      	ldr	r0, [r7, #28]
 800cde0:	f7fe fe18 	bl	800ba14 <move_window>
 800cde4:	4603      	mov	r3, r0
 800cde6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cdea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d11b      	bne.n	800ce2a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	2220      	movs	r2, #32
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fe fbcb 	bl	800b596 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6a18      	ldr	r0, [r3, #32]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	3324      	adds	r3, #36	; 0x24
 800ce08:	220b      	movs	r2, #11
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	f7fe fba2 	bl	800b554 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	330c      	adds	r3, #12
 800ce1c:	f002 0218 	and.w	r2, r2, #24
 800ce20:	b2d2      	uxtb	r2, r2
 800ce22:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	2201      	movs	r2, #1
 800ce28:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ce2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3730      	adds	r7, #48	; 0x30
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	4ec4ec4f 	.word	0x4ec4ec4f

0800ce3c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b088      	sub	sp, #32
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	69db      	ldr	r3, [r3, #28]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f000 80c9 	beq.w	800cfee <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce64:	d032      	beq.n	800cecc <get_fileinfo+0x90>
			i = j = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	61bb      	str	r3, [r7, #24]
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ce6e:	e01b      	b.n	800cea8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ce70:	89fb      	ldrh	r3, [r7, #14]
 800ce72:	2100      	movs	r1, #0
 800ce74:	4618      	mov	r0, r3
 800ce76:	f001 fef3 	bl	800ec60 <ff_convert>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ce7e:	89fb      	ldrh	r3, [r7, #14]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d102      	bne.n	800ce8a <get_fileinfo+0x4e>
 800ce84:	2300      	movs	r3, #0
 800ce86:	61fb      	str	r3, [r7, #28]
 800ce88:	e01a      	b.n	800cec0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	2bfe      	cmp	r3, #254	; 0xfe
 800ce8e:	d902      	bls.n	800ce96 <get_fileinfo+0x5a>
 800ce90:	2300      	movs	r3, #0
 800ce92:	61fb      	str	r3, [r7, #28]
 800ce94:	e014      	b.n	800cec0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	61fa      	str	r2, [r7, #28]
 800ce9c:	89fa      	ldrh	r2, [r7, #14]
 800ce9e:	b2d1      	uxtb	r1, r2
 800cea0:	683a      	ldr	r2, [r7, #0]
 800cea2:	4413      	add	r3, r2
 800cea4:	460a      	mov	r2, r1
 800cea6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	691a      	ldr	r2, [r3, #16]
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	1c59      	adds	r1, r3, #1
 800ceb0:	61b9      	str	r1, [r7, #24]
 800ceb2:	005b      	lsls	r3, r3, #1
 800ceb4:	4413      	add	r3, r2
 800ceb6:	881b      	ldrh	r3, [r3, #0]
 800ceb8:	81fb      	strh	r3, [r7, #14]
 800ceba:	89fb      	ldrh	r3, [r7, #14]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1d7      	bne.n	800ce70 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cec0:	683a      	ldr	r2, [r7, #0]
 800cec2:	69fb      	ldr	r3, [r7, #28]
 800cec4:	4413      	add	r3, r2
 800cec6:	3316      	adds	r3, #22
 800cec8:	2200      	movs	r2, #0
 800ceca:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	61bb      	str	r3, [r7, #24]
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	4413      	add	r3, r2
 800ceda:	3316      	adds	r3, #22
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cee0:	e04c      	b.n	800cf7c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6a1a      	ldr	r2, [r3, #32]
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	1c59      	adds	r1, r3, #1
 800ceea:	61f9      	str	r1, [r7, #28]
 800ceec:	4413      	add	r3, r2
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cef2:	7dfb      	ldrb	r3, [r7, #23]
 800cef4:	2b20      	cmp	r3, #32
 800cef6:	d100      	bne.n	800cefa <get_fileinfo+0xbe>
 800cef8:	e040      	b.n	800cf7c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cefa:	7dfb      	ldrb	r3, [r7, #23]
 800cefc:	2b05      	cmp	r3, #5
 800cefe:	d101      	bne.n	800cf04 <get_fileinfo+0xc8>
 800cf00:	23e5      	movs	r3, #229	; 0xe5
 800cf02:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	2b09      	cmp	r3, #9
 800cf08:	d10f      	bne.n	800cf2a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800cf0a:	89bb      	ldrh	r3, [r7, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d105      	bne.n	800cf1c <get_fileinfo+0xe0>
 800cf10:	683a      	ldr	r2, [r7, #0]
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	4413      	add	r3, r2
 800cf16:	3316      	adds	r3, #22
 800cf18:	222e      	movs	r2, #46	; 0x2e
 800cf1a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	1c5a      	adds	r2, r3, #1
 800cf20:	61ba      	str	r2, [r7, #24]
 800cf22:	683a      	ldr	r2, [r7, #0]
 800cf24:	4413      	add	r3, r2
 800cf26:	222e      	movs	r2, #46	; 0x2e
 800cf28:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cf2a:	683a      	ldr	r2, [r7, #0]
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	4413      	add	r3, r2
 800cf30:	3309      	adds	r3, #9
 800cf32:	7dfa      	ldrb	r2, [r7, #23]
 800cf34:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cf36:	89bb      	ldrh	r3, [r7, #12]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d11c      	bne.n	800cf76 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cf3c:	7dfb      	ldrb	r3, [r7, #23]
 800cf3e:	2b40      	cmp	r3, #64	; 0x40
 800cf40:	d913      	bls.n	800cf6a <get_fileinfo+0x12e>
 800cf42:	7dfb      	ldrb	r3, [r7, #23]
 800cf44:	2b5a      	cmp	r3, #90	; 0x5a
 800cf46:	d810      	bhi.n	800cf6a <get_fileinfo+0x12e>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6a1b      	ldr	r3, [r3, #32]
 800cf4c:	330c      	adds	r3, #12
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	461a      	mov	r2, r3
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	2b08      	cmp	r3, #8
 800cf56:	d901      	bls.n	800cf5c <get_fileinfo+0x120>
 800cf58:	2310      	movs	r3, #16
 800cf5a:	e000      	b.n	800cf5e <get_fileinfo+0x122>
 800cf5c:	2308      	movs	r3, #8
 800cf5e:	4013      	ands	r3, r2
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800cf64:	7dfb      	ldrb	r3, [r7, #23]
 800cf66:	3320      	adds	r3, #32
 800cf68:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cf6a:	683a      	ldr	r2, [r7, #0]
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	4413      	add	r3, r2
 800cf70:	3316      	adds	r3, #22
 800cf72:	7dfa      	ldrb	r2, [r7, #23]
 800cf74:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	2b0a      	cmp	r3, #10
 800cf80:	d9af      	bls.n	800cee2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800cf82:	89bb      	ldrh	r3, [r7, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10d      	bne.n	800cfa4 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	3316      	adds	r3, #22
 800cf90:	2200      	movs	r2, #0
 800cf92:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6a1b      	ldr	r3, [r3, #32]
 800cf98:	330c      	adds	r3, #12
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d101      	bne.n	800cfa4 <get_fileinfo+0x168>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cfa4:	683a      	ldr	r2, [r7, #0]
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	3309      	adds	r3, #9
 800cfac:	2200      	movs	r2, #0
 800cfae:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6a1b      	ldr	r3, [r3, #32]
 800cfb4:	7ada      	ldrb	r2, [r3, #11]
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a1b      	ldr	r3, [r3, #32]
 800cfbe:	331c      	adds	r3, #28
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe fa5d 	bl	800b480 <ld_dword>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6a1b      	ldr	r3, [r3, #32]
 800cfd0:	3316      	adds	r3, #22
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe fa54 	bl	800b480 <ld_dword>
 800cfd8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	80da      	strh	r2, [r3, #6]
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	0c1b      	lsrs	r3, r3, #16
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	809a      	strh	r2, [r3, #4]
 800cfec:	e000      	b.n	800cff0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cfee:	bf00      	nop
}
 800cff0:	3720      	adds	r7, #32
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
	...

0800cff8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b08a      	sub	sp, #40	; 0x28
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	613b      	str	r3, [r7, #16]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	691b      	ldr	r3, [r3, #16]
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	2300      	movs	r3, #0
 800d012:	617b      	str	r3, [r7, #20]
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	1c5a      	adds	r2, r3, #1
 800d01c:	61ba      	str	r2, [r7, #24]
 800d01e:	693a      	ldr	r2, [r7, #16]
 800d020:	4413      	add	r3, r2
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d028:	2b1f      	cmp	r3, #31
 800d02a:	d940      	bls.n	800d0ae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d02c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d02e:	2b2f      	cmp	r3, #47	; 0x2f
 800d030:	d006      	beq.n	800d040 <create_name+0x48>
 800d032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d034:	2b5c      	cmp	r3, #92	; 0x5c
 800d036:	d110      	bne.n	800d05a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d038:	e002      	b.n	800d040 <create_name+0x48>
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	3301      	adds	r3, #1
 800d03e:	61bb      	str	r3, [r7, #24]
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	4413      	add	r3, r2
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	2b2f      	cmp	r3, #47	; 0x2f
 800d04a:	d0f6      	beq.n	800d03a <create_name+0x42>
 800d04c:	693a      	ldr	r2, [r7, #16]
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	4413      	add	r3, r2
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2b5c      	cmp	r3, #92	; 0x5c
 800d056:	d0f0      	beq.n	800d03a <create_name+0x42>
			break;
 800d058:	e02a      	b.n	800d0b0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	2bfe      	cmp	r3, #254	; 0xfe
 800d05e:	d901      	bls.n	800d064 <create_name+0x6c>
 800d060:	2306      	movs	r3, #6
 800d062:	e177      	b.n	800d354 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d066:	b2db      	uxtb	r3, r3
 800d068:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d06a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d06c:	2101      	movs	r1, #1
 800d06e:	4618      	mov	r0, r3
 800d070:	f001 fdf6 	bl	800ec60 <ff_convert>
 800d074:	4603      	mov	r3, r0
 800d076:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d101      	bne.n	800d082 <create_name+0x8a>
 800d07e:	2306      	movs	r3, #6
 800d080:	e168      	b.n	800d354 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d084:	2b7f      	cmp	r3, #127	; 0x7f
 800d086:	d809      	bhi.n	800d09c <create_name+0xa4>
 800d088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d08a:	4619      	mov	r1, r3
 800d08c:	48b3      	ldr	r0, [pc, #716]	; (800d35c <create_name+0x364>)
 800d08e:	f7fe fac4 	bl	800b61a <chk_chr>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <create_name+0xa4>
 800d098:	2306      	movs	r3, #6
 800d09a:	e15b      	b.n	800d354 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	1c5a      	adds	r2, r3, #1
 800d0a0:	617a      	str	r2, [r7, #20]
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d0aa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d0ac:	e7b4      	b.n	800d018 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d0ae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d0b0:	693a      	ldr	r2, [r7, #16]
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	441a      	add	r2, r3
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d0ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0bc:	2b1f      	cmp	r3, #31
 800d0be:	d801      	bhi.n	800d0c4 <create_name+0xcc>
 800d0c0:	2304      	movs	r3, #4
 800d0c2:	e000      	b.n	800d0c6 <create_name+0xce>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d0ca:	e011      	b.n	800d0f0 <create_name+0xf8>
		w = lfn[di - 1];
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	005b      	lsls	r3, r3, #1
 800d0d6:	68fa      	ldr	r2, [r7, #12]
 800d0d8:	4413      	add	r3, r2
 800d0da:	881b      	ldrh	r3, [r3, #0]
 800d0dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d0de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0e0:	2b20      	cmp	r3, #32
 800d0e2:	d002      	beq.n	800d0ea <create_name+0xf2>
 800d0e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0e6:	2b2e      	cmp	r3, #46	; 0x2e
 800d0e8:	d106      	bne.n	800d0f8 <create_name+0x100>
		di--;
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1ea      	bne.n	800d0cc <create_name+0xd4>
 800d0f6:	e000      	b.n	800d0fa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d0f8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	4413      	add	r3, r2
 800d102:	2200      	movs	r2, #0
 800d104:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d101      	bne.n	800d110 <create_name+0x118>
 800d10c:	2306      	movs	r3, #6
 800d10e:	e121      	b.n	800d354 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3324      	adds	r3, #36	; 0x24
 800d114:	220b      	movs	r2, #11
 800d116:	2120      	movs	r1, #32
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe fa3c 	bl	800b596 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d11e:	2300      	movs	r3, #0
 800d120:	61bb      	str	r3, [r7, #24]
 800d122:	e002      	b.n	800d12a <create_name+0x132>
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	3301      	adds	r3, #1
 800d128:	61bb      	str	r3, [r7, #24]
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	4413      	add	r3, r2
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	2b20      	cmp	r3, #32
 800d136:	d0f5      	beq.n	800d124 <create_name+0x12c>
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	005b      	lsls	r3, r3, #1
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	4413      	add	r3, r2
 800d140:	881b      	ldrh	r3, [r3, #0]
 800d142:	2b2e      	cmp	r3, #46	; 0x2e
 800d144:	d0ee      	beq.n	800d124 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d009      	beq.n	800d160 <create_name+0x168>
 800d14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d150:	f043 0303 	orr.w	r3, r3, #3
 800d154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d158:	e002      	b.n	800d160 <create_name+0x168>
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	3b01      	subs	r3, #1
 800d15e:	617b      	str	r3, [r7, #20]
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d009      	beq.n	800d17a <create_name+0x182>
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d16c:	3b01      	subs	r3, #1
 800d16e:	005b      	lsls	r3, r3, #1
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	4413      	add	r3, r2
 800d174:	881b      	ldrh	r3, [r3, #0]
 800d176:	2b2e      	cmp	r3, #46	; 0x2e
 800d178:	d1ef      	bne.n	800d15a <create_name+0x162>

	i = b = 0; ni = 8;
 800d17a:	2300      	movs	r3, #0
 800d17c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d180:	2300      	movs	r3, #0
 800d182:	623b      	str	r3, [r7, #32]
 800d184:	2308      	movs	r3, #8
 800d186:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	1c5a      	adds	r2, r3, #1
 800d18c:	61ba      	str	r2, [r7, #24]
 800d18e:	005b      	lsls	r3, r3, #1
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	4413      	add	r3, r2
 800d194:	881b      	ldrh	r3, [r3, #0]
 800d196:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f000 8090 	beq.w	800d2c0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1a2:	2b20      	cmp	r3, #32
 800d1a4:	d006      	beq.n	800d1b4 <create_name+0x1bc>
 800d1a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1a8:	2b2e      	cmp	r3, #46	; 0x2e
 800d1aa:	d10a      	bne.n	800d1c2 <create_name+0x1ca>
 800d1ac:	69ba      	ldr	r2, [r7, #24]
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d006      	beq.n	800d1c2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1b8:	f043 0303 	orr.w	r3, r3, #3
 800d1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1c0:	e07d      	b.n	800d2be <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d1c2:	6a3a      	ldr	r2, [r7, #32]
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d203      	bcs.n	800d1d2 <create_name+0x1da>
 800d1ca:	69ba      	ldr	r2, [r7, #24]
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d123      	bne.n	800d21a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	2b0b      	cmp	r3, #11
 800d1d6:	d106      	bne.n	800d1e6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1dc:	f043 0303 	orr.w	r3, r3, #3
 800d1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1e4:	e06f      	b.n	800d2c6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d1e6:	69ba      	ldr	r2, [r7, #24]
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d005      	beq.n	800d1fa <create_name+0x202>
 800d1ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1f2:	f043 0303 	orr.w	r3, r3, #3
 800d1f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d1fa:	69ba      	ldr	r2, [r7, #24]
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d860      	bhi.n	800d2c4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	61bb      	str	r3, [r7, #24]
 800d206:	2308      	movs	r3, #8
 800d208:	623b      	str	r3, [r7, #32]
 800d20a:	230b      	movs	r3, #11
 800d20c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d20e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d218:	e051      	b.n	800d2be <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d21a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d21c:	2b7f      	cmp	r3, #127	; 0x7f
 800d21e:	d914      	bls.n	800d24a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d222:	2100      	movs	r1, #0
 800d224:	4618      	mov	r0, r3
 800d226:	f001 fd1b 	bl	800ec60 <ff_convert>
 800d22a:	4603      	mov	r3, r0
 800d22c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d22e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d230:	2b00      	cmp	r3, #0
 800d232:	d004      	beq.n	800d23e <create_name+0x246>
 800d234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d236:	3b80      	subs	r3, #128	; 0x80
 800d238:	4a49      	ldr	r2, [pc, #292]	; (800d360 <create_name+0x368>)
 800d23a:	5cd3      	ldrb	r3, [r2, r3]
 800d23c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d23e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d242:	f043 0302 	orr.w	r3, r3, #2
 800d246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d24a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d007      	beq.n	800d260 <create_name+0x268>
 800d250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d252:	4619      	mov	r1, r3
 800d254:	4843      	ldr	r0, [pc, #268]	; (800d364 <create_name+0x36c>)
 800d256:	f7fe f9e0 	bl	800b61a <chk_chr>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d008      	beq.n	800d272 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d260:	235f      	movs	r3, #95	; 0x5f
 800d262:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d268:	f043 0303 	orr.w	r3, r3, #3
 800d26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d270:	e01b      	b.n	800d2aa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d274:	2b40      	cmp	r3, #64	; 0x40
 800d276:	d909      	bls.n	800d28c <create_name+0x294>
 800d278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d27a:	2b5a      	cmp	r3, #90	; 0x5a
 800d27c:	d806      	bhi.n	800d28c <create_name+0x294>
					b |= 2;
 800d27e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d282:	f043 0302 	orr.w	r3, r3, #2
 800d286:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d28a:	e00e      	b.n	800d2aa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d28c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d28e:	2b60      	cmp	r3, #96	; 0x60
 800d290:	d90b      	bls.n	800d2aa <create_name+0x2b2>
 800d292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d294:	2b7a      	cmp	r3, #122	; 0x7a
 800d296:	d808      	bhi.n	800d2aa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d298:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d29c:	f043 0301 	orr.w	r3, r3, #1
 800d2a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d2a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2a6:	3b20      	subs	r3, #32
 800d2a8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d2aa:	6a3b      	ldr	r3, [r7, #32]
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	623a      	str	r2, [r7, #32]
 800d2b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d2b2:	b2d1      	uxtb	r1, r2
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	460a      	mov	r2, r1
 800d2ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d2be:	e763      	b.n	800d188 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d2c0:	bf00      	nop
 800d2c2:	e000      	b.n	800d2c6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d2c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d2cc:	2be5      	cmp	r3, #229	; 0xe5
 800d2ce:	d103      	bne.n	800d2d8 <create_name+0x2e0>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2205      	movs	r2, #5
 800d2d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	2b08      	cmp	r3, #8
 800d2dc:	d104      	bne.n	800d2e8 <create_name+0x2f0>
 800d2de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d2e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2ec:	f003 030c 	and.w	r3, r3, #12
 800d2f0:	2b0c      	cmp	r3, #12
 800d2f2:	d005      	beq.n	800d300 <create_name+0x308>
 800d2f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2f8:	f003 0303 	and.w	r3, r3, #3
 800d2fc:	2b03      	cmp	r3, #3
 800d2fe:	d105      	bne.n	800d30c <create_name+0x314>
 800d300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d304:	f043 0302 	orr.w	r3, r3, #2
 800d308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d30c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d310:	f003 0302 	and.w	r3, r3, #2
 800d314:	2b00      	cmp	r3, #0
 800d316:	d117      	bne.n	800d348 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d318:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d31c:	f003 0303 	and.w	r3, r3, #3
 800d320:	2b01      	cmp	r3, #1
 800d322:	d105      	bne.n	800d330 <create_name+0x338>
 800d324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d328:	f043 0310 	orr.w	r3, r3, #16
 800d32c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d330:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d334:	f003 030c 	and.w	r3, r3, #12
 800d338:	2b04      	cmp	r3, #4
 800d33a:	d105      	bne.n	800d348 <create_name+0x350>
 800d33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d340:	f043 0308 	orr.w	r3, r3, #8
 800d344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d34e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d352:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d354:	4618      	mov	r0, r3
 800d356:	3728      	adds	r7, #40	; 0x28
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	08017038 	.word	0x08017038
 800d360:	080211b0 	.word	0x080211b0
 800d364:	08017044 	.word	0x08017044

0800d368 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d37c:	e002      	b.n	800d384 <follow_path+0x1c>
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	3301      	adds	r3, #1
 800d382:	603b      	str	r3, [r7, #0]
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	2b2f      	cmp	r3, #47	; 0x2f
 800d38a:	d0f8      	beq.n	800d37e <follow_path+0x16>
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b5c      	cmp	r3, #92	; 0x5c
 800d392:	d0f4      	beq.n	800d37e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	2200      	movs	r2, #0
 800d398:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	2b1f      	cmp	r3, #31
 800d3a0:	d80a      	bhi.n	800d3b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2280      	movs	r2, #128	; 0x80
 800d3a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7fe ff13 	bl	800c1d8 <dir_sdi>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	75fb      	strb	r3, [r7, #23]
 800d3b6:	e048      	b.n	800d44a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d3b8:	463b      	mov	r3, r7
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7ff fe1b 	bl	800cff8 <create_name>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d3c6:	7dfb      	ldrb	r3, [r7, #23]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d139      	bne.n	800d440 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff fb7d 	bl	800cacc <dir_find>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d3de:	7dfb      	ldrb	r3, [r7, #23]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00a      	beq.n	800d3fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d3e4:	7dfb      	ldrb	r3, [r7, #23]
 800d3e6:	2b04      	cmp	r3, #4
 800d3e8:	d12c      	bne.n	800d444 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d3ea:	7afb      	ldrb	r3, [r7, #11]
 800d3ec:	f003 0304 	and.w	r3, r3, #4
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d127      	bne.n	800d444 <follow_path+0xdc>
 800d3f4:	2305      	movs	r3, #5
 800d3f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d3f8:	e024      	b.n	800d444 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d3fa:	7afb      	ldrb	r3, [r7, #11]
 800d3fc:	f003 0304 	and.w	r3, r3, #4
 800d400:	2b00      	cmp	r3, #0
 800d402:	d121      	bne.n	800d448 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	799b      	ldrb	r3, [r3, #6]
 800d408:	f003 0310 	and.w	r3, r3, #16
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d102      	bne.n	800d416 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d410:	2305      	movs	r3, #5
 800d412:	75fb      	strb	r3, [r7, #23]
 800d414:	e019      	b.n	800d44a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	695b      	ldr	r3, [r3, #20]
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	8992      	ldrh	r2, [r2, #12]
 800d424:	fbb3 f0f2 	udiv	r0, r3, r2
 800d428:	fb02 f200 	mul.w	r2, r2, r0
 800d42c:	1a9b      	subs	r3, r3, r2
 800d42e:	440b      	add	r3, r1
 800d430:	4619      	mov	r1, r3
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f7ff f876 	bl	800c524 <ld_clust>
 800d438:	4602      	mov	r2, r0
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d43e:	e7bb      	b.n	800d3b8 <follow_path+0x50>
			if (res != FR_OK) break;
 800d440:	bf00      	nop
 800d442:	e002      	b.n	800d44a <follow_path+0xe2>
				break;
 800d444:	bf00      	nop
 800d446:	e000      	b.n	800d44a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d448:	bf00      	nop
			}
		}
	}

	return res;
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3718      	adds	r7, #24
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d454:	b480      	push	{r7}
 800d456:	b087      	sub	sp, #28
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d45c:	f04f 33ff 	mov.w	r3, #4294967295
 800d460:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d031      	beq.n	800d4ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	617b      	str	r3, [r7, #20]
 800d470:	e002      	b.n	800d478 <get_ldnumber+0x24>
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	3301      	adds	r3, #1
 800d476:	617b      	str	r3, [r7, #20]
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	2b1f      	cmp	r3, #31
 800d47e:	d903      	bls.n	800d488 <get_ldnumber+0x34>
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	2b3a      	cmp	r3, #58	; 0x3a
 800d486:	d1f4      	bne.n	800d472 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	2b3a      	cmp	r3, #58	; 0x3a
 800d48e:	d11c      	bne.n	800d4ca <get_ldnumber+0x76>
			tp = *path;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	1c5a      	adds	r2, r3, #1
 800d49a:	60fa      	str	r2, [r7, #12]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	3b30      	subs	r3, #48	; 0x30
 800d4a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	2b09      	cmp	r3, #9
 800d4a6:	d80e      	bhi.n	800d4c6 <get_ldnumber+0x72>
 800d4a8:	68fa      	ldr	r2, [r7, #12]
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d10a      	bne.n	800d4c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d107      	bne.n	800d4c6 <get_ldnumber+0x72>
					vol = (int)i;
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	617b      	str	r3, [r7, #20]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	697a      	ldr	r2, [r7, #20]
 800d4c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	e002      	b.n	800d4d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d4ce:	693b      	ldr	r3, [r7, #16]
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	371c      	adds	r7, #28
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	70da      	strb	r2, [r3, #3]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d4f4:	6839      	ldr	r1, [r7, #0]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f7fe fa8c 	bl	800ba14 <move_window>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <check_fs+0x2a>
 800d502:	2304      	movs	r3, #4
 800d504:	e038      	b.n	800d578 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	333c      	adds	r3, #60	; 0x3c
 800d50a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fd ff9e 	bl	800b450 <ld_word>
 800d514:	4603      	mov	r3, r0
 800d516:	461a      	mov	r2, r3
 800d518:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d001      	beq.n	800d524 <check_fs+0x48>
 800d520:	2303      	movs	r3, #3
 800d522:	e029      	b.n	800d578 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d52a:	2be9      	cmp	r3, #233	; 0xe9
 800d52c:	d009      	beq.n	800d542 <check_fs+0x66>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d534:	2beb      	cmp	r3, #235	; 0xeb
 800d536:	d11e      	bne.n	800d576 <check_fs+0x9a>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d53e:	2b90      	cmp	r3, #144	; 0x90
 800d540:	d119      	bne.n	800d576 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	333c      	adds	r3, #60	; 0x3c
 800d546:	3336      	adds	r3, #54	; 0x36
 800d548:	4618      	mov	r0, r3
 800d54a:	f7fd ff99 	bl	800b480 <ld_dword>
 800d54e:	4603      	mov	r3, r0
 800d550:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d554:	4a0a      	ldr	r2, [pc, #40]	; (800d580 <check_fs+0xa4>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d101      	bne.n	800d55e <check_fs+0x82>
 800d55a:	2300      	movs	r3, #0
 800d55c:	e00c      	b.n	800d578 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	333c      	adds	r3, #60	; 0x3c
 800d562:	3352      	adds	r3, #82	; 0x52
 800d564:	4618      	mov	r0, r3
 800d566:	f7fd ff8b 	bl	800b480 <ld_dword>
 800d56a:	4603      	mov	r3, r0
 800d56c:	4a05      	ldr	r2, [pc, #20]	; (800d584 <check_fs+0xa8>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d101      	bne.n	800d576 <check_fs+0x9a>
 800d572:	2300      	movs	r3, #0
 800d574:	e000      	b.n	800d578 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d576:	2302      	movs	r3, #2
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	00544146 	.word	0x00544146
 800d584:	33544146 	.word	0x33544146

0800d588 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b096      	sub	sp, #88	; 0x58
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	4613      	mov	r3, r2
 800d594:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2200      	movs	r2, #0
 800d59a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	f7ff ff59 	bl	800d454 <get_ldnumber>
 800d5a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	da01      	bge.n	800d5ae <find_volume+0x26>
 800d5aa:	230b      	movs	r3, #11
 800d5ac:	e26c      	b.n	800da88 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d5ae:	4aa4      	ldr	r2, [pc, #656]	; (800d840 <find_volume+0x2b8>)
 800d5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d101      	bne.n	800d5c2 <find_volume+0x3a>
 800d5be:	230c      	movs	r3, #12
 800d5c0:	e262      	b.n	800da88 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800d5c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5c4:	f7fe f844 	bl	800b650 <lock_fs>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d101      	bne.n	800d5d2 <find_volume+0x4a>
 800d5ce:	230f      	movs	r3, #15
 800d5d0:	e25a      	b.n	800da88 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d5d8:	79fb      	ldrb	r3, [r7, #7]
 800d5da:	f023 0301 	bic.w	r3, r3, #1
 800d5de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d01a      	beq.n	800d61e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ea:	785b      	ldrb	r3, [r3, #1]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fd fe91 	bl	800b314 <disk_status>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d5f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10c      	bne.n	800d61e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d604:	79fb      	ldrb	r3, [r7, #7]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d007      	beq.n	800d61a <find_volume+0x92>
 800d60a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d60e:	f003 0304 	and.w	r3, r3, #4
 800d612:	2b00      	cmp	r3, #0
 800d614:	d001      	beq.n	800d61a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d616:	230a      	movs	r3, #10
 800d618:	e236      	b.n	800da88 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800d61a:	2300      	movs	r3, #0
 800d61c:	e234      	b.n	800da88 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d620:	2200      	movs	r2, #0
 800d622:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d626:	b2da      	uxtb	r2, r3
 800d628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62e:	785b      	ldrb	r3, [r3, #1]
 800d630:	4618      	mov	r0, r3
 800d632:	f7fd fe89 	bl	800b348 <disk_initialize>
 800d636:	4603      	mov	r3, r0
 800d638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d63c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d640:	f003 0301 	and.w	r3, r3, #1
 800d644:	2b00      	cmp	r3, #0
 800d646:	d001      	beq.n	800d64c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d648:	2303      	movs	r3, #3
 800d64a:	e21d      	b.n	800da88 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d64c:	79fb      	ldrb	r3, [r7, #7]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d007      	beq.n	800d662 <find_volume+0xda>
 800d652:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d656:	f003 0304 	and.w	r3, r3, #4
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d001      	beq.n	800d662 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d65e:	230a      	movs	r3, #10
 800d660:	e212      	b.n	800da88 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d664:	7858      	ldrb	r0, [r3, #1]
 800d666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d668:	330c      	adds	r3, #12
 800d66a:	461a      	mov	r2, r3
 800d66c:	2102      	movs	r1, #2
 800d66e:	f7fd fed1 	bl	800b414 <disk_ioctl>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d001      	beq.n	800d67c <find_volume+0xf4>
 800d678:	2301      	movs	r3, #1
 800d67a:	e205      	b.n	800da88 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67e:	899b      	ldrh	r3, [r3, #12]
 800d680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d684:	d80d      	bhi.n	800d6a2 <find_volume+0x11a>
 800d686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d688:	899b      	ldrh	r3, [r3, #12]
 800d68a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d68e:	d308      	bcc.n	800d6a2 <find_volume+0x11a>
 800d690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d692:	899b      	ldrh	r3, [r3, #12]
 800d694:	461a      	mov	r2, r3
 800d696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d698:	899b      	ldrh	r3, [r3, #12]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	4013      	ands	r3, r2
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d001      	beq.n	800d6a6 <find_volume+0x11e>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e1f0      	b.n	800da88 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d6aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6ae:	f7ff ff15 	bl	800d4dc <check_fs>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d6b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6bc:	2b02      	cmp	r3, #2
 800d6be:	d14b      	bne.n	800d758 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	643b      	str	r3, [r7, #64]	; 0x40
 800d6c4:	e01f      	b.n	800d706 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ce:	011b      	lsls	r3, r3, #4
 800d6d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d6d4:	4413      	add	r3, r2
 800d6d6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6da:	3304      	adds	r3, #4
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d006      	beq.n	800d6f0 <find_volume+0x168>
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	3308      	adds	r3, #8
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fd feca 	bl	800b480 <ld_dword>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	e000      	b.n	800d6f2 <find_volume+0x16a>
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d6fa:	440b      	add	r3, r1
 800d6fc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d702:	3301      	adds	r3, #1
 800d704:	643b      	str	r3, [r7, #64]	; 0x40
 800d706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d708:	2b03      	cmp	r3, #3
 800d70a:	d9dc      	bls.n	800d6c6 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d70c:	2300      	movs	r3, #0
 800d70e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d712:	2b00      	cmp	r3, #0
 800d714:	d002      	beq.n	800d71c <find_volume+0x194>
 800d716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d718:	3b01      	subs	r3, #1
 800d71a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d724:	4413      	add	r3, r2
 800d726:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d72a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d005      	beq.n	800d73e <find_volume+0x1b6>
 800d732:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d736:	f7ff fed1 	bl	800d4dc <check_fs>
 800d73a:	4603      	mov	r3, r0
 800d73c:	e000      	b.n	800d740 <find_volume+0x1b8>
 800d73e:	2303      	movs	r3, #3
 800d740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d905      	bls.n	800d758 <find_volume+0x1d0>
 800d74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d74e:	3301      	adds	r3, #1
 800d750:	643b      	str	r3, [r7, #64]	; 0x40
 800d752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d754:	2b03      	cmp	r3, #3
 800d756:	d9e1      	bls.n	800d71c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d75c:	2b04      	cmp	r3, #4
 800d75e:	d101      	bne.n	800d764 <find_volume+0x1dc>
 800d760:	2301      	movs	r3, #1
 800d762:	e191      	b.n	800da88 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d901      	bls.n	800d770 <find_volume+0x1e8>
 800d76c:	230d      	movs	r3, #13
 800d76e:	e18b      	b.n	800da88 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d772:	333c      	adds	r3, #60	; 0x3c
 800d774:	330b      	adds	r3, #11
 800d776:	4618      	mov	r0, r3
 800d778:	f7fd fe6a 	bl	800b450 <ld_word>
 800d77c:	4603      	mov	r3, r0
 800d77e:	461a      	mov	r2, r3
 800d780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d782:	899b      	ldrh	r3, [r3, #12]
 800d784:	429a      	cmp	r2, r3
 800d786:	d001      	beq.n	800d78c <find_volume+0x204>
 800d788:	230d      	movs	r3, #13
 800d78a:	e17d      	b.n	800da88 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78e:	333c      	adds	r3, #60	; 0x3c
 800d790:	3316      	adds	r3, #22
 800d792:	4618      	mov	r0, r3
 800d794:	f7fd fe5c 	bl	800b450 <ld_word>
 800d798:	4603      	mov	r3, r0
 800d79a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d79c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d106      	bne.n	800d7b0 <find_volume+0x228>
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a4:	333c      	adds	r3, #60	; 0x3c
 800d7a6:	3324      	adds	r3, #36	; 0x24
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fd fe69 	bl	800b480 <ld_dword>
 800d7ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7b4:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c2:	789b      	ldrb	r3, [r3, #2]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d005      	beq.n	800d7d4 <find_volume+0x24c>
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ca:	789b      	ldrb	r3, [r3, #2]
 800d7cc:	2b02      	cmp	r3, #2
 800d7ce:	d001      	beq.n	800d7d4 <find_volume+0x24c>
 800d7d0:	230d      	movs	r3, #13
 800d7d2:	e159      	b.n	800da88 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	789b      	ldrb	r3, [r3, #2]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7dc:	fb02 f303 	mul.w	r3, r2, r3
 800d7e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d7e8:	b29a      	uxth	r2, r3
 800d7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f0:	895b      	ldrh	r3, [r3, #10]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d008      	beq.n	800d808 <find_volume+0x280>
 800d7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f8:	895b      	ldrh	r3, [r3, #10]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fe:	895b      	ldrh	r3, [r3, #10]
 800d800:	3b01      	subs	r3, #1
 800d802:	4013      	ands	r3, r2
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <find_volume+0x284>
 800d808:	230d      	movs	r3, #13
 800d80a:	e13d      	b.n	800da88 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80e:	333c      	adds	r3, #60	; 0x3c
 800d810:	3311      	adds	r3, #17
 800d812:	4618      	mov	r0, r3
 800d814:	f7fd fe1c 	bl	800b450 <ld_word>
 800d818:	4603      	mov	r3, r0
 800d81a:	461a      	mov	r2, r3
 800d81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d822:	891b      	ldrh	r3, [r3, #8]
 800d824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d826:	8992      	ldrh	r2, [r2, #12]
 800d828:	0952      	lsrs	r2, r2, #5
 800d82a:	b292      	uxth	r2, r2
 800d82c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d830:	fb02 f201 	mul.w	r2, r2, r1
 800d834:	1a9b      	subs	r3, r3, r2
 800d836:	b29b      	uxth	r3, r3
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <find_volume+0x2bc>
 800d83c:	230d      	movs	r3, #13
 800d83e:	e123      	b.n	800da88 <find_volume+0x500>
 800d840:	200005e0 	.word	0x200005e0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d846:	333c      	adds	r3, #60	; 0x3c
 800d848:	3313      	adds	r3, #19
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fd fe00 	bl	800b450 <ld_word>
 800d850:	4603      	mov	r3, r0
 800d852:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d856:	2b00      	cmp	r3, #0
 800d858:	d106      	bne.n	800d868 <find_volume+0x2e0>
 800d85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85c:	333c      	adds	r3, #60	; 0x3c
 800d85e:	3320      	adds	r3, #32
 800d860:	4618      	mov	r0, r3
 800d862:	f7fd fe0d 	bl	800b480 <ld_dword>
 800d866:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86a:	333c      	adds	r3, #60	; 0x3c
 800d86c:	330e      	adds	r3, #14
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fd fdee 	bl	800b450 <ld_word>
 800d874:	4603      	mov	r3, r0
 800d876:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d878:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d101      	bne.n	800d882 <find_volume+0x2fa>
 800d87e:	230d      	movs	r3, #13
 800d880:	e102      	b.n	800da88 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d882:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d886:	4413      	add	r3, r2
 800d888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d88a:	8911      	ldrh	r1, [r2, #8]
 800d88c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d88e:	8992      	ldrh	r2, [r2, #12]
 800d890:	0952      	lsrs	r2, r2, #5
 800d892:	b292      	uxth	r2, r2
 800d894:	fbb1 f2f2 	udiv	r2, r1, r2
 800d898:	b292      	uxth	r2, r2
 800d89a:	4413      	add	r3, r2
 800d89c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d89e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d201      	bcs.n	800d8aa <find_volume+0x322>
 800d8a6:	230d      	movs	r3, #13
 800d8a8:	e0ee      	b.n	800da88 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d8aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8b2:	8952      	ldrh	r2, [r2, #10]
 800d8b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d101      	bne.n	800d8c4 <find_volume+0x33c>
 800d8c0:	230d      	movs	r3, #13
 800d8c2:	e0e1      	b.n	800da88 <find_volume+0x500>
		fmt = FS_FAT32;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d802      	bhi.n	800d8da <find_volume+0x352>
 800d8d4:	2302      	movs	r3, #2
 800d8d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d802      	bhi.n	800d8ea <find_volume+0x362>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	1c9a      	adds	r2, r3, #2
 800d8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800d8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8f6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d8f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d8fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8fc:	441a      	add	r2, r3
 800d8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d900:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800d902:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d906:	441a      	add	r2, r3
 800d908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90a:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800d90c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d910:	2b03      	cmp	r3, #3
 800d912:	d11e      	bne.n	800d952 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d916:	333c      	adds	r3, #60	; 0x3c
 800d918:	332a      	adds	r3, #42	; 0x2a
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fd fd98 	bl	800b450 <ld_word>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d001      	beq.n	800d92a <find_volume+0x3a2>
 800d926:	230d      	movs	r3, #13
 800d928:	e0ae      	b.n	800da88 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92c:	891b      	ldrh	r3, [r3, #8]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d001      	beq.n	800d936 <find_volume+0x3ae>
 800d932:	230d      	movs	r3, #13
 800d934:	e0a8      	b.n	800da88 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d938:	333c      	adds	r3, #60	; 0x3c
 800d93a:	332c      	adds	r3, #44	; 0x2c
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fd fd9f 	bl	800b480 <ld_dword>
 800d942:	4602      	mov	r2, r0
 800d944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d946:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94a:	6a1b      	ldr	r3, [r3, #32]
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	647b      	str	r3, [r7, #68]	; 0x44
 800d950:	e01f      	b.n	800d992 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d954:	891b      	ldrh	r3, [r3, #8]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <find_volume+0x3d6>
 800d95a:	230d      	movs	r3, #13
 800d95c:	e094      	b.n	800da88 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d964:	441a      	add	r2, r3
 800d966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d968:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d96a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d103      	bne.n	800d97a <find_volume+0x3f2>
 800d972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d974:	6a1b      	ldr	r3, [r3, #32]
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	e00a      	b.n	800d990 <find_volume+0x408>
 800d97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97c:	6a1a      	ldr	r2, [r3, #32]
 800d97e:	4613      	mov	r3, r2
 800d980:	005b      	lsls	r3, r3, #1
 800d982:	4413      	add	r3, r2
 800d984:	085a      	lsrs	r2, r3, #1
 800d986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d988:	6a1b      	ldr	r3, [r3, #32]
 800d98a:	f003 0301 	and.w	r3, r3, #1
 800d98e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d990:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d998:	899b      	ldrh	r3, [r3, #12]
 800d99a:	4619      	mov	r1, r3
 800d99c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d99e:	440b      	add	r3, r1
 800d9a0:	3b01      	subs	r3, #1
 800d9a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9a4:	8989      	ldrh	r1, [r1, #12]
 800d9a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d201      	bcs.n	800d9b2 <find_volume+0x42a>
 800d9ae:	230d      	movs	r3, #13
 800d9b0:	e06a      	b.n	800da88 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b8:	61da      	str	r2, [r3, #28]
 800d9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9bc:	69da      	ldr	r2, [r3, #28]
 800d9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800d9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c4:	2280      	movs	r2, #128	; 0x80
 800d9c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d9c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9cc:	2b03      	cmp	r3, #3
 800d9ce:	d149      	bne.n	800da64 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d2:	333c      	adds	r3, #60	; 0x3c
 800d9d4:	3330      	adds	r3, #48	; 0x30
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fd fd3a 	bl	800b450 <ld_word>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d140      	bne.n	800da64 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d9e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9ea:	f7fe f813 	bl	800ba14 <move_window>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d137      	bne.n	800da64 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800d9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fc:	333c      	adds	r3, #60	; 0x3c
 800d9fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800da02:	4618      	mov	r0, r3
 800da04:	f7fd fd24 	bl	800b450 <ld_word>
 800da08:	4603      	mov	r3, r0
 800da0a:	461a      	mov	r2, r3
 800da0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800da10:	429a      	cmp	r2, r3
 800da12:	d127      	bne.n	800da64 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da16:	333c      	adds	r3, #60	; 0x3c
 800da18:	4618      	mov	r0, r3
 800da1a:	f7fd fd31 	bl	800b480 <ld_dword>
 800da1e:	4603      	mov	r3, r0
 800da20:	4a1b      	ldr	r2, [pc, #108]	; (800da90 <find_volume+0x508>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d11e      	bne.n	800da64 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800da26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da28:	333c      	adds	r3, #60	; 0x3c
 800da2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fd fd26 	bl	800b480 <ld_dword>
 800da34:	4603      	mov	r3, r0
 800da36:	4a17      	ldr	r2, [pc, #92]	; (800da94 <find_volume+0x50c>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d113      	bne.n	800da64 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800da3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3e:	333c      	adds	r3, #60	; 0x3c
 800da40:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800da44:	4618      	mov	r0, r3
 800da46:	f7fd fd1b 	bl	800b480 <ld_dword>
 800da4a:	4602      	mov	r2, r0
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800da50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da52:	333c      	adds	r3, #60	; 0x3c
 800da54:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fd fd11 	bl	800b480 <ld_dword>
 800da5e:	4602      	mov	r2, r0
 800da60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da62:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800da64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da66:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800da6a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800da6c:	4b0a      	ldr	r3, [pc, #40]	; (800da98 <find_volume+0x510>)
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	3301      	adds	r3, #1
 800da72:	b29a      	uxth	r2, r3
 800da74:	4b08      	ldr	r3, [pc, #32]	; (800da98 <find_volume+0x510>)
 800da76:	801a      	strh	r2, [r3, #0]
 800da78:	4b07      	ldr	r3, [pc, #28]	; (800da98 <find_volume+0x510>)
 800da7a:	881a      	ldrh	r2, [r3, #0]
 800da7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800da80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da82:	f7fd ff5f 	bl	800b944 <clear_lock>
#endif
	return FR_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3758      	adds	r7, #88	; 0x58
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	41615252 	.word	0x41615252
 800da94:	61417272 	.word	0x61417272
 800da98:	200005e4 	.word	0x200005e4

0800da9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800daa6:	2309      	movs	r3, #9
 800daa8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d02e      	beq.n	800db0e <validate+0x72>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d02a      	beq.n	800db0e <validate+0x72>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d025      	beq.n	800db0e <validate+0x72>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	889a      	ldrh	r2, [r3, #4]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	88db      	ldrh	r3, [r3, #6]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d11e      	bne.n	800db0e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7fd fdbb 	bl	800b650 <lock_fs>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d014      	beq.n	800db0a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	785b      	ldrb	r3, [r3, #1]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fd fc14 	bl	800b314 <disk_status>
 800daec:	4603      	mov	r3, r0
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d102      	bne.n	800dafc <validate+0x60>
				res = FR_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	73fb      	strb	r3, [r7, #15]
 800dafa:	e008      	b.n	800db0e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2100      	movs	r1, #0
 800db02:	4618      	mov	r0, r3
 800db04:	f7fd fdba 	bl	800b67c <unlock_fs>
 800db08:	e001      	b.n	800db0e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800db0a:	230f      	movs	r3, #15
 800db0c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800db0e:	7bfb      	ldrb	r3, [r7, #15]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d102      	bne.n	800db1a <validate+0x7e>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	e000      	b.n	800db1c <validate+0x80>
 800db1a:	2300      	movs	r3, #0
 800db1c:	683a      	ldr	r2, [r7, #0]
 800db1e:	6013      	str	r3, [r2, #0]
	return res;
 800db20:	7bfb      	ldrb	r3, [r7, #15]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
	...

0800db2c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b088      	sub	sp, #32
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	4613      	mov	r3, r2
 800db38:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800db3e:	f107 0310 	add.w	r3, r7, #16
 800db42:	4618      	mov	r0, r3
 800db44:	f7ff fc86 	bl	800d454 <get_ldnumber>
 800db48:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	da01      	bge.n	800db54 <f_mount+0x28>
 800db50:	230b      	movs	r3, #11
 800db52:	e048      	b.n	800dbe6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800db54:	4a26      	ldr	r2, [pc, #152]	; (800dbf0 <f_mount+0xc4>)
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db5c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00f      	beq.n	800db84 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800db64:	69b8      	ldr	r0, [r7, #24]
 800db66:	f7fd feed 	bl	800b944 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	4618      	mov	r0, r3
 800db70:	f001 f95c 	bl	800ee2c <ff_del_syncobj>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d101      	bne.n	800db7e <f_mount+0x52>
 800db7a:	2302      	movs	r3, #2
 800db7c:	e033      	b.n	800dbe6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	2200      	movs	r2, #0
 800db82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00f      	beq.n	800dbaa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2200      	movs	r2, #0
 800db8e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	b2da      	uxtb	r2, r3
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	3314      	adds	r3, #20
 800db98:	4619      	mov	r1, r3
 800db9a:	4610      	mov	r0, r2
 800db9c:	f001 f926 	bl	800edec <ff_cre_syncobj>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <f_mount+0x7e>
 800dba6:	2302      	movs	r3, #2
 800dba8:	e01d      	b.n	800dbe6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dbaa:	68fa      	ldr	r2, [r7, #12]
 800dbac:	4910      	ldr	r1, [pc, #64]	; (800dbf0 <f_mount+0xc4>)
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d002      	beq.n	800dbc0 <f_mount+0x94>
 800dbba:	79fb      	ldrb	r3, [r7, #7]
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d001      	beq.n	800dbc4 <f_mount+0x98>
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	e010      	b.n	800dbe6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dbc4:	f107 010c 	add.w	r1, r7, #12
 800dbc8:	f107 0308 	add.w	r3, r7, #8
 800dbcc:	2200      	movs	r2, #0
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff fcda 	bl	800d588 <find_volume>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	7dfa      	ldrb	r2, [r7, #23]
 800dbdc:	4611      	mov	r1, r2
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fd fd4c 	bl	800b67c <unlock_fs>
 800dbe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3720      	adds	r7, #32
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	200005e0 	.word	0x200005e0

0800dbf4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	f107 030c 	add.w	r3, r7, #12
 800dc00:	6018      	str	r0, [r3, #0]
 800dc02:	f107 0308 	add.w	r3, r7, #8
 800dc06:	6019      	str	r1, [r3, #0]
 800dc08:	1dfb      	adds	r3, r7, #7
 800dc0a:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dc0c:	f107 030c 	add.w	r3, r7, #12
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d101      	bne.n	800dc1a <f_open+0x26>
 800dc16:	2309      	movs	r3, #9
 800dc18:	e24a      	b.n	800e0b0 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dc1a:	1dfb      	adds	r3, r7, #7
 800dc1c:	1dfa      	adds	r2, r7, #7
 800dc1e:	7812      	ldrb	r2, [r2, #0]
 800dc20:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800dc24:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800dc26:	1dfb      	adds	r3, r7, #7
 800dc28:	781a      	ldrb	r2, [r3, #0]
 800dc2a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800dc2e:	f107 0308 	add.w	r3, r7, #8
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7ff fca8 	bl	800d588 <find_volume>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800dc3e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f040 8221 	bne.w	800e08a <f_open+0x496>
		dj.obj.fs = fs;
 800dc48:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dc4c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800dc50:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dc54:	f107 0214 	add.w	r2, r7, #20
 800dc58:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800dc5a:	f107 0308 	add.w	r3, r7, #8
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dc64:	4611      	mov	r1, r2
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7ff fb7e 	bl	800d368 <follow_path>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dc72:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d11b      	bne.n	800dcb2 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dc7a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800dc7e:	b25b      	sxtb	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	da03      	bge.n	800dc8c <f_open+0x98>
				res = FR_INVALID_NAME;
 800dc84:	2306      	movs	r3, #6
 800dc86:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800dc8a:	e012      	b.n	800dcb2 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc8c:	1dfb      	adds	r3, r7, #7
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	f023 0301 	bic.w	r3, r3, #1
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	bf14      	ite	ne
 800dc98:	2301      	movne	r3, #1
 800dc9a:	2300      	moveq	r3, #0
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	461a      	mov	r2, r3
 800dca0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dca4:	4611      	mov	r1, r2
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fd fd04 	bl	800b6b4 <chk_lock>
 800dcac:	4603      	mov	r3, r0
 800dcae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dcb2:	1dfb      	adds	r3, r7, #7
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	f003 031c 	and.w	r3, r3, #28
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f000 809b 	beq.w	800ddf6 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800dcc0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d019      	beq.n	800dcfc <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dcc8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dccc:	2b04      	cmp	r3, #4
 800dcce:	d10e      	bne.n	800dcee <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dcd0:	f7fd fd4c 	bl	800b76c <enq_lock>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d006      	beq.n	800dce8 <f_open+0xf4>
 800dcda:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fe ffb4 	bl	800cc4c <dir_register>
 800dce4:	4603      	mov	r3, r0
 800dce6:	e000      	b.n	800dcea <f_open+0xf6>
 800dce8:	2312      	movs	r3, #18
 800dcea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dcee:	1dfb      	adds	r3, r7, #7
 800dcf0:	1dfa      	adds	r2, r7, #7
 800dcf2:	7812      	ldrb	r2, [r2, #0]
 800dcf4:	f042 0208 	orr.w	r2, r2, #8
 800dcf8:	701a      	strb	r2, [r3, #0]
 800dcfa:	e012      	b.n	800dd22 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dcfc:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800dd00:	f003 0311 	and.w	r3, r3, #17
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d003      	beq.n	800dd10 <f_open+0x11c>
					res = FR_DENIED;
 800dd08:	2307      	movs	r3, #7
 800dd0a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800dd0e:	e008      	b.n	800dd22 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dd10:	1dfb      	adds	r3, r7, #7
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	f003 0304 	and.w	r3, r3, #4
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <f_open+0x12e>
 800dd1c:	2308      	movs	r3, #8
 800dd1e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dd22:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f040 8082 	bne.w	800de30 <f_open+0x23c>
 800dd2c:	1dfb      	adds	r3, r7, #7
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	f003 0308 	and.w	r3, r3, #8
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d07b      	beq.n	800de30 <f_open+0x23c>
				dw = GET_FATTIME();
 800dd38:	f7fd fa8a 	bl	800b250 <get_fattime>
 800dd3c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dd40:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800dd44:	330e      	adds	r3, #14
 800dd46:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fd fbd6 	bl	800b4fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dd50:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800dd54:	3316      	adds	r3, #22
 800dd56:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fd fbce 	bl	800b4fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dd60:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800dd64:	330b      	adds	r3, #11
 800dd66:	2220      	movs	r2, #32
 800dd68:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dd6a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dd6e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800dd72:	4611      	mov	r1, r2
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7fe fbd5 	bl	800c524 <ld_clust>
 800dd7a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dd7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dd82:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800dd86:	2200      	movs	r2, #0
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fe fbea 	bl	800c562 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dd8e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800dd92:	331c      	adds	r3, #28
 800dd94:	2100      	movs	r1, #0
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fd fbb0 	bl	800b4fc <st_dword>
					fs->wflag = 1;
 800dd9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dda0:	2201      	movs	r2, #1
 800dda2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dda4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d041      	beq.n	800de30 <f_open+0x23c>
						dw = fs->winsect;
 800ddac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ddb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800ddb6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fe f8d4 	bl	800bf6e <remove_chain>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800ddcc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d12d      	bne.n	800de30 <f_open+0x23c>
							res = move_window(fs, dw);
 800ddd4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ddd8:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fd fe19 	bl	800ba14 <move_window>
 800dde2:	4603      	mov	r3, r0
 800dde4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dde8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ddec:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800ddf0:	3a01      	subs	r2, #1
 800ddf2:	619a      	str	r2, [r3, #24]
 800ddf4:	e01c      	b.n	800de30 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ddf6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d118      	bne.n	800de30 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ddfe:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800de02:	f003 0310 	and.w	r3, r3, #16
 800de06:	2b00      	cmp	r3, #0
 800de08:	d003      	beq.n	800de12 <f_open+0x21e>
					res = FR_NO_FILE;
 800de0a:	2304      	movs	r3, #4
 800de0c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800de10:	e00e      	b.n	800de30 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800de12:	1dfb      	adds	r3, r7, #7
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	f003 0302 	and.w	r3, r3, #2
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d008      	beq.n	800de30 <f_open+0x23c>
 800de1e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800de22:	f003 0301 	and.w	r3, r3, #1
 800de26:	2b00      	cmp	r3, #0
 800de28:	d002      	beq.n	800de30 <f_open+0x23c>
						res = FR_DENIED;
 800de2a:	2307      	movs	r3, #7
 800de2c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800de30:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800de34:	2b00      	cmp	r3, #0
 800de36:	d136      	bne.n	800dea6 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800de38:	1dfb      	adds	r3, r7, #7
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	f003 0308 	and.w	r3, r3, #8
 800de40:	2b00      	cmp	r3, #0
 800de42:	d005      	beq.n	800de50 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800de44:	1dfb      	adds	r3, r7, #7
 800de46:	1dfa      	adds	r2, r7, #7
 800de48:	7812      	ldrb	r2, [r2, #0]
 800de4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de4e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800de50:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800de54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de56:	f107 030c 	add.w	r3, r7, #12
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800de5e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800de62:	f107 030c 	add.w	r3, r7, #12
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de6a:	1dfb      	adds	r3, r7, #7
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	f023 0301 	bic.w	r3, r3, #1
 800de72:	2b00      	cmp	r3, #0
 800de74:	bf14      	ite	ne
 800de76:	2301      	movne	r3, #1
 800de78:	2300      	moveq	r3, #0
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	461a      	mov	r2, r3
 800de7e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800de82:	4611      	mov	r1, r2
 800de84:	4618      	mov	r0, r3
 800de86:	f7fd fc93 	bl	800b7b0 <inc_lock>
 800de8a:	4602      	mov	r2, r0
 800de8c:	f107 030c 	add.w	r3, r7, #12
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800de94:	f107 030c 	add.w	r3, r7, #12
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	691b      	ldr	r3, [r3, #16]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d102      	bne.n	800dea6 <f_open+0x2b2>
 800dea0:	2302      	movs	r3, #2
 800dea2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dea6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f040 80ed 	bne.w	800e08a <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800deb0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800deb4:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800deb8:	4611      	mov	r1, r2
 800deba:	4618      	mov	r0, r3
 800debc:	f7fe fb32 	bl	800c524 <ld_clust>
 800dec0:	4602      	mov	r2, r0
 800dec2:	f107 030c 	add.w	r3, r7, #12
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800deca:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800dece:	331c      	adds	r3, #28
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fd fad5 	bl	800b480 <ld_dword>
 800ded6:	4602      	mov	r2, r0
 800ded8:	f107 030c 	add.w	r3, r7, #12
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dee0:	f107 030c 	add.w	r3, r7, #12
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2200      	movs	r2, #0
 800dee8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800deea:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800deee:	f107 030c 	add.w	r3, r7, #12
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800def6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800defa:	88da      	ldrh	r2, [r3, #6]
 800defc:	f107 030c 	add.w	r3, r7, #12
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800df04:	f107 030c 	add.w	r3, r7, #12
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	1dfa      	adds	r2, r7, #7
 800df0c:	7812      	ldrb	r2, [r2, #0]
 800df0e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800df10:	f107 030c 	add.w	r3, r7, #12
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2200      	movs	r2, #0
 800df18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800df1a:	f107 030c 	add.w	r3, r7, #12
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2200      	movs	r2, #0
 800df22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800df24:	f107 030c 	add.w	r3, r7, #12
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2200      	movs	r2, #0
 800df2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800df2e:	f107 030c 	add.w	r3, r7, #12
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3330      	adds	r3, #48	; 0x30
 800df36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800df3a:	2100      	movs	r1, #0
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7fd fb2a 	bl	800b596 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800df42:	1dfb      	adds	r3, r7, #7
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	f003 0320 	and.w	r3, r3, #32
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f000 809d 	beq.w	800e08a <f_open+0x496>
 800df50:	f107 030c 	add.w	r3, r7, #12
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 8096 	beq.w	800e08a <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800df5e:	f107 030c 	add.w	r3, r7, #12
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68da      	ldr	r2, [r3, #12]
 800df66:	f107 030c 	add.w	r3, r7, #12
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800df6e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800df72:	895b      	ldrh	r3, [r3, #10]
 800df74:	461a      	mov	r2, r3
 800df76:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800df7a:	899b      	ldrh	r3, [r3, #12]
 800df7c:	fb03 f302 	mul.w	r3, r3, r2
 800df80:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800df84:	f107 030c 	add.w	r3, r7, #12
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df90:	f107 030c 	add.w	r3, r7, #12
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800df9c:	e01f      	b.n	800dfde <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 800df9e:	f107 030c 	add.w	r3, r7, #12
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fd fdf0 	bl	800bb8e <get_fat>
 800dfae:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800dfb2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d802      	bhi.n	800dfc0 <f_open+0x3cc>
 800dfba:	2302      	movs	r3, #2
 800dfbc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dfc0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800dfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc8:	d102      	bne.n	800dfd0 <f_open+0x3dc>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dfd0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800dfd4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800dfd8:	1ad3      	subs	r3, r2, r3
 800dfda:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800dfde:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d105      	bne.n	800dff2 <f_open+0x3fe>
 800dfe6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800dfea:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d8d5      	bhi.n	800df9e <f_open+0x3aa>
				}
				fp->clust = clst;
 800dff2:	f107 030c 	add.w	r3, r7, #12
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800dffc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dffe:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e002:	2b00      	cmp	r3, #0
 800e004:	d141      	bne.n	800e08a <f_open+0x496>
 800e006:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e00a:	899b      	ldrh	r3, [r3, #12]
 800e00c:	461a      	mov	r2, r3
 800e00e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e012:	fbb3 f1f2 	udiv	r1, r3, r2
 800e016:	fb02 f201 	mul.w	r2, r2, r1
 800e01a:	1a9b      	subs	r3, r3, r2
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d034      	beq.n	800e08a <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e020:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e024:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fd fd91 	bl	800bb50 <clust2sect>
 800e02e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800e032:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e036:	2b00      	cmp	r3, #0
 800e038:	d103      	bne.n	800e042 <f_open+0x44e>
						res = FR_INT_ERR;
 800e03a:	2302      	movs	r3, #2
 800e03c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e040:	e023      	b.n	800e08a <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e042:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e046:	899b      	ldrh	r3, [r3, #12]
 800e048:	461a      	mov	r2, r3
 800e04a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e04e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e052:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e056:	441a      	add	r2, r3
 800e058:	f107 030c 	add.w	r3, r7, #12
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e060:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e064:	7858      	ldrb	r0, [r3, #1]
 800e066:	f107 030c 	add.w	r3, r7, #12
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e070:	f107 030c 	add.w	r3, r7, #12
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	6a1a      	ldr	r2, [r3, #32]
 800e078:	2301      	movs	r3, #1
 800e07a:	f7fd f98b 	bl	800b394 <disk_read>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <f_open+0x496>
 800e084:	2301      	movs	r3, #1
 800e086:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e08a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d004      	beq.n	800e09c <f_open+0x4a8>
 800e092:	f107 030c 	add.w	r3, r7, #12
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2200      	movs	r2, #0
 800e09a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e09c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e0a0:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800e0a4:	4611      	mov	r1, r2
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fd fae8 	bl	800b67c <unlock_fs>
 800e0ac:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b08e      	sub	sp, #56	; 0x38
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	60f8      	str	r0, [r7, #12]
 800e0c2:	60b9      	str	r1, [r7, #8]
 800e0c4:	607a      	str	r2, [r7, #4]
 800e0c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f107 0214 	add.w	r2, r7, #20
 800e0d8:	4611      	mov	r1, r2
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7ff fcde 	bl	800da9c <validate>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e0e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d107      	bne.n	800e0fe <f_read+0x44>
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	7d5b      	ldrb	r3, [r3, #21]
 800e0f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d009      	beq.n	800e112 <f_read+0x58>
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e104:	4611      	mov	r1, r2
 800e106:	4618      	mov	r0, r3
 800e108:	f7fd fab8 	bl	800b67c <unlock_fs>
 800e10c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e110:	e15d      	b.n	800e3ce <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	7d1b      	ldrb	r3, [r3, #20]
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d106      	bne.n	800e12c <f_read+0x72>
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	2107      	movs	r1, #7
 800e122:	4618      	mov	r0, r3
 800e124:	f7fd faaa 	bl	800b67c <unlock_fs>
 800e128:	2307      	movs	r3, #7
 800e12a:	e150      	b.n	800e3ce <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	68da      	ldr	r2, [r3, #12]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	699b      	ldr	r3, [r3, #24]
 800e134:	1ad3      	subs	r3, r2, r3
 800e136:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	6a3b      	ldr	r3, [r7, #32]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	f240 813c 	bls.w	800e3ba <f_read+0x300>
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e146:	e138      	b.n	800e3ba <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	697a      	ldr	r2, [r7, #20]
 800e14e:	8992      	ldrh	r2, [r2, #12]
 800e150:	fbb3 f1f2 	udiv	r1, r3, r2
 800e154:	fb02 f201 	mul.w	r2, r2, r1
 800e158:	1a9b      	subs	r3, r3, r2
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f040 80f3 	bne.w	800e346 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	699b      	ldr	r3, [r3, #24]
 800e164:	697a      	ldr	r2, [r7, #20]
 800e166:	8992      	ldrh	r2, [r2, #12]
 800e168:	fbb3 f3f2 	udiv	r3, r3, r2
 800e16c:	697a      	ldr	r2, [r7, #20]
 800e16e:	8952      	ldrh	r2, [r2, #10]
 800e170:	3a01      	subs	r2, #1
 800e172:	4013      	ands	r3, r2
 800e174:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d139      	bne.n	800e1f0 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d103      	bne.n	800e18c <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	633b      	str	r3, [r7, #48]	; 0x30
 800e18a:	e013      	b.n	800e1b4 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e190:	2b00      	cmp	r3, #0
 800e192:	d007      	beq.n	800e1a4 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	699b      	ldr	r3, [r3, #24]
 800e198:	4619      	mov	r1, r3
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f7fd ffe4 	bl	800c168 <clmt_clust>
 800e1a0:	6338      	str	r0, [r7, #48]	; 0x30
 800e1a2:	e007      	b.n	800e1b4 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e1a4:	68fa      	ldr	r2, [r7, #12]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	69db      	ldr	r3, [r3, #28]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	4610      	mov	r0, r2
 800e1ae:	f7fd fcee 	bl	800bb8e <get_fat>
 800e1b2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d809      	bhi.n	800e1ce <f_read+0x114>
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2202      	movs	r2, #2
 800e1be:	755a      	strb	r2, [r3, #21]
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	2102      	movs	r1, #2
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fd fa59 	bl	800b67c <unlock_fs>
 800e1ca:	2302      	movs	r3, #2
 800e1cc:	e0ff      	b.n	800e3ce <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1d4:	d109      	bne.n	800e1ea <f_read+0x130>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	755a      	strb	r2, [r3, #21]
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	2101      	movs	r1, #1
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fd fa4b 	bl	800b67c <unlock_fs>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e0f1      	b.n	800e3ce <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1ee:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e1f0:	697a      	ldr	r2, [r7, #20]
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	69db      	ldr	r3, [r3, #28]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	4610      	mov	r0, r2
 800e1fa:	f7fd fca9 	bl	800bb50 <clust2sect>
 800e1fe:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d109      	bne.n	800e21a <f_read+0x160>
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2202      	movs	r2, #2
 800e20a:	755a      	strb	r2, [r3, #21]
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	2102      	movs	r1, #2
 800e210:	4618      	mov	r0, r3
 800e212:	f7fd fa33 	bl	800b67c <unlock_fs>
 800e216:	2302      	movs	r3, #2
 800e218:	e0d9      	b.n	800e3ce <f_read+0x314>
			sect += csect;
 800e21a:	69ba      	ldr	r2, [r7, #24]
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	4413      	add	r3, r2
 800e220:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	899b      	ldrh	r3, [r3, #12]
 800e226:	461a      	mov	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e22e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e232:	2b00      	cmp	r3, #0
 800e234:	d046      	beq.n	800e2c4 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	4413      	add	r3, r2
 800e23c:	697a      	ldr	r2, [r7, #20]
 800e23e:	8952      	ldrh	r2, [r2, #10]
 800e240:	4293      	cmp	r3, r2
 800e242:	d905      	bls.n	800e250 <f_read+0x196>
					cc = fs->csize - csect;
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	895b      	ldrh	r3, [r3, #10]
 800e248:	461a      	mov	r2, r3
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	7858      	ldrb	r0, [r3, #1]
 800e254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e256:	69ba      	ldr	r2, [r7, #24]
 800e258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e25a:	f7fd f89b 	bl	800b394 <disk_read>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d009      	beq.n	800e278 <f_read+0x1be>
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2201      	movs	r2, #1
 800e268:	755a      	strb	r2, [r3, #21]
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	2101      	movs	r1, #1
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fd fa04 	bl	800b67c <unlock_fs>
 800e274:	2301      	movs	r3, #1
 800e276:	e0aa      	b.n	800e3ce <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	7d1b      	ldrb	r3, [r3, #20]
 800e27c:	b25b      	sxtb	r3, r3
 800e27e:	2b00      	cmp	r3, #0
 800e280:	da18      	bge.n	800e2b4 <f_read+0x1fa>
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	6a1a      	ldr	r2, [r3, #32]
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d911      	bls.n	800e2b4 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6a1a      	ldr	r2, [r3, #32]
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	1ad3      	subs	r3, r2, r3
 800e298:	697a      	ldr	r2, [r7, #20]
 800e29a:	8992      	ldrh	r2, [r2, #12]
 800e29c:	fb02 f303 	mul.w	r3, r2, r3
 800e2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2a2:	18d0      	adds	r0, r2, r3
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	899b      	ldrh	r3, [r3, #12]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	f7fd f950 	bl	800b554 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	899b      	ldrh	r3, [r3, #12]
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2bc:	fb02 f303 	mul.w	r3, r2, r3
 800e2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e2c2:	e066      	b.n	800e392 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6a1b      	ldr	r3, [r3, #32]
 800e2c8:	69ba      	ldr	r2, [r7, #24]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d038      	beq.n	800e340 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	7d1b      	ldrb	r3, [r3, #20]
 800e2d2:	b25b      	sxtb	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	da1d      	bge.n	800e314 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	7858      	ldrb	r0, [r3, #1]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	6a1a      	ldr	r2, [r3, #32]
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	f7fd f874 	bl	800b3d4 <disk_write>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d009      	beq.n	800e306 <f_read+0x24c>
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	755a      	strb	r2, [r3, #21]
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	2101      	movs	r1, #1
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7fd f9bd 	bl	800b67c <unlock_fs>
 800e302:	2301      	movs	r3, #1
 800e304:	e063      	b.n	800e3ce <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	7d1b      	ldrb	r3, [r3, #20]
 800e30a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e30e:	b2da      	uxtb	r2, r3
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	7858      	ldrb	r0, [r3, #1]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e31e:	2301      	movs	r3, #1
 800e320:	69ba      	ldr	r2, [r7, #24]
 800e322:	f7fd f837 	bl	800b394 <disk_read>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d009      	beq.n	800e340 <f_read+0x286>
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2201      	movs	r2, #1
 800e330:	755a      	strb	r2, [r3, #21]
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	2101      	movs	r1, #1
 800e336:	4618      	mov	r0, r3
 800e338:	f7fd f9a0 	bl	800b67c <unlock_fs>
 800e33c:	2301      	movs	r3, #1
 800e33e:	e046      	b.n	800e3ce <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	69ba      	ldr	r2, [r7, #24]
 800e344:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	899b      	ldrh	r3, [r3, #12]
 800e34a:	4618      	mov	r0, r3
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	699b      	ldr	r3, [r3, #24]
 800e350:	697a      	ldr	r2, [r7, #20]
 800e352:	8992      	ldrh	r2, [r2, #12]
 800e354:	fbb3 f1f2 	udiv	r1, r3, r2
 800e358:	fb02 f201 	mul.w	r2, r2, r1
 800e35c:	1a9b      	subs	r3, r3, r2
 800e35e:	1ac3      	subs	r3, r0, r3
 800e360:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	429a      	cmp	r2, r3
 800e368:	d901      	bls.n	800e36e <f_read+0x2b4>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	699b      	ldr	r3, [r3, #24]
 800e378:	697a      	ldr	r2, [r7, #20]
 800e37a:	8992      	ldrh	r2, [r2, #12]
 800e37c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e380:	fb02 f200 	mul.w	r2, r2, r0
 800e384:	1a9b      	subs	r3, r3, r2
 800e386:	440b      	add	r3, r1
 800e388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e38a:	4619      	mov	r1, r3
 800e38c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e38e:	f7fd f8e1 	bl	800b554 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e396:	4413      	add	r3, r2
 800e398:	627b      	str	r3, [r7, #36]	; 0x24
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	699a      	ldr	r2, [r3, #24]
 800e39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a0:	441a      	add	r2, r3
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	619a      	str	r2, [r3, #24]
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ac:	441a      	add	r2, r3
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	601a      	str	r2, [r3, #0]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b6:	1ad3      	subs	r3, r2, r3
 800e3b8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f47f aec3 	bne.w	800e148 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fd f958 	bl	800b67c <unlock_fs>
 800e3cc:	2300      	movs	r3, #0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3738      	adds	r7, #56	; 0x38
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b08c      	sub	sp, #48	; 0x30
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	60f8      	str	r0, [r7, #12]
 800e3de:	60b9      	str	r1, [r7, #8]
 800e3e0:	607a      	str	r2, [r7, #4]
 800e3e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f107 0210 	add.w	r2, r7, #16
 800e3f4:	4611      	mov	r1, r2
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7ff fb50 	bl	800da9c <validate>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e406:	2b00      	cmp	r3, #0
 800e408:	d107      	bne.n	800e41a <f_write+0x44>
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	7d5b      	ldrb	r3, [r3, #21]
 800e40e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e416:	2b00      	cmp	r3, #0
 800e418:	d009      	beq.n	800e42e <f_write+0x58>
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e420:	4611      	mov	r1, r2
 800e422:	4618      	mov	r0, r3
 800e424:	f7fd f92a 	bl	800b67c <unlock_fs>
 800e428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e42c:	e192      	b.n	800e754 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	7d1b      	ldrb	r3, [r3, #20]
 800e432:	f003 0302 	and.w	r3, r3, #2
 800e436:	2b00      	cmp	r3, #0
 800e438:	d106      	bne.n	800e448 <f_write+0x72>
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	2107      	movs	r1, #7
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fd f91c 	bl	800b67c <unlock_fs>
 800e444:	2307      	movs	r3, #7
 800e446:	e185      	b.n	800e754 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	699a      	ldr	r2, [r3, #24]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	441a      	add	r2, r3
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	699b      	ldr	r3, [r3, #24]
 800e454:	429a      	cmp	r2, r3
 800e456:	f080 816a 	bcs.w	800e72e <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	699b      	ldr	r3, [r3, #24]
 800e45e:	43db      	mvns	r3, r3
 800e460:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e462:	e164      	b.n	800e72e <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	699b      	ldr	r3, [r3, #24]
 800e468:	693a      	ldr	r2, [r7, #16]
 800e46a:	8992      	ldrh	r2, [r2, #12]
 800e46c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e470:	fb02 f201 	mul.w	r2, r2, r1
 800e474:	1a9b      	subs	r3, r3, r2
 800e476:	2b00      	cmp	r3, #0
 800e478:	f040 810f 	bne.w	800e69a <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	699b      	ldr	r3, [r3, #24]
 800e480:	693a      	ldr	r2, [r7, #16]
 800e482:	8992      	ldrh	r2, [r2, #12]
 800e484:	fbb3 f3f2 	udiv	r3, r3, r2
 800e488:	693a      	ldr	r2, [r7, #16]
 800e48a:	8952      	ldrh	r2, [r2, #10]
 800e48c:	3a01      	subs	r2, #1
 800e48e:	4013      	ands	r3, r2
 800e490:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d14d      	bne.n	800e534 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	699b      	ldr	r3, [r3, #24]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d10c      	bne.n	800e4ba <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d11a      	bne.n	800e4e2 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2100      	movs	r1, #0
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7fd fdc1 	bl	800c038 <create_chain>
 800e4b6:	62b8      	str	r0, [r7, #40]	; 0x28
 800e4b8:	e013      	b.n	800e4e2 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d007      	beq.n	800e4d2 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	699b      	ldr	r3, [r3, #24]
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f7fd fe4d 	bl	800c168 <clmt_clust>
 800e4ce:	62b8      	str	r0, [r7, #40]	; 0x28
 800e4d0:	e007      	b.n	800e4e2 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e4d2:	68fa      	ldr	r2, [r7, #12]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	69db      	ldr	r3, [r3, #28]
 800e4d8:	4619      	mov	r1, r3
 800e4da:	4610      	mov	r0, r2
 800e4dc:	f7fd fdac 	bl	800c038 <create_chain>
 800e4e0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 8127 	beq.w	800e738 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d109      	bne.n	800e504 <f_write+0x12e>
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2202      	movs	r2, #2
 800e4f4:	755a      	strb	r2, [r3, #21]
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	2102      	movs	r1, #2
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fd f8be 	bl	800b67c <unlock_fs>
 800e500:	2302      	movs	r3, #2
 800e502:	e127      	b.n	800e754 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e50a:	d109      	bne.n	800e520 <f_write+0x14a>
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2201      	movs	r2, #1
 800e510:	755a      	strb	r2, [r3, #21]
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	2101      	movs	r1, #1
 800e516:	4618      	mov	r0, r3
 800e518:	f7fd f8b0 	bl	800b67c <unlock_fs>
 800e51c:	2301      	movs	r3, #1
 800e51e:	e119      	b.n	800e754 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e524:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d102      	bne.n	800e534 <f_write+0x15e>
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e532:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	7d1b      	ldrb	r3, [r3, #20]
 800e538:	b25b      	sxtb	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	da1d      	bge.n	800e57a <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	7858      	ldrb	r0, [r3, #1]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6a1a      	ldr	r2, [r3, #32]
 800e54c:	2301      	movs	r3, #1
 800e54e:	f7fc ff41 	bl	800b3d4 <disk_write>
 800e552:	4603      	mov	r3, r0
 800e554:	2b00      	cmp	r3, #0
 800e556:	d009      	beq.n	800e56c <f_write+0x196>
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2201      	movs	r2, #1
 800e55c:	755a      	strb	r2, [r3, #21]
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	2101      	movs	r1, #1
 800e562:	4618      	mov	r0, r3
 800e564:	f7fd f88a 	bl	800b67c <unlock_fs>
 800e568:	2301      	movs	r3, #1
 800e56a:	e0f3      	b.n	800e754 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	7d1b      	ldrb	r3, [r3, #20]
 800e570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e574:	b2da      	uxtb	r2, r3
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	69db      	ldr	r3, [r3, #28]
 800e580:	4619      	mov	r1, r3
 800e582:	4610      	mov	r0, r2
 800e584:	f7fd fae4 	bl	800bb50 <clust2sect>
 800e588:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d109      	bne.n	800e5a4 <f_write+0x1ce>
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2202      	movs	r2, #2
 800e594:	755a      	strb	r2, [r3, #21]
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	2102      	movs	r1, #2
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fd f86e 	bl	800b67c <unlock_fs>
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	e0d7      	b.n	800e754 <f_write+0x37e>
			sect += csect;
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	899b      	ldrh	r3, [r3, #12]
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e5ba:	6a3b      	ldr	r3, [r7, #32]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d048      	beq.n	800e652 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e5c0:	69ba      	ldr	r2, [r7, #24]
 800e5c2:	6a3b      	ldr	r3, [r7, #32]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	693a      	ldr	r2, [r7, #16]
 800e5c8:	8952      	ldrh	r2, [r2, #10]
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d905      	bls.n	800e5da <f_write+0x204>
					cc = fs->csize - csect;
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	895b      	ldrh	r3, [r3, #10]
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	7858      	ldrb	r0, [r3, #1]
 800e5de:	6a3b      	ldr	r3, [r7, #32]
 800e5e0:	697a      	ldr	r2, [r7, #20]
 800e5e2:	69f9      	ldr	r1, [r7, #28]
 800e5e4:	f7fc fef6 	bl	800b3d4 <disk_write>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d009      	beq.n	800e602 <f_write+0x22c>
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	755a      	strb	r2, [r3, #21]
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	2101      	movs	r1, #1
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fd f83f 	bl	800b67c <unlock_fs>
 800e5fe:	2301      	movs	r3, #1
 800e600:	e0a8      	b.n	800e754 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	6a1a      	ldr	r2, [r3, #32]
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	1ad3      	subs	r3, r2, r3
 800e60a:	6a3a      	ldr	r2, [r7, #32]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d918      	bls.n	800e642 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6a1a      	ldr	r2, [r3, #32]
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	1ad3      	subs	r3, r2, r3
 800e61e:	693a      	ldr	r2, [r7, #16]
 800e620:	8992      	ldrh	r2, [r2, #12]
 800e622:	fb02 f303 	mul.w	r3, r2, r3
 800e626:	69fa      	ldr	r2, [r7, #28]
 800e628:	18d1      	adds	r1, r2, r3
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	899b      	ldrh	r3, [r3, #12]
 800e62e:	461a      	mov	r2, r3
 800e630:	f7fc ff90 	bl	800b554 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	7d1b      	ldrb	r3, [r3, #20]
 800e638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	899b      	ldrh	r3, [r3, #12]
 800e646:	461a      	mov	r2, r3
 800e648:	6a3b      	ldr	r3, [r7, #32]
 800e64a:	fb02 f303 	mul.w	r3, r2, r3
 800e64e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e650:	e050      	b.n	800e6f4 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6a1b      	ldr	r3, [r3, #32]
 800e656:	697a      	ldr	r2, [r7, #20]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d01b      	beq.n	800e694 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	699a      	ldr	r2, [r3, #24]
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e664:	429a      	cmp	r2, r3
 800e666:	d215      	bcs.n	800e694 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	7858      	ldrb	r0, [r3, #1]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e672:	2301      	movs	r3, #1
 800e674:	697a      	ldr	r2, [r7, #20]
 800e676:	f7fc fe8d 	bl	800b394 <disk_read>
 800e67a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d009      	beq.n	800e694 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2201      	movs	r2, #1
 800e684:	755a      	strb	r2, [r3, #21]
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	2101      	movs	r1, #1
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fc fff6 	bl	800b67c <unlock_fs>
 800e690:	2301      	movs	r3, #1
 800e692:	e05f      	b.n	800e754 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	697a      	ldr	r2, [r7, #20]
 800e698:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	899b      	ldrh	r3, [r3, #12]
 800e69e:	4618      	mov	r0, r3
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	699b      	ldr	r3, [r3, #24]
 800e6a4:	693a      	ldr	r2, [r7, #16]
 800e6a6:	8992      	ldrh	r2, [r2, #12]
 800e6a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6ac:	fb02 f201 	mul.w	r2, r2, r1
 800e6b0:	1a9b      	subs	r3, r3, r2
 800e6b2:	1ac3      	subs	r3, r0, r3
 800e6b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d901      	bls.n	800e6c2 <f_write+0x2ec>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	699b      	ldr	r3, [r3, #24]
 800e6cc:	693a      	ldr	r2, [r7, #16]
 800e6ce:	8992      	ldrh	r2, [r2, #12]
 800e6d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800e6d4:	fb02 f200 	mul.w	r2, r2, r0
 800e6d8:	1a9b      	subs	r3, r3, r2
 800e6da:	440b      	add	r3, r1
 800e6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6de:	69f9      	ldr	r1, [r7, #28]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7fc ff37 	bl	800b554 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	7d1b      	ldrb	r3, [r3, #20]
 800e6ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e6ee:	b2da      	uxtb	r2, r3
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e6f4:	69fa      	ldr	r2, [r7, #28]
 800e6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f8:	4413      	add	r3, r2
 800e6fa:	61fb      	str	r3, [r7, #28]
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	699a      	ldr	r2, [r3, #24]
 800e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e702:	441a      	add	r2, r3
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	619a      	str	r2, [r3, #24]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	68da      	ldr	r2, [r3, #12]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	699b      	ldr	r3, [r3, #24]
 800e710:	429a      	cmp	r2, r3
 800e712:	bf38      	it	cc
 800e714:	461a      	movcc	r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	60da      	str	r2, [r3, #12]
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	681a      	ldr	r2, [r3, #0]
 800e71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e720:	441a      	add	r2, r3
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	601a      	str	r2, [r3, #0]
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2b00      	cmp	r3, #0
 800e732:	f47f ae97 	bne.w	800e464 <f_write+0x8e>
 800e736:	e000      	b.n	800e73a <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e738:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	7d1b      	ldrb	r3, [r3, #20]
 800e73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e742:	b2da      	uxtb	r2, r3
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	2100      	movs	r1, #0
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7fc ff95 	bl	800b67c <unlock_fs>
 800e752:	2300      	movs	r3, #0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3730      	adds	r7, #48	; 0x30
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b086      	sub	sp, #24
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f107 0208 	add.w	r2, r7, #8
 800e76a:	4611      	mov	r1, r2
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7ff f995 	bl	800da9c <validate>
 800e772:	4603      	mov	r3, r0
 800e774:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e776:	7dfb      	ldrb	r3, [r7, #23]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d16d      	bne.n	800e858 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	7d1b      	ldrb	r3, [r3, #20]
 800e780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e784:	2b00      	cmp	r3, #0
 800e786:	d067      	beq.n	800e858 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	7d1b      	ldrb	r3, [r3, #20]
 800e78c:	b25b      	sxtb	r3, r3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	da1a      	bge.n	800e7c8 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	7858      	ldrb	r0, [r3, #1]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6a1a      	ldr	r2, [r3, #32]
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	f7fc fe17 	bl	800b3d4 <disk_write>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d006      	beq.n	800e7ba <f_sync+0x5e>
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	2101      	movs	r1, #1
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fc ff63 	bl	800b67c <unlock_fs>
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e055      	b.n	800e866 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	7d1b      	ldrb	r3, [r3, #20]
 800e7be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7c2:	b2da      	uxtb	r2, r3
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e7c8:	f7fc fd42 	bl	800b250 <get_fattime>
 800e7cc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	4610      	mov	r0, r2
 800e7d8:	f7fd f91c 	bl	800ba14 <move_window>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e7e0:	7dfb      	ldrb	r3, [r7, #23]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d138      	bne.n	800e858 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	330b      	adds	r3, #11
 800e7f0:	781a      	ldrb	r2, [r3, #0]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	330b      	adds	r3, #11
 800e7f6:	f042 0220 	orr.w	r2, r2, #32
 800e7fa:	b2d2      	uxtb	r2, r2
 800e7fc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6818      	ldr	r0, [r3, #0]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	461a      	mov	r2, r3
 800e808:	68f9      	ldr	r1, [r7, #12]
 800e80a:	f7fd feaa 	bl	800c562 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f103 021c 	add.w	r2, r3, #28
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	4619      	mov	r1, r3
 800e81a:	4610      	mov	r0, r2
 800e81c:	f7fc fe6e 	bl	800b4fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	3316      	adds	r3, #22
 800e824:	6939      	ldr	r1, [r7, #16]
 800e826:	4618      	mov	r0, r3
 800e828:	f7fc fe68 	bl	800b4fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	3312      	adds	r3, #18
 800e830:	2100      	movs	r1, #0
 800e832:	4618      	mov	r0, r3
 800e834:	f7fc fe47 	bl	800b4c6 <st_word>
					fs->wflag = 1;
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	2201      	movs	r2, #1
 800e83c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	4618      	mov	r0, r3
 800e842:	f7fd f915 	bl	800ba70 <sync_fs>
 800e846:	4603      	mov	r3, r0
 800e848:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	7d1b      	ldrb	r3, [r3, #20]
 800e84e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e852:	b2da      	uxtb	r2, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	7dfa      	ldrb	r2, [r7, #23]
 800e85c:	4611      	mov	r1, r2
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fc ff0c 	bl	800b67c <unlock_fs>
 800e864:	7dfb      	ldrb	r3, [r7, #23]
}
 800e866:	4618      	mov	r0, r3
 800e868:	3718      	adds	r7, #24
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b084      	sub	sp, #16
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7ff ff70 	bl	800e75c <f_sync>
 800e87c:	4603      	mov	r3, r0
 800e87e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e880:	7bfb      	ldrb	r3, [r7, #15]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d11d      	bne.n	800e8c2 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f107 0208 	add.w	r2, r7, #8
 800e88c:	4611      	mov	r1, r2
 800e88e:	4618      	mov	r0, r3
 800e890:	f7ff f904 	bl	800da9c <validate>
 800e894:	4603      	mov	r3, r0
 800e896:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e898:	7bfb      	ldrb	r3, [r7, #15]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d111      	bne.n	800e8c2 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	691b      	ldr	r3, [r3, #16]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7fd f812 	bl	800b8cc <dec_lock>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d102      	bne.n	800e8b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fc fedd 	bl	800b67c <unlock_fs>
#endif
		}
	}
	return res;
 800e8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	1d3b      	adds	r3, r7, #4
 800e8d6:	6018      	str	r0, [r3, #0]
 800e8d8:	463b      	mov	r3, r7
 800e8da:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e8dc:	1d3b      	adds	r3, r7, #4
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <f_opendir+0x1c>
 800e8e4:	2309      	movs	r3, #9
 800e8e6:	e092      	b.n	800ea0e <f_opendir+0x142>

	/* Get logical drive */
	obj = &dp->obj;
 800e8e8:	1d3b      	adds	r3, r7, #4
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 800e8f0:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800e8f4:	463b      	mov	r3, r7
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fe fe45 	bl	800d588 <find_volume>
 800e8fe:	4603      	mov	r3, r0
 800e900:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 800e904:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d16e      	bne.n	800e9ea <f_opendir+0x11e>
		obj->fs = fs;
 800e90c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800e910:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e914:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800e916:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e91a:	f107 020c 	add.w	r2, r7, #12
 800e91e:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e920:	463b      	mov	r3, r7
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	1d3b      	adds	r3, r7, #4
 800e926:	4611      	mov	r1, r2
 800e928:	6818      	ldr	r0, [r3, #0]
 800e92a:	f7fe fd1d 	bl	800d368 <follow_path>
 800e92e:	4603      	mov	r3, r0
 800e930:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 800e934:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d14f      	bne.n	800e9dc <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e93c:	1d3b      	adds	r3, r7, #4
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e944:	b25b      	sxtb	r3, r3
 800e946:	2b00      	cmp	r3, #0
 800e948:	db17      	blt.n	800e97a <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e94a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e94e:	799b      	ldrb	r3, [r3, #6]
 800e950:	f003 0310 	and.w	r3, r3, #16
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00d      	beq.n	800e974 <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e958:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800e95c:	1d3b      	adds	r3, r7, #4
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	6a1b      	ldr	r3, [r3, #32]
 800e962:	4619      	mov	r1, r3
 800e964:	4610      	mov	r0, r2
 800e966:	f7fd fddd 	bl	800c524 <ld_clust>
 800e96a:	4602      	mov	r2, r0
 800e96c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e970:	609a      	str	r2, [r3, #8]
 800e972:	e002      	b.n	800e97a <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e974:	2305      	movs	r3, #5
 800e976:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 800e97a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d12c      	bne.n	800e9dc <f_opendir+0x110>
				obj->id = fs->id;
 800e982:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e986:	88da      	ldrh	r2, [r3, #6]
 800e988:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e98c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e98e:	1d3b      	adds	r3, r7, #4
 800e990:	2100      	movs	r1, #0
 800e992:	6818      	ldr	r0, [r3, #0]
 800e994:	f7fd fc20 	bl	800c1d8 <dir_sdi>
 800e998:	4603      	mov	r3, r0
 800e99a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e99e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d11a      	bne.n	800e9dc <f_opendir+0x110>
					if (obj->sclust) {
 800e9a6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d011      	beq.n	800e9d4 <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e9b0:	1d3b      	adds	r3, r7, #4
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	6818      	ldr	r0, [r3, #0]
 800e9b6:	f7fc fefb 	bl	800b7b0 <inc_lock>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e9c0:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e9c2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e9c6:	691b      	ldr	r3, [r3, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d107      	bne.n	800e9dc <f_opendir+0x110>
 800e9cc:	2312      	movs	r3, #18
 800e9ce:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800e9d2:	e003      	b.n	800e9dc <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e9d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e9d8:	2200      	movs	r2, #0
 800e9da:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e9dc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800e9e0:	2b04      	cmp	r3, #4
 800e9e2:	d102      	bne.n	800e9ea <f_opendir+0x11e>
 800e9e4:	2305      	movs	r3, #5
 800e9e6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e9ea:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d003      	beq.n	800e9fa <f_opendir+0x12e>
 800e9f2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e9fa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e9fe:	f897 2217 	ldrb.w	r2, [r7, #535]	; 0x217
 800ea02:	4611      	mov	r1, r2
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fc fe39 	bl	800b67c <unlock_fs>
 800ea0a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f107 0208 	add.w	r2, r7, #8
 800ea26:	4611      	mov	r1, r2
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7ff f837 	bl	800da9c <validate>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ea32:	7bfb      	ldrb	r3, [r7, #15]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d115      	bne.n	800ea64 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	691b      	ldr	r3, [r3, #16]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d006      	beq.n	800ea4e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	691b      	ldr	r3, [r3, #16]
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7fc ff41 	bl	800b8cc <dec_lock>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ea4e:	7bfb      	ldrb	r3, [r7, #15]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d102      	bne.n	800ea5a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fc fe0c 	bl	800b67c <unlock_fs>
#endif
	}
	return res;
 800ea64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	1d3b      	adds	r3, r7, #4
 800ea78:	6018      	str	r0, [r3, #0]
 800ea7a:	463b      	mov	r3, r7
 800ea7c:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ea7e:	1d3b      	adds	r3, r7, #4
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800ea86:	4611      	mov	r1, r2
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff f807 	bl	800da9c <validate>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 800ea94:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d139      	bne.n	800eb10 <f_readdir+0xa2>
		if (!fno) {
 800ea9c:	463b      	mov	r3, r7
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d108      	bne.n	800eab6 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800eaa4:	1d3b      	adds	r3, r7, #4
 800eaa6:	2100      	movs	r1, #0
 800eaa8:	6818      	ldr	r0, [r3, #0]
 800eaaa:	f7fd fb95 	bl	800c1d8 <dir_sdi>
 800eaae:	4603      	mov	r3, r0
 800eab0:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800eab4:	e02c      	b.n	800eb10 <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 800eab6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800eaba:	f107 0208 	add.w	r2, r7, #8
 800eabe:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800eac0:	1d3b      	adds	r3, r7, #4
 800eac2:	2100      	movs	r1, #0
 800eac4:	6818      	ldr	r0, [r3, #0]
 800eac6:	f7fd ff5a 	bl	800c97e <dir_read>
 800eaca:	4603      	mov	r3, r0
 800eacc:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ead0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800ead4:	2b04      	cmp	r3, #4
 800ead6:	d102      	bne.n	800eade <f_readdir+0x70>
 800ead8:	2300      	movs	r3, #0
 800eada:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800eade:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d114      	bne.n	800eb10 <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 800eae6:	463a      	mov	r2, r7
 800eae8:	1d3b      	adds	r3, r7, #4
 800eaea:	6811      	ldr	r1, [r2, #0]
 800eaec:	6818      	ldr	r0, [r3, #0]
 800eaee:	f7fe f9a5 	bl	800ce3c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800eaf2:	1d3b      	adds	r3, r7, #4
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	6818      	ldr	r0, [r3, #0]
 800eaf8:	f7fd fbf7 	bl	800c2ea <dir_next>
 800eafc:	4603      	mov	r3, r0
 800eafe:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800eb02:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800eb06:	2b04      	cmp	r3, #4
 800eb08:	d102      	bne.n	800eb10 <f_readdir+0xa2>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800eb10:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800eb14:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800eb18:	4611      	mov	r1, r2
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fc fdae 	bl	800b67c <unlock_fs>
 800eb20:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}

0800eb2e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800eb2e:	b580      	push	{r7, lr}
 800eb30:	b088      	sub	sp, #32
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	60f8      	str	r0, [r7, #12]
 800eb36:	60b9      	str	r1, [r7, #8]
 800eb38:	607a      	str	r2, [r7, #4]
	int n = 0;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800eb42:	e01b      	b.n	800eb7c <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800eb44:	f107 0310 	add.w	r3, r7, #16
 800eb48:	f107 0114 	add.w	r1, r7, #20
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f7ff fab3 	bl	800e0ba <f_read>
		if (rc != 1) break;
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d116      	bne.n	800eb88 <f_gets+0x5a>
		c = s[0];
 800eb5a:	7d3b      	ldrb	r3, [r7, #20]
 800eb5c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
 800eb60:	2b0d      	cmp	r3, #13
 800eb62:	d100      	bne.n	800eb66 <f_gets+0x38>
 800eb64:	e00a      	b.n	800eb7c <f_gets+0x4e>
		*p++ = c;
 800eb66:	69bb      	ldr	r3, [r7, #24]
 800eb68:	1c5a      	adds	r2, r3, #1
 800eb6a:	61ba      	str	r2, [r7, #24]
 800eb6c:	7dfa      	ldrb	r2, [r7, #23]
 800eb6e:	701a      	strb	r2, [r3, #0]
		n++;
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	3301      	adds	r3, #1
 800eb74:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800eb76:	7dfb      	ldrb	r3, [r7, #23]
 800eb78:	2b0a      	cmp	r3, #10
 800eb7a:	d007      	beq.n	800eb8c <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	3b01      	subs	r3, #1
 800eb80:	69fa      	ldr	r2, [r7, #28]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	dbde      	blt.n	800eb44 <f_gets+0x16>
 800eb86:	e002      	b.n	800eb8e <f_gets+0x60>
		if (rc != 1) break;
 800eb88:	bf00      	nop
 800eb8a:	e000      	b.n	800eb8e <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800eb8c:	bf00      	nop
	}
	*p = 0;
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	2200      	movs	r2, #0
 800eb92:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d001      	beq.n	800eb9e <f_gets+0x70>
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	e000      	b.n	800eba0 <f_gets+0x72>
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3720      	adds	r7, #32
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b087      	sub	sp, #28
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ebbe:	4b1f      	ldr	r3, [pc, #124]	; (800ec3c <FATFS_LinkDriverEx+0x94>)
 800ebc0:	7a5b      	ldrb	r3, [r3, #9]
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d131      	bne.n	800ec2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ebc8:	4b1c      	ldr	r3, [pc, #112]	; (800ec3c <FATFS_LinkDriverEx+0x94>)
 800ebca:	7a5b      	ldrb	r3, [r3, #9]
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	461a      	mov	r2, r3
 800ebd0:	4b1a      	ldr	r3, [pc, #104]	; (800ec3c <FATFS_LinkDriverEx+0x94>)
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ebd6:	4b19      	ldr	r3, [pc, #100]	; (800ec3c <FATFS_LinkDriverEx+0x94>)
 800ebd8:	7a5b      	ldrb	r3, [r3, #9]
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	4a17      	ldr	r2, [pc, #92]	; (800ec3c <FATFS_LinkDriverEx+0x94>)
 800ebde:	009b      	lsls	r3, r3, #2
 800ebe0:	4413      	add	r3, r2
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ebe6:	4b15      	ldr	r3, [pc, #84]	; (800ec3c <FATFS_LinkDriverEx+0x94>)
 800ebe8:	7a5b      	ldrb	r3, [r3, #9]
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	461a      	mov	r2, r3
 800ebee:	4b13      	ldr	r3, [pc, #76]	; (800ec3c <FATFS_LinkDriverEx+0x94>)
 800ebf0:	4413      	add	r3, r2
 800ebf2:	79fa      	ldrb	r2, [r7, #7]
 800ebf4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ebf6:	4b11      	ldr	r3, [pc, #68]	; (800ec3c <FATFS_LinkDriverEx+0x94>)
 800ebf8:	7a5b      	ldrb	r3, [r3, #9]
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	1c5a      	adds	r2, r3, #1
 800ebfe:	b2d1      	uxtb	r1, r2
 800ec00:	4a0e      	ldr	r2, [pc, #56]	; (800ec3c <FATFS_LinkDriverEx+0x94>)
 800ec02:	7251      	strb	r1, [r2, #9]
 800ec04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ec06:	7dbb      	ldrb	r3, [r7, #22]
 800ec08:	3330      	adds	r3, #48	; 0x30
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	3301      	adds	r3, #1
 800ec14:	223a      	movs	r2, #58	; 0x3a
 800ec16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	3302      	adds	r3, #2
 800ec1c:	222f      	movs	r2, #47	; 0x2f
 800ec1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	3303      	adds	r3, #3
 800ec24:	2200      	movs	r2, #0
 800ec26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ec2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	371c      	adds	r7, #28
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	20000608 	.word	0x20000608

0800ec40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	6839      	ldr	r1, [r7, #0]
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7ff ffaa 	bl	800eba8 <FATFS_LinkDriverEx>
 800ec54:	4603      	mov	r3, r0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3708      	adds	r7, #8
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
	...

0800ec60 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b085      	sub	sp, #20
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	4603      	mov	r3, r0
 800ec68:	6039      	str	r1, [r7, #0]
 800ec6a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ec6c:	88fb      	ldrh	r3, [r7, #6]
 800ec6e:	2b7f      	cmp	r3, #127	; 0x7f
 800ec70:	d802      	bhi.n	800ec78 <ff_convert+0x18>
		c = chr;
 800ec72:	88fb      	ldrh	r3, [r7, #6]
 800ec74:	81fb      	strh	r3, [r7, #14]
 800ec76:	e025      	b.n	800ecc4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00b      	beq.n	800ec96 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ec7e:	88fb      	ldrh	r3, [r7, #6]
 800ec80:	2bff      	cmp	r3, #255	; 0xff
 800ec82:	d805      	bhi.n	800ec90 <ff_convert+0x30>
 800ec84:	88fb      	ldrh	r3, [r7, #6]
 800ec86:	3b80      	subs	r3, #128	; 0x80
 800ec88:	4a12      	ldr	r2, [pc, #72]	; (800ecd4 <ff_convert+0x74>)
 800ec8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec8e:	e000      	b.n	800ec92 <ff_convert+0x32>
 800ec90:	2300      	movs	r3, #0
 800ec92:	81fb      	strh	r3, [r7, #14]
 800ec94:	e016      	b.n	800ecc4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ec96:	2300      	movs	r3, #0
 800ec98:	81fb      	strh	r3, [r7, #14]
 800ec9a:	e009      	b.n	800ecb0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ec9c:	89fb      	ldrh	r3, [r7, #14]
 800ec9e:	4a0d      	ldr	r2, [pc, #52]	; (800ecd4 <ff_convert+0x74>)
 800eca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eca4:	88fa      	ldrh	r2, [r7, #6]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d006      	beq.n	800ecb8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ecaa:	89fb      	ldrh	r3, [r7, #14]
 800ecac:	3301      	adds	r3, #1
 800ecae:	81fb      	strh	r3, [r7, #14]
 800ecb0:	89fb      	ldrh	r3, [r7, #14]
 800ecb2:	2b7f      	cmp	r3, #127	; 0x7f
 800ecb4:	d9f2      	bls.n	800ec9c <ff_convert+0x3c>
 800ecb6:	e000      	b.n	800ecba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ecb8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ecba:	89fb      	ldrh	r3, [r7, #14]
 800ecbc:	3380      	adds	r3, #128	; 0x80
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ecc4:	89fb      	ldrh	r3, [r7, #14]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3714      	adds	r7, #20
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	08021240 	.word	0x08021240

0800ecd8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b087      	sub	sp, #28
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	4603      	mov	r3, r0
 800ece0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ece2:	88fb      	ldrh	r3, [r7, #6]
 800ece4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ece8:	d201      	bcs.n	800ecee <ff_wtoupper+0x16>
 800ecea:	4b3e      	ldr	r3, [pc, #248]	; (800ede4 <ff_wtoupper+0x10c>)
 800ecec:	e000      	b.n	800ecf0 <ff_wtoupper+0x18>
 800ecee:	4b3e      	ldr	r3, [pc, #248]	; (800ede8 <ff_wtoupper+0x110>)
 800ecf0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	1c9a      	adds	r2, r3, #2
 800ecf6:	617a      	str	r2, [r7, #20]
 800ecf8:	881b      	ldrh	r3, [r3, #0]
 800ecfa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ecfc:	8a7b      	ldrh	r3, [r7, #18]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d068      	beq.n	800edd4 <ff_wtoupper+0xfc>
 800ed02:	88fa      	ldrh	r2, [r7, #6]
 800ed04:	8a7b      	ldrh	r3, [r7, #18]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d364      	bcc.n	800edd4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	1c9a      	adds	r2, r3, #2
 800ed0e:	617a      	str	r2, [r7, #20]
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	823b      	strh	r3, [r7, #16]
 800ed14:	8a3b      	ldrh	r3, [r7, #16]
 800ed16:	0a1b      	lsrs	r3, r3, #8
 800ed18:	81fb      	strh	r3, [r7, #14]
 800ed1a:	8a3b      	ldrh	r3, [r7, #16]
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ed20:	88fa      	ldrh	r2, [r7, #6]
 800ed22:	8a79      	ldrh	r1, [r7, #18]
 800ed24:	8a3b      	ldrh	r3, [r7, #16]
 800ed26:	440b      	add	r3, r1
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	da49      	bge.n	800edc0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ed2c:	89fb      	ldrh	r3, [r7, #14]
 800ed2e:	2b08      	cmp	r3, #8
 800ed30:	d84f      	bhi.n	800edd2 <ff_wtoupper+0xfa>
 800ed32:	a201      	add	r2, pc, #4	; (adr r2, 800ed38 <ff_wtoupper+0x60>)
 800ed34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed38:	0800ed5d 	.word	0x0800ed5d
 800ed3c:	0800ed6f 	.word	0x0800ed6f
 800ed40:	0800ed85 	.word	0x0800ed85
 800ed44:	0800ed8d 	.word	0x0800ed8d
 800ed48:	0800ed95 	.word	0x0800ed95
 800ed4c:	0800ed9d 	.word	0x0800ed9d
 800ed50:	0800eda5 	.word	0x0800eda5
 800ed54:	0800edad 	.word	0x0800edad
 800ed58:	0800edb5 	.word	0x0800edb5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ed5c:	88fa      	ldrh	r2, [r7, #6]
 800ed5e:	8a7b      	ldrh	r3, [r7, #18]
 800ed60:	1ad3      	subs	r3, r2, r3
 800ed62:	005b      	lsls	r3, r3, #1
 800ed64:	697a      	ldr	r2, [r7, #20]
 800ed66:	4413      	add	r3, r2
 800ed68:	881b      	ldrh	r3, [r3, #0]
 800ed6a:	80fb      	strh	r3, [r7, #6]
 800ed6c:	e027      	b.n	800edbe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ed6e:	88fa      	ldrh	r2, [r7, #6]
 800ed70:	8a7b      	ldrh	r3, [r7, #18]
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	f003 0301 	and.w	r3, r3, #1
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	88fa      	ldrh	r2, [r7, #6]
 800ed7e:	1ad3      	subs	r3, r2, r3
 800ed80:	80fb      	strh	r3, [r7, #6]
 800ed82:	e01c      	b.n	800edbe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ed84:	88fb      	ldrh	r3, [r7, #6]
 800ed86:	3b10      	subs	r3, #16
 800ed88:	80fb      	strh	r3, [r7, #6]
 800ed8a:	e018      	b.n	800edbe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ed8c:	88fb      	ldrh	r3, [r7, #6]
 800ed8e:	3b20      	subs	r3, #32
 800ed90:	80fb      	strh	r3, [r7, #6]
 800ed92:	e014      	b.n	800edbe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ed94:	88fb      	ldrh	r3, [r7, #6]
 800ed96:	3b30      	subs	r3, #48	; 0x30
 800ed98:	80fb      	strh	r3, [r7, #6]
 800ed9a:	e010      	b.n	800edbe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ed9c:	88fb      	ldrh	r3, [r7, #6]
 800ed9e:	3b1a      	subs	r3, #26
 800eda0:	80fb      	strh	r3, [r7, #6]
 800eda2:	e00c      	b.n	800edbe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800eda4:	88fb      	ldrh	r3, [r7, #6]
 800eda6:	3308      	adds	r3, #8
 800eda8:	80fb      	strh	r3, [r7, #6]
 800edaa:	e008      	b.n	800edbe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800edac:	88fb      	ldrh	r3, [r7, #6]
 800edae:	3b50      	subs	r3, #80	; 0x50
 800edb0:	80fb      	strh	r3, [r7, #6]
 800edb2:	e004      	b.n	800edbe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800edb4:	88fb      	ldrh	r3, [r7, #6]
 800edb6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800edba:	80fb      	strh	r3, [r7, #6]
 800edbc:	bf00      	nop
			}
			break;
 800edbe:	e008      	b.n	800edd2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800edc0:	89fb      	ldrh	r3, [r7, #14]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d195      	bne.n	800ecf2 <ff_wtoupper+0x1a>
 800edc6:	8a3b      	ldrh	r3, [r7, #16]
 800edc8:	005b      	lsls	r3, r3, #1
 800edca:	697a      	ldr	r2, [r7, #20]
 800edcc:	4413      	add	r3, r2
 800edce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800edd0:	e78f      	b.n	800ecf2 <ff_wtoupper+0x1a>
			break;
 800edd2:	bf00      	nop
	}

	return chr;
 800edd4:	88fb      	ldrh	r3, [r7, #6]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	371c      	adds	r7, #28
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop
 800ede4:	08021340 	.word	0x08021340
 800ede8:	08021534 	.word	0x08021534

0800edec <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	4603      	mov	r3, r0
 800edf4:	6039      	str	r1, [r7, #0]
 800edf6:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800edf8:	2300      	movs	r3, #0
 800edfa:	60fb      	str	r3, [r7, #12]
 800edfc:	2300      	movs	r3, #0
 800edfe:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ee00:	f107 030c 	add.w	r3, r7, #12
 800ee04:	2101      	movs	r1, #1
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 f8cd 	bl	800efa6 <osSemaphoreCreate>
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	bf14      	ite	ne
 800ee1a:	2301      	movne	r3, #1
 800ee1c:	2300      	moveq	r3, #0
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	617b      	str	r3, [r7, #20]

    return ret;
 800ee22:	697b      	ldr	r3, [r7, #20]
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3718      	adds	r7, #24
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f000 f96d 	bl	800f114 <osSemaphoreDelete>
#endif
    return 1;
 800ee3a:	2301      	movs	r3, #1
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3708      	adds	r7, #8
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800ee50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 f8d9 	bl	800f00c <osSemaphoreWait>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d101      	bne.n	800ee64 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800ee60:	2301      	movs	r3, #1
 800ee62:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ee64:	68fb      	ldr	r3, [r7, #12]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b082      	sub	sp, #8
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 f916 	bl	800f0a8 <osSemaphoreRelease>
#endif
}
 800ee7c:	bf00      	nop
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b085      	sub	sp, #20
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ee92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee96:	2b84      	cmp	r3, #132	; 0x84
 800ee98:	d005      	beq.n	800eea6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ee9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	4413      	add	r3, r2
 800eea2:	3303      	adds	r3, #3
 800eea4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800eea6:	68fb      	ldr	r3, [r7, #12]
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3714      	adds	r7, #20
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eeba:	f3ef 8305 	mrs	r3, IPSR
 800eebe:	607b      	str	r3, [r7, #4]
  return(result);
 800eec0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	bf14      	ite	ne
 800eec6:	2301      	movne	r3, #1
 800eec8:	2300      	moveq	r3, #0
 800eeca:	b2db      	uxtb	r3, r3
}
 800eecc:	4618      	mov	r0, r3
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800eedc:	f001 fc4c 	bl	8010778 <vTaskStartScheduler>
  
  return osOK;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eee8:	b089      	sub	sp, #36	; 0x24
 800eeea:	af04      	add	r7, sp, #16
 800eeec:	6078      	str	r0, [r7, #4]
 800eeee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	695b      	ldr	r3, [r3, #20]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d020      	beq.n	800ef3a <osThreadCreate+0x54>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	699b      	ldr	r3, [r3, #24]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d01c      	beq.n	800ef3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	685c      	ldr	r4, [r3, #4]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681d      	ldr	r5, [r3, #0]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	691e      	ldr	r6, [r3, #16]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7ff ffb6 	bl	800ee84 <makeFreeRtosPriority>
 800ef18:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	695b      	ldr	r3, [r3, #20]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ef22:	9202      	str	r2, [sp, #8]
 800ef24:	9301      	str	r3, [sp, #4]
 800ef26:	9100      	str	r1, [sp, #0]
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	4632      	mov	r2, r6
 800ef2c:	4629      	mov	r1, r5
 800ef2e:	4620      	mov	r0, r4
 800ef30:	f001 f892 	bl	8010058 <xTaskCreateStatic>
 800ef34:	4603      	mov	r3, r0
 800ef36:	60fb      	str	r3, [r7, #12]
 800ef38:	e01c      	b.n	800ef74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	685c      	ldr	r4, [r3, #4]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ef46:	b29e      	uxth	r6, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7ff ff98 	bl	800ee84 <makeFreeRtosPriority>
 800ef54:	4602      	mov	r2, r0
 800ef56:	f107 030c 	add.w	r3, r7, #12
 800ef5a:	9301      	str	r3, [sp, #4]
 800ef5c:	9200      	str	r2, [sp, #0]
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	4632      	mov	r2, r6
 800ef62:	4629      	mov	r1, r5
 800ef64:	4620      	mov	r0, r4
 800ef66:	f001 f8d4 	bl	8010112 <xTaskCreate>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d001      	beq.n	800ef74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ef70:	2300      	movs	r3, #0
 800ef72:	e000      	b.n	800ef76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ef74:	68fb      	ldr	r3, [r7, #12]
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3714      	adds	r7, #20
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ef7e:	b580      	push	{r7, lr}
 800ef80:	b084      	sub	sp, #16
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d001      	beq.n	800ef94 <osDelay+0x16>
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	e000      	b.n	800ef96 <osDelay+0x18>
 800ef94:	2301      	movs	r3, #1
 800ef96:	4618      	mov	r0, r3
 800ef98:	f001 fa98 	bl	80104cc <vTaskDelay>
  
  return osOK;
 800ef9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b086      	sub	sp, #24
 800efaa:	af02      	add	r7, sp, #8
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00f      	beq.n	800efd8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d10a      	bne.n	800efd4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	2203      	movs	r2, #3
 800efc4:	9200      	str	r2, [sp, #0]
 800efc6:	2200      	movs	r2, #0
 800efc8:	2100      	movs	r1, #0
 800efca:	2001      	movs	r0, #1
 800efcc:	f000 f9d2 	bl	800f374 <xQueueGenericCreateStatic>
 800efd0:	4603      	mov	r3, r0
 800efd2:	e016      	b.n	800f002 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800efd4:	2300      	movs	r3, #0
 800efd6:	e014      	b.n	800f002 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d110      	bne.n	800f000 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800efde:	2203      	movs	r2, #3
 800efe0:	2100      	movs	r1, #0
 800efe2:	2001      	movs	r0, #1
 800efe4:	f000 fa3e 	bl	800f464 <xQueueGenericCreate>
 800efe8:	60f8      	str	r0, [r7, #12]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d005      	beq.n	800effc <osSemaphoreCreate+0x56>
 800eff0:	2300      	movs	r3, #0
 800eff2:	2200      	movs	r2, #0
 800eff4:	2100      	movs	r1, #0
 800eff6:	68f8      	ldr	r0, [r7, #12]
 800eff8:	f000 fac0 	bl	800f57c <xQueueGenericSend>
      return sema;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	e000      	b.n	800f002 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800f000:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800f002:	4618      	mov	r0, r3
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
	...

0800f00c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f016:	2300      	movs	r3, #0
 800f018:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d101      	bne.n	800f024 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f020:	2380      	movs	r3, #128	; 0x80
 800f022:	e03a      	b.n	800f09a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f02e:	d103      	bne.n	800f038 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f030:	f04f 33ff 	mov.w	r3, #4294967295
 800f034:	60fb      	str	r3, [r7, #12]
 800f036:	e009      	b.n	800f04c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d006      	beq.n	800f04c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d101      	bne.n	800f04c <osSemaphoreWait+0x40>
      ticks = 1;
 800f048:	2301      	movs	r3, #1
 800f04a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f04c:	f7ff ff32 	bl	800eeb4 <inHandlerMode>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d017      	beq.n	800f086 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f056:	f107 0308 	add.w	r3, r7, #8
 800f05a:	461a      	mov	r2, r3
 800f05c:	2100      	movs	r1, #0
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 fe04 	bl	800fc6c <xQueueReceiveFromISR>
 800f064:	4603      	mov	r3, r0
 800f066:	2b01      	cmp	r3, #1
 800f068:	d001      	beq.n	800f06e <osSemaphoreWait+0x62>
      return osErrorOS;
 800f06a:	23ff      	movs	r3, #255	; 0xff
 800f06c:	e015      	b.n	800f09a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d011      	beq.n	800f098 <osSemaphoreWait+0x8c>
 800f074:	4b0b      	ldr	r3, [pc, #44]	; (800f0a4 <osSemaphoreWait+0x98>)
 800f076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f07a:	601a      	str	r2, [r3, #0]
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	f3bf 8f6f 	isb	sy
 800f084:	e008      	b.n	800f098 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f086:	68f9      	ldr	r1, [r7, #12]
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 fce3 	bl	800fa54 <xQueueSemaphoreTake>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b01      	cmp	r3, #1
 800f092:	d001      	beq.n	800f098 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f094:	23ff      	movs	r3, #255	; 0xff
 800f096:	e000      	b.n	800f09a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	e000ed04 	.word	0xe000ed04

0800f0a8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f0b8:	f7ff fefc 	bl	800eeb4 <inHandlerMode>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d016      	beq.n	800f0f0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f0c2:	f107 0308 	add.w	r3, r7, #8
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fb55 	bl	800f778 <xQueueGiveFromISR>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d001      	beq.n	800f0d8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f0d4:	23ff      	movs	r3, #255	; 0xff
 800f0d6:	e017      	b.n	800f108 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d013      	beq.n	800f106 <osSemaphoreRelease+0x5e>
 800f0de:	4b0c      	ldr	r3, [pc, #48]	; (800f110 <osSemaphoreRelease+0x68>)
 800f0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0e4:	601a      	str	r2, [r3, #0]
 800f0e6:	f3bf 8f4f 	dsb	sy
 800f0ea:	f3bf 8f6f 	isb	sy
 800f0ee:	e00a      	b.n	800f106 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	2100      	movs	r1, #0
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 fa40 	bl	800f57c <xQueueGenericSend>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d001      	beq.n	800f106 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f102:	23ff      	movs	r3, #255	; 0xff
 800f104:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f106:	68fb      	ldr	r3, [r7, #12]
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3710      	adds	r7, #16
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}
 800f110:	e000ed04 	.word	0xe000ed04

0800f114 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f11c:	f7ff feca 	bl	800eeb4 <inHandlerMode>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800f126:	2382      	movs	r3, #130	; 0x82
 800f128:	e003      	b.n	800f132 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 fe1e 	bl	800fd6c <vQueueDelete>

  return osOK; 
 800f130:	2300      	movs	r3, #0
}
 800f132:	4618      	mov	r0, r3
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}

0800f13a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f13a:	b480      	push	{r7}
 800f13c:	b083      	sub	sp, #12
 800f13e:	af00      	add	r7, sp, #0
 800f140:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f103 0208 	add.w	r2, r3, #8
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f04f 32ff 	mov.w	r2, #4294967295
 800f152:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f103 0208 	add.w	r2, r3, #8
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f103 0208 	add.w	r2, r3, #8
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f16e:	bf00      	nop
 800f170:	370c      	adds	r7, #12
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr

0800f17a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f17a:	b480      	push	{r7}
 800f17c:	b083      	sub	sp, #12
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2200      	movs	r2, #0
 800f186:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f188:	bf00      	nop
 800f18a:	370c      	adds	r7, #12
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr

0800f194 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f194:	b480      	push	{r7}
 800f196:	b085      	sub	sp, #20
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	689a      	ldr	r2, [r3, #8]
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	1c5a      	adds	r2, r3, #1
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	601a      	str	r2, [r3, #0]
}
 800f1d0:	bf00      	nop
 800f1d2:	3714      	adds	r7, #20
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b085      	sub	sp, #20
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f2:	d103      	bne.n	800f1fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	691b      	ldr	r3, [r3, #16]
 800f1f8:	60fb      	str	r3, [r7, #12]
 800f1fa:	e00c      	b.n	800f216 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	3308      	adds	r3, #8
 800f200:	60fb      	str	r3, [r7, #12]
 800f202:	e002      	b.n	800f20a <vListInsert+0x2e>
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	60fb      	str	r3, [r7, #12]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	429a      	cmp	r2, r3
 800f214:	d2f6      	bcs.n	800f204 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	685a      	ldr	r2, [r3, #4]
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	683a      	ldr	r2, [r7, #0]
 800f224:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	683a      	ldr	r2, [r7, #0]
 800f230:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	1c5a      	adds	r2, r3, #1
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	601a      	str	r2, [r3, #0]
}
 800f242:	bf00      	nop
 800f244:	3714      	adds	r7, #20
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr

0800f24e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f24e:	b480      	push	{r7}
 800f250:	b085      	sub	sp, #20
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	687a      	ldr	r2, [r7, #4]
 800f262:	6892      	ldr	r2, [r2, #8]
 800f264:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	689b      	ldr	r3, [r3, #8]
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	6852      	ldr	r2, [r2, #4]
 800f26e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	687a      	ldr	r2, [r7, #4]
 800f276:	429a      	cmp	r2, r3
 800f278:	d103      	bne.n	800f282 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	689a      	ldr	r2, [r3, #8]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2200      	movs	r2, #0
 800f286:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	1e5a      	subs	r2, r3, #1
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3714      	adds	r7, #20
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
	...

0800f2a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d10a      	bne.n	800f2ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2bc:	f383 8811 	msr	BASEPRI, r3
 800f2c0:	f3bf 8f6f 	isb	sy
 800f2c4:	f3bf 8f4f 	dsb	sy
 800f2c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f2ca:	bf00      	nop
 800f2cc:	e7fe      	b.n	800f2cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f2ce:	f002 f9b1 	bl	8011634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2da:	68f9      	ldr	r1, [r7, #12]
 800f2dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f2de:	fb01 f303 	mul.w	r3, r1, r3
 800f2e2:	441a      	add	r2, r3
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681a      	ldr	r2, [r3, #0]
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2fe:	3b01      	subs	r3, #1
 800f300:	68f9      	ldr	r1, [r7, #12]
 800f302:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f304:	fb01 f303 	mul.w	r3, r1, r3
 800f308:	441a      	add	r2, r3
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	22ff      	movs	r2, #255	; 0xff
 800f312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	22ff      	movs	r2, #255	; 0xff
 800f31a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d114      	bne.n	800f34e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	691b      	ldr	r3, [r3, #16]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d01a      	beq.n	800f362 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	3310      	adds	r3, #16
 800f330:	4618      	mov	r0, r3
 800f332:	f001 fc73 	bl	8010c1c <xTaskRemoveFromEventList>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d012      	beq.n	800f362 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f33c:	4b0c      	ldr	r3, [pc, #48]	; (800f370 <xQueueGenericReset+0xcc>)
 800f33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f342:	601a      	str	r2, [r3, #0]
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	e009      	b.n	800f362 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	3310      	adds	r3, #16
 800f352:	4618      	mov	r0, r3
 800f354:	f7ff fef1 	bl	800f13a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	3324      	adds	r3, #36	; 0x24
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7ff feec 	bl	800f13a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f362:	f002 f997 	bl	8011694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f366:	2301      	movs	r3, #1
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3710      	adds	r7, #16
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	e000ed04 	.word	0xe000ed04

0800f374 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f374:	b580      	push	{r7, lr}
 800f376:	b08e      	sub	sp, #56	; 0x38
 800f378:	af02      	add	r7, sp, #8
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]
 800f380:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10a      	bne.n	800f39e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f38c:	f383 8811 	msr	BASEPRI, r3
 800f390:	f3bf 8f6f 	isb	sy
 800f394:	f3bf 8f4f 	dsb	sy
 800f398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f39a:	bf00      	nop
 800f39c:	e7fe      	b.n	800f39c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d10a      	bne.n	800f3ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a8:	f383 8811 	msr	BASEPRI, r3
 800f3ac:	f3bf 8f6f 	isb	sy
 800f3b0:	f3bf 8f4f 	dsb	sy
 800f3b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f3b6:	bf00      	nop
 800f3b8:	e7fe      	b.n	800f3b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d002      	beq.n	800f3c6 <xQueueGenericCreateStatic+0x52>
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d001      	beq.n	800f3ca <xQueueGenericCreateStatic+0x56>
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	e000      	b.n	800f3cc <xQueueGenericCreateStatic+0x58>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d10a      	bne.n	800f3e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d4:	f383 8811 	msr	BASEPRI, r3
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	623b      	str	r3, [r7, #32]
}
 800f3e2:	bf00      	nop
 800f3e4:	e7fe      	b.n	800f3e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d102      	bne.n	800f3f2 <xQueueGenericCreateStatic+0x7e>
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d101      	bne.n	800f3f6 <xQueueGenericCreateStatic+0x82>
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	e000      	b.n	800f3f8 <xQueueGenericCreateStatic+0x84>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d10a      	bne.n	800f412 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f400:	f383 8811 	msr	BASEPRI, r3
 800f404:	f3bf 8f6f 	isb	sy
 800f408:	f3bf 8f4f 	dsb	sy
 800f40c:	61fb      	str	r3, [r7, #28]
}
 800f40e:	bf00      	nop
 800f410:	e7fe      	b.n	800f410 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f412:	2348      	movs	r3, #72	; 0x48
 800f414:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	2b48      	cmp	r3, #72	; 0x48
 800f41a:	d00a      	beq.n	800f432 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f420:	f383 8811 	msr	BASEPRI, r3
 800f424:	f3bf 8f6f 	isb	sy
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	61bb      	str	r3, [r7, #24]
}
 800f42e:	bf00      	nop
 800f430:	e7fe      	b.n	800f430 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f432:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00d      	beq.n	800f45a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f440:	2201      	movs	r2, #1
 800f442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f446:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	4613      	mov	r3, r2
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	68b9      	ldr	r1, [r7, #8]
 800f454:	68f8      	ldr	r0, [r7, #12]
 800f456:	f000 f83f 	bl	800f4d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3730      	adds	r7, #48	; 0x30
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f464:	b580      	push	{r7, lr}
 800f466:	b08a      	sub	sp, #40	; 0x28
 800f468:	af02      	add	r7, sp, #8
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	4613      	mov	r3, r2
 800f470:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d10a      	bne.n	800f48e <xQueueGenericCreate+0x2a>
	__asm volatile
 800f478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f47c:	f383 8811 	msr	BASEPRI, r3
 800f480:	f3bf 8f6f 	isb	sy
 800f484:	f3bf 8f4f 	dsb	sy
 800f488:	613b      	str	r3, [r7, #16]
}
 800f48a:	bf00      	nop
 800f48c:	e7fe      	b.n	800f48c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	fb02 f303 	mul.w	r3, r2, r3
 800f496:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	3348      	adds	r3, #72	; 0x48
 800f49c:	4618      	mov	r0, r3
 800f49e:	f002 f9eb 	bl	8011878 <pvPortMalloc>
 800f4a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d011      	beq.n	800f4ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	3348      	adds	r3, #72	; 0x48
 800f4b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4bc:	79fa      	ldrb	r2, [r7, #7]
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	697a      	ldr	r2, [r7, #20]
 800f4c6:	68b9      	ldr	r1, [r7, #8]
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f000 f805 	bl	800f4d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f4ce:	69bb      	ldr	r3, [r7, #24]
	}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3720      	adds	r7, #32
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
 800f4e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d103      	bne.n	800f4f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	69ba      	ldr	r2, [r7, #24]
 800f4f0:	601a      	str	r2, [r3, #0]
 800f4f2:	e002      	b.n	800f4fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	687a      	ldr	r2, [r7, #4]
 800f4f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	68fa      	ldr	r2, [r7, #12]
 800f4fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	68ba      	ldr	r2, [r7, #8]
 800f504:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f506:	2101      	movs	r1, #1
 800f508:	69b8      	ldr	r0, [r7, #24]
 800f50a:	f7ff fecb 	bl	800f2a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f50e:	bf00      	nop
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f516:	b580      	push	{r7, lr}
 800f518:	b082      	sub	sp, #8
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d00e      	beq.n	800f542 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2200      	movs	r2, #0
 800f528:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2200      	movs	r2, #0
 800f52e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2200      	movs	r2, #0
 800f534:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f536:	2300      	movs	r3, #0
 800f538:	2200      	movs	r2, #0
 800f53a:	2100      	movs	r1, #0
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 f81d 	bl	800f57c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f542:	bf00      	nop
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}

0800f54a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f54a:	b580      	push	{r7, lr}
 800f54c:	b086      	sub	sp, #24
 800f54e:	af00      	add	r7, sp, #0
 800f550:	4603      	mov	r3, r0
 800f552:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f554:	2301      	movs	r3, #1
 800f556:	617b      	str	r3, [r7, #20]
 800f558:	2300      	movs	r3, #0
 800f55a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f55c:	79fb      	ldrb	r3, [r7, #7]
 800f55e:	461a      	mov	r2, r3
 800f560:	6939      	ldr	r1, [r7, #16]
 800f562:	6978      	ldr	r0, [r7, #20]
 800f564:	f7ff ff7e 	bl	800f464 <xQueueGenericCreate>
 800f568:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f56a:	68f8      	ldr	r0, [r7, #12]
 800f56c:	f7ff ffd3 	bl	800f516 <prvInitialiseMutex>

		return xNewQueue;
 800f570:	68fb      	ldr	r3, [r7, #12]
	}
 800f572:	4618      	mov	r0, r3
 800f574:	3718      	adds	r7, #24
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
	...

0800f57c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b08e      	sub	sp, #56	; 0x38
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
 800f588:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f58a:	2300      	movs	r3, #0
 800f58c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f594:	2b00      	cmp	r3, #0
 800f596:	d10a      	bne.n	800f5ae <xQueueGenericSend+0x32>
	__asm volatile
 800f598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59c:	f383 8811 	msr	BASEPRI, r3
 800f5a0:	f3bf 8f6f 	isb	sy
 800f5a4:	f3bf 8f4f 	dsb	sy
 800f5a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f5aa:	bf00      	nop
 800f5ac:	e7fe      	b.n	800f5ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d103      	bne.n	800f5bc <xQueueGenericSend+0x40>
 800f5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d101      	bne.n	800f5c0 <xQueueGenericSend+0x44>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	e000      	b.n	800f5c2 <xQueueGenericSend+0x46>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d10a      	bne.n	800f5dc <xQueueGenericSend+0x60>
	__asm volatile
 800f5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ca:	f383 8811 	msr	BASEPRI, r3
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f3bf 8f4f 	dsb	sy
 800f5d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f5d8:	bf00      	nop
 800f5da:	e7fe      	b.n	800f5da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	2b02      	cmp	r3, #2
 800f5e0:	d103      	bne.n	800f5ea <xQueueGenericSend+0x6e>
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d101      	bne.n	800f5ee <xQueueGenericSend+0x72>
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	e000      	b.n	800f5f0 <xQueueGenericSend+0x74>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d10a      	bne.n	800f60a <xQueueGenericSend+0x8e>
	__asm volatile
 800f5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f8:	f383 8811 	msr	BASEPRI, r3
 800f5fc:	f3bf 8f6f 	isb	sy
 800f600:	f3bf 8f4f 	dsb	sy
 800f604:	623b      	str	r3, [r7, #32]
}
 800f606:	bf00      	nop
 800f608:	e7fe      	b.n	800f608 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f60a:	f001 fcc7 	bl	8010f9c <xTaskGetSchedulerState>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d102      	bne.n	800f61a <xQueueGenericSend+0x9e>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d101      	bne.n	800f61e <xQueueGenericSend+0xa2>
 800f61a:	2301      	movs	r3, #1
 800f61c:	e000      	b.n	800f620 <xQueueGenericSend+0xa4>
 800f61e:	2300      	movs	r3, #0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d10a      	bne.n	800f63a <xQueueGenericSend+0xbe>
	__asm volatile
 800f624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f628:	f383 8811 	msr	BASEPRI, r3
 800f62c:	f3bf 8f6f 	isb	sy
 800f630:	f3bf 8f4f 	dsb	sy
 800f634:	61fb      	str	r3, [r7, #28]
}
 800f636:	bf00      	nop
 800f638:	e7fe      	b.n	800f638 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f63a:	f001 fffb 	bl	8011634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f646:	429a      	cmp	r2, r3
 800f648:	d302      	bcc.n	800f650 <xQueueGenericSend+0xd4>
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	2b02      	cmp	r3, #2
 800f64e:	d129      	bne.n	800f6a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f650:	683a      	ldr	r2, [r7, #0]
 800f652:	68b9      	ldr	r1, [r7, #8]
 800f654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f656:	f000 fbc4 	bl	800fde2 <prvCopyDataToQueue>
 800f65a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f660:	2b00      	cmp	r3, #0
 800f662:	d010      	beq.n	800f686 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f666:	3324      	adds	r3, #36	; 0x24
 800f668:	4618      	mov	r0, r3
 800f66a:	f001 fad7 	bl	8010c1c <xTaskRemoveFromEventList>
 800f66e:	4603      	mov	r3, r0
 800f670:	2b00      	cmp	r3, #0
 800f672:	d013      	beq.n	800f69c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f674:	4b3f      	ldr	r3, [pc, #252]	; (800f774 <xQueueGenericSend+0x1f8>)
 800f676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f67a:	601a      	str	r2, [r3, #0]
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	e00a      	b.n	800f69c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d007      	beq.n	800f69c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f68c:	4b39      	ldr	r3, [pc, #228]	; (800f774 <xQueueGenericSend+0x1f8>)
 800f68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f692:	601a      	str	r2, [r3, #0]
 800f694:	f3bf 8f4f 	dsb	sy
 800f698:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f69c:	f001 fffa 	bl	8011694 <vPortExitCritical>
				return pdPASS;
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	e063      	b.n	800f76c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d103      	bne.n	800f6b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f6aa:	f001 fff3 	bl	8011694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	e05c      	b.n	800f76c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d106      	bne.n	800f6c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f6b8:	f107 0314 	add.w	r3, r7, #20
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f001 fb0f 	bl	8010ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f6c6:	f001 ffe5 	bl	8011694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f6ca:	f001 f8bf 	bl	801084c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f6ce:	f001 ffb1 	bl	8011634 <vPortEnterCritical>
 800f6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6d8:	b25b      	sxtb	r3, r3
 800f6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6de:	d103      	bne.n	800f6e8 <xQueueGenericSend+0x16c>
 800f6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6ee:	b25b      	sxtb	r3, r3
 800f6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f4:	d103      	bne.n	800f6fe <xQueueGenericSend+0x182>
 800f6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6fe:	f001 ffc9 	bl	8011694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f702:	1d3a      	adds	r2, r7, #4
 800f704:	f107 0314 	add.w	r3, r7, #20
 800f708:	4611      	mov	r1, r2
 800f70a:	4618      	mov	r0, r3
 800f70c:	f001 fafe 	bl	8010d0c <xTaskCheckForTimeOut>
 800f710:	4603      	mov	r3, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d124      	bne.n	800f760 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f718:	f000 fc5b 	bl	800ffd2 <prvIsQueueFull>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d018      	beq.n	800f754 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f724:	3310      	adds	r3, #16
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	4611      	mov	r1, r2
 800f72a:	4618      	mov	r0, r3
 800f72c:	f001 fa52 	bl	8010bd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f732:	f000 fbe6 	bl	800ff02 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f736:	f001 f897 	bl	8010868 <xTaskResumeAll>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f47f af7c 	bne.w	800f63a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f742:	4b0c      	ldr	r3, [pc, #48]	; (800f774 <xQueueGenericSend+0x1f8>)
 800f744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f748:	601a      	str	r2, [r3, #0]
 800f74a:	f3bf 8f4f 	dsb	sy
 800f74e:	f3bf 8f6f 	isb	sy
 800f752:	e772      	b.n	800f63a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f756:	f000 fbd4 	bl	800ff02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f75a:	f001 f885 	bl	8010868 <xTaskResumeAll>
 800f75e:	e76c      	b.n	800f63a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f762:	f000 fbce 	bl	800ff02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f766:	f001 f87f 	bl	8010868 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f76a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3738      	adds	r7, #56	; 0x38
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	e000ed04 	.word	0xe000ed04

0800f778 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b08e      	sub	sp, #56	; 0x38
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d10a      	bne.n	800f7a2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f790:	f383 8811 	msr	BASEPRI, r3
 800f794:	f3bf 8f6f 	isb	sy
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	623b      	str	r3, [r7, #32]
}
 800f79e:	bf00      	nop
 800f7a0:	e7fe      	b.n	800f7a0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d00a      	beq.n	800f7c0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800f7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ae:	f383 8811 	msr	BASEPRI, r3
 800f7b2:	f3bf 8f6f 	isb	sy
 800f7b6:	f3bf 8f4f 	dsb	sy
 800f7ba:	61fb      	str	r3, [r7, #28]
}
 800f7bc:	bf00      	nop
 800f7be:	e7fe      	b.n	800f7be <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d103      	bne.n	800f7d0 <xQueueGiveFromISR+0x58>
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ca:	689b      	ldr	r3, [r3, #8]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d101      	bne.n	800f7d4 <xQueueGiveFromISR+0x5c>
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	e000      	b.n	800f7d6 <xQueueGiveFromISR+0x5e>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d10a      	bne.n	800f7f0 <xQueueGiveFromISR+0x78>
	__asm volatile
 800f7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7de:	f383 8811 	msr	BASEPRI, r3
 800f7e2:	f3bf 8f6f 	isb	sy
 800f7e6:	f3bf 8f4f 	dsb	sy
 800f7ea:	61bb      	str	r3, [r7, #24]
}
 800f7ec:	bf00      	nop
 800f7ee:	e7fe      	b.n	800f7ee <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7f0:	f002 f802 	bl	80117f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f7f4:	f3ef 8211 	mrs	r2, BASEPRI
 800f7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7fc:	f383 8811 	msr	BASEPRI, r3
 800f800:	f3bf 8f6f 	isb	sy
 800f804:	f3bf 8f4f 	dsb	sy
 800f808:	617a      	str	r2, [r7, #20]
 800f80a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f80c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f80e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f814:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d22b      	bcs.n	800f878 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82c:	1c5a      	adds	r2, r3, #1
 800f82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f830:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f832:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f83a:	d112      	bne.n	800f862 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f840:	2b00      	cmp	r3, #0
 800f842:	d016      	beq.n	800f872 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f846:	3324      	adds	r3, #36	; 0x24
 800f848:	4618      	mov	r0, r3
 800f84a:	f001 f9e7 	bl	8010c1c <xTaskRemoveFromEventList>
 800f84e:	4603      	mov	r3, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	d00e      	beq.n	800f872 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d00b      	beq.n	800f872 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	2201      	movs	r2, #1
 800f85e:	601a      	str	r2, [r3, #0]
 800f860:	e007      	b.n	800f872 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f866:	3301      	adds	r3, #1
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	b25a      	sxtb	r2, r3
 800f86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f872:	2301      	movs	r3, #1
 800f874:	637b      	str	r3, [r7, #52]	; 0x34
 800f876:	e001      	b.n	800f87c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f878:	2300      	movs	r3, #0
 800f87a:	637b      	str	r3, [r7, #52]	; 0x34
 800f87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f87e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f886:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3738      	adds	r7, #56	; 0x38
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
	...

0800f894 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b08c      	sub	sp, #48	; 0x30
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d10a      	bne.n	800f8c4 <xQueueReceive+0x30>
	__asm volatile
 800f8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	623b      	str	r3, [r7, #32]
}
 800f8c0:	bf00      	nop
 800f8c2:	e7fe      	b.n	800f8c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d103      	bne.n	800f8d2 <xQueueReceive+0x3e>
 800f8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d101      	bne.n	800f8d6 <xQueueReceive+0x42>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	e000      	b.n	800f8d8 <xQueueReceive+0x44>
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d10a      	bne.n	800f8f2 <xQueueReceive+0x5e>
	__asm volatile
 800f8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e0:	f383 8811 	msr	BASEPRI, r3
 800f8e4:	f3bf 8f6f 	isb	sy
 800f8e8:	f3bf 8f4f 	dsb	sy
 800f8ec:	61fb      	str	r3, [r7, #28]
}
 800f8ee:	bf00      	nop
 800f8f0:	e7fe      	b.n	800f8f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8f2:	f001 fb53 	bl	8010f9c <xTaskGetSchedulerState>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d102      	bne.n	800f902 <xQueueReceive+0x6e>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d101      	bne.n	800f906 <xQueueReceive+0x72>
 800f902:	2301      	movs	r3, #1
 800f904:	e000      	b.n	800f908 <xQueueReceive+0x74>
 800f906:	2300      	movs	r3, #0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d10a      	bne.n	800f922 <xQueueReceive+0x8e>
	__asm volatile
 800f90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f910:	f383 8811 	msr	BASEPRI, r3
 800f914:	f3bf 8f6f 	isb	sy
 800f918:	f3bf 8f4f 	dsb	sy
 800f91c:	61bb      	str	r3, [r7, #24]
}
 800f91e:	bf00      	nop
 800f920:	e7fe      	b.n	800f920 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f922:	f001 fe87 	bl	8011634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f92a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d01f      	beq.n	800f972 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f932:	68b9      	ldr	r1, [r7, #8]
 800f934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f936:	f000 fabe 	bl	800feb6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93c:	1e5a      	subs	r2, r3, #1
 800f93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f940:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f944:	691b      	ldr	r3, [r3, #16]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00f      	beq.n	800f96a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94c:	3310      	adds	r3, #16
 800f94e:	4618      	mov	r0, r3
 800f950:	f001 f964 	bl	8010c1c <xTaskRemoveFromEventList>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d007      	beq.n	800f96a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f95a:	4b3d      	ldr	r3, [pc, #244]	; (800fa50 <xQueueReceive+0x1bc>)
 800f95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f960:	601a      	str	r2, [r3, #0]
 800f962:	f3bf 8f4f 	dsb	sy
 800f966:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f96a:	f001 fe93 	bl	8011694 <vPortExitCritical>
				return pdPASS;
 800f96e:	2301      	movs	r3, #1
 800f970:	e069      	b.n	800fa46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d103      	bne.n	800f980 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f978:	f001 fe8c 	bl	8011694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f97c:	2300      	movs	r3, #0
 800f97e:	e062      	b.n	800fa46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f982:	2b00      	cmp	r3, #0
 800f984:	d106      	bne.n	800f994 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f986:	f107 0310 	add.w	r3, r7, #16
 800f98a:	4618      	mov	r0, r3
 800f98c:	f001 f9a8 	bl	8010ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f990:	2301      	movs	r3, #1
 800f992:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f994:	f001 fe7e 	bl	8011694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f998:	f000 ff58 	bl	801084c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f99c:	f001 fe4a 	bl	8011634 <vPortEnterCritical>
 800f9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9a6:	b25b      	sxtb	r3, r3
 800f9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ac:	d103      	bne.n	800f9b6 <xQueueReceive+0x122>
 800f9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9bc:	b25b      	sxtb	r3, r3
 800f9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c2:	d103      	bne.n	800f9cc <xQueueReceive+0x138>
 800f9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9cc:	f001 fe62 	bl	8011694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9d0:	1d3a      	adds	r2, r7, #4
 800f9d2:	f107 0310 	add.w	r3, r7, #16
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f001 f997 	bl	8010d0c <xTaskCheckForTimeOut>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d123      	bne.n	800fa2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9e6:	f000 fade 	bl	800ffa6 <prvIsQueueEmpty>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d017      	beq.n	800fa20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f2:	3324      	adds	r3, #36	; 0x24
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	4611      	mov	r1, r2
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f001 f8eb 	bl	8010bd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f9fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa00:	f000 fa7f 	bl	800ff02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa04:	f000 ff30 	bl	8010868 <xTaskResumeAll>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d189      	bne.n	800f922 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fa0e:	4b10      	ldr	r3, [pc, #64]	; (800fa50 <xQueueReceive+0x1bc>)
 800fa10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa14:	601a      	str	r2, [r3, #0]
 800fa16:	f3bf 8f4f 	dsb	sy
 800fa1a:	f3bf 8f6f 	isb	sy
 800fa1e:	e780      	b.n	800f922 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fa20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa22:	f000 fa6e 	bl	800ff02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa26:	f000 ff1f 	bl	8010868 <xTaskResumeAll>
 800fa2a:	e77a      	b.n	800f922 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fa2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa2e:	f000 fa68 	bl	800ff02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa32:	f000 ff19 	bl	8010868 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa38:	f000 fab5 	bl	800ffa6 <prvIsQueueEmpty>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f43f af6f 	beq.w	800f922 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3730      	adds	r7, #48	; 0x30
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	e000ed04 	.word	0xe000ed04

0800fa54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08e      	sub	sp, #56	; 0x38
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fa66:	2300      	movs	r3, #0
 800fa68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10a      	bne.n	800fa86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	623b      	str	r3, [r7, #32]
}
 800fa82:	bf00      	nop
 800fa84:	e7fe      	b.n	800fa84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d00a      	beq.n	800faa4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800fa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa92:	f383 8811 	msr	BASEPRI, r3
 800fa96:	f3bf 8f6f 	isb	sy
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	61fb      	str	r3, [r7, #28]
}
 800faa0:	bf00      	nop
 800faa2:	e7fe      	b.n	800faa2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800faa4:	f001 fa7a 	bl	8010f9c <xTaskGetSchedulerState>
 800faa8:	4603      	mov	r3, r0
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d102      	bne.n	800fab4 <xQueueSemaphoreTake+0x60>
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d101      	bne.n	800fab8 <xQueueSemaphoreTake+0x64>
 800fab4:	2301      	movs	r3, #1
 800fab6:	e000      	b.n	800faba <xQueueSemaphoreTake+0x66>
 800fab8:	2300      	movs	r3, #0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d10a      	bne.n	800fad4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800fabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac2:	f383 8811 	msr	BASEPRI, r3
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	61bb      	str	r3, [r7, #24]
}
 800fad0:	bf00      	nop
 800fad2:	e7fe      	b.n	800fad2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fad4:	f001 fdae 	bl	8011634 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fadc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d024      	beq.n	800fb2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae6:	1e5a      	subs	r2, r3, #1
 800fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800faec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d104      	bne.n	800fafe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800faf4:	f001 fbfa 	bl	80112ec <pvTaskIncrementMutexHeldCount>
 800faf8:	4602      	mov	r2, r0
 800fafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb00:	691b      	ldr	r3, [r3, #16]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00f      	beq.n	800fb26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb08:	3310      	adds	r3, #16
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f001 f886 	bl	8010c1c <xTaskRemoveFromEventList>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d007      	beq.n	800fb26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb16:	4b54      	ldr	r3, [pc, #336]	; (800fc68 <xQueueSemaphoreTake+0x214>)
 800fb18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb1c:	601a      	str	r2, [r3, #0]
 800fb1e:	f3bf 8f4f 	dsb	sy
 800fb22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb26:	f001 fdb5 	bl	8011694 <vPortExitCritical>
				return pdPASS;
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	e097      	b.n	800fc5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d111      	bne.n	800fb58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d00a      	beq.n	800fb50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800fb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3e:	f383 8811 	msr	BASEPRI, r3
 800fb42:	f3bf 8f6f 	isb	sy
 800fb46:	f3bf 8f4f 	dsb	sy
 800fb4a:	617b      	str	r3, [r7, #20]
}
 800fb4c:	bf00      	nop
 800fb4e:	e7fe      	b.n	800fb4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fb50:	f001 fda0 	bl	8011694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb54:	2300      	movs	r3, #0
 800fb56:	e082      	b.n	800fc5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d106      	bne.n	800fb6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb5e:	f107 030c 	add.w	r3, r7, #12
 800fb62:	4618      	mov	r0, r3
 800fb64:	f001 f8bc 	bl	8010ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb6c:	f001 fd92 	bl	8011694 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb70:	f000 fe6c 	bl	801084c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb74:	f001 fd5e 	bl	8011634 <vPortEnterCritical>
 800fb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb7e:	b25b      	sxtb	r3, r3
 800fb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb84:	d103      	bne.n	800fb8e <xQueueSemaphoreTake+0x13a>
 800fb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb88:	2200      	movs	r2, #0
 800fb8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb94:	b25b      	sxtb	r3, r3
 800fb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb9a:	d103      	bne.n	800fba4 <xQueueSemaphoreTake+0x150>
 800fb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9e:	2200      	movs	r2, #0
 800fba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fba4:	f001 fd76 	bl	8011694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fba8:	463a      	mov	r2, r7
 800fbaa:	f107 030c 	add.w	r3, r7, #12
 800fbae:	4611      	mov	r1, r2
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f001 f8ab 	bl	8010d0c <xTaskCheckForTimeOut>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d132      	bne.n	800fc22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbbe:	f000 f9f2 	bl	800ffa6 <prvIsQueueEmpty>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d026      	beq.n	800fc16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d109      	bne.n	800fbe4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800fbd0:	f001 fd30 	bl	8011634 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd6:	689b      	ldr	r3, [r3, #8]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f001 f9fd 	bl	8010fd8 <xTaskPriorityInherit>
 800fbde:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fbe0:	f001 fd58 	bl	8011694 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe6:	3324      	adds	r3, #36	; 0x24
 800fbe8:	683a      	ldr	r2, [r7, #0]
 800fbea:	4611      	mov	r1, r2
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 fff1 	bl	8010bd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fbf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbf4:	f000 f985 	bl	800ff02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fbf8:	f000 fe36 	bl	8010868 <xTaskResumeAll>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f47f af68 	bne.w	800fad4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800fc04:	4b18      	ldr	r3, [pc, #96]	; (800fc68 <xQueueSemaphoreTake+0x214>)
 800fc06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc0a:	601a      	str	r2, [r3, #0]
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	f3bf 8f6f 	isb	sy
 800fc14:	e75e      	b.n	800fad4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fc16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc18:	f000 f973 	bl	800ff02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc1c:	f000 fe24 	bl	8010868 <xTaskResumeAll>
 800fc20:	e758      	b.n	800fad4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fc22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc24:	f000 f96d 	bl	800ff02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc28:	f000 fe1e 	bl	8010868 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc2e:	f000 f9ba 	bl	800ffa6 <prvIsQueueEmpty>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	f43f af4d 	beq.w	800fad4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00d      	beq.n	800fc5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800fc40:	f001 fcf8 	bl	8011634 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fc44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc46:	f000 f8b4 	bl	800fdb2 <prvGetDisinheritPriorityAfterTimeout>
 800fc4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc52:	4618      	mov	r0, r3
 800fc54:	f001 fabc 	bl	80111d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fc58:	f001 fd1c 	bl	8011694 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3738      	adds	r7, #56	; 0x38
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	e000ed04 	.word	0xe000ed04

0800fc6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b08e      	sub	sp, #56	; 0x38
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d10a      	bne.n	800fc98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800fc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc86:	f383 8811 	msr	BASEPRI, r3
 800fc8a:	f3bf 8f6f 	isb	sy
 800fc8e:	f3bf 8f4f 	dsb	sy
 800fc92:	623b      	str	r3, [r7, #32]
}
 800fc94:	bf00      	nop
 800fc96:	e7fe      	b.n	800fc96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d103      	bne.n	800fca6 <xQueueReceiveFromISR+0x3a>
 800fc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d101      	bne.n	800fcaa <xQueueReceiveFromISR+0x3e>
 800fca6:	2301      	movs	r3, #1
 800fca8:	e000      	b.n	800fcac <xQueueReceiveFromISR+0x40>
 800fcaa:	2300      	movs	r3, #0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d10a      	bne.n	800fcc6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800fcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb4:	f383 8811 	msr	BASEPRI, r3
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	f3bf 8f4f 	dsb	sy
 800fcc0:	61fb      	str	r3, [r7, #28]
}
 800fcc2:	bf00      	nop
 800fcc4:	e7fe      	b.n	800fcc4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcc6:	f001 fd97 	bl	80117f8 <vPortValidateInterruptPriority>
	__asm volatile
 800fcca:	f3ef 8211 	mrs	r2, BASEPRI
 800fcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd2:	f383 8811 	msr	BASEPRI, r3
 800fcd6:	f3bf 8f6f 	isb	sy
 800fcda:	f3bf 8f4f 	dsb	sy
 800fcde:	61ba      	str	r2, [r7, #24]
 800fce0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fce2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d02f      	beq.n	800fd52 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fcf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fcfc:	68b9      	ldr	r1, [r7, #8]
 800fcfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd00:	f000 f8d9 	bl	800feb6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd06:	1e5a      	subs	r2, r3, #1
 800fd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fd0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd14:	d112      	bne.n	800fd3c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d016      	beq.n	800fd4c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd20:	3310      	adds	r3, #16
 800fd22:	4618      	mov	r0, r3
 800fd24:	f000 ff7a 	bl	8010c1c <xTaskRemoveFromEventList>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d00e      	beq.n	800fd4c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00b      	beq.n	800fd4c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2201      	movs	r2, #1
 800fd38:	601a      	str	r2, [r3, #0]
 800fd3a:	e007      	b.n	800fd4c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fd3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd40:	3301      	adds	r3, #1
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	b25a      	sxtb	r2, r3
 800fd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	637b      	str	r3, [r7, #52]	; 0x34
 800fd50:	e001      	b.n	800fd56 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800fd52:	2300      	movs	r3, #0
 800fd54:	637b      	str	r3, [r7, #52]	; 0x34
 800fd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd58:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	f383 8811 	msr	BASEPRI, r3
}
 800fd60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3738      	adds	r7, #56	; 0x38
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d10a      	bne.n	800fd94 <vQueueDelete+0x28>
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd82:	f383 8811 	msr	BASEPRI, r3
 800fd86:	f3bf 8f6f 	isb	sy
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	60bb      	str	r3, [r7, #8]
}
 800fd90:	bf00      	nop
 800fd92:	e7fe      	b.n	800fd92 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fd94:	68f8      	ldr	r0, [r7, #12]
 800fd96:	f000 f935 	bl	8010004 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d102      	bne.n	800fdaa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800fda4:	68f8      	ldr	r0, [r7, #12]
 800fda6:	f001 fe33 	bl	8011a10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fdaa:	bf00      	nop
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fdb2:	b480      	push	{r7}
 800fdb4:	b085      	sub	sp, #20
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d006      	beq.n	800fdd0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f1c3 0307 	rsb	r3, r3, #7
 800fdcc:	60fb      	str	r3, [r7, #12]
 800fdce:	e001      	b.n	800fdd4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
	}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3714      	adds	r7, #20
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr

0800fde2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b086      	sub	sp, #24
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	60f8      	str	r0, [r7, #12]
 800fdea:	60b9      	str	r1, [r7, #8]
 800fdec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d10d      	bne.n	800fe1c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d14d      	bne.n	800fea4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	689b      	ldr	r3, [r3, #8]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f001 f959 	bl	80110c4 <xTaskPriorityDisinherit>
 800fe12:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	609a      	str	r2, [r3, #8]
 800fe1a:	e043      	b.n	800fea4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d119      	bne.n	800fe56 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	6858      	ldr	r0, [r3, #4]
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	68b9      	ldr	r1, [r7, #8]
 800fe2e:	f002 f95f 	bl	80120f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	685a      	ldr	r2, [r3, #4]
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe3a:	441a      	add	r2, r3
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	685a      	ldr	r2, [r3, #4]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d32b      	bcc.n	800fea4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	605a      	str	r2, [r3, #4]
 800fe54:	e026      	b.n	800fea4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	68d8      	ldr	r0, [r3, #12]
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe5e:	461a      	mov	r2, r3
 800fe60:	68b9      	ldr	r1, [r7, #8]
 800fe62:	f002 f945 	bl	80120f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	68da      	ldr	r2, [r3, #12]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe6e:	425b      	negs	r3, r3
 800fe70:	441a      	add	r2, r3
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	68da      	ldr	r2, [r3, #12]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d207      	bcs.n	800fe92 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	689a      	ldr	r2, [r3, #8]
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe8a:	425b      	negs	r3, r3
 800fe8c:	441a      	add	r2, r3
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2b02      	cmp	r3, #2
 800fe96:	d105      	bne.n	800fea4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d002      	beq.n	800fea4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	3b01      	subs	r3, #1
 800fea2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	1c5a      	adds	r2, r3, #1
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800feac:	697b      	ldr	r3, [r7, #20]
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3718      	adds	r7, #24
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}

0800feb6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b082      	sub	sp, #8
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
 800febe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d018      	beq.n	800fefa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	68da      	ldr	r2, [r3, #12]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fed0:	441a      	add	r2, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	68da      	ldr	r2, [r3, #12]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	689b      	ldr	r3, [r3, #8]
 800fede:	429a      	cmp	r2, r3
 800fee0:	d303      	bcc.n	800feea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681a      	ldr	r2, [r3, #0]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	68d9      	ldr	r1, [r3, #12]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fef2:	461a      	mov	r2, r3
 800fef4:	6838      	ldr	r0, [r7, #0]
 800fef6:	f002 f8fb 	bl	80120f0 <memcpy>
	}
}
 800fefa:	bf00      	nop
 800fefc:	3708      	adds	r7, #8
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b084      	sub	sp, #16
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ff0a:	f001 fb93 	bl	8011634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff14:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff16:	e011      	b.n	800ff3c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d012      	beq.n	800ff46 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	3324      	adds	r3, #36	; 0x24
 800ff24:	4618      	mov	r0, r3
 800ff26:	f000 fe79 	bl	8010c1c <xTaskRemoveFromEventList>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d001      	beq.n	800ff34 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ff30:	f000 ff4e 	bl	8010dd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ff34:	7bfb      	ldrb	r3, [r7, #15]
 800ff36:	3b01      	subs	r3, #1
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	dce9      	bgt.n	800ff18 <prvUnlockQueue+0x16>
 800ff44:	e000      	b.n	800ff48 <prvUnlockQueue+0x46>
					break;
 800ff46:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	22ff      	movs	r2, #255	; 0xff
 800ff4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ff50:	f001 fba0 	bl	8011694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ff54:	f001 fb6e 	bl	8011634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff5e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff60:	e011      	b.n	800ff86 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	691b      	ldr	r3, [r3, #16]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d012      	beq.n	800ff90 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	3310      	adds	r3, #16
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f000 fe54 	bl	8010c1c <xTaskRemoveFromEventList>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d001      	beq.n	800ff7e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ff7a:	f000 ff29 	bl	8010dd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ff7e:	7bbb      	ldrb	r3, [r7, #14]
 800ff80:	3b01      	subs	r3, #1
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	dce9      	bgt.n	800ff62 <prvUnlockQueue+0x60>
 800ff8e:	e000      	b.n	800ff92 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ff90:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	22ff      	movs	r2, #255	; 0xff
 800ff96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ff9a:	f001 fb7b 	bl	8011694 <vPortExitCritical>
}
 800ff9e:	bf00      	nop
 800ffa0:	3710      	adds	r7, #16
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}

0800ffa6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ffa6:	b580      	push	{r7, lr}
 800ffa8:	b084      	sub	sp, #16
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ffae:	f001 fb41 	bl	8011634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d102      	bne.n	800ffc0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ffba:	2301      	movs	r3, #1
 800ffbc:	60fb      	str	r3, [r7, #12]
 800ffbe:	e001      	b.n	800ffc4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ffc4:	f001 fb66 	bl	8011694 <vPortExitCritical>

	return xReturn;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3710      	adds	r7, #16
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}

0800ffd2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ffd2:	b580      	push	{r7, lr}
 800ffd4:	b084      	sub	sp, #16
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ffda:	f001 fb2b 	bl	8011634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d102      	bne.n	800fff0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ffea:	2301      	movs	r3, #1
 800ffec:	60fb      	str	r3, [r7, #12]
 800ffee:	e001      	b.n	800fff4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fff0:	2300      	movs	r3, #0
 800fff2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fff4:	f001 fb4e 	bl	8011694 <vPortExitCritical>

	return xReturn;
 800fff8:	68fb      	ldr	r3, [r7, #12]
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3710      	adds	r7, #16
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
	...

08010004 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010004:	b480      	push	{r7}
 8010006:	b085      	sub	sp, #20
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801000c:	2300      	movs	r3, #0
 801000e:	60fb      	str	r3, [r7, #12]
 8010010:	e016      	b.n	8010040 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010012:	4a10      	ldr	r2, [pc, #64]	; (8010054 <vQueueUnregisterQueue+0x50>)
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	00db      	lsls	r3, r3, #3
 8010018:	4413      	add	r3, r2
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	429a      	cmp	r2, r3
 8010020:	d10b      	bne.n	801003a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010022:	4a0c      	ldr	r2, [pc, #48]	; (8010054 <vQueueUnregisterQueue+0x50>)
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2100      	movs	r1, #0
 8010028:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801002c:	4a09      	ldr	r2, [pc, #36]	; (8010054 <vQueueUnregisterQueue+0x50>)
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	00db      	lsls	r3, r3, #3
 8010032:	4413      	add	r3, r2
 8010034:	2200      	movs	r2, #0
 8010036:	605a      	str	r2, [r3, #4]
				break;
 8010038:	e006      	b.n	8010048 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	3301      	adds	r3, #1
 801003e:	60fb      	str	r3, [r7, #12]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2b07      	cmp	r3, #7
 8010044:	d9e5      	bls.n	8010012 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010046:	bf00      	nop
 8010048:	bf00      	nop
 801004a:	3714      	adds	r7, #20
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr
 8010054:	2001303c 	.word	0x2001303c

08010058 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010058:	b580      	push	{r7, lr}
 801005a:	b08e      	sub	sp, #56	; 0x38
 801005c:	af04      	add	r7, sp, #16
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
 8010064:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010068:	2b00      	cmp	r3, #0
 801006a:	d10a      	bne.n	8010082 <xTaskCreateStatic+0x2a>
	__asm volatile
 801006c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010070:	f383 8811 	msr	BASEPRI, r3
 8010074:	f3bf 8f6f 	isb	sy
 8010078:	f3bf 8f4f 	dsb	sy
 801007c:	623b      	str	r3, [r7, #32]
}
 801007e:	bf00      	nop
 8010080:	e7fe      	b.n	8010080 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010084:	2b00      	cmp	r3, #0
 8010086:	d10a      	bne.n	801009e <xTaskCreateStatic+0x46>
	__asm volatile
 8010088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008c:	f383 8811 	msr	BASEPRI, r3
 8010090:	f3bf 8f6f 	isb	sy
 8010094:	f3bf 8f4f 	dsb	sy
 8010098:	61fb      	str	r3, [r7, #28]
}
 801009a:	bf00      	nop
 801009c:	e7fe      	b.n	801009c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801009e:	23b4      	movs	r3, #180	; 0xb4
 80100a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	2bb4      	cmp	r3, #180	; 0xb4
 80100a6:	d00a      	beq.n	80100be <xTaskCreateStatic+0x66>
	__asm volatile
 80100a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ac:	f383 8811 	msr	BASEPRI, r3
 80100b0:	f3bf 8f6f 	isb	sy
 80100b4:	f3bf 8f4f 	dsb	sy
 80100b8:	61bb      	str	r3, [r7, #24]
}
 80100ba:	bf00      	nop
 80100bc:	e7fe      	b.n	80100bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80100be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80100c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d01e      	beq.n	8010104 <xTaskCreateStatic+0xac>
 80100c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d01b      	beq.n	8010104 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80100cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80100d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80100d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d8:	2202      	movs	r2, #2
 80100da:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80100de:	2300      	movs	r3, #0
 80100e0:	9303      	str	r3, [sp, #12]
 80100e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e4:	9302      	str	r3, [sp, #8]
 80100e6:	f107 0314 	add.w	r3, r7, #20
 80100ea:	9301      	str	r3, [sp, #4]
 80100ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ee:	9300      	str	r3, [sp, #0]
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	68b9      	ldr	r1, [r7, #8]
 80100f6:	68f8      	ldr	r0, [r7, #12]
 80100f8:	f000 f850 	bl	801019c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80100fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100fe:	f000 f8eb 	bl	80102d8 <prvAddNewTaskToReadyList>
 8010102:	e001      	b.n	8010108 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010104:	2300      	movs	r3, #0
 8010106:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010108:	697b      	ldr	r3, [r7, #20]
	}
 801010a:	4618      	mov	r0, r3
 801010c:	3728      	adds	r7, #40	; 0x28
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}

08010112 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010112:	b580      	push	{r7, lr}
 8010114:	b08c      	sub	sp, #48	; 0x30
 8010116:	af04      	add	r7, sp, #16
 8010118:	60f8      	str	r0, [r7, #12]
 801011a:	60b9      	str	r1, [r7, #8]
 801011c:	603b      	str	r3, [r7, #0]
 801011e:	4613      	mov	r3, r2
 8010120:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010122:	88fb      	ldrh	r3, [r7, #6]
 8010124:	009b      	lsls	r3, r3, #2
 8010126:	4618      	mov	r0, r3
 8010128:	f001 fba6 	bl	8011878 <pvPortMalloc>
 801012c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00e      	beq.n	8010152 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010134:	20b4      	movs	r0, #180	; 0xb4
 8010136:	f001 fb9f 	bl	8011878 <pvPortMalloc>
 801013a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d003      	beq.n	801014a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	697a      	ldr	r2, [r7, #20]
 8010146:	631a      	str	r2, [r3, #48]	; 0x30
 8010148:	e005      	b.n	8010156 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801014a:	6978      	ldr	r0, [r7, #20]
 801014c:	f001 fc60 	bl	8011a10 <vPortFree>
 8010150:	e001      	b.n	8010156 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010152:	2300      	movs	r3, #0
 8010154:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010156:	69fb      	ldr	r3, [r7, #28]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d017      	beq.n	801018c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	2200      	movs	r2, #0
 8010160:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010164:	88fa      	ldrh	r2, [r7, #6]
 8010166:	2300      	movs	r3, #0
 8010168:	9303      	str	r3, [sp, #12]
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	9302      	str	r3, [sp, #8]
 801016e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010170:	9301      	str	r3, [sp, #4]
 8010172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	68b9      	ldr	r1, [r7, #8]
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	f000 f80e 	bl	801019c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010180:	69f8      	ldr	r0, [r7, #28]
 8010182:	f000 f8a9 	bl	80102d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010186:	2301      	movs	r3, #1
 8010188:	61bb      	str	r3, [r7, #24]
 801018a:	e002      	b.n	8010192 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801018c:	f04f 33ff 	mov.w	r3, #4294967295
 8010190:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010192:	69bb      	ldr	r3, [r7, #24]
	}
 8010194:	4618      	mov	r0, r3
 8010196:	3720      	adds	r7, #32
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b088      	sub	sp, #32
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	607a      	str	r2, [r7, #4]
 80101a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80101aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80101b4:	3b01      	subs	r3, #1
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	4413      	add	r3, r2
 80101ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	f023 0307 	bic.w	r3, r3, #7
 80101c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80101c4:	69bb      	ldr	r3, [r7, #24]
 80101c6:	f003 0307 	and.w	r3, r3, #7
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00a      	beq.n	80101e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d2:	f383 8811 	msr	BASEPRI, r3
 80101d6:	f3bf 8f6f 	isb	sy
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	617b      	str	r3, [r7, #20]
}
 80101e0:	bf00      	nop
 80101e2:	e7fe      	b.n	80101e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d01f      	beq.n	801022a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80101ea:	2300      	movs	r3, #0
 80101ec:	61fb      	str	r3, [r7, #28]
 80101ee:	e012      	b.n	8010216 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80101f0:	68ba      	ldr	r2, [r7, #8]
 80101f2:	69fb      	ldr	r3, [r7, #28]
 80101f4:	4413      	add	r3, r2
 80101f6:	7819      	ldrb	r1, [r3, #0]
 80101f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101fa:	69fb      	ldr	r3, [r7, #28]
 80101fc:	4413      	add	r3, r2
 80101fe:	3334      	adds	r3, #52	; 0x34
 8010200:	460a      	mov	r2, r1
 8010202:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010204:	68ba      	ldr	r2, [r7, #8]
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	4413      	add	r3, r2
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d006      	beq.n	801021e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	3301      	adds	r3, #1
 8010214:	61fb      	str	r3, [r7, #28]
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	2b0f      	cmp	r3, #15
 801021a:	d9e9      	bls.n	80101f0 <prvInitialiseNewTask+0x54>
 801021c:	e000      	b.n	8010220 <prvInitialiseNewTask+0x84>
			{
				break;
 801021e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010222:	2200      	movs	r2, #0
 8010224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010228:	e003      	b.n	8010232 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801022a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801022c:	2200      	movs	r2, #0
 801022e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010234:	2b06      	cmp	r3, #6
 8010236:	d901      	bls.n	801023c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010238:	2306      	movs	r3, #6
 801023a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801023c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801023e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010240:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010246:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024a:	2200      	movs	r2, #0
 801024c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801024e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010250:	3304      	adds	r3, #4
 8010252:	4618      	mov	r0, r3
 8010254:	f7fe ff91 	bl	800f17a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025a:	3318      	adds	r3, #24
 801025c:	4618      	mov	r0, r3
 801025e:	f7fe ff8c 	bl	800f17a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010266:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801026a:	f1c3 0207 	rsb	r2, r3, #7
 801026e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010270:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010276:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027a:	2200      	movs	r2, #0
 801027c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010282:	2200      	movs	r2, #0
 8010284:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028a:	334c      	adds	r3, #76	; 0x4c
 801028c:	2260      	movs	r2, #96	; 0x60
 801028e:	2100      	movs	r1, #0
 8010290:	4618      	mov	r0, r3
 8010292:	f001 ff3b 	bl	801210c <memset>
 8010296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010298:	4a0c      	ldr	r2, [pc, #48]	; (80102cc <prvInitialiseNewTask+0x130>)
 801029a:	651a      	str	r2, [r3, #80]	; 0x50
 801029c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029e:	4a0c      	ldr	r2, [pc, #48]	; (80102d0 <prvInitialiseNewTask+0x134>)
 80102a0:	655a      	str	r2, [r3, #84]	; 0x54
 80102a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a4:	4a0b      	ldr	r2, [pc, #44]	; (80102d4 <prvInitialiseNewTask+0x138>)
 80102a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80102a8:	683a      	ldr	r2, [r7, #0]
 80102aa:	68f9      	ldr	r1, [r7, #12]
 80102ac:	69b8      	ldr	r0, [r7, #24]
 80102ae:	f001 f897 	bl	80113e0 <pxPortInitialiseStack>
 80102b2:	4602      	mov	r2, r0
 80102b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80102b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d002      	beq.n	80102c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80102be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102c4:	bf00      	nop
 80102c6:	3720      	adds	r7, #32
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	08021610 	.word	0x08021610
 80102d0:	08021630 	.word	0x08021630
 80102d4:	080215f0 	.word	0x080215f0

080102d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80102e0:	f001 f9a8 	bl	8011634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80102e4:	4b2a      	ldr	r3, [pc, #168]	; (8010390 <prvAddNewTaskToReadyList+0xb8>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	3301      	adds	r3, #1
 80102ea:	4a29      	ldr	r2, [pc, #164]	; (8010390 <prvAddNewTaskToReadyList+0xb8>)
 80102ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80102ee:	4b29      	ldr	r3, [pc, #164]	; (8010394 <prvAddNewTaskToReadyList+0xbc>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d109      	bne.n	801030a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80102f6:	4a27      	ldr	r2, [pc, #156]	; (8010394 <prvAddNewTaskToReadyList+0xbc>)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80102fc:	4b24      	ldr	r3, [pc, #144]	; (8010390 <prvAddNewTaskToReadyList+0xb8>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	2b01      	cmp	r3, #1
 8010302:	d110      	bne.n	8010326 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010304:	f000 fd88 	bl	8010e18 <prvInitialiseTaskLists>
 8010308:	e00d      	b.n	8010326 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801030a:	4b23      	ldr	r3, [pc, #140]	; (8010398 <prvAddNewTaskToReadyList+0xc0>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d109      	bne.n	8010326 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010312:	4b20      	ldr	r3, [pc, #128]	; (8010394 <prvAddNewTaskToReadyList+0xbc>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801031c:	429a      	cmp	r2, r3
 801031e:	d802      	bhi.n	8010326 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010320:	4a1c      	ldr	r2, [pc, #112]	; (8010394 <prvAddNewTaskToReadyList+0xbc>)
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010326:	4b1d      	ldr	r3, [pc, #116]	; (801039c <prvAddNewTaskToReadyList+0xc4>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	3301      	adds	r3, #1
 801032c:	4a1b      	ldr	r2, [pc, #108]	; (801039c <prvAddNewTaskToReadyList+0xc4>)
 801032e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010334:	2201      	movs	r2, #1
 8010336:	409a      	lsls	r2, r3
 8010338:	4b19      	ldr	r3, [pc, #100]	; (80103a0 <prvAddNewTaskToReadyList+0xc8>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	4313      	orrs	r3, r2
 801033e:	4a18      	ldr	r2, [pc, #96]	; (80103a0 <prvAddNewTaskToReadyList+0xc8>)
 8010340:	6013      	str	r3, [r2, #0]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010346:	4613      	mov	r3, r2
 8010348:	009b      	lsls	r3, r3, #2
 801034a:	4413      	add	r3, r2
 801034c:	009b      	lsls	r3, r3, #2
 801034e:	4a15      	ldr	r2, [pc, #84]	; (80103a4 <prvAddNewTaskToReadyList+0xcc>)
 8010350:	441a      	add	r2, r3
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	3304      	adds	r3, #4
 8010356:	4619      	mov	r1, r3
 8010358:	4610      	mov	r0, r2
 801035a:	f7fe ff1b 	bl	800f194 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801035e:	f001 f999 	bl	8011694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010362:	4b0d      	ldr	r3, [pc, #52]	; (8010398 <prvAddNewTaskToReadyList+0xc0>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00e      	beq.n	8010388 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801036a:	4b0a      	ldr	r3, [pc, #40]	; (8010394 <prvAddNewTaskToReadyList+0xbc>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010374:	429a      	cmp	r2, r3
 8010376:	d207      	bcs.n	8010388 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010378:	4b0b      	ldr	r3, [pc, #44]	; (80103a8 <prvAddNewTaskToReadyList+0xd0>)
 801037a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801037e:	601a      	str	r2, [r3, #0]
 8010380:	f3bf 8f4f 	dsb	sy
 8010384:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010388:	bf00      	nop
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}
 8010390:	20000714 	.word	0x20000714
 8010394:	20000614 	.word	0x20000614
 8010398:	20000720 	.word	0x20000720
 801039c:	20000730 	.word	0x20000730
 80103a0:	2000071c 	.word	0x2000071c
 80103a4:	20000618 	.word	0x20000618
 80103a8:	e000ed04 	.word	0xe000ed04

080103ac <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80103b4:	f001 f93e 	bl	8011634 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d102      	bne.n	80103c4 <vTaskDelete+0x18>
 80103be:	4b39      	ldr	r3, [pc, #228]	; (80104a4 <vTaskDelete+0xf8>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	e000      	b.n	80103c6 <vTaskDelete+0x1a>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	3304      	adds	r3, #4
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7fe ff3e 	bl	800f24e <uxListRemove>
 80103d2:	4603      	mov	r3, r0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d115      	bne.n	8010404 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103dc:	4932      	ldr	r1, [pc, #200]	; (80104a8 <vTaskDelete+0xfc>)
 80103de:	4613      	mov	r3, r2
 80103e0:	009b      	lsls	r3, r3, #2
 80103e2:	4413      	add	r3, r2
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	440b      	add	r3, r1
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d10a      	bne.n	8010404 <vTaskDelete+0x58>
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f2:	2201      	movs	r2, #1
 80103f4:	fa02 f303 	lsl.w	r3, r2, r3
 80103f8:	43da      	mvns	r2, r3
 80103fa:	4b2c      	ldr	r3, [pc, #176]	; (80104ac <vTaskDelete+0x100>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	4013      	ands	r3, r2
 8010400:	4a2a      	ldr	r2, [pc, #168]	; (80104ac <vTaskDelete+0x100>)
 8010402:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010408:	2b00      	cmp	r3, #0
 801040a:	d004      	beq.n	8010416 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	3318      	adds	r3, #24
 8010410:	4618      	mov	r0, r3
 8010412:	f7fe ff1c 	bl	800f24e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010416:	4b26      	ldr	r3, [pc, #152]	; (80104b0 <vTaskDelete+0x104>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	3301      	adds	r3, #1
 801041c:	4a24      	ldr	r2, [pc, #144]	; (80104b0 <vTaskDelete+0x104>)
 801041e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010420:	4b20      	ldr	r3, [pc, #128]	; (80104a4 <vTaskDelete+0xf8>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	68fa      	ldr	r2, [r7, #12]
 8010426:	429a      	cmp	r2, r3
 8010428:	d10b      	bne.n	8010442 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	3304      	adds	r3, #4
 801042e:	4619      	mov	r1, r3
 8010430:	4820      	ldr	r0, [pc, #128]	; (80104b4 <vTaskDelete+0x108>)
 8010432:	f7fe feaf 	bl	800f194 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010436:	4b20      	ldr	r3, [pc, #128]	; (80104b8 <vTaskDelete+0x10c>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	3301      	adds	r3, #1
 801043c:	4a1e      	ldr	r2, [pc, #120]	; (80104b8 <vTaskDelete+0x10c>)
 801043e:	6013      	str	r3, [r2, #0]
 8010440:	e009      	b.n	8010456 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010442:	4b1e      	ldr	r3, [pc, #120]	; (80104bc <vTaskDelete+0x110>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	3b01      	subs	r3, #1
 8010448:	4a1c      	ldr	r2, [pc, #112]	; (80104bc <vTaskDelete+0x110>)
 801044a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801044c:	68f8      	ldr	r0, [r7, #12]
 801044e:	f000 fd51 	bl	8010ef4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010452:	f000 fd83 	bl	8010f5c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8010456:	f001 f91d 	bl	8011694 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801045a:	4b19      	ldr	r3, [pc, #100]	; (80104c0 <vTaskDelete+0x114>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d01b      	beq.n	801049a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8010462:	4b10      	ldr	r3, [pc, #64]	; (80104a4 <vTaskDelete+0xf8>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	68fa      	ldr	r2, [r7, #12]
 8010468:	429a      	cmp	r2, r3
 801046a:	d116      	bne.n	801049a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801046c:	4b15      	ldr	r3, [pc, #84]	; (80104c4 <vTaskDelete+0x118>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d00a      	beq.n	801048a <vTaskDelete+0xde>
	__asm volatile
 8010474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010478:	f383 8811 	msr	BASEPRI, r3
 801047c:	f3bf 8f6f 	isb	sy
 8010480:	f3bf 8f4f 	dsb	sy
 8010484:	60bb      	str	r3, [r7, #8]
}
 8010486:	bf00      	nop
 8010488:	e7fe      	b.n	8010488 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 801048a:	4b0f      	ldr	r3, [pc, #60]	; (80104c8 <vTaskDelete+0x11c>)
 801048c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	f3bf 8f4f 	dsb	sy
 8010496:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801049a:	bf00      	nop
 801049c:	3710      	adds	r7, #16
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	20000614 	.word	0x20000614
 80104a8:	20000618 	.word	0x20000618
 80104ac:	2000071c 	.word	0x2000071c
 80104b0:	20000730 	.word	0x20000730
 80104b4:	200006e8 	.word	0x200006e8
 80104b8:	200006fc 	.word	0x200006fc
 80104bc:	20000714 	.word	0x20000714
 80104c0:	20000720 	.word	0x20000720
 80104c4:	2000073c 	.word	0x2000073c
 80104c8:	e000ed04 	.word	0xe000ed04

080104cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b084      	sub	sp, #16
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80104d4:	2300      	movs	r3, #0
 80104d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d017      	beq.n	801050e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80104de:	4b13      	ldr	r3, [pc, #76]	; (801052c <vTaskDelay+0x60>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d00a      	beq.n	80104fc <vTaskDelay+0x30>
	__asm volatile
 80104e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ea:	f383 8811 	msr	BASEPRI, r3
 80104ee:	f3bf 8f6f 	isb	sy
 80104f2:	f3bf 8f4f 	dsb	sy
 80104f6:	60bb      	str	r3, [r7, #8]
}
 80104f8:	bf00      	nop
 80104fa:	e7fe      	b.n	80104fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80104fc:	f000 f9a6 	bl	801084c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010500:	2100      	movs	r1, #0
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 ff06 	bl	8011314 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010508:	f000 f9ae 	bl	8010868 <xTaskResumeAll>
 801050c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d107      	bne.n	8010524 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010514:	4b06      	ldr	r3, [pc, #24]	; (8010530 <vTaskDelay+0x64>)
 8010516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801051a:	601a      	str	r2, [r3, #0]
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010524:	bf00      	nop
 8010526:	3710      	adds	r7, #16
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	2000073c 	.word	0x2000073c
 8010530:	e000ed04 	.word	0xe000ed04

08010534 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8010534:	b580      	push	{r7, lr}
 8010536:	b084      	sub	sp, #16
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801053c:	f001 f87a 	bl	8011634 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d102      	bne.n	801054c <vTaskSuspend+0x18>
 8010546:	4b3c      	ldr	r3, [pc, #240]	; (8010638 <vTaskSuspend+0x104>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	e000      	b.n	801054e <vTaskSuspend+0x1a>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	3304      	adds	r3, #4
 8010554:	4618      	mov	r0, r3
 8010556:	f7fe fe7a 	bl	800f24e <uxListRemove>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d115      	bne.n	801058c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010564:	4935      	ldr	r1, [pc, #212]	; (801063c <vTaskSuspend+0x108>)
 8010566:	4613      	mov	r3, r2
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	4413      	add	r3, r2
 801056c:	009b      	lsls	r3, r3, #2
 801056e:	440b      	add	r3, r1
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d10a      	bne.n	801058c <vTaskSuspend+0x58>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801057a:	2201      	movs	r2, #1
 801057c:	fa02 f303 	lsl.w	r3, r2, r3
 8010580:	43da      	mvns	r2, r3
 8010582:	4b2f      	ldr	r3, [pc, #188]	; (8010640 <vTaskSuspend+0x10c>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	4013      	ands	r3, r2
 8010588:	4a2d      	ldr	r2, [pc, #180]	; (8010640 <vTaskSuspend+0x10c>)
 801058a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010590:	2b00      	cmp	r3, #0
 8010592:	d004      	beq.n	801059e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	3318      	adds	r3, #24
 8010598:	4618      	mov	r0, r3
 801059a:	f7fe fe58 	bl	800f24e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	3304      	adds	r3, #4
 80105a2:	4619      	mov	r1, r3
 80105a4:	4827      	ldr	r0, [pc, #156]	; (8010644 <vTaskSuspend+0x110>)
 80105a6:	f7fe fdf5 	bl	800f194 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d103      	bne.n	80105be <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2200      	movs	r2, #0
 80105ba:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80105be:	f001 f869 	bl	8011694 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80105c2:	4b21      	ldr	r3, [pc, #132]	; (8010648 <vTaskSuspend+0x114>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d005      	beq.n	80105d6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80105ca:	f001 f833 	bl	8011634 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80105ce:	f000 fcc5 	bl	8010f5c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80105d2:	f001 f85f 	bl	8011694 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80105d6:	4b18      	ldr	r3, [pc, #96]	; (8010638 <vTaskSuspend+0x104>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	68fa      	ldr	r2, [r7, #12]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d127      	bne.n	8010630 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80105e0:	4b19      	ldr	r3, [pc, #100]	; (8010648 <vTaskSuspend+0x114>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d017      	beq.n	8010618 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80105e8:	4b18      	ldr	r3, [pc, #96]	; (801064c <vTaskSuspend+0x118>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00a      	beq.n	8010606 <vTaskSuspend+0xd2>
	__asm volatile
 80105f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f4:	f383 8811 	msr	BASEPRI, r3
 80105f8:	f3bf 8f6f 	isb	sy
 80105fc:	f3bf 8f4f 	dsb	sy
 8010600:	60bb      	str	r3, [r7, #8]
}
 8010602:	bf00      	nop
 8010604:	e7fe      	b.n	8010604 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8010606:	4b12      	ldr	r3, [pc, #72]	; (8010650 <vTaskSuspend+0x11c>)
 8010608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801060c:	601a      	str	r2, [r3, #0]
 801060e:	f3bf 8f4f 	dsb	sy
 8010612:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010616:	e00b      	b.n	8010630 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8010618:	4b0a      	ldr	r3, [pc, #40]	; (8010644 <vTaskSuspend+0x110>)
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	4b0d      	ldr	r3, [pc, #52]	; (8010654 <vTaskSuspend+0x120>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	429a      	cmp	r2, r3
 8010622:	d103      	bne.n	801062c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8010624:	4b04      	ldr	r3, [pc, #16]	; (8010638 <vTaskSuspend+0x104>)
 8010626:	2200      	movs	r2, #0
 8010628:	601a      	str	r2, [r3, #0]
	}
 801062a:	e001      	b.n	8010630 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 801062c:	f000 fa70 	bl	8010b10 <vTaskSwitchContext>
	}
 8010630:	bf00      	nop
 8010632:	3710      	adds	r7, #16
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	20000614 	.word	0x20000614
 801063c:	20000618 	.word	0x20000618
 8010640:	2000071c 	.word	0x2000071c
 8010644:	20000700 	.word	0x20000700
 8010648:	20000720 	.word	0x20000720
 801064c:	2000073c 	.word	0x2000073c
 8010650:	e000ed04 	.word	0xe000ed04
 8010654:	20000714 	.word	0x20000714

08010658 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8010658:	b480      	push	{r7}
 801065a:	b087      	sub	sp, #28
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8010660:	2300      	movs	r3, #0
 8010662:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d10a      	bne.n	8010684 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801066e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010672:	f383 8811 	msr	BASEPRI, r3
 8010676:	f3bf 8f6f 	isb	sy
 801067a:	f3bf 8f4f 	dsb	sy
 801067e:	60fb      	str	r3, [r7, #12]
}
 8010680:	bf00      	nop
 8010682:	e7fe      	b.n	8010682 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	695b      	ldr	r3, [r3, #20]
 8010688:	4a0a      	ldr	r2, [pc, #40]	; (80106b4 <prvTaskIsTaskSuspended+0x5c>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d10a      	bne.n	80106a4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010692:	4a09      	ldr	r2, [pc, #36]	; (80106b8 <prvTaskIsTaskSuspended+0x60>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d005      	beq.n	80106a4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801069c:	2b00      	cmp	r3, #0
 801069e:	d101      	bne.n	80106a4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80106a0:	2301      	movs	r3, #1
 80106a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80106a4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80106a6:	4618      	mov	r0, r3
 80106a8:	371c      	adds	r7, #28
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	20000700 	.word	0x20000700
 80106b8:	200006d4 	.word	0x200006d4

080106bc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d10a      	bne.n	80106e4 <vTaskResume+0x28>
	__asm volatile
 80106ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d2:	f383 8811 	msr	BASEPRI, r3
 80106d6:	f3bf 8f6f 	isb	sy
 80106da:	f3bf 8f4f 	dsb	sy
 80106de:	60bb      	str	r3, [r7, #8]
}
 80106e0:	bf00      	nop
 80106e2:	e7fe      	b.n	80106e2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80106e4:	4b20      	ldr	r3, [pc, #128]	; (8010768 <vTaskResume+0xac>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	68fa      	ldr	r2, [r7, #12]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d037      	beq.n	801075e <vTaskResume+0xa2>
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d034      	beq.n	801075e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80106f4:	f000 ff9e 	bl	8011634 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f7ff ffad 	bl	8010658 <prvTaskIsTaskSuspended>
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d02a      	beq.n	801075a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	3304      	adds	r3, #4
 8010708:	4618      	mov	r0, r3
 801070a:	f7fe fda0 	bl	800f24e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010712:	2201      	movs	r2, #1
 8010714:	409a      	lsls	r2, r3
 8010716:	4b15      	ldr	r3, [pc, #84]	; (801076c <vTaskResume+0xb0>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4313      	orrs	r3, r2
 801071c:	4a13      	ldr	r2, [pc, #76]	; (801076c <vTaskResume+0xb0>)
 801071e:	6013      	str	r3, [r2, #0]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010724:	4613      	mov	r3, r2
 8010726:	009b      	lsls	r3, r3, #2
 8010728:	4413      	add	r3, r2
 801072a:	009b      	lsls	r3, r3, #2
 801072c:	4a10      	ldr	r2, [pc, #64]	; (8010770 <vTaskResume+0xb4>)
 801072e:	441a      	add	r2, r3
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	3304      	adds	r3, #4
 8010734:	4619      	mov	r1, r3
 8010736:	4610      	mov	r0, r2
 8010738:	f7fe fd2c 	bl	800f194 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010740:	4b09      	ldr	r3, [pc, #36]	; (8010768 <vTaskResume+0xac>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010746:	429a      	cmp	r2, r3
 8010748:	d307      	bcc.n	801075a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801074a:	4b0a      	ldr	r3, [pc, #40]	; (8010774 <vTaskResume+0xb8>)
 801074c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010750:	601a      	str	r2, [r3, #0]
 8010752:	f3bf 8f4f 	dsb	sy
 8010756:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801075a:	f000 ff9b 	bl	8011694 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801075e:	bf00      	nop
 8010760:	3710      	adds	r7, #16
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	20000614 	.word	0x20000614
 801076c:	2000071c 	.word	0x2000071c
 8010770:	20000618 	.word	0x20000618
 8010774:	e000ed04 	.word	0xe000ed04

08010778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b08a      	sub	sp, #40	; 0x28
 801077c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801077e:	2300      	movs	r3, #0
 8010780:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010782:	2300      	movs	r3, #0
 8010784:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010786:	463a      	mov	r2, r7
 8010788:	1d39      	adds	r1, r7, #4
 801078a:	f107 0308 	add.w	r3, r7, #8
 801078e:	4618      	mov	r0, r3
 8010790:	f7f1 f916 	bl	80019c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010794:	6839      	ldr	r1, [r7, #0]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	68ba      	ldr	r2, [r7, #8]
 801079a:	9202      	str	r2, [sp, #8]
 801079c:	9301      	str	r3, [sp, #4]
 801079e:	2300      	movs	r3, #0
 80107a0:	9300      	str	r3, [sp, #0]
 80107a2:	2300      	movs	r3, #0
 80107a4:	460a      	mov	r2, r1
 80107a6:	4921      	ldr	r1, [pc, #132]	; (801082c <vTaskStartScheduler+0xb4>)
 80107a8:	4821      	ldr	r0, [pc, #132]	; (8010830 <vTaskStartScheduler+0xb8>)
 80107aa:	f7ff fc55 	bl	8010058 <xTaskCreateStatic>
 80107ae:	4603      	mov	r3, r0
 80107b0:	4a20      	ldr	r2, [pc, #128]	; (8010834 <vTaskStartScheduler+0xbc>)
 80107b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80107b4:	4b1f      	ldr	r3, [pc, #124]	; (8010834 <vTaskStartScheduler+0xbc>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d002      	beq.n	80107c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80107bc:	2301      	movs	r3, #1
 80107be:	617b      	str	r3, [r7, #20]
 80107c0:	e001      	b.n	80107c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80107c2:	2300      	movs	r3, #0
 80107c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	2b01      	cmp	r3, #1
 80107ca:	d11b      	bne.n	8010804 <vTaskStartScheduler+0x8c>
	__asm volatile
 80107cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d0:	f383 8811 	msr	BASEPRI, r3
 80107d4:	f3bf 8f6f 	isb	sy
 80107d8:	f3bf 8f4f 	dsb	sy
 80107dc:	613b      	str	r3, [r7, #16]
}
 80107de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80107e0:	4b15      	ldr	r3, [pc, #84]	; (8010838 <vTaskStartScheduler+0xc0>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	334c      	adds	r3, #76	; 0x4c
 80107e6:	4a15      	ldr	r2, [pc, #84]	; (801083c <vTaskStartScheduler+0xc4>)
 80107e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80107ea:	4b15      	ldr	r3, [pc, #84]	; (8010840 <vTaskStartScheduler+0xc8>)
 80107ec:	f04f 32ff 	mov.w	r2, #4294967295
 80107f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80107f2:	4b14      	ldr	r3, [pc, #80]	; (8010844 <vTaskStartScheduler+0xcc>)
 80107f4:	2201      	movs	r2, #1
 80107f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80107f8:	4b13      	ldr	r3, [pc, #76]	; (8010848 <vTaskStartScheduler+0xd0>)
 80107fa:	2200      	movs	r2, #0
 80107fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80107fe:	f000 fe77 	bl	80114f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010802:	e00e      	b.n	8010822 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801080a:	d10a      	bne.n	8010822 <vTaskStartScheduler+0xaa>
	__asm volatile
 801080c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010810:	f383 8811 	msr	BASEPRI, r3
 8010814:	f3bf 8f6f 	isb	sy
 8010818:	f3bf 8f4f 	dsb	sy
 801081c:	60fb      	str	r3, [r7, #12]
}
 801081e:	bf00      	nop
 8010820:	e7fe      	b.n	8010820 <vTaskStartScheduler+0xa8>
}
 8010822:	bf00      	nop
 8010824:	3718      	adds	r7, #24
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
 801082a:	bf00      	nop
 801082c:	08017080 	.word	0x08017080
 8010830:	08010de9 	.word	0x08010de9
 8010834:	20000738 	.word	0x20000738
 8010838:	20000614 	.word	0x20000614
 801083c:	200000b4 	.word	0x200000b4
 8010840:	20000734 	.word	0x20000734
 8010844:	20000720 	.word	0x20000720
 8010848:	20000718 	.word	0x20000718

0801084c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801084c:	b480      	push	{r7}
 801084e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010850:	4b04      	ldr	r3, [pc, #16]	; (8010864 <vTaskSuspendAll+0x18>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	3301      	adds	r3, #1
 8010856:	4a03      	ldr	r2, [pc, #12]	; (8010864 <vTaskSuspendAll+0x18>)
 8010858:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801085a:	bf00      	nop
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr
 8010864:	2000073c 	.word	0x2000073c

08010868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801086e:	2300      	movs	r3, #0
 8010870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010872:	2300      	movs	r3, #0
 8010874:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010876:	4b41      	ldr	r3, [pc, #260]	; (801097c <xTaskResumeAll+0x114>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d10a      	bne.n	8010894 <xTaskResumeAll+0x2c>
	__asm volatile
 801087e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010882:	f383 8811 	msr	BASEPRI, r3
 8010886:	f3bf 8f6f 	isb	sy
 801088a:	f3bf 8f4f 	dsb	sy
 801088e:	603b      	str	r3, [r7, #0]
}
 8010890:	bf00      	nop
 8010892:	e7fe      	b.n	8010892 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010894:	f000 fece 	bl	8011634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010898:	4b38      	ldr	r3, [pc, #224]	; (801097c <xTaskResumeAll+0x114>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	3b01      	subs	r3, #1
 801089e:	4a37      	ldr	r2, [pc, #220]	; (801097c <xTaskResumeAll+0x114>)
 80108a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108a2:	4b36      	ldr	r3, [pc, #216]	; (801097c <xTaskResumeAll+0x114>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d161      	bne.n	801096e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80108aa:	4b35      	ldr	r3, [pc, #212]	; (8010980 <xTaskResumeAll+0x118>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d05d      	beq.n	801096e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80108b2:	e02e      	b.n	8010912 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108b4:	4b33      	ldr	r3, [pc, #204]	; (8010984 <xTaskResumeAll+0x11c>)
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	68db      	ldr	r3, [r3, #12]
 80108ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	3318      	adds	r3, #24
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7fe fcc4 	bl	800f24e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	3304      	adds	r3, #4
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fe fcbf 	bl	800f24e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108d4:	2201      	movs	r2, #1
 80108d6:	409a      	lsls	r2, r3
 80108d8:	4b2b      	ldr	r3, [pc, #172]	; (8010988 <xTaskResumeAll+0x120>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4313      	orrs	r3, r2
 80108de:	4a2a      	ldr	r2, [pc, #168]	; (8010988 <xTaskResumeAll+0x120>)
 80108e0:	6013      	str	r3, [r2, #0]
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e6:	4613      	mov	r3, r2
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	4413      	add	r3, r2
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	4a27      	ldr	r2, [pc, #156]	; (801098c <xTaskResumeAll+0x124>)
 80108f0:	441a      	add	r2, r3
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	3304      	adds	r3, #4
 80108f6:	4619      	mov	r1, r3
 80108f8:	4610      	mov	r0, r2
 80108fa:	f7fe fc4b 	bl	800f194 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010902:	4b23      	ldr	r3, [pc, #140]	; (8010990 <xTaskResumeAll+0x128>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010908:	429a      	cmp	r2, r3
 801090a:	d302      	bcc.n	8010912 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801090c:	4b21      	ldr	r3, [pc, #132]	; (8010994 <xTaskResumeAll+0x12c>)
 801090e:	2201      	movs	r2, #1
 8010910:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010912:	4b1c      	ldr	r3, [pc, #112]	; (8010984 <xTaskResumeAll+0x11c>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1cc      	bne.n	80108b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d001      	beq.n	8010924 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010920:	f000 fb1c 	bl	8010f5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010924:	4b1c      	ldr	r3, [pc, #112]	; (8010998 <xTaskResumeAll+0x130>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d010      	beq.n	8010952 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010930:	f000 f836 	bl	80109a0 <xTaskIncrementTick>
 8010934:	4603      	mov	r3, r0
 8010936:	2b00      	cmp	r3, #0
 8010938:	d002      	beq.n	8010940 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801093a:	4b16      	ldr	r3, [pc, #88]	; (8010994 <xTaskResumeAll+0x12c>)
 801093c:	2201      	movs	r2, #1
 801093e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	3b01      	subs	r3, #1
 8010944:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d1f1      	bne.n	8010930 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801094c:	4b12      	ldr	r3, [pc, #72]	; (8010998 <xTaskResumeAll+0x130>)
 801094e:	2200      	movs	r2, #0
 8010950:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010952:	4b10      	ldr	r3, [pc, #64]	; (8010994 <xTaskResumeAll+0x12c>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d009      	beq.n	801096e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801095a:	2301      	movs	r3, #1
 801095c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801095e:	4b0f      	ldr	r3, [pc, #60]	; (801099c <xTaskResumeAll+0x134>)
 8010960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010964:	601a      	str	r2, [r3, #0]
 8010966:	f3bf 8f4f 	dsb	sy
 801096a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801096e:	f000 fe91 	bl	8011694 <vPortExitCritical>

	return xAlreadyYielded;
 8010972:	68bb      	ldr	r3, [r7, #8]
}
 8010974:	4618      	mov	r0, r3
 8010976:	3710      	adds	r7, #16
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	2000073c 	.word	0x2000073c
 8010980:	20000714 	.word	0x20000714
 8010984:	200006d4 	.word	0x200006d4
 8010988:	2000071c 	.word	0x2000071c
 801098c:	20000618 	.word	0x20000618
 8010990:	20000614 	.word	0x20000614
 8010994:	20000728 	.word	0x20000728
 8010998:	20000724 	.word	0x20000724
 801099c:	e000ed04 	.word	0xe000ed04

080109a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b086      	sub	sp, #24
 80109a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80109a6:	2300      	movs	r3, #0
 80109a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109aa:	4b4e      	ldr	r3, [pc, #312]	; (8010ae4 <xTaskIncrementTick+0x144>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f040 808e 	bne.w	8010ad0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80109b4:	4b4c      	ldr	r3, [pc, #304]	; (8010ae8 <xTaskIncrementTick+0x148>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	3301      	adds	r3, #1
 80109ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80109bc:	4a4a      	ldr	r2, [pc, #296]	; (8010ae8 <xTaskIncrementTick+0x148>)
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d120      	bne.n	8010a0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80109c8:	4b48      	ldr	r3, [pc, #288]	; (8010aec <xTaskIncrementTick+0x14c>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00a      	beq.n	80109e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80109d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d6:	f383 8811 	msr	BASEPRI, r3
 80109da:	f3bf 8f6f 	isb	sy
 80109de:	f3bf 8f4f 	dsb	sy
 80109e2:	603b      	str	r3, [r7, #0]
}
 80109e4:	bf00      	nop
 80109e6:	e7fe      	b.n	80109e6 <xTaskIncrementTick+0x46>
 80109e8:	4b40      	ldr	r3, [pc, #256]	; (8010aec <xTaskIncrementTick+0x14c>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	60fb      	str	r3, [r7, #12]
 80109ee:	4b40      	ldr	r3, [pc, #256]	; (8010af0 <xTaskIncrementTick+0x150>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	4a3e      	ldr	r2, [pc, #248]	; (8010aec <xTaskIncrementTick+0x14c>)
 80109f4:	6013      	str	r3, [r2, #0]
 80109f6:	4a3e      	ldr	r2, [pc, #248]	; (8010af0 <xTaskIncrementTick+0x150>)
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	6013      	str	r3, [r2, #0]
 80109fc:	4b3d      	ldr	r3, [pc, #244]	; (8010af4 <xTaskIncrementTick+0x154>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	3301      	adds	r3, #1
 8010a02:	4a3c      	ldr	r2, [pc, #240]	; (8010af4 <xTaskIncrementTick+0x154>)
 8010a04:	6013      	str	r3, [r2, #0]
 8010a06:	f000 faa9 	bl	8010f5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010a0a:	4b3b      	ldr	r3, [pc, #236]	; (8010af8 <xTaskIncrementTick+0x158>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	693a      	ldr	r2, [r7, #16]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d348      	bcc.n	8010aa6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a14:	4b35      	ldr	r3, [pc, #212]	; (8010aec <xTaskIncrementTick+0x14c>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d104      	bne.n	8010a28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a1e:	4b36      	ldr	r3, [pc, #216]	; (8010af8 <xTaskIncrementTick+0x158>)
 8010a20:	f04f 32ff 	mov.w	r2, #4294967295
 8010a24:	601a      	str	r2, [r3, #0]
					break;
 8010a26:	e03e      	b.n	8010aa6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a28:	4b30      	ldr	r3, [pc, #192]	; (8010aec <xTaskIncrementTick+0x14c>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	68db      	ldr	r3, [r3, #12]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010a38:	693a      	ldr	r2, [r7, #16]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d203      	bcs.n	8010a48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010a40:	4a2d      	ldr	r2, [pc, #180]	; (8010af8 <xTaskIncrementTick+0x158>)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010a46:	e02e      	b.n	8010aa6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	3304      	adds	r3, #4
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7fe fbfe 	bl	800f24e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d004      	beq.n	8010a64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	3318      	adds	r3, #24
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7fe fbf5 	bl	800f24e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a68:	2201      	movs	r2, #1
 8010a6a:	409a      	lsls	r2, r3
 8010a6c:	4b23      	ldr	r3, [pc, #140]	; (8010afc <xTaskIncrementTick+0x15c>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4313      	orrs	r3, r2
 8010a72:	4a22      	ldr	r2, [pc, #136]	; (8010afc <xTaskIncrementTick+0x15c>)
 8010a74:	6013      	str	r3, [r2, #0]
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	009b      	lsls	r3, r3, #2
 8010a7e:	4413      	add	r3, r2
 8010a80:	009b      	lsls	r3, r3, #2
 8010a82:	4a1f      	ldr	r2, [pc, #124]	; (8010b00 <xTaskIncrementTick+0x160>)
 8010a84:	441a      	add	r2, r3
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	3304      	adds	r3, #4
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	4610      	mov	r0, r2
 8010a8e:	f7fe fb81 	bl	800f194 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a96:	4b1b      	ldr	r3, [pc, #108]	; (8010b04 <xTaskIncrementTick+0x164>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d3b9      	bcc.n	8010a14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010aa4:	e7b6      	b.n	8010a14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010aa6:	4b17      	ldr	r3, [pc, #92]	; (8010b04 <xTaskIncrementTick+0x164>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aac:	4914      	ldr	r1, [pc, #80]	; (8010b00 <xTaskIncrementTick+0x160>)
 8010aae:	4613      	mov	r3, r2
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	4413      	add	r3, r2
 8010ab4:	009b      	lsls	r3, r3, #2
 8010ab6:	440b      	add	r3, r1
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	d901      	bls.n	8010ac2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8010abe:	2301      	movs	r3, #1
 8010ac0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010ac2:	4b11      	ldr	r3, [pc, #68]	; (8010b08 <xTaskIncrementTick+0x168>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d007      	beq.n	8010ada <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010aca:	2301      	movs	r3, #1
 8010acc:	617b      	str	r3, [r7, #20]
 8010ace:	e004      	b.n	8010ada <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010ad0:	4b0e      	ldr	r3, [pc, #56]	; (8010b0c <xTaskIncrementTick+0x16c>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	4a0d      	ldr	r2, [pc, #52]	; (8010b0c <xTaskIncrementTick+0x16c>)
 8010ad8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010ada:	697b      	ldr	r3, [r7, #20]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3718      	adds	r7, #24
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	2000073c 	.word	0x2000073c
 8010ae8:	20000718 	.word	0x20000718
 8010aec:	200006cc 	.word	0x200006cc
 8010af0:	200006d0 	.word	0x200006d0
 8010af4:	2000072c 	.word	0x2000072c
 8010af8:	20000734 	.word	0x20000734
 8010afc:	2000071c 	.word	0x2000071c
 8010b00:	20000618 	.word	0x20000618
 8010b04:	20000614 	.word	0x20000614
 8010b08:	20000728 	.word	0x20000728
 8010b0c:	20000724 	.word	0x20000724

08010b10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010b10:	b480      	push	{r7}
 8010b12:	b087      	sub	sp, #28
 8010b14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010b16:	4b29      	ldr	r3, [pc, #164]	; (8010bbc <vTaskSwitchContext+0xac>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d003      	beq.n	8010b26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010b1e:	4b28      	ldr	r3, [pc, #160]	; (8010bc0 <vTaskSwitchContext+0xb0>)
 8010b20:	2201      	movs	r2, #1
 8010b22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010b24:	e044      	b.n	8010bb0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8010b26:	4b26      	ldr	r3, [pc, #152]	; (8010bc0 <vTaskSwitchContext+0xb0>)
 8010b28:	2200      	movs	r2, #0
 8010b2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b2c:	4b25      	ldr	r3, [pc, #148]	; (8010bc4 <vTaskSwitchContext+0xb4>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	fab3 f383 	clz	r3, r3
 8010b38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010b3a:	7afb      	ldrb	r3, [r7, #11]
 8010b3c:	f1c3 031f 	rsb	r3, r3, #31
 8010b40:	617b      	str	r3, [r7, #20]
 8010b42:	4921      	ldr	r1, [pc, #132]	; (8010bc8 <vTaskSwitchContext+0xb8>)
 8010b44:	697a      	ldr	r2, [r7, #20]
 8010b46:	4613      	mov	r3, r2
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	4413      	add	r3, r2
 8010b4c:	009b      	lsls	r3, r3, #2
 8010b4e:	440b      	add	r3, r1
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d10a      	bne.n	8010b6c <vTaskSwitchContext+0x5c>
	__asm volatile
 8010b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5a:	f383 8811 	msr	BASEPRI, r3
 8010b5e:	f3bf 8f6f 	isb	sy
 8010b62:	f3bf 8f4f 	dsb	sy
 8010b66:	607b      	str	r3, [r7, #4]
}
 8010b68:	bf00      	nop
 8010b6a:	e7fe      	b.n	8010b6a <vTaskSwitchContext+0x5a>
 8010b6c:	697a      	ldr	r2, [r7, #20]
 8010b6e:	4613      	mov	r3, r2
 8010b70:	009b      	lsls	r3, r3, #2
 8010b72:	4413      	add	r3, r2
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	4a14      	ldr	r2, [pc, #80]	; (8010bc8 <vTaskSwitchContext+0xb8>)
 8010b78:	4413      	add	r3, r2
 8010b7a:	613b      	str	r3, [r7, #16]
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	685a      	ldr	r2, [r3, #4]
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	605a      	str	r2, [r3, #4]
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	685a      	ldr	r2, [r3, #4]
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	3308      	adds	r3, #8
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d104      	bne.n	8010b9c <vTaskSwitchContext+0x8c>
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	685a      	ldr	r2, [r3, #4]
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	605a      	str	r2, [r3, #4]
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	68db      	ldr	r3, [r3, #12]
 8010ba2:	4a0a      	ldr	r2, [pc, #40]	; (8010bcc <vTaskSwitchContext+0xbc>)
 8010ba4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010ba6:	4b09      	ldr	r3, [pc, #36]	; (8010bcc <vTaskSwitchContext+0xbc>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	334c      	adds	r3, #76	; 0x4c
 8010bac:	4a08      	ldr	r2, [pc, #32]	; (8010bd0 <vTaskSwitchContext+0xc0>)
 8010bae:	6013      	str	r3, [r2, #0]
}
 8010bb0:	bf00      	nop
 8010bb2:	371c      	adds	r7, #28
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr
 8010bbc:	2000073c 	.word	0x2000073c
 8010bc0:	20000728 	.word	0x20000728
 8010bc4:	2000071c 	.word	0x2000071c
 8010bc8:	20000618 	.word	0x20000618
 8010bcc:	20000614 	.word	0x20000614
 8010bd0:	200000b4 	.word	0x200000b4

08010bd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d10a      	bne.n	8010bfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010be8:	f383 8811 	msr	BASEPRI, r3
 8010bec:	f3bf 8f6f 	isb	sy
 8010bf0:	f3bf 8f4f 	dsb	sy
 8010bf4:	60fb      	str	r3, [r7, #12]
}
 8010bf6:	bf00      	nop
 8010bf8:	e7fe      	b.n	8010bf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010bfa:	4b07      	ldr	r3, [pc, #28]	; (8010c18 <vTaskPlaceOnEventList+0x44>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	3318      	adds	r3, #24
 8010c00:	4619      	mov	r1, r3
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7fe faea 	bl	800f1dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010c08:	2101      	movs	r1, #1
 8010c0a:	6838      	ldr	r0, [r7, #0]
 8010c0c:	f000 fb82 	bl	8011314 <prvAddCurrentTaskToDelayedList>
}
 8010c10:	bf00      	nop
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	20000614 	.word	0x20000614

08010c1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b086      	sub	sp, #24
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	68db      	ldr	r3, [r3, #12]
 8010c2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d10a      	bne.n	8010c48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c36:	f383 8811 	msr	BASEPRI, r3
 8010c3a:	f3bf 8f6f 	isb	sy
 8010c3e:	f3bf 8f4f 	dsb	sy
 8010c42:	60fb      	str	r3, [r7, #12]
}
 8010c44:	bf00      	nop
 8010c46:	e7fe      	b.n	8010c46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	3318      	adds	r3, #24
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7fe fafe 	bl	800f24e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c52:	4b1d      	ldr	r3, [pc, #116]	; (8010cc8 <xTaskRemoveFromEventList+0xac>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d11c      	bne.n	8010c94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	3304      	adds	r3, #4
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fe faf5 	bl	800f24e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c68:	2201      	movs	r2, #1
 8010c6a:	409a      	lsls	r2, r3
 8010c6c:	4b17      	ldr	r3, [pc, #92]	; (8010ccc <xTaskRemoveFromEventList+0xb0>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4313      	orrs	r3, r2
 8010c72:	4a16      	ldr	r2, [pc, #88]	; (8010ccc <xTaskRemoveFromEventList+0xb0>)
 8010c74:	6013      	str	r3, [r2, #0]
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	009b      	lsls	r3, r3, #2
 8010c7e:	4413      	add	r3, r2
 8010c80:	009b      	lsls	r3, r3, #2
 8010c82:	4a13      	ldr	r2, [pc, #76]	; (8010cd0 <xTaskRemoveFromEventList+0xb4>)
 8010c84:	441a      	add	r2, r3
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	3304      	adds	r3, #4
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	4610      	mov	r0, r2
 8010c8e:	f7fe fa81 	bl	800f194 <vListInsertEnd>
 8010c92:	e005      	b.n	8010ca0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	3318      	adds	r3, #24
 8010c98:	4619      	mov	r1, r3
 8010c9a:	480e      	ldr	r0, [pc, #56]	; (8010cd4 <xTaskRemoveFromEventList+0xb8>)
 8010c9c:	f7fe fa7a 	bl	800f194 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ca4:	4b0c      	ldr	r3, [pc, #48]	; (8010cd8 <xTaskRemoveFromEventList+0xbc>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d905      	bls.n	8010cba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010cae:	2301      	movs	r3, #1
 8010cb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010cb2:	4b0a      	ldr	r3, [pc, #40]	; (8010cdc <xTaskRemoveFromEventList+0xc0>)
 8010cb4:	2201      	movs	r2, #1
 8010cb6:	601a      	str	r2, [r3, #0]
 8010cb8:	e001      	b.n	8010cbe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010cbe:	697b      	ldr	r3, [r7, #20]
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3718      	adds	r7, #24
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	2000073c 	.word	0x2000073c
 8010ccc:	2000071c 	.word	0x2000071c
 8010cd0:	20000618 	.word	0x20000618
 8010cd4:	200006d4 	.word	0x200006d4
 8010cd8:	20000614 	.word	0x20000614
 8010cdc:	20000728 	.word	0x20000728

08010ce0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010ce8:	4b06      	ldr	r3, [pc, #24]	; (8010d04 <vTaskInternalSetTimeOutState+0x24>)
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010cf0:	4b05      	ldr	r3, [pc, #20]	; (8010d08 <vTaskInternalSetTimeOutState+0x28>)
 8010cf2:	681a      	ldr	r2, [r3, #0]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	605a      	str	r2, [r3, #4]
}
 8010cf8:	bf00      	nop
 8010cfa:	370c      	adds	r7, #12
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr
 8010d04:	2000072c 	.word	0x2000072c
 8010d08:	20000718 	.word	0x20000718

08010d0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b088      	sub	sp, #32
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d10a      	bne.n	8010d32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d20:	f383 8811 	msr	BASEPRI, r3
 8010d24:	f3bf 8f6f 	isb	sy
 8010d28:	f3bf 8f4f 	dsb	sy
 8010d2c:	613b      	str	r3, [r7, #16]
}
 8010d2e:	bf00      	nop
 8010d30:	e7fe      	b.n	8010d30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d10a      	bne.n	8010d4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d3c:	f383 8811 	msr	BASEPRI, r3
 8010d40:	f3bf 8f6f 	isb	sy
 8010d44:	f3bf 8f4f 	dsb	sy
 8010d48:	60fb      	str	r3, [r7, #12]
}
 8010d4a:	bf00      	nop
 8010d4c:	e7fe      	b.n	8010d4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010d4e:	f000 fc71 	bl	8011634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010d52:	4b1d      	ldr	r3, [pc, #116]	; (8010dc8 <xTaskCheckForTimeOut+0xbc>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	69ba      	ldr	r2, [r7, #24]
 8010d5e:	1ad3      	subs	r3, r2, r3
 8010d60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d6a:	d102      	bne.n	8010d72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	61fb      	str	r3, [r7, #28]
 8010d70:	e023      	b.n	8010dba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	4b15      	ldr	r3, [pc, #84]	; (8010dcc <xTaskCheckForTimeOut+0xc0>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d007      	beq.n	8010d8e <xTaskCheckForTimeOut+0x82>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	69ba      	ldr	r2, [r7, #24]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d302      	bcc.n	8010d8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	61fb      	str	r3, [r7, #28]
 8010d8c:	e015      	b.n	8010dba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	697a      	ldr	r2, [r7, #20]
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d20b      	bcs.n	8010db0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	1ad2      	subs	r2, r2, r3
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7ff ff9b 	bl	8010ce0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010daa:	2300      	movs	r3, #0
 8010dac:	61fb      	str	r3, [r7, #28]
 8010dae:	e004      	b.n	8010dba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	2200      	movs	r2, #0
 8010db4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010db6:	2301      	movs	r3, #1
 8010db8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010dba:	f000 fc6b 	bl	8011694 <vPortExitCritical>

	return xReturn;
 8010dbe:	69fb      	ldr	r3, [r7, #28]
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3720      	adds	r7, #32
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	20000718 	.word	0x20000718
 8010dcc:	2000072c 	.word	0x2000072c

08010dd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010dd4:	4b03      	ldr	r3, [pc, #12]	; (8010de4 <vTaskMissedYield+0x14>)
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	601a      	str	r2, [r3, #0]
}
 8010dda:	bf00      	nop
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr
 8010de4:	20000728 	.word	0x20000728

08010de8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010df0:	f000 f852 	bl	8010e98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010df4:	4b06      	ldr	r3, [pc, #24]	; (8010e10 <prvIdleTask+0x28>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	2b01      	cmp	r3, #1
 8010dfa:	d9f9      	bls.n	8010df0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010dfc:	4b05      	ldr	r3, [pc, #20]	; (8010e14 <prvIdleTask+0x2c>)
 8010dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e02:	601a      	str	r2, [r3, #0]
 8010e04:	f3bf 8f4f 	dsb	sy
 8010e08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010e0c:	e7f0      	b.n	8010df0 <prvIdleTask+0x8>
 8010e0e:	bf00      	nop
 8010e10:	20000618 	.word	0x20000618
 8010e14:	e000ed04 	.word	0xe000ed04

08010e18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010e1e:	2300      	movs	r3, #0
 8010e20:	607b      	str	r3, [r7, #4]
 8010e22:	e00c      	b.n	8010e3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010e24:	687a      	ldr	r2, [r7, #4]
 8010e26:	4613      	mov	r3, r2
 8010e28:	009b      	lsls	r3, r3, #2
 8010e2a:	4413      	add	r3, r2
 8010e2c:	009b      	lsls	r3, r3, #2
 8010e2e:	4a12      	ldr	r2, [pc, #72]	; (8010e78 <prvInitialiseTaskLists+0x60>)
 8010e30:	4413      	add	r3, r2
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7fe f981 	bl	800f13a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	607b      	str	r3, [r7, #4]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2b06      	cmp	r3, #6
 8010e42:	d9ef      	bls.n	8010e24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010e44:	480d      	ldr	r0, [pc, #52]	; (8010e7c <prvInitialiseTaskLists+0x64>)
 8010e46:	f7fe f978 	bl	800f13a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010e4a:	480d      	ldr	r0, [pc, #52]	; (8010e80 <prvInitialiseTaskLists+0x68>)
 8010e4c:	f7fe f975 	bl	800f13a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010e50:	480c      	ldr	r0, [pc, #48]	; (8010e84 <prvInitialiseTaskLists+0x6c>)
 8010e52:	f7fe f972 	bl	800f13a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010e56:	480c      	ldr	r0, [pc, #48]	; (8010e88 <prvInitialiseTaskLists+0x70>)
 8010e58:	f7fe f96f 	bl	800f13a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010e5c:	480b      	ldr	r0, [pc, #44]	; (8010e8c <prvInitialiseTaskLists+0x74>)
 8010e5e:	f7fe f96c 	bl	800f13a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010e62:	4b0b      	ldr	r3, [pc, #44]	; (8010e90 <prvInitialiseTaskLists+0x78>)
 8010e64:	4a05      	ldr	r2, [pc, #20]	; (8010e7c <prvInitialiseTaskLists+0x64>)
 8010e66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010e68:	4b0a      	ldr	r3, [pc, #40]	; (8010e94 <prvInitialiseTaskLists+0x7c>)
 8010e6a:	4a05      	ldr	r2, [pc, #20]	; (8010e80 <prvInitialiseTaskLists+0x68>)
 8010e6c:	601a      	str	r2, [r3, #0]
}
 8010e6e:	bf00      	nop
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	20000618 	.word	0x20000618
 8010e7c:	200006a4 	.word	0x200006a4
 8010e80:	200006b8 	.word	0x200006b8
 8010e84:	200006d4 	.word	0x200006d4
 8010e88:	200006e8 	.word	0x200006e8
 8010e8c:	20000700 	.word	0x20000700
 8010e90:	200006cc 	.word	0x200006cc
 8010e94:	200006d0 	.word	0x200006d0

08010e98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b082      	sub	sp, #8
 8010e9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e9e:	e019      	b.n	8010ed4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010ea0:	f000 fbc8 	bl	8011634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ea4:	4b10      	ldr	r3, [pc, #64]	; (8010ee8 <prvCheckTasksWaitingTermination+0x50>)
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	3304      	adds	r3, #4
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fe f9cc 	bl	800f24e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010eb6:	4b0d      	ldr	r3, [pc, #52]	; (8010eec <prvCheckTasksWaitingTermination+0x54>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	3b01      	subs	r3, #1
 8010ebc:	4a0b      	ldr	r2, [pc, #44]	; (8010eec <prvCheckTasksWaitingTermination+0x54>)
 8010ebe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010ec0:	4b0b      	ldr	r3, [pc, #44]	; (8010ef0 <prvCheckTasksWaitingTermination+0x58>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	3b01      	subs	r3, #1
 8010ec6:	4a0a      	ldr	r2, [pc, #40]	; (8010ef0 <prvCheckTasksWaitingTermination+0x58>)
 8010ec8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010eca:	f000 fbe3 	bl	8011694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f000 f810 	bl	8010ef4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010ed4:	4b06      	ldr	r3, [pc, #24]	; (8010ef0 <prvCheckTasksWaitingTermination+0x58>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d1e1      	bne.n	8010ea0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010edc:	bf00      	nop
 8010ede:	bf00      	nop
 8010ee0:	3708      	adds	r7, #8
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	200006e8 	.word	0x200006e8
 8010eec:	20000714 	.word	0x20000714
 8010ef0:	200006fc 	.word	0x200006fc

08010ef4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b084      	sub	sp, #16
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	334c      	adds	r3, #76	; 0x4c
 8010f00:	4618      	mov	r0, r3
 8010f02:	f001 f9c3 	bl	801228c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d108      	bne.n	8010f22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f14:	4618      	mov	r0, r3
 8010f16:	f000 fd7b 	bl	8011a10 <vPortFree>
				vPortFree( pxTCB );
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 fd78 	bl	8011a10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010f20:	e018      	b.n	8010f54 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d103      	bne.n	8010f34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f000 fd6f 	bl	8011a10 <vPortFree>
	}
 8010f32:	e00f      	b.n	8010f54 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010f3a:	2b02      	cmp	r3, #2
 8010f3c:	d00a      	beq.n	8010f54 <prvDeleteTCB+0x60>
	__asm volatile
 8010f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f42:	f383 8811 	msr	BASEPRI, r3
 8010f46:	f3bf 8f6f 	isb	sy
 8010f4a:	f3bf 8f4f 	dsb	sy
 8010f4e:	60fb      	str	r3, [r7, #12]
}
 8010f50:	bf00      	nop
 8010f52:	e7fe      	b.n	8010f52 <prvDeleteTCB+0x5e>
	}
 8010f54:	bf00      	nop
 8010f56:	3710      	adds	r7, #16
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b083      	sub	sp, #12
 8010f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f62:	4b0c      	ldr	r3, [pc, #48]	; (8010f94 <prvResetNextTaskUnblockTime+0x38>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d104      	bne.n	8010f76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010f6c:	4b0a      	ldr	r3, [pc, #40]	; (8010f98 <prvResetNextTaskUnblockTime+0x3c>)
 8010f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010f74:	e008      	b.n	8010f88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f76:	4b07      	ldr	r3, [pc, #28]	; (8010f94 <prvResetNextTaskUnblockTime+0x38>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	68db      	ldr	r3, [r3, #12]
 8010f7c:	68db      	ldr	r3, [r3, #12]
 8010f7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	4a04      	ldr	r2, [pc, #16]	; (8010f98 <prvResetNextTaskUnblockTime+0x3c>)
 8010f86:	6013      	str	r3, [r2, #0]
}
 8010f88:	bf00      	nop
 8010f8a:	370c      	adds	r7, #12
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr
 8010f94:	200006cc 	.word	0x200006cc
 8010f98:	20000734 	.word	0x20000734

08010f9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b083      	sub	sp, #12
 8010fa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010fa2:	4b0b      	ldr	r3, [pc, #44]	; (8010fd0 <xTaskGetSchedulerState+0x34>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d102      	bne.n	8010fb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010faa:	2301      	movs	r3, #1
 8010fac:	607b      	str	r3, [r7, #4]
 8010fae:	e008      	b.n	8010fc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fb0:	4b08      	ldr	r3, [pc, #32]	; (8010fd4 <xTaskGetSchedulerState+0x38>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d102      	bne.n	8010fbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010fb8:	2302      	movs	r3, #2
 8010fba:	607b      	str	r3, [r7, #4]
 8010fbc:	e001      	b.n	8010fc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010fc2:	687b      	ldr	r3, [r7, #4]
	}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr
 8010fd0:	20000720 	.word	0x20000720
 8010fd4:	2000073c 	.word	0x2000073c

08010fd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b084      	sub	sp, #16
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d05e      	beq.n	80110ac <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ff2:	4b31      	ldr	r3, [pc, #196]	; (80110b8 <xTaskPriorityInherit+0xe0>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d24e      	bcs.n	801109a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	699b      	ldr	r3, [r3, #24]
 8011000:	2b00      	cmp	r3, #0
 8011002:	db06      	blt.n	8011012 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011004:	4b2c      	ldr	r3, [pc, #176]	; (80110b8 <xTaskPriorityInherit+0xe0>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801100a:	f1c3 0207 	rsb	r2, r3, #7
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	6959      	ldr	r1, [r3, #20]
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801101a:	4613      	mov	r3, r2
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	4413      	add	r3, r2
 8011020:	009b      	lsls	r3, r3, #2
 8011022:	4a26      	ldr	r2, [pc, #152]	; (80110bc <xTaskPriorityInherit+0xe4>)
 8011024:	4413      	add	r3, r2
 8011026:	4299      	cmp	r1, r3
 8011028:	d12f      	bne.n	801108a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	3304      	adds	r3, #4
 801102e:	4618      	mov	r0, r3
 8011030:	f7fe f90d 	bl	800f24e <uxListRemove>
 8011034:	4603      	mov	r3, r0
 8011036:	2b00      	cmp	r3, #0
 8011038:	d10a      	bne.n	8011050 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801103e:	2201      	movs	r2, #1
 8011040:	fa02 f303 	lsl.w	r3, r2, r3
 8011044:	43da      	mvns	r2, r3
 8011046:	4b1e      	ldr	r3, [pc, #120]	; (80110c0 <xTaskPriorityInherit+0xe8>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	4013      	ands	r3, r2
 801104c:	4a1c      	ldr	r2, [pc, #112]	; (80110c0 <xTaskPriorityInherit+0xe8>)
 801104e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011050:	4b19      	ldr	r3, [pc, #100]	; (80110b8 <xTaskPriorityInherit+0xe0>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801105e:	2201      	movs	r2, #1
 8011060:	409a      	lsls	r2, r3
 8011062:	4b17      	ldr	r3, [pc, #92]	; (80110c0 <xTaskPriorityInherit+0xe8>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	4313      	orrs	r3, r2
 8011068:	4a15      	ldr	r2, [pc, #84]	; (80110c0 <xTaskPriorityInherit+0xe8>)
 801106a:	6013      	str	r3, [r2, #0]
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011070:	4613      	mov	r3, r2
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	4413      	add	r3, r2
 8011076:	009b      	lsls	r3, r3, #2
 8011078:	4a10      	ldr	r2, [pc, #64]	; (80110bc <xTaskPriorityInherit+0xe4>)
 801107a:	441a      	add	r2, r3
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	3304      	adds	r3, #4
 8011080:	4619      	mov	r1, r3
 8011082:	4610      	mov	r0, r2
 8011084:	f7fe f886 	bl	800f194 <vListInsertEnd>
 8011088:	e004      	b.n	8011094 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801108a:	4b0b      	ldr	r3, [pc, #44]	; (80110b8 <xTaskPriorityInherit+0xe0>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011094:	2301      	movs	r3, #1
 8011096:	60fb      	str	r3, [r7, #12]
 8011098:	e008      	b.n	80110ac <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801109e:	4b06      	ldr	r3, [pc, #24]	; (80110b8 <xTaskPriorityInherit+0xe0>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d201      	bcs.n	80110ac <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80110a8:	2301      	movs	r3, #1
 80110aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80110ac:	68fb      	ldr	r3, [r7, #12]
	}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3710      	adds	r7, #16
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	bf00      	nop
 80110b8:	20000614 	.word	0x20000614
 80110bc:	20000618 	.word	0x20000618
 80110c0:	2000071c 	.word	0x2000071c

080110c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b086      	sub	sp, #24
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80110d0:	2300      	movs	r3, #0
 80110d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d06e      	beq.n	80111b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80110da:	4b3a      	ldr	r3, [pc, #232]	; (80111c4 <xTaskPriorityDisinherit+0x100>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	693a      	ldr	r2, [r7, #16]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d00a      	beq.n	80110fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80110e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e8:	f383 8811 	msr	BASEPRI, r3
 80110ec:	f3bf 8f6f 	isb	sy
 80110f0:	f3bf 8f4f 	dsb	sy
 80110f4:	60fb      	str	r3, [r7, #12]
}
 80110f6:	bf00      	nop
 80110f8:	e7fe      	b.n	80110f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d10a      	bne.n	8011118 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011106:	f383 8811 	msr	BASEPRI, r3
 801110a:	f3bf 8f6f 	isb	sy
 801110e:	f3bf 8f4f 	dsb	sy
 8011112:	60bb      	str	r3, [r7, #8]
}
 8011114:	bf00      	nop
 8011116:	e7fe      	b.n	8011116 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801111c:	1e5a      	subs	r2, r3, #1
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801112a:	429a      	cmp	r2, r3
 801112c:	d044      	beq.n	80111b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011132:	2b00      	cmp	r3, #0
 8011134:	d140      	bne.n	80111b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	3304      	adds	r3, #4
 801113a:	4618      	mov	r0, r3
 801113c:	f7fe f887 	bl	800f24e <uxListRemove>
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d115      	bne.n	8011172 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801114a:	491f      	ldr	r1, [pc, #124]	; (80111c8 <xTaskPriorityDisinherit+0x104>)
 801114c:	4613      	mov	r3, r2
 801114e:	009b      	lsls	r3, r3, #2
 8011150:	4413      	add	r3, r2
 8011152:	009b      	lsls	r3, r3, #2
 8011154:	440b      	add	r3, r1
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d10a      	bne.n	8011172 <xTaskPriorityDisinherit+0xae>
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011160:	2201      	movs	r2, #1
 8011162:	fa02 f303 	lsl.w	r3, r2, r3
 8011166:	43da      	mvns	r2, r3
 8011168:	4b18      	ldr	r3, [pc, #96]	; (80111cc <xTaskPriorityDisinherit+0x108>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4013      	ands	r3, r2
 801116e:	4a17      	ldr	r2, [pc, #92]	; (80111cc <xTaskPriorityDisinherit+0x108>)
 8011170:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801117e:	f1c3 0207 	rsb	r2, r3, #7
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801118a:	2201      	movs	r2, #1
 801118c:	409a      	lsls	r2, r3
 801118e:	4b0f      	ldr	r3, [pc, #60]	; (80111cc <xTaskPriorityDisinherit+0x108>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	4313      	orrs	r3, r2
 8011194:	4a0d      	ldr	r2, [pc, #52]	; (80111cc <xTaskPriorityDisinherit+0x108>)
 8011196:	6013      	str	r3, [r2, #0]
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801119c:	4613      	mov	r3, r2
 801119e:	009b      	lsls	r3, r3, #2
 80111a0:	4413      	add	r3, r2
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	4a08      	ldr	r2, [pc, #32]	; (80111c8 <xTaskPriorityDisinherit+0x104>)
 80111a6:	441a      	add	r2, r3
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	3304      	adds	r3, #4
 80111ac:	4619      	mov	r1, r3
 80111ae:	4610      	mov	r0, r2
 80111b0:	f7fd fff0 	bl	800f194 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80111b4:	2301      	movs	r3, #1
 80111b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80111b8:	697b      	ldr	r3, [r7, #20]
	}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3718      	adds	r7, #24
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}
 80111c2:	bf00      	nop
 80111c4:	20000614 	.word	0x20000614
 80111c8:	20000618 	.word	0x20000618
 80111cc:	2000071c 	.word	0x2000071c

080111d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b088      	sub	sp, #32
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80111de:	2301      	movs	r3, #1
 80111e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d077      	beq.n	80112d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80111e8:	69bb      	ldr	r3, [r7, #24]
 80111ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d10a      	bne.n	8011206 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80111f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f4:	f383 8811 	msr	BASEPRI, r3
 80111f8:	f3bf 8f6f 	isb	sy
 80111fc:	f3bf 8f4f 	dsb	sy
 8011200:	60fb      	str	r3, [r7, #12]
}
 8011202:	bf00      	nop
 8011204:	e7fe      	b.n	8011204 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801120a:	683a      	ldr	r2, [r7, #0]
 801120c:	429a      	cmp	r2, r3
 801120e:	d902      	bls.n	8011216 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	61fb      	str	r3, [r7, #28]
 8011214:	e002      	b.n	801121c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011216:	69bb      	ldr	r3, [r7, #24]
 8011218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801121a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011220:	69fa      	ldr	r2, [r7, #28]
 8011222:	429a      	cmp	r2, r3
 8011224:	d058      	beq.n	80112d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011226:	69bb      	ldr	r3, [r7, #24]
 8011228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801122a:	697a      	ldr	r2, [r7, #20]
 801122c:	429a      	cmp	r2, r3
 801122e:	d153      	bne.n	80112d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011230:	4b2b      	ldr	r3, [pc, #172]	; (80112e0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	69ba      	ldr	r2, [r7, #24]
 8011236:	429a      	cmp	r2, r3
 8011238:	d10a      	bne.n	8011250 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801123a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801123e:	f383 8811 	msr	BASEPRI, r3
 8011242:	f3bf 8f6f 	isb	sy
 8011246:	f3bf 8f4f 	dsb	sy
 801124a:	60bb      	str	r3, [r7, #8]
}
 801124c:	bf00      	nop
 801124e:	e7fe      	b.n	801124e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011250:	69bb      	ldr	r3, [r7, #24]
 8011252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011254:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	69fa      	ldr	r2, [r7, #28]
 801125a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801125c:	69bb      	ldr	r3, [r7, #24]
 801125e:	699b      	ldr	r3, [r3, #24]
 8011260:	2b00      	cmp	r3, #0
 8011262:	db04      	blt.n	801126e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011264:	69fb      	ldr	r3, [r7, #28]
 8011266:	f1c3 0207 	rsb	r2, r3, #7
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	6959      	ldr	r1, [r3, #20]
 8011272:	693a      	ldr	r2, [r7, #16]
 8011274:	4613      	mov	r3, r2
 8011276:	009b      	lsls	r3, r3, #2
 8011278:	4413      	add	r3, r2
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	4a19      	ldr	r2, [pc, #100]	; (80112e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801127e:	4413      	add	r3, r2
 8011280:	4299      	cmp	r1, r3
 8011282:	d129      	bne.n	80112d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011284:	69bb      	ldr	r3, [r7, #24]
 8011286:	3304      	adds	r3, #4
 8011288:	4618      	mov	r0, r3
 801128a:	f7fd ffe0 	bl	800f24e <uxListRemove>
 801128e:	4603      	mov	r3, r0
 8011290:	2b00      	cmp	r3, #0
 8011292:	d10a      	bne.n	80112aa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011298:	2201      	movs	r2, #1
 801129a:	fa02 f303 	lsl.w	r3, r2, r3
 801129e:	43da      	mvns	r2, r3
 80112a0:	4b11      	ldr	r3, [pc, #68]	; (80112e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	4013      	ands	r3, r2
 80112a6:	4a10      	ldr	r2, [pc, #64]	; (80112e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80112a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80112aa:	69bb      	ldr	r3, [r7, #24]
 80112ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ae:	2201      	movs	r2, #1
 80112b0:	409a      	lsls	r2, r3
 80112b2:	4b0d      	ldr	r3, [pc, #52]	; (80112e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	4313      	orrs	r3, r2
 80112b8:	4a0b      	ldr	r2, [pc, #44]	; (80112e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80112ba:	6013      	str	r3, [r2, #0]
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112c0:	4613      	mov	r3, r2
 80112c2:	009b      	lsls	r3, r3, #2
 80112c4:	4413      	add	r3, r2
 80112c6:	009b      	lsls	r3, r3, #2
 80112c8:	4a06      	ldr	r2, [pc, #24]	; (80112e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80112ca:	441a      	add	r2, r3
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	3304      	adds	r3, #4
 80112d0:	4619      	mov	r1, r3
 80112d2:	4610      	mov	r0, r2
 80112d4:	f7fd ff5e 	bl	800f194 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80112d8:	bf00      	nop
 80112da:	3720      	adds	r7, #32
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	20000614 	.word	0x20000614
 80112e4:	20000618 	.word	0x20000618
 80112e8:	2000071c 	.word	0x2000071c

080112ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80112ec:	b480      	push	{r7}
 80112ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80112f0:	4b07      	ldr	r3, [pc, #28]	; (8011310 <pvTaskIncrementMutexHeldCount+0x24>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d004      	beq.n	8011302 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80112f8:	4b05      	ldr	r3, [pc, #20]	; (8011310 <pvTaskIncrementMutexHeldCount+0x24>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80112fe:	3201      	adds	r2, #1
 8011300:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011302:	4b03      	ldr	r3, [pc, #12]	; (8011310 <pvTaskIncrementMutexHeldCount+0x24>)
 8011304:	681b      	ldr	r3, [r3, #0]
	}
 8011306:	4618      	mov	r0, r3
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr
 8011310:	20000614 	.word	0x20000614

08011314 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801131e:	4b29      	ldr	r3, [pc, #164]	; (80113c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011324:	4b28      	ldr	r3, [pc, #160]	; (80113c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	3304      	adds	r3, #4
 801132a:	4618      	mov	r0, r3
 801132c:	f7fd ff8f 	bl	800f24e <uxListRemove>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d10b      	bne.n	801134e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011336:	4b24      	ldr	r3, [pc, #144]	; (80113c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133c:	2201      	movs	r2, #1
 801133e:	fa02 f303 	lsl.w	r3, r2, r3
 8011342:	43da      	mvns	r2, r3
 8011344:	4b21      	ldr	r3, [pc, #132]	; (80113cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	4013      	ands	r3, r2
 801134a:	4a20      	ldr	r2, [pc, #128]	; (80113cc <prvAddCurrentTaskToDelayedList+0xb8>)
 801134c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011354:	d10a      	bne.n	801136c <prvAddCurrentTaskToDelayedList+0x58>
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d007      	beq.n	801136c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801135c:	4b1a      	ldr	r3, [pc, #104]	; (80113c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	3304      	adds	r3, #4
 8011362:	4619      	mov	r1, r3
 8011364:	481a      	ldr	r0, [pc, #104]	; (80113d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011366:	f7fd ff15 	bl	800f194 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801136a:	e026      	b.n	80113ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801136c:	68fa      	ldr	r2, [r7, #12]
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4413      	add	r3, r2
 8011372:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011374:	4b14      	ldr	r3, [pc, #80]	; (80113c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	68ba      	ldr	r2, [r7, #8]
 801137a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801137c:	68ba      	ldr	r2, [r7, #8]
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	429a      	cmp	r2, r3
 8011382:	d209      	bcs.n	8011398 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011384:	4b13      	ldr	r3, [pc, #76]	; (80113d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	4b0f      	ldr	r3, [pc, #60]	; (80113c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	3304      	adds	r3, #4
 801138e:	4619      	mov	r1, r3
 8011390:	4610      	mov	r0, r2
 8011392:	f7fd ff23 	bl	800f1dc <vListInsert>
}
 8011396:	e010      	b.n	80113ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011398:	4b0f      	ldr	r3, [pc, #60]	; (80113d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	4b0a      	ldr	r3, [pc, #40]	; (80113c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	3304      	adds	r3, #4
 80113a2:	4619      	mov	r1, r3
 80113a4:	4610      	mov	r0, r2
 80113a6:	f7fd ff19 	bl	800f1dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80113aa:	4b0c      	ldr	r3, [pc, #48]	; (80113dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	68ba      	ldr	r2, [r7, #8]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d202      	bcs.n	80113ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80113b4:	4a09      	ldr	r2, [pc, #36]	; (80113dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	6013      	str	r3, [r2, #0]
}
 80113ba:	bf00      	nop
 80113bc:	3710      	adds	r7, #16
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	20000718 	.word	0x20000718
 80113c8:	20000614 	.word	0x20000614
 80113cc:	2000071c 	.word	0x2000071c
 80113d0:	20000700 	.word	0x20000700
 80113d4:	200006d0 	.word	0x200006d0
 80113d8:	200006cc 	.word	0x200006cc
 80113dc:	20000734 	.word	0x20000734

080113e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80113e0:	b480      	push	{r7}
 80113e2:	b085      	sub	sp, #20
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	60b9      	str	r1, [r7, #8]
 80113ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	3b04      	subs	r3, #4
 80113f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80113f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	3b04      	subs	r3, #4
 80113fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	f023 0201 	bic.w	r2, r3, #1
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	3b04      	subs	r3, #4
 801140e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011410:	4a0c      	ldr	r2, [pc, #48]	; (8011444 <pxPortInitialiseStack+0x64>)
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	3b14      	subs	r3, #20
 801141a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801141c:	687a      	ldr	r2, [r7, #4]
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	3b04      	subs	r3, #4
 8011426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f06f 0202 	mvn.w	r2, #2
 801142e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	3b20      	subs	r3, #32
 8011434:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011436:	68fb      	ldr	r3, [r7, #12]
}
 8011438:	4618      	mov	r0, r3
 801143a:	3714      	adds	r7, #20
 801143c:	46bd      	mov	sp, r7
 801143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011442:	4770      	bx	lr
 8011444:	08011449 	.word	0x08011449

08011448 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011448:	b480      	push	{r7}
 801144a:	b085      	sub	sp, #20
 801144c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801144e:	2300      	movs	r3, #0
 8011450:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011452:	4b12      	ldr	r3, [pc, #72]	; (801149c <prvTaskExitError+0x54>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801145a:	d00a      	beq.n	8011472 <prvTaskExitError+0x2a>
	__asm volatile
 801145c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011460:	f383 8811 	msr	BASEPRI, r3
 8011464:	f3bf 8f6f 	isb	sy
 8011468:	f3bf 8f4f 	dsb	sy
 801146c:	60fb      	str	r3, [r7, #12]
}
 801146e:	bf00      	nop
 8011470:	e7fe      	b.n	8011470 <prvTaskExitError+0x28>
	__asm volatile
 8011472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011476:	f383 8811 	msr	BASEPRI, r3
 801147a:	f3bf 8f6f 	isb	sy
 801147e:	f3bf 8f4f 	dsb	sy
 8011482:	60bb      	str	r3, [r7, #8]
}
 8011484:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011486:	bf00      	nop
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d0fc      	beq.n	8011488 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801148e:	bf00      	nop
 8011490:	bf00      	nop
 8011492:	3714      	adds	r7, #20
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr
 801149c:	200000b0 	.word	0x200000b0

080114a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80114a0:	4b07      	ldr	r3, [pc, #28]	; (80114c0 <pxCurrentTCBConst2>)
 80114a2:	6819      	ldr	r1, [r3, #0]
 80114a4:	6808      	ldr	r0, [r1, #0]
 80114a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114aa:	f380 8809 	msr	PSP, r0
 80114ae:	f3bf 8f6f 	isb	sy
 80114b2:	f04f 0000 	mov.w	r0, #0
 80114b6:	f380 8811 	msr	BASEPRI, r0
 80114ba:	4770      	bx	lr
 80114bc:	f3af 8000 	nop.w

080114c0 <pxCurrentTCBConst2>:
 80114c0:	20000614 	.word	0x20000614
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80114c4:	bf00      	nop
 80114c6:	bf00      	nop

080114c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80114c8:	4808      	ldr	r0, [pc, #32]	; (80114ec <prvPortStartFirstTask+0x24>)
 80114ca:	6800      	ldr	r0, [r0, #0]
 80114cc:	6800      	ldr	r0, [r0, #0]
 80114ce:	f380 8808 	msr	MSP, r0
 80114d2:	f04f 0000 	mov.w	r0, #0
 80114d6:	f380 8814 	msr	CONTROL, r0
 80114da:	b662      	cpsie	i
 80114dc:	b661      	cpsie	f
 80114de:	f3bf 8f4f 	dsb	sy
 80114e2:	f3bf 8f6f 	isb	sy
 80114e6:	df00      	svc	0
 80114e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80114ea:	bf00      	nop
 80114ec:	e000ed08 	.word	0xe000ed08

080114f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b086      	sub	sp, #24
 80114f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80114f6:	4b46      	ldr	r3, [pc, #280]	; (8011610 <xPortStartScheduler+0x120>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	4a46      	ldr	r2, [pc, #280]	; (8011614 <xPortStartScheduler+0x124>)
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d10a      	bne.n	8011516 <xPortStartScheduler+0x26>
	__asm volatile
 8011500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011504:	f383 8811 	msr	BASEPRI, r3
 8011508:	f3bf 8f6f 	isb	sy
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	613b      	str	r3, [r7, #16]
}
 8011512:	bf00      	nop
 8011514:	e7fe      	b.n	8011514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011516:	4b3e      	ldr	r3, [pc, #248]	; (8011610 <xPortStartScheduler+0x120>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	4a3f      	ldr	r2, [pc, #252]	; (8011618 <xPortStartScheduler+0x128>)
 801151c:	4293      	cmp	r3, r2
 801151e:	d10a      	bne.n	8011536 <xPortStartScheduler+0x46>
	__asm volatile
 8011520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011524:	f383 8811 	msr	BASEPRI, r3
 8011528:	f3bf 8f6f 	isb	sy
 801152c:	f3bf 8f4f 	dsb	sy
 8011530:	60fb      	str	r3, [r7, #12]
}
 8011532:	bf00      	nop
 8011534:	e7fe      	b.n	8011534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011536:	4b39      	ldr	r3, [pc, #228]	; (801161c <xPortStartScheduler+0x12c>)
 8011538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	b2db      	uxtb	r3, r3
 8011540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	22ff      	movs	r2, #255	; 0xff
 8011546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	b2db      	uxtb	r3, r3
 801154e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011550:	78fb      	ldrb	r3, [r7, #3]
 8011552:	b2db      	uxtb	r3, r3
 8011554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011558:	b2da      	uxtb	r2, r3
 801155a:	4b31      	ldr	r3, [pc, #196]	; (8011620 <xPortStartScheduler+0x130>)
 801155c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801155e:	4b31      	ldr	r3, [pc, #196]	; (8011624 <xPortStartScheduler+0x134>)
 8011560:	2207      	movs	r2, #7
 8011562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011564:	e009      	b.n	801157a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011566:	4b2f      	ldr	r3, [pc, #188]	; (8011624 <xPortStartScheduler+0x134>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	3b01      	subs	r3, #1
 801156c:	4a2d      	ldr	r2, [pc, #180]	; (8011624 <xPortStartScheduler+0x134>)
 801156e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011570:	78fb      	ldrb	r3, [r7, #3]
 8011572:	b2db      	uxtb	r3, r3
 8011574:	005b      	lsls	r3, r3, #1
 8011576:	b2db      	uxtb	r3, r3
 8011578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801157a:	78fb      	ldrb	r3, [r7, #3]
 801157c:	b2db      	uxtb	r3, r3
 801157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011582:	2b80      	cmp	r3, #128	; 0x80
 8011584:	d0ef      	beq.n	8011566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011586:	4b27      	ldr	r3, [pc, #156]	; (8011624 <xPortStartScheduler+0x134>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f1c3 0307 	rsb	r3, r3, #7
 801158e:	2b04      	cmp	r3, #4
 8011590:	d00a      	beq.n	80115a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8011592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011596:	f383 8811 	msr	BASEPRI, r3
 801159a:	f3bf 8f6f 	isb	sy
 801159e:	f3bf 8f4f 	dsb	sy
 80115a2:	60bb      	str	r3, [r7, #8]
}
 80115a4:	bf00      	nop
 80115a6:	e7fe      	b.n	80115a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80115a8:	4b1e      	ldr	r3, [pc, #120]	; (8011624 <xPortStartScheduler+0x134>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	021b      	lsls	r3, r3, #8
 80115ae:	4a1d      	ldr	r2, [pc, #116]	; (8011624 <xPortStartScheduler+0x134>)
 80115b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80115b2:	4b1c      	ldr	r3, [pc, #112]	; (8011624 <xPortStartScheduler+0x134>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80115ba:	4a1a      	ldr	r2, [pc, #104]	; (8011624 <xPortStartScheduler+0x134>)
 80115bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	b2da      	uxtb	r2, r3
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80115c6:	4b18      	ldr	r3, [pc, #96]	; (8011628 <xPortStartScheduler+0x138>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	4a17      	ldr	r2, [pc, #92]	; (8011628 <xPortStartScheduler+0x138>)
 80115cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80115d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80115d2:	4b15      	ldr	r3, [pc, #84]	; (8011628 <xPortStartScheduler+0x138>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	4a14      	ldr	r2, [pc, #80]	; (8011628 <xPortStartScheduler+0x138>)
 80115d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80115dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80115de:	f000 f8dd 	bl	801179c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80115e2:	4b12      	ldr	r3, [pc, #72]	; (801162c <xPortStartScheduler+0x13c>)
 80115e4:	2200      	movs	r2, #0
 80115e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80115e8:	f000 f8fc 	bl	80117e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80115ec:	4b10      	ldr	r3, [pc, #64]	; (8011630 <xPortStartScheduler+0x140>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4a0f      	ldr	r2, [pc, #60]	; (8011630 <xPortStartScheduler+0x140>)
 80115f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80115f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80115f8:	f7ff ff66 	bl	80114c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80115fc:	f7ff fa88 	bl	8010b10 <vTaskSwitchContext>
	prvTaskExitError();
 8011600:	f7ff ff22 	bl	8011448 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011604:	2300      	movs	r3, #0
}
 8011606:	4618      	mov	r0, r3
 8011608:	3718      	adds	r7, #24
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	e000ed00 	.word	0xe000ed00
 8011614:	410fc271 	.word	0x410fc271
 8011618:	410fc270 	.word	0x410fc270
 801161c:	e000e400 	.word	0xe000e400
 8011620:	20000740 	.word	0x20000740
 8011624:	20000744 	.word	0x20000744
 8011628:	e000ed20 	.word	0xe000ed20
 801162c:	200000b0 	.word	0x200000b0
 8011630:	e000ef34 	.word	0xe000ef34

08011634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
	__asm volatile
 801163a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801163e:	f383 8811 	msr	BASEPRI, r3
 8011642:	f3bf 8f6f 	isb	sy
 8011646:	f3bf 8f4f 	dsb	sy
 801164a:	607b      	str	r3, [r7, #4]
}
 801164c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801164e:	4b0f      	ldr	r3, [pc, #60]	; (801168c <vPortEnterCritical+0x58>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	3301      	adds	r3, #1
 8011654:	4a0d      	ldr	r2, [pc, #52]	; (801168c <vPortEnterCritical+0x58>)
 8011656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011658:	4b0c      	ldr	r3, [pc, #48]	; (801168c <vPortEnterCritical+0x58>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	2b01      	cmp	r3, #1
 801165e:	d10f      	bne.n	8011680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011660:	4b0b      	ldr	r3, [pc, #44]	; (8011690 <vPortEnterCritical+0x5c>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	b2db      	uxtb	r3, r3
 8011666:	2b00      	cmp	r3, #0
 8011668:	d00a      	beq.n	8011680 <vPortEnterCritical+0x4c>
	__asm volatile
 801166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801166e:	f383 8811 	msr	BASEPRI, r3
 8011672:	f3bf 8f6f 	isb	sy
 8011676:	f3bf 8f4f 	dsb	sy
 801167a:	603b      	str	r3, [r7, #0]
}
 801167c:	bf00      	nop
 801167e:	e7fe      	b.n	801167e <vPortEnterCritical+0x4a>
	}
}
 8011680:	bf00      	nop
 8011682:	370c      	adds	r7, #12
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr
 801168c:	200000b0 	.word	0x200000b0
 8011690:	e000ed04 	.word	0xe000ed04

08011694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011694:	b480      	push	{r7}
 8011696:	b083      	sub	sp, #12
 8011698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801169a:	4b12      	ldr	r3, [pc, #72]	; (80116e4 <vPortExitCritical+0x50>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d10a      	bne.n	80116b8 <vPortExitCritical+0x24>
	__asm volatile
 80116a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a6:	f383 8811 	msr	BASEPRI, r3
 80116aa:	f3bf 8f6f 	isb	sy
 80116ae:	f3bf 8f4f 	dsb	sy
 80116b2:	607b      	str	r3, [r7, #4]
}
 80116b4:	bf00      	nop
 80116b6:	e7fe      	b.n	80116b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80116b8:	4b0a      	ldr	r3, [pc, #40]	; (80116e4 <vPortExitCritical+0x50>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	3b01      	subs	r3, #1
 80116be:	4a09      	ldr	r2, [pc, #36]	; (80116e4 <vPortExitCritical+0x50>)
 80116c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80116c2:	4b08      	ldr	r3, [pc, #32]	; (80116e4 <vPortExitCritical+0x50>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d105      	bne.n	80116d6 <vPortExitCritical+0x42>
 80116ca:	2300      	movs	r3, #0
 80116cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	f383 8811 	msr	BASEPRI, r3
}
 80116d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80116d6:	bf00      	nop
 80116d8:	370c      	adds	r7, #12
 80116da:	46bd      	mov	sp, r7
 80116dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	200000b0 	.word	0x200000b0
	...

080116f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80116f0:	f3ef 8009 	mrs	r0, PSP
 80116f4:	f3bf 8f6f 	isb	sy
 80116f8:	4b15      	ldr	r3, [pc, #84]	; (8011750 <pxCurrentTCBConst>)
 80116fa:	681a      	ldr	r2, [r3, #0]
 80116fc:	f01e 0f10 	tst.w	lr, #16
 8011700:	bf08      	it	eq
 8011702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801170a:	6010      	str	r0, [r2, #0]
 801170c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011714:	f380 8811 	msr	BASEPRI, r0
 8011718:	f3bf 8f4f 	dsb	sy
 801171c:	f3bf 8f6f 	isb	sy
 8011720:	f7ff f9f6 	bl	8010b10 <vTaskSwitchContext>
 8011724:	f04f 0000 	mov.w	r0, #0
 8011728:	f380 8811 	msr	BASEPRI, r0
 801172c:	bc09      	pop	{r0, r3}
 801172e:	6819      	ldr	r1, [r3, #0]
 8011730:	6808      	ldr	r0, [r1, #0]
 8011732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011736:	f01e 0f10 	tst.w	lr, #16
 801173a:	bf08      	it	eq
 801173c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011740:	f380 8809 	msr	PSP, r0
 8011744:	f3bf 8f6f 	isb	sy
 8011748:	4770      	bx	lr
 801174a:	bf00      	nop
 801174c:	f3af 8000 	nop.w

08011750 <pxCurrentTCBConst>:
 8011750:	20000614 	.word	0x20000614
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011754:	bf00      	nop
 8011756:	bf00      	nop

08011758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
	__asm volatile
 801175e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011762:	f383 8811 	msr	BASEPRI, r3
 8011766:	f3bf 8f6f 	isb	sy
 801176a:	f3bf 8f4f 	dsb	sy
 801176e:	607b      	str	r3, [r7, #4]
}
 8011770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011772:	f7ff f915 	bl	80109a0 <xTaskIncrementTick>
 8011776:	4603      	mov	r3, r0
 8011778:	2b00      	cmp	r3, #0
 801177a:	d003      	beq.n	8011784 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801177c:	4b06      	ldr	r3, [pc, #24]	; (8011798 <SysTick_Handler+0x40>)
 801177e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	2300      	movs	r3, #0
 8011786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	f383 8811 	msr	BASEPRI, r3
}
 801178e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011790:	bf00      	nop
 8011792:	3708      	adds	r7, #8
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}
 8011798:	e000ed04 	.word	0xe000ed04

0801179c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801179c:	b480      	push	{r7}
 801179e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80117a0:	4b0b      	ldr	r3, [pc, #44]	; (80117d0 <vPortSetupTimerInterrupt+0x34>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80117a6:	4b0b      	ldr	r3, [pc, #44]	; (80117d4 <vPortSetupTimerInterrupt+0x38>)
 80117a8:	2200      	movs	r2, #0
 80117aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80117ac:	4b0a      	ldr	r3, [pc, #40]	; (80117d8 <vPortSetupTimerInterrupt+0x3c>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	4a0a      	ldr	r2, [pc, #40]	; (80117dc <vPortSetupTimerInterrupt+0x40>)
 80117b2:	fba2 2303 	umull	r2, r3, r2, r3
 80117b6:	099b      	lsrs	r3, r3, #6
 80117b8:	4a09      	ldr	r2, [pc, #36]	; (80117e0 <vPortSetupTimerInterrupt+0x44>)
 80117ba:	3b01      	subs	r3, #1
 80117bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80117be:	4b04      	ldr	r3, [pc, #16]	; (80117d0 <vPortSetupTimerInterrupt+0x34>)
 80117c0:	2207      	movs	r2, #7
 80117c2:	601a      	str	r2, [r3, #0]
}
 80117c4:	bf00      	nop
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop
 80117d0:	e000e010 	.word	0xe000e010
 80117d4:	e000e018 	.word	0xe000e018
 80117d8:	20000044 	.word	0x20000044
 80117dc:	10624dd3 	.word	0x10624dd3
 80117e0:	e000e014 	.word	0xe000e014

080117e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80117e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80117f4 <vPortEnableVFP+0x10>
 80117e8:	6801      	ldr	r1, [r0, #0]
 80117ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80117ee:	6001      	str	r1, [r0, #0]
 80117f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80117f2:	bf00      	nop
 80117f4:	e000ed88 	.word	0xe000ed88

080117f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80117f8:	b480      	push	{r7}
 80117fa:	b085      	sub	sp, #20
 80117fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80117fe:	f3ef 8305 	mrs	r3, IPSR
 8011802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2b0f      	cmp	r3, #15
 8011808:	d914      	bls.n	8011834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801180a:	4a17      	ldr	r2, [pc, #92]	; (8011868 <vPortValidateInterruptPriority+0x70>)
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	4413      	add	r3, r2
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011814:	4b15      	ldr	r3, [pc, #84]	; (801186c <vPortValidateInterruptPriority+0x74>)
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	7afa      	ldrb	r2, [r7, #11]
 801181a:	429a      	cmp	r2, r3
 801181c:	d20a      	bcs.n	8011834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011822:	f383 8811 	msr	BASEPRI, r3
 8011826:	f3bf 8f6f 	isb	sy
 801182a:	f3bf 8f4f 	dsb	sy
 801182e:	607b      	str	r3, [r7, #4]
}
 8011830:	bf00      	nop
 8011832:	e7fe      	b.n	8011832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011834:	4b0e      	ldr	r3, [pc, #56]	; (8011870 <vPortValidateInterruptPriority+0x78>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801183c:	4b0d      	ldr	r3, [pc, #52]	; (8011874 <vPortValidateInterruptPriority+0x7c>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	429a      	cmp	r2, r3
 8011842:	d90a      	bls.n	801185a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011848:	f383 8811 	msr	BASEPRI, r3
 801184c:	f3bf 8f6f 	isb	sy
 8011850:	f3bf 8f4f 	dsb	sy
 8011854:	603b      	str	r3, [r7, #0]
}
 8011856:	bf00      	nop
 8011858:	e7fe      	b.n	8011858 <vPortValidateInterruptPriority+0x60>
	}
 801185a:	bf00      	nop
 801185c:	3714      	adds	r7, #20
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr
 8011866:	bf00      	nop
 8011868:	e000e3f0 	.word	0xe000e3f0
 801186c:	20000740 	.word	0x20000740
 8011870:	e000ed0c 	.word	0xe000ed0c
 8011874:	20000744 	.word	0x20000744

08011878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b08a      	sub	sp, #40	; 0x28
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011880:	2300      	movs	r3, #0
 8011882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011884:	f7fe ffe2 	bl	801084c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011888:	4b5b      	ldr	r3, [pc, #364]	; (80119f8 <pvPortMalloc+0x180>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d101      	bne.n	8011894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011890:	f000 f920 	bl	8011ad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011894:	4b59      	ldr	r3, [pc, #356]	; (80119fc <pvPortMalloc+0x184>)
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	4013      	ands	r3, r2
 801189c:	2b00      	cmp	r3, #0
 801189e:	f040 8093 	bne.w	80119c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d01d      	beq.n	80118e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80118a8:	2208      	movs	r2, #8
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	4413      	add	r3, r2
 80118ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f003 0307 	and.w	r3, r3, #7
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d014      	beq.n	80118e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f023 0307 	bic.w	r3, r3, #7
 80118c0:	3308      	adds	r3, #8
 80118c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f003 0307 	and.w	r3, r3, #7
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00a      	beq.n	80118e4 <pvPortMalloc+0x6c>
	__asm volatile
 80118ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d2:	f383 8811 	msr	BASEPRI, r3
 80118d6:	f3bf 8f6f 	isb	sy
 80118da:	f3bf 8f4f 	dsb	sy
 80118de:	617b      	str	r3, [r7, #20]
}
 80118e0:	bf00      	nop
 80118e2:	e7fe      	b.n	80118e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d06e      	beq.n	80119c8 <pvPortMalloc+0x150>
 80118ea:	4b45      	ldr	r3, [pc, #276]	; (8011a00 <pvPortMalloc+0x188>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d869      	bhi.n	80119c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80118f4:	4b43      	ldr	r3, [pc, #268]	; (8011a04 <pvPortMalloc+0x18c>)
 80118f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80118f8:	4b42      	ldr	r3, [pc, #264]	; (8011a04 <pvPortMalloc+0x18c>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80118fe:	e004      	b.n	801190a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	687a      	ldr	r2, [r7, #4]
 8011910:	429a      	cmp	r2, r3
 8011912:	d903      	bls.n	801191c <pvPortMalloc+0xa4>
 8011914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d1f1      	bne.n	8011900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801191c:	4b36      	ldr	r3, [pc, #216]	; (80119f8 <pvPortMalloc+0x180>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011922:	429a      	cmp	r2, r3
 8011924:	d050      	beq.n	80119c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011926:	6a3b      	ldr	r3, [r7, #32]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2208      	movs	r2, #8
 801192c:	4413      	add	r3, r2
 801192e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	6a3b      	ldr	r3, [r7, #32]
 8011936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193a:	685a      	ldr	r2, [r3, #4]
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	1ad2      	subs	r2, r2, r3
 8011940:	2308      	movs	r3, #8
 8011942:	005b      	lsls	r3, r3, #1
 8011944:	429a      	cmp	r2, r3
 8011946:	d91f      	bls.n	8011988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	4413      	add	r3, r2
 801194e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	f003 0307 	and.w	r3, r3, #7
 8011956:	2b00      	cmp	r3, #0
 8011958:	d00a      	beq.n	8011970 <pvPortMalloc+0xf8>
	__asm volatile
 801195a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801195e:	f383 8811 	msr	BASEPRI, r3
 8011962:	f3bf 8f6f 	isb	sy
 8011966:	f3bf 8f4f 	dsb	sy
 801196a:	613b      	str	r3, [r7, #16]
}
 801196c:	bf00      	nop
 801196e:	e7fe      	b.n	801196e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011972:	685a      	ldr	r2, [r3, #4]
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	1ad2      	subs	r2, r2, r3
 8011978:	69bb      	ldr	r3, [r7, #24]
 801197a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011982:	69b8      	ldr	r0, [r7, #24]
 8011984:	f000 f908 	bl	8011b98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011988:	4b1d      	ldr	r3, [pc, #116]	; (8011a00 <pvPortMalloc+0x188>)
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	1ad3      	subs	r3, r2, r3
 8011992:	4a1b      	ldr	r2, [pc, #108]	; (8011a00 <pvPortMalloc+0x188>)
 8011994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011996:	4b1a      	ldr	r3, [pc, #104]	; (8011a00 <pvPortMalloc+0x188>)
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	4b1b      	ldr	r3, [pc, #108]	; (8011a08 <pvPortMalloc+0x190>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	429a      	cmp	r2, r3
 80119a0:	d203      	bcs.n	80119aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80119a2:	4b17      	ldr	r3, [pc, #92]	; (8011a00 <pvPortMalloc+0x188>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	4a18      	ldr	r2, [pc, #96]	; (8011a08 <pvPortMalloc+0x190>)
 80119a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80119aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ac:	685a      	ldr	r2, [r3, #4]
 80119ae:	4b13      	ldr	r3, [pc, #76]	; (80119fc <pvPortMalloc+0x184>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	431a      	orrs	r2, r3
 80119b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80119b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ba:	2200      	movs	r2, #0
 80119bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80119be:	4b13      	ldr	r3, [pc, #76]	; (8011a0c <pvPortMalloc+0x194>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	3301      	adds	r3, #1
 80119c4:	4a11      	ldr	r2, [pc, #68]	; (8011a0c <pvPortMalloc+0x194>)
 80119c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80119c8:	f7fe ff4e 	bl	8010868 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80119cc:	69fb      	ldr	r3, [r7, #28]
 80119ce:	f003 0307 	and.w	r3, r3, #7
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d00a      	beq.n	80119ec <pvPortMalloc+0x174>
	__asm volatile
 80119d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119da:	f383 8811 	msr	BASEPRI, r3
 80119de:	f3bf 8f6f 	isb	sy
 80119e2:	f3bf 8f4f 	dsb	sy
 80119e6:	60fb      	str	r3, [r7, #12]
}
 80119e8:	bf00      	nop
 80119ea:	e7fe      	b.n	80119ea <pvPortMalloc+0x172>
	return pvReturn;
 80119ec:	69fb      	ldr	r3, [r7, #28]
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3728      	adds	r7, #40	; 0x28
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	20010150 	.word	0x20010150
 80119fc:	20010164 	.word	0x20010164
 8011a00:	20010154 	.word	0x20010154
 8011a04:	20010148 	.word	0x20010148
 8011a08:	20010158 	.word	0x20010158
 8011a0c:	2001015c 	.word	0x2001015c

08011a10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b086      	sub	sp, #24
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d04d      	beq.n	8011abe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011a22:	2308      	movs	r3, #8
 8011a24:	425b      	negs	r3, r3
 8011a26:	697a      	ldr	r2, [r7, #20]
 8011a28:	4413      	add	r3, r2
 8011a2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	685a      	ldr	r2, [r3, #4]
 8011a34:	4b24      	ldr	r3, [pc, #144]	; (8011ac8 <vPortFree+0xb8>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	4013      	ands	r3, r2
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d10a      	bne.n	8011a54 <vPortFree+0x44>
	__asm volatile
 8011a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a42:	f383 8811 	msr	BASEPRI, r3
 8011a46:	f3bf 8f6f 	isb	sy
 8011a4a:	f3bf 8f4f 	dsb	sy
 8011a4e:	60fb      	str	r3, [r7, #12]
}
 8011a50:	bf00      	nop
 8011a52:	e7fe      	b.n	8011a52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d00a      	beq.n	8011a72 <vPortFree+0x62>
	__asm volatile
 8011a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a60:	f383 8811 	msr	BASEPRI, r3
 8011a64:	f3bf 8f6f 	isb	sy
 8011a68:	f3bf 8f4f 	dsb	sy
 8011a6c:	60bb      	str	r3, [r7, #8]
}
 8011a6e:	bf00      	nop
 8011a70:	e7fe      	b.n	8011a70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	685a      	ldr	r2, [r3, #4]
 8011a76:	4b14      	ldr	r3, [pc, #80]	; (8011ac8 <vPortFree+0xb8>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d01e      	beq.n	8011abe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d11a      	bne.n	8011abe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	685a      	ldr	r2, [r3, #4]
 8011a8c:	4b0e      	ldr	r3, [pc, #56]	; (8011ac8 <vPortFree+0xb8>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	43db      	mvns	r3, r3
 8011a92:	401a      	ands	r2, r3
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011a98:	f7fe fed8 	bl	801084c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	685a      	ldr	r2, [r3, #4]
 8011aa0:	4b0a      	ldr	r3, [pc, #40]	; (8011acc <vPortFree+0xbc>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4413      	add	r3, r2
 8011aa6:	4a09      	ldr	r2, [pc, #36]	; (8011acc <vPortFree+0xbc>)
 8011aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011aaa:	6938      	ldr	r0, [r7, #16]
 8011aac:	f000 f874 	bl	8011b98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011ab0:	4b07      	ldr	r3, [pc, #28]	; (8011ad0 <vPortFree+0xc0>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	3301      	adds	r3, #1
 8011ab6:	4a06      	ldr	r2, [pc, #24]	; (8011ad0 <vPortFree+0xc0>)
 8011ab8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011aba:	f7fe fed5 	bl	8010868 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011abe:	bf00      	nop
 8011ac0:	3718      	adds	r7, #24
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	20010164 	.word	0x20010164
 8011acc:	20010154 	.word	0x20010154
 8011ad0:	20010160 	.word	0x20010160

08011ad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	b085      	sub	sp, #20
 8011ad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011ada:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8011ade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011ae0:	4b27      	ldr	r3, [pc, #156]	; (8011b80 <prvHeapInit+0xac>)
 8011ae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f003 0307 	and.w	r3, r3, #7
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d00c      	beq.n	8011b08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	3307      	adds	r3, #7
 8011af2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	f023 0307 	bic.w	r3, r3, #7
 8011afa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011afc:	68ba      	ldr	r2, [r7, #8]
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	1ad3      	subs	r3, r2, r3
 8011b02:	4a1f      	ldr	r2, [pc, #124]	; (8011b80 <prvHeapInit+0xac>)
 8011b04:	4413      	add	r3, r2
 8011b06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011b0c:	4a1d      	ldr	r2, [pc, #116]	; (8011b84 <prvHeapInit+0xb0>)
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011b12:	4b1c      	ldr	r3, [pc, #112]	; (8011b84 <prvHeapInit+0xb0>)
 8011b14:	2200      	movs	r2, #0
 8011b16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	68ba      	ldr	r2, [r7, #8]
 8011b1c:	4413      	add	r3, r2
 8011b1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011b20:	2208      	movs	r2, #8
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	1a9b      	subs	r3, r3, r2
 8011b26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	f023 0307 	bic.w	r3, r3, #7
 8011b2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	4a15      	ldr	r2, [pc, #84]	; (8011b88 <prvHeapInit+0xb4>)
 8011b34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011b36:	4b14      	ldr	r3, [pc, #80]	; (8011b88 <prvHeapInit+0xb4>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011b3e:	4b12      	ldr	r3, [pc, #72]	; (8011b88 <prvHeapInit+0xb4>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	2200      	movs	r2, #0
 8011b44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	68fa      	ldr	r2, [r7, #12]
 8011b4e:	1ad2      	subs	r2, r2, r3
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011b54:	4b0c      	ldr	r3, [pc, #48]	; (8011b88 <prvHeapInit+0xb4>)
 8011b56:	681a      	ldr	r2, [r3, #0]
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	4a0a      	ldr	r2, [pc, #40]	; (8011b8c <prvHeapInit+0xb8>)
 8011b62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	4a09      	ldr	r2, [pc, #36]	; (8011b90 <prvHeapInit+0xbc>)
 8011b6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011b6c:	4b09      	ldr	r3, [pc, #36]	; (8011b94 <prvHeapInit+0xc0>)
 8011b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011b72:	601a      	str	r2, [r3, #0]
}
 8011b74:	bf00      	nop
 8011b76:	3714      	adds	r7, #20
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7e:	4770      	bx	lr
 8011b80:	20000748 	.word	0x20000748
 8011b84:	20010148 	.word	0x20010148
 8011b88:	20010150 	.word	0x20010150
 8011b8c:	20010158 	.word	0x20010158
 8011b90:	20010154 	.word	0x20010154
 8011b94:	20010164 	.word	0x20010164

08011b98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b085      	sub	sp, #20
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011ba0:	4b28      	ldr	r3, [pc, #160]	; (8011c44 <prvInsertBlockIntoFreeList+0xac>)
 8011ba2:	60fb      	str	r3, [r7, #12]
 8011ba4:	e002      	b.n	8011bac <prvInsertBlockIntoFreeList+0x14>
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	60fb      	str	r3, [r7, #12]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	687a      	ldr	r2, [r7, #4]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d8f7      	bhi.n	8011ba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	68ba      	ldr	r2, [r7, #8]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	687a      	ldr	r2, [r7, #4]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d108      	bne.n	8011bda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	685a      	ldr	r2, [r3, #4]
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	685b      	ldr	r3, [r3, #4]
 8011bd0:	441a      	add	r2, r3
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	68ba      	ldr	r2, [r7, #8]
 8011be4:	441a      	add	r2, r3
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d118      	bne.n	8011c20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	4b15      	ldr	r3, [pc, #84]	; (8011c48 <prvInsertBlockIntoFreeList+0xb0>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d00d      	beq.n	8011c16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	685a      	ldr	r2, [r3, #4]
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	441a      	add	r2, r3
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	681a      	ldr	r2, [r3, #0]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	601a      	str	r2, [r3, #0]
 8011c14:	e008      	b.n	8011c28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011c16:	4b0c      	ldr	r3, [pc, #48]	; (8011c48 <prvInsertBlockIntoFreeList+0xb0>)
 8011c18:	681a      	ldr	r2, [r3, #0]
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	601a      	str	r2, [r3, #0]
 8011c1e:	e003      	b.n	8011c28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	681a      	ldr	r2, [r3, #0]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011c28:	68fa      	ldr	r2, [r7, #12]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d002      	beq.n	8011c36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011c36:	bf00      	nop
 8011c38:	3714      	adds	r7, #20
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr
 8011c42:	bf00      	nop
 8011c44:	20010148 	.word	0x20010148
 8011c48:	20010150 	.word	0x20010150

08011c4c <atof>:
 8011c4c:	2100      	movs	r1, #0
 8011c4e:	f001 bf89 	b.w	8013b64 <strtod>

08011c52 <atoi>:
 8011c52:	220a      	movs	r2, #10
 8011c54:	2100      	movs	r1, #0
 8011c56:	f002 b817 	b.w	8013c88 <strtol>
	...

08011c5c <__errno>:
 8011c5c:	4b01      	ldr	r3, [pc, #4]	; (8011c64 <__errno+0x8>)
 8011c5e:	6818      	ldr	r0, [r3, #0]
 8011c60:	4770      	bx	lr
 8011c62:	bf00      	nop
 8011c64:	200000b4 	.word	0x200000b4

08011c68 <std>:
 8011c68:	2300      	movs	r3, #0
 8011c6a:	b510      	push	{r4, lr}
 8011c6c:	4604      	mov	r4, r0
 8011c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8011c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c76:	6083      	str	r3, [r0, #8]
 8011c78:	8181      	strh	r1, [r0, #12]
 8011c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8011c7c:	81c2      	strh	r2, [r0, #14]
 8011c7e:	6183      	str	r3, [r0, #24]
 8011c80:	4619      	mov	r1, r3
 8011c82:	2208      	movs	r2, #8
 8011c84:	305c      	adds	r0, #92	; 0x5c
 8011c86:	f000 fa41 	bl	801210c <memset>
 8011c8a:	4b05      	ldr	r3, [pc, #20]	; (8011ca0 <std+0x38>)
 8011c8c:	6263      	str	r3, [r4, #36]	; 0x24
 8011c8e:	4b05      	ldr	r3, [pc, #20]	; (8011ca4 <std+0x3c>)
 8011c90:	62a3      	str	r3, [r4, #40]	; 0x28
 8011c92:	4b05      	ldr	r3, [pc, #20]	; (8011ca8 <std+0x40>)
 8011c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011c96:	4b05      	ldr	r3, [pc, #20]	; (8011cac <std+0x44>)
 8011c98:	6224      	str	r4, [r4, #32]
 8011c9a:	6323      	str	r3, [r4, #48]	; 0x30
 8011c9c:	bd10      	pop	{r4, pc}
 8011c9e:	bf00      	nop
 8011ca0:	080123a5 	.word	0x080123a5
 8011ca4:	080123cb 	.word	0x080123cb
 8011ca8:	08012403 	.word	0x08012403
 8011cac:	08012427 	.word	0x08012427

08011cb0 <_cleanup_r>:
 8011cb0:	4901      	ldr	r1, [pc, #4]	; (8011cb8 <_cleanup_r+0x8>)
 8011cb2:	f000 b8af 	b.w	8011e14 <_fwalk_reent>
 8011cb6:	bf00      	nop
 8011cb8:	080143ad 	.word	0x080143ad

08011cbc <__sfmoreglue>:
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	1e4a      	subs	r2, r1, #1
 8011cc0:	2568      	movs	r5, #104	; 0x68
 8011cc2:	4355      	muls	r5, r2
 8011cc4:	460e      	mov	r6, r1
 8011cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011cca:	f000 fa77 	bl	80121bc <_malloc_r>
 8011cce:	4604      	mov	r4, r0
 8011cd0:	b140      	cbz	r0, 8011ce4 <__sfmoreglue+0x28>
 8011cd2:	2100      	movs	r1, #0
 8011cd4:	e9c0 1600 	strd	r1, r6, [r0]
 8011cd8:	300c      	adds	r0, #12
 8011cda:	60a0      	str	r0, [r4, #8]
 8011cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ce0:	f000 fa14 	bl	801210c <memset>
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	bd70      	pop	{r4, r5, r6, pc}

08011ce8 <__sfp_lock_acquire>:
 8011ce8:	4801      	ldr	r0, [pc, #4]	; (8011cf0 <__sfp_lock_acquire+0x8>)
 8011cea:	f000 b9ed 	b.w	80120c8 <__retarget_lock_acquire_recursive>
 8011cee:	bf00      	nop
 8011cf0:	20013084 	.word	0x20013084

08011cf4 <__sfp_lock_release>:
 8011cf4:	4801      	ldr	r0, [pc, #4]	; (8011cfc <__sfp_lock_release+0x8>)
 8011cf6:	f000 b9e9 	b.w	80120cc <__retarget_lock_release_recursive>
 8011cfa:	bf00      	nop
 8011cfc:	20013084 	.word	0x20013084

08011d00 <__sinit_lock_acquire>:
 8011d00:	4801      	ldr	r0, [pc, #4]	; (8011d08 <__sinit_lock_acquire+0x8>)
 8011d02:	f000 b9e1 	b.w	80120c8 <__retarget_lock_acquire_recursive>
 8011d06:	bf00      	nop
 8011d08:	2001307f 	.word	0x2001307f

08011d0c <__sinit_lock_release>:
 8011d0c:	4801      	ldr	r0, [pc, #4]	; (8011d14 <__sinit_lock_release+0x8>)
 8011d0e:	f000 b9dd 	b.w	80120cc <__retarget_lock_release_recursive>
 8011d12:	bf00      	nop
 8011d14:	2001307f 	.word	0x2001307f

08011d18 <__sinit>:
 8011d18:	b510      	push	{r4, lr}
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	f7ff fff0 	bl	8011d00 <__sinit_lock_acquire>
 8011d20:	69a3      	ldr	r3, [r4, #24]
 8011d22:	b11b      	cbz	r3, 8011d2c <__sinit+0x14>
 8011d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d28:	f7ff bff0 	b.w	8011d0c <__sinit_lock_release>
 8011d2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011d30:	6523      	str	r3, [r4, #80]	; 0x50
 8011d32:	4b13      	ldr	r3, [pc, #76]	; (8011d80 <__sinit+0x68>)
 8011d34:	4a13      	ldr	r2, [pc, #76]	; (8011d84 <__sinit+0x6c>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	62a2      	str	r2, [r4, #40]	; 0x28
 8011d3a:	42a3      	cmp	r3, r4
 8011d3c:	bf04      	itt	eq
 8011d3e:	2301      	moveq	r3, #1
 8011d40:	61a3      	streq	r3, [r4, #24]
 8011d42:	4620      	mov	r0, r4
 8011d44:	f000 f820 	bl	8011d88 <__sfp>
 8011d48:	6060      	str	r0, [r4, #4]
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f000 f81c 	bl	8011d88 <__sfp>
 8011d50:	60a0      	str	r0, [r4, #8]
 8011d52:	4620      	mov	r0, r4
 8011d54:	f000 f818 	bl	8011d88 <__sfp>
 8011d58:	2200      	movs	r2, #0
 8011d5a:	60e0      	str	r0, [r4, #12]
 8011d5c:	2104      	movs	r1, #4
 8011d5e:	6860      	ldr	r0, [r4, #4]
 8011d60:	f7ff ff82 	bl	8011c68 <std>
 8011d64:	68a0      	ldr	r0, [r4, #8]
 8011d66:	2201      	movs	r2, #1
 8011d68:	2109      	movs	r1, #9
 8011d6a:	f7ff ff7d 	bl	8011c68 <std>
 8011d6e:	68e0      	ldr	r0, [r4, #12]
 8011d70:	2202      	movs	r2, #2
 8011d72:	2112      	movs	r1, #18
 8011d74:	f7ff ff78 	bl	8011c68 <std>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	61a3      	str	r3, [r4, #24]
 8011d7c:	e7d2      	b.n	8011d24 <__sinit+0xc>
 8011d7e:	bf00      	nop
 8011d80:	08021650 	.word	0x08021650
 8011d84:	08011cb1 	.word	0x08011cb1

08011d88 <__sfp>:
 8011d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d8a:	4607      	mov	r7, r0
 8011d8c:	f7ff ffac 	bl	8011ce8 <__sfp_lock_acquire>
 8011d90:	4b1e      	ldr	r3, [pc, #120]	; (8011e0c <__sfp+0x84>)
 8011d92:	681e      	ldr	r6, [r3, #0]
 8011d94:	69b3      	ldr	r3, [r6, #24]
 8011d96:	b913      	cbnz	r3, 8011d9e <__sfp+0x16>
 8011d98:	4630      	mov	r0, r6
 8011d9a:	f7ff ffbd 	bl	8011d18 <__sinit>
 8011d9e:	3648      	adds	r6, #72	; 0x48
 8011da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011da4:	3b01      	subs	r3, #1
 8011da6:	d503      	bpl.n	8011db0 <__sfp+0x28>
 8011da8:	6833      	ldr	r3, [r6, #0]
 8011daa:	b30b      	cbz	r3, 8011df0 <__sfp+0x68>
 8011dac:	6836      	ldr	r6, [r6, #0]
 8011dae:	e7f7      	b.n	8011da0 <__sfp+0x18>
 8011db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011db4:	b9d5      	cbnz	r5, 8011dec <__sfp+0x64>
 8011db6:	4b16      	ldr	r3, [pc, #88]	; (8011e10 <__sfp+0x88>)
 8011db8:	60e3      	str	r3, [r4, #12]
 8011dba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011dbe:	6665      	str	r5, [r4, #100]	; 0x64
 8011dc0:	f000 f980 	bl	80120c4 <__retarget_lock_init_recursive>
 8011dc4:	f7ff ff96 	bl	8011cf4 <__sfp_lock_release>
 8011dc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011dcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011dd0:	6025      	str	r5, [r4, #0]
 8011dd2:	61a5      	str	r5, [r4, #24]
 8011dd4:	2208      	movs	r2, #8
 8011dd6:	4629      	mov	r1, r5
 8011dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ddc:	f000 f996 	bl	801210c <memset>
 8011de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011de8:	4620      	mov	r0, r4
 8011dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dec:	3468      	adds	r4, #104	; 0x68
 8011dee:	e7d9      	b.n	8011da4 <__sfp+0x1c>
 8011df0:	2104      	movs	r1, #4
 8011df2:	4638      	mov	r0, r7
 8011df4:	f7ff ff62 	bl	8011cbc <__sfmoreglue>
 8011df8:	4604      	mov	r4, r0
 8011dfa:	6030      	str	r0, [r6, #0]
 8011dfc:	2800      	cmp	r0, #0
 8011dfe:	d1d5      	bne.n	8011dac <__sfp+0x24>
 8011e00:	f7ff ff78 	bl	8011cf4 <__sfp_lock_release>
 8011e04:	230c      	movs	r3, #12
 8011e06:	603b      	str	r3, [r7, #0]
 8011e08:	e7ee      	b.n	8011de8 <__sfp+0x60>
 8011e0a:	bf00      	nop
 8011e0c:	08021650 	.word	0x08021650
 8011e10:	ffff0001 	.word	0xffff0001

08011e14 <_fwalk_reent>:
 8011e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e18:	4606      	mov	r6, r0
 8011e1a:	4688      	mov	r8, r1
 8011e1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011e20:	2700      	movs	r7, #0
 8011e22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e26:	f1b9 0901 	subs.w	r9, r9, #1
 8011e2a:	d505      	bpl.n	8011e38 <_fwalk_reent+0x24>
 8011e2c:	6824      	ldr	r4, [r4, #0]
 8011e2e:	2c00      	cmp	r4, #0
 8011e30:	d1f7      	bne.n	8011e22 <_fwalk_reent+0xe>
 8011e32:	4638      	mov	r0, r7
 8011e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e38:	89ab      	ldrh	r3, [r5, #12]
 8011e3a:	2b01      	cmp	r3, #1
 8011e3c:	d907      	bls.n	8011e4e <_fwalk_reent+0x3a>
 8011e3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e42:	3301      	adds	r3, #1
 8011e44:	d003      	beq.n	8011e4e <_fwalk_reent+0x3a>
 8011e46:	4629      	mov	r1, r5
 8011e48:	4630      	mov	r0, r6
 8011e4a:	47c0      	blx	r8
 8011e4c:	4307      	orrs	r7, r0
 8011e4e:	3568      	adds	r5, #104	; 0x68
 8011e50:	e7e9      	b.n	8011e26 <_fwalk_reent+0x12>
	...

08011e54 <__libc_init_array>:
 8011e54:	b570      	push	{r4, r5, r6, lr}
 8011e56:	4d0d      	ldr	r5, [pc, #52]	; (8011e8c <__libc_init_array+0x38>)
 8011e58:	4c0d      	ldr	r4, [pc, #52]	; (8011e90 <__libc_init_array+0x3c>)
 8011e5a:	1b64      	subs	r4, r4, r5
 8011e5c:	10a4      	asrs	r4, r4, #2
 8011e5e:	2600      	movs	r6, #0
 8011e60:	42a6      	cmp	r6, r4
 8011e62:	d109      	bne.n	8011e78 <__libc_init_array+0x24>
 8011e64:	4d0b      	ldr	r5, [pc, #44]	; (8011e94 <__libc_init_array+0x40>)
 8011e66:	4c0c      	ldr	r4, [pc, #48]	; (8011e98 <__libc_init_array+0x44>)
 8011e68:	f004 feae 	bl	8016bc8 <_init>
 8011e6c:	1b64      	subs	r4, r4, r5
 8011e6e:	10a4      	asrs	r4, r4, #2
 8011e70:	2600      	movs	r6, #0
 8011e72:	42a6      	cmp	r6, r4
 8011e74:	d105      	bne.n	8011e82 <__libc_init_array+0x2e>
 8011e76:	bd70      	pop	{r4, r5, r6, pc}
 8011e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e7c:	4798      	blx	r3
 8011e7e:	3601      	adds	r6, #1
 8011e80:	e7ee      	b.n	8011e60 <__libc_init_array+0xc>
 8011e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e86:	4798      	blx	r3
 8011e88:	3601      	adds	r6, #1
 8011e8a:	e7f2      	b.n	8011e72 <__libc_init_array+0x1e>
 8011e8c:	08021dc4 	.word	0x08021dc4
 8011e90:	08021dc4 	.word	0x08021dc4
 8011e94:	08021dc4 	.word	0x08021dc4
 8011e98:	08021dc8 	.word	0x08021dc8

08011e9c <localtime>:
 8011e9c:	b538      	push	{r3, r4, r5, lr}
 8011e9e:	4b0b      	ldr	r3, [pc, #44]	; (8011ecc <localtime+0x30>)
 8011ea0:	681d      	ldr	r5, [r3, #0]
 8011ea2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8011ea4:	4604      	mov	r4, r0
 8011ea6:	b953      	cbnz	r3, 8011ebe <localtime+0x22>
 8011ea8:	2024      	movs	r0, #36	; 0x24
 8011eaa:	f000 f911 	bl	80120d0 <malloc>
 8011eae:	4602      	mov	r2, r0
 8011eb0:	63e8      	str	r0, [r5, #60]	; 0x3c
 8011eb2:	b920      	cbnz	r0, 8011ebe <localtime+0x22>
 8011eb4:	4b06      	ldr	r3, [pc, #24]	; (8011ed0 <localtime+0x34>)
 8011eb6:	4807      	ldr	r0, [pc, #28]	; (8011ed4 <localtime+0x38>)
 8011eb8:	2132      	movs	r1, #50	; 0x32
 8011eba:	f002 f9c3 	bl	8014244 <__assert_func>
 8011ebe:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ec6:	f000 b807 	b.w	8011ed8 <localtime_r>
 8011eca:	bf00      	nop
 8011ecc:	200000b4 	.word	0x200000b4
 8011ed0:	08021654 	.word	0x08021654
 8011ed4:	0802166b 	.word	0x0802166b

08011ed8 <localtime_r>:
 8011ed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011edc:	4607      	mov	r7, r0
 8011ede:	9101      	str	r1, [sp, #4]
 8011ee0:	f002 fe64 	bl	8014bac <__gettzinfo>
 8011ee4:	9901      	ldr	r1, [sp, #4]
 8011ee6:	4680      	mov	r8, r0
 8011ee8:	4638      	mov	r0, r7
 8011eea:	f002 fe63 	bl	8014bb4 <gmtime_r>
 8011eee:	6943      	ldr	r3, [r0, #20]
 8011ef0:	079a      	lsls	r2, r3, #30
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8011ef8:	d105      	bne.n	8011f06 <localtime_r+0x2e>
 8011efa:	2264      	movs	r2, #100	; 0x64
 8011efc:	fb96 f3f2 	sdiv	r3, r6, r2
 8011f00:	fb02 6313 	mls	r3, r2, r3, r6
 8011f04:	bb7b      	cbnz	r3, 8011f66 <localtime_r+0x8e>
 8011f06:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011f0a:	fb96 f5f3 	sdiv	r5, r6, r3
 8011f0e:	fb03 6515 	mls	r5, r3, r5, r6
 8011f12:	fab5 f585 	clz	r5, r5
 8011f16:	096d      	lsrs	r5, r5, #5
 8011f18:	4b68      	ldr	r3, [pc, #416]	; (80120bc <localtime_r+0x1e4>)
 8011f1a:	2230      	movs	r2, #48	; 0x30
 8011f1c:	fb02 3505 	mla	r5, r2, r5, r3
 8011f20:	f001 ffec 	bl	8013efc <__tz_lock>
 8011f24:	f001 fff6 	bl	8013f14 <_tzset_unlocked>
 8011f28:	4b65      	ldr	r3, [pc, #404]	; (80120c0 <localtime_r+0x1e8>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	b353      	cbz	r3, 8011f84 <localtime_r+0xac>
 8011f2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011f32:	42b3      	cmp	r3, r6
 8011f34:	d119      	bne.n	8011f6a <localtime_r+0x92>
 8011f36:	f8d8 1000 	ldr.w	r1, [r8]
 8011f3a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011f3e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8011f42:	b9d1      	cbnz	r1, 8011f7a <localtime_r+0xa2>
 8011f44:	4296      	cmp	r6, r2
 8011f46:	eb77 0303 	sbcs.w	r3, r7, r3
 8011f4a:	da23      	bge.n	8011f94 <localtime_r+0xbc>
 8011f4c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8011f50:	4296      	cmp	r6, r2
 8011f52:	eb77 0303 	sbcs.w	r3, r7, r3
 8011f56:	bfb4      	ite	lt
 8011f58:	2301      	movlt	r3, #1
 8011f5a:	2300      	movge	r3, #0
 8011f5c:	6223      	str	r3, [r4, #32]
 8011f5e:	db1b      	blt.n	8011f98 <localtime_r+0xc0>
 8011f60:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8011f64:	e01a      	b.n	8011f9c <localtime_r+0xc4>
 8011f66:	2501      	movs	r5, #1
 8011f68:	e7d6      	b.n	8011f18 <localtime_r+0x40>
 8011f6a:	4630      	mov	r0, r6
 8011f6c:	f001 ff1e 	bl	8013dac <__tzcalc_limits>
 8011f70:	2800      	cmp	r0, #0
 8011f72:	d1e0      	bne.n	8011f36 <localtime_r+0x5e>
 8011f74:	f04f 33ff 	mov.w	r3, #4294967295
 8011f78:	e004      	b.n	8011f84 <localtime_r+0xac>
 8011f7a:	4296      	cmp	r6, r2
 8011f7c:	eb77 0303 	sbcs.w	r3, r7, r3
 8011f80:	da02      	bge.n	8011f88 <localtime_r+0xb0>
 8011f82:	2300      	movs	r3, #0
 8011f84:	6223      	str	r3, [r4, #32]
 8011f86:	e7eb      	b.n	8011f60 <localtime_r+0x88>
 8011f88:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8011f8c:	4296      	cmp	r6, r2
 8011f8e:	eb77 0303 	sbcs.w	r3, r7, r3
 8011f92:	daf6      	bge.n	8011f82 <localtime_r+0xaa>
 8011f94:	2301      	movs	r3, #1
 8011f96:	6223      	str	r3, [r4, #32]
 8011f98:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8011f9c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8011fa0:	203c      	movs	r0, #60	; 0x3c
 8011fa2:	fb91 f6f3 	sdiv	r6, r1, r3
 8011fa6:	fb03 1316 	mls	r3, r3, r6, r1
 8011faa:	6861      	ldr	r1, [r4, #4]
 8011fac:	fb93 f2f0 	sdiv	r2, r3, r0
 8011fb0:	fb00 3012 	mls	r0, r0, r2, r3
 8011fb4:	6823      	ldr	r3, [r4, #0]
 8011fb6:	1a89      	subs	r1, r1, r2
 8011fb8:	68a2      	ldr	r2, [r4, #8]
 8011fba:	6061      	str	r1, [r4, #4]
 8011fbc:	1a1b      	subs	r3, r3, r0
 8011fbe:	1b92      	subs	r2, r2, r6
 8011fc0:	2b3b      	cmp	r3, #59	; 0x3b
 8011fc2:	6023      	str	r3, [r4, #0]
 8011fc4:	60a2      	str	r2, [r4, #8]
 8011fc6:	dd35      	ble.n	8012034 <localtime_r+0x15c>
 8011fc8:	3101      	adds	r1, #1
 8011fca:	6061      	str	r1, [r4, #4]
 8011fcc:	3b3c      	subs	r3, #60	; 0x3c
 8011fce:	6023      	str	r3, [r4, #0]
 8011fd0:	6863      	ldr	r3, [r4, #4]
 8011fd2:	2b3b      	cmp	r3, #59	; 0x3b
 8011fd4:	dd34      	ble.n	8012040 <localtime_r+0x168>
 8011fd6:	3201      	adds	r2, #1
 8011fd8:	60a2      	str	r2, [r4, #8]
 8011fda:	3b3c      	subs	r3, #60	; 0x3c
 8011fdc:	6063      	str	r3, [r4, #4]
 8011fde:	68a3      	ldr	r3, [r4, #8]
 8011fe0:	2b17      	cmp	r3, #23
 8011fe2:	dd33      	ble.n	801204c <localtime_r+0x174>
 8011fe4:	69e2      	ldr	r2, [r4, #28]
 8011fe6:	3201      	adds	r2, #1
 8011fe8:	61e2      	str	r2, [r4, #28]
 8011fea:	69a2      	ldr	r2, [r4, #24]
 8011fec:	3201      	adds	r2, #1
 8011fee:	2a06      	cmp	r2, #6
 8011ff0:	bfc8      	it	gt
 8011ff2:	2200      	movgt	r2, #0
 8011ff4:	61a2      	str	r2, [r4, #24]
 8011ff6:	68e2      	ldr	r2, [r4, #12]
 8011ff8:	3b18      	subs	r3, #24
 8011ffa:	3201      	adds	r2, #1
 8011ffc:	60a3      	str	r3, [r4, #8]
 8011ffe:	6923      	ldr	r3, [r4, #16]
 8012000:	60e2      	str	r2, [r4, #12]
 8012002:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8012006:	428a      	cmp	r2, r1
 8012008:	dd0e      	ble.n	8012028 <localtime_r+0x150>
 801200a:	2b0b      	cmp	r3, #11
 801200c:	eba2 0201 	sub.w	r2, r2, r1
 8012010:	60e2      	str	r2, [r4, #12]
 8012012:	f103 0201 	add.w	r2, r3, #1
 8012016:	bf09      	itett	eq
 8012018:	6963      	ldreq	r3, [r4, #20]
 801201a:	6122      	strne	r2, [r4, #16]
 801201c:	2200      	moveq	r2, #0
 801201e:	3301      	addeq	r3, #1
 8012020:	bf02      	ittt	eq
 8012022:	6122      	streq	r2, [r4, #16]
 8012024:	6163      	streq	r3, [r4, #20]
 8012026:	61e2      	streq	r2, [r4, #28]
 8012028:	f001 ff6e 	bl	8013f08 <__tz_unlock>
 801202c:	4620      	mov	r0, r4
 801202e:	b002      	add	sp, #8
 8012030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012034:	2b00      	cmp	r3, #0
 8012036:	dacb      	bge.n	8011fd0 <localtime_r+0xf8>
 8012038:	3901      	subs	r1, #1
 801203a:	6061      	str	r1, [r4, #4]
 801203c:	333c      	adds	r3, #60	; 0x3c
 801203e:	e7c6      	b.n	8011fce <localtime_r+0xf6>
 8012040:	2b00      	cmp	r3, #0
 8012042:	dacc      	bge.n	8011fde <localtime_r+0x106>
 8012044:	3a01      	subs	r2, #1
 8012046:	60a2      	str	r2, [r4, #8]
 8012048:	333c      	adds	r3, #60	; 0x3c
 801204a:	e7c7      	b.n	8011fdc <localtime_r+0x104>
 801204c:	2b00      	cmp	r3, #0
 801204e:	daeb      	bge.n	8012028 <localtime_r+0x150>
 8012050:	69e2      	ldr	r2, [r4, #28]
 8012052:	3a01      	subs	r2, #1
 8012054:	61e2      	str	r2, [r4, #28]
 8012056:	69a2      	ldr	r2, [r4, #24]
 8012058:	3a01      	subs	r2, #1
 801205a:	bf48      	it	mi
 801205c:	2206      	movmi	r2, #6
 801205e:	61a2      	str	r2, [r4, #24]
 8012060:	68e2      	ldr	r2, [r4, #12]
 8012062:	3318      	adds	r3, #24
 8012064:	3a01      	subs	r2, #1
 8012066:	60e2      	str	r2, [r4, #12]
 8012068:	60a3      	str	r3, [r4, #8]
 801206a:	2a00      	cmp	r2, #0
 801206c:	d1dc      	bne.n	8012028 <localtime_r+0x150>
 801206e:	6923      	ldr	r3, [r4, #16]
 8012070:	3b01      	subs	r3, #1
 8012072:	d405      	bmi.n	8012080 <localtime_r+0x1a8>
 8012074:	6123      	str	r3, [r4, #16]
 8012076:	6923      	ldr	r3, [r4, #16]
 8012078:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801207c:	60e3      	str	r3, [r4, #12]
 801207e:	e7d3      	b.n	8012028 <localtime_r+0x150>
 8012080:	230b      	movs	r3, #11
 8012082:	6123      	str	r3, [r4, #16]
 8012084:	6963      	ldr	r3, [r4, #20]
 8012086:	1e5a      	subs	r2, r3, #1
 8012088:	6162      	str	r2, [r4, #20]
 801208a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801208e:	0793      	lsls	r3, r2, #30
 8012090:	d105      	bne.n	801209e <localtime_r+0x1c6>
 8012092:	2164      	movs	r1, #100	; 0x64
 8012094:	fb92 f3f1 	sdiv	r3, r2, r1
 8012098:	fb01 2313 	mls	r3, r1, r3, r2
 801209c:	b963      	cbnz	r3, 80120b8 <localtime_r+0x1e0>
 801209e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80120a2:	fb92 f3f1 	sdiv	r3, r2, r1
 80120a6:	fb01 2313 	mls	r3, r1, r3, r2
 80120aa:	fab3 f383 	clz	r3, r3
 80120ae:	095b      	lsrs	r3, r3, #5
 80120b0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80120b4:	61e3      	str	r3, [r4, #28]
 80120b6:	e7de      	b.n	8012076 <localtime_r+0x19e>
 80120b8:	2301      	movs	r3, #1
 80120ba:	e7f9      	b.n	80120b0 <localtime_r+0x1d8>
 80120bc:	080216cc 	.word	0x080216cc
 80120c0:	2001018c 	.word	0x2001018c

080120c4 <__retarget_lock_init_recursive>:
 80120c4:	4770      	bx	lr

080120c6 <__retarget_lock_acquire>:
 80120c6:	4770      	bx	lr

080120c8 <__retarget_lock_acquire_recursive>:
 80120c8:	4770      	bx	lr

080120ca <__retarget_lock_release>:
 80120ca:	4770      	bx	lr

080120cc <__retarget_lock_release_recursive>:
 80120cc:	4770      	bx	lr
	...

080120d0 <malloc>:
 80120d0:	4b02      	ldr	r3, [pc, #8]	; (80120dc <malloc+0xc>)
 80120d2:	4601      	mov	r1, r0
 80120d4:	6818      	ldr	r0, [r3, #0]
 80120d6:	f000 b871 	b.w	80121bc <_malloc_r>
 80120da:	bf00      	nop
 80120dc:	200000b4 	.word	0x200000b4

080120e0 <free>:
 80120e0:	4b02      	ldr	r3, [pc, #8]	; (80120ec <free+0xc>)
 80120e2:	4601      	mov	r1, r0
 80120e4:	6818      	ldr	r0, [r3, #0]
 80120e6:	f000 b819 	b.w	801211c <_free_r>
 80120ea:	bf00      	nop
 80120ec:	200000b4 	.word	0x200000b4

080120f0 <memcpy>:
 80120f0:	440a      	add	r2, r1
 80120f2:	4291      	cmp	r1, r2
 80120f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80120f8:	d100      	bne.n	80120fc <memcpy+0xc>
 80120fa:	4770      	bx	lr
 80120fc:	b510      	push	{r4, lr}
 80120fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012106:	4291      	cmp	r1, r2
 8012108:	d1f9      	bne.n	80120fe <memcpy+0xe>
 801210a:	bd10      	pop	{r4, pc}

0801210c <memset>:
 801210c:	4402      	add	r2, r0
 801210e:	4603      	mov	r3, r0
 8012110:	4293      	cmp	r3, r2
 8012112:	d100      	bne.n	8012116 <memset+0xa>
 8012114:	4770      	bx	lr
 8012116:	f803 1b01 	strb.w	r1, [r3], #1
 801211a:	e7f9      	b.n	8012110 <memset+0x4>

0801211c <_free_r>:
 801211c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801211e:	2900      	cmp	r1, #0
 8012120:	d048      	beq.n	80121b4 <_free_r+0x98>
 8012122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012126:	9001      	str	r0, [sp, #4]
 8012128:	2b00      	cmp	r3, #0
 801212a:	f1a1 0404 	sub.w	r4, r1, #4
 801212e:	bfb8      	it	lt
 8012130:	18e4      	addlt	r4, r4, r3
 8012132:	f002 fe17 	bl	8014d64 <__malloc_lock>
 8012136:	4a20      	ldr	r2, [pc, #128]	; (80121b8 <_free_r+0x9c>)
 8012138:	9801      	ldr	r0, [sp, #4]
 801213a:	6813      	ldr	r3, [r2, #0]
 801213c:	4615      	mov	r5, r2
 801213e:	b933      	cbnz	r3, 801214e <_free_r+0x32>
 8012140:	6063      	str	r3, [r4, #4]
 8012142:	6014      	str	r4, [r2, #0]
 8012144:	b003      	add	sp, #12
 8012146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801214a:	f002 be11 	b.w	8014d70 <__malloc_unlock>
 801214e:	42a3      	cmp	r3, r4
 8012150:	d90b      	bls.n	801216a <_free_r+0x4e>
 8012152:	6821      	ldr	r1, [r4, #0]
 8012154:	1862      	adds	r2, r4, r1
 8012156:	4293      	cmp	r3, r2
 8012158:	bf04      	itt	eq
 801215a:	681a      	ldreq	r2, [r3, #0]
 801215c:	685b      	ldreq	r3, [r3, #4]
 801215e:	6063      	str	r3, [r4, #4]
 8012160:	bf04      	itt	eq
 8012162:	1852      	addeq	r2, r2, r1
 8012164:	6022      	streq	r2, [r4, #0]
 8012166:	602c      	str	r4, [r5, #0]
 8012168:	e7ec      	b.n	8012144 <_free_r+0x28>
 801216a:	461a      	mov	r2, r3
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	b10b      	cbz	r3, 8012174 <_free_r+0x58>
 8012170:	42a3      	cmp	r3, r4
 8012172:	d9fa      	bls.n	801216a <_free_r+0x4e>
 8012174:	6811      	ldr	r1, [r2, #0]
 8012176:	1855      	adds	r5, r2, r1
 8012178:	42a5      	cmp	r5, r4
 801217a:	d10b      	bne.n	8012194 <_free_r+0x78>
 801217c:	6824      	ldr	r4, [r4, #0]
 801217e:	4421      	add	r1, r4
 8012180:	1854      	adds	r4, r2, r1
 8012182:	42a3      	cmp	r3, r4
 8012184:	6011      	str	r1, [r2, #0]
 8012186:	d1dd      	bne.n	8012144 <_free_r+0x28>
 8012188:	681c      	ldr	r4, [r3, #0]
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	6053      	str	r3, [r2, #4]
 801218e:	4421      	add	r1, r4
 8012190:	6011      	str	r1, [r2, #0]
 8012192:	e7d7      	b.n	8012144 <_free_r+0x28>
 8012194:	d902      	bls.n	801219c <_free_r+0x80>
 8012196:	230c      	movs	r3, #12
 8012198:	6003      	str	r3, [r0, #0]
 801219a:	e7d3      	b.n	8012144 <_free_r+0x28>
 801219c:	6825      	ldr	r5, [r4, #0]
 801219e:	1961      	adds	r1, r4, r5
 80121a0:	428b      	cmp	r3, r1
 80121a2:	bf04      	itt	eq
 80121a4:	6819      	ldreq	r1, [r3, #0]
 80121a6:	685b      	ldreq	r3, [r3, #4]
 80121a8:	6063      	str	r3, [r4, #4]
 80121aa:	bf04      	itt	eq
 80121ac:	1949      	addeq	r1, r1, r5
 80121ae:	6021      	streq	r1, [r4, #0]
 80121b0:	6054      	str	r4, [r2, #4]
 80121b2:	e7c7      	b.n	8012144 <_free_r+0x28>
 80121b4:	b003      	add	sp, #12
 80121b6:	bd30      	pop	{r4, r5, pc}
 80121b8:	20010168 	.word	0x20010168

080121bc <_malloc_r>:
 80121bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121be:	1ccd      	adds	r5, r1, #3
 80121c0:	f025 0503 	bic.w	r5, r5, #3
 80121c4:	3508      	adds	r5, #8
 80121c6:	2d0c      	cmp	r5, #12
 80121c8:	bf38      	it	cc
 80121ca:	250c      	movcc	r5, #12
 80121cc:	2d00      	cmp	r5, #0
 80121ce:	4606      	mov	r6, r0
 80121d0:	db01      	blt.n	80121d6 <_malloc_r+0x1a>
 80121d2:	42a9      	cmp	r1, r5
 80121d4:	d903      	bls.n	80121de <_malloc_r+0x22>
 80121d6:	230c      	movs	r3, #12
 80121d8:	6033      	str	r3, [r6, #0]
 80121da:	2000      	movs	r0, #0
 80121dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121de:	f002 fdc1 	bl	8014d64 <__malloc_lock>
 80121e2:	4921      	ldr	r1, [pc, #132]	; (8012268 <_malloc_r+0xac>)
 80121e4:	680a      	ldr	r2, [r1, #0]
 80121e6:	4614      	mov	r4, r2
 80121e8:	b99c      	cbnz	r4, 8012212 <_malloc_r+0x56>
 80121ea:	4f20      	ldr	r7, [pc, #128]	; (801226c <_malloc_r+0xb0>)
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	b923      	cbnz	r3, 80121fa <_malloc_r+0x3e>
 80121f0:	4621      	mov	r1, r4
 80121f2:	4630      	mov	r0, r6
 80121f4:	f000 f8a6 	bl	8012344 <_sbrk_r>
 80121f8:	6038      	str	r0, [r7, #0]
 80121fa:	4629      	mov	r1, r5
 80121fc:	4630      	mov	r0, r6
 80121fe:	f000 f8a1 	bl	8012344 <_sbrk_r>
 8012202:	1c43      	adds	r3, r0, #1
 8012204:	d123      	bne.n	801224e <_malloc_r+0x92>
 8012206:	230c      	movs	r3, #12
 8012208:	6033      	str	r3, [r6, #0]
 801220a:	4630      	mov	r0, r6
 801220c:	f002 fdb0 	bl	8014d70 <__malloc_unlock>
 8012210:	e7e3      	b.n	80121da <_malloc_r+0x1e>
 8012212:	6823      	ldr	r3, [r4, #0]
 8012214:	1b5b      	subs	r3, r3, r5
 8012216:	d417      	bmi.n	8012248 <_malloc_r+0x8c>
 8012218:	2b0b      	cmp	r3, #11
 801221a:	d903      	bls.n	8012224 <_malloc_r+0x68>
 801221c:	6023      	str	r3, [r4, #0]
 801221e:	441c      	add	r4, r3
 8012220:	6025      	str	r5, [r4, #0]
 8012222:	e004      	b.n	801222e <_malloc_r+0x72>
 8012224:	6863      	ldr	r3, [r4, #4]
 8012226:	42a2      	cmp	r2, r4
 8012228:	bf0c      	ite	eq
 801222a:	600b      	streq	r3, [r1, #0]
 801222c:	6053      	strne	r3, [r2, #4]
 801222e:	4630      	mov	r0, r6
 8012230:	f002 fd9e 	bl	8014d70 <__malloc_unlock>
 8012234:	f104 000b 	add.w	r0, r4, #11
 8012238:	1d23      	adds	r3, r4, #4
 801223a:	f020 0007 	bic.w	r0, r0, #7
 801223e:	1ac2      	subs	r2, r0, r3
 8012240:	d0cc      	beq.n	80121dc <_malloc_r+0x20>
 8012242:	1a1b      	subs	r3, r3, r0
 8012244:	50a3      	str	r3, [r4, r2]
 8012246:	e7c9      	b.n	80121dc <_malloc_r+0x20>
 8012248:	4622      	mov	r2, r4
 801224a:	6864      	ldr	r4, [r4, #4]
 801224c:	e7cc      	b.n	80121e8 <_malloc_r+0x2c>
 801224e:	1cc4      	adds	r4, r0, #3
 8012250:	f024 0403 	bic.w	r4, r4, #3
 8012254:	42a0      	cmp	r0, r4
 8012256:	d0e3      	beq.n	8012220 <_malloc_r+0x64>
 8012258:	1a21      	subs	r1, r4, r0
 801225a:	4630      	mov	r0, r6
 801225c:	f000 f872 	bl	8012344 <_sbrk_r>
 8012260:	3001      	adds	r0, #1
 8012262:	d1dd      	bne.n	8012220 <_malloc_r+0x64>
 8012264:	e7cf      	b.n	8012206 <_malloc_r+0x4a>
 8012266:	bf00      	nop
 8012268:	20010168 	.word	0x20010168
 801226c:	2001016c 	.word	0x2001016c

08012270 <cleanup_glue>:
 8012270:	b538      	push	{r3, r4, r5, lr}
 8012272:	460c      	mov	r4, r1
 8012274:	6809      	ldr	r1, [r1, #0]
 8012276:	4605      	mov	r5, r0
 8012278:	b109      	cbz	r1, 801227e <cleanup_glue+0xe>
 801227a:	f7ff fff9 	bl	8012270 <cleanup_glue>
 801227e:	4621      	mov	r1, r4
 8012280:	4628      	mov	r0, r5
 8012282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012286:	f7ff bf49 	b.w	801211c <_free_r>
	...

0801228c <_reclaim_reent>:
 801228c:	4b2c      	ldr	r3, [pc, #176]	; (8012340 <_reclaim_reent+0xb4>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4283      	cmp	r3, r0
 8012292:	b570      	push	{r4, r5, r6, lr}
 8012294:	4604      	mov	r4, r0
 8012296:	d051      	beq.n	801233c <_reclaim_reent+0xb0>
 8012298:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801229a:	b143      	cbz	r3, 80122ae <_reclaim_reent+0x22>
 801229c:	68db      	ldr	r3, [r3, #12]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d14a      	bne.n	8012338 <_reclaim_reent+0xac>
 80122a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122a4:	6819      	ldr	r1, [r3, #0]
 80122a6:	b111      	cbz	r1, 80122ae <_reclaim_reent+0x22>
 80122a8:	4620      	mov	r0, r4
 80122aa:	f7ff ff37 	bl	801211c <_free_r>
 80122ae:	6961      	ldr	r1, [r4, #20]
 80122b0:	b111      	cbz	r1, 80122b8 <_reclaim_reent+0x2c>
 80122b2:	4620      	mov	r0, r4
 80122b4:	f7ff ff32 	bl	801211c <_free_r>
 80122b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80122ba:	b111      	cbz	r1, 80122c2 <_reclaim_reent+0x36>
 80122bc:	4620      	mov	r0, r4
 80122be:	f7ff ff2d 	bl	801211c <_free_r>
 80122c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80122c4:	b111      	cbz	r1, 80122cc <_reclaim_reent+0x40>
 80122c6:	4620      	mov	r0, r4
 80122c8:	f7ff ff28 	bl	801211c <_free_r>
 80122cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80122ce:	b111      	cbz	r1, 80122d6 <_reclaim_reent+0x4a>
 80122d0:	4620      	mov	r0, r4
 80122d2:	f7ff ff23 	bl	801211c <_free_r>
 80122d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80122d8:	b111      	cbz	r1, 80122e0 <_reclaim_reent+0x54>
 80122da:	4620      	mov	r0, r4
 80122dc:	f7ff ff1e 	bl	801211c <_free_r>
 80122e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80122e2:	b111      	cbz	r1, 80122ea <_reclaim_reent+0x5e>
 80122e4:	4620      	mov	r0, r4
 80122e6:	f7ff ff19 	bl	801211c <_free_r>
 80122ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80122ec:	b111      	cbz	r1, 80122f4 <_reclaim_reent+0x68>
 80122ee:	4620      	mov	r0, r4
 80122f0:	f7ff ff14 	bl	801211c <_free_r>
 80122f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122f6:	b111      	cbz	r1, 80122fe <_reclaim_reent+0x72>
 80122f8:	4620      	mov	r0, r4
 80122fa:	f7ff ff0f 	bl	801211c <_free_r>
 80122fe:	69a3      	ldr	r3, [r4, #24]
 8012300:	b1e3      	cbz	r3, 801233c <_reclaim_reent+0xb0>
 8012302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012304:	4620      	mov	r0, r4
 8012306:	4798      	blx	r3
 8012308:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801230a:	b1b9      	cbz	r1, 801233c <_reclaim_reent+0xb0>
 801230c:	4620      	mov	r0, r4
 801230e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012312:	f7ff bfad 	b.w	8012270 <cleanup_glue>
 8012316:	5949      	ldr	r1, [r1, r5]
 8012318:	b941      	cbnz	r1, 801232c <_reclaim_reent+0xa0>
 801231a:	3504      	adds	r5, #4
 801231c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801231e:	2d80      	cmp	r5, #128	; 0x80
 8012320:	68d9      	ldr	r1, [r3, #12]
 8012322:	d1f8      	bne.n	8012316 <_reclaim_reent+0x8a>
 8012324:	4620      	mov	r0, r4
 8012326:	f7ff fef9 	bl	801211c <_free_r>
 801232a:	e7ba      	b.n	80122a2 <_reclaim_reent+0x16>
 801232c:	680e      	ldr	r6, [r1, #0]
 801232e:	4620      	mov	r0, r4
 8012330:	f7ff fef4 	bl	801211c <_free_r>
 8012334:	4631      	mov	r1, r6
 8012336:	e7ef      	b.n	8012318 <_reclaim_reent+0x8c>
 8012338:	2500      	movs	r5, #0
 801233a:	e7ef      	b.n	801231c <_reclaim_reent+0x90>
 801233c:	bd70      	pop	{r4, r5, r6, pc}
 801233e:	bf00      	nop
 8012340:	200000b4 	.word	0x200000b4

08012344 <_sbrk_r>:
 8012344:	b538      	push	{r3, r4, r5, lr}
 8012346:	4d06      	ldr	r5, [pc, #24]	; (8012360 <_sbrk_r+0x1c>)
 8012348:	2300      	movs	r3, #0
 801234a:	4604      	mov	r4, r0
 801234c:	4608      	mov	r0, r1
 801234e:	602b      	str	r3, [r5, #0]
 8012350:	f7f2 fa04 	bl	800475c <_sbrk>
 8012354:	1c43      	adds	r3, r0, #1
 8012356:	d102      	bne.n	801235e <_sbrk_r+0x1a>
 8012358:	682b      	ldr	r3, [r5, #0]
 801235a:	b103      	cbz	r3, 801235e <_sbrk_r+0x1a>
 801235c:	6023      	str	r3, [r4, #0]
 801235e:	bd38      	pop	{r3, r4, r5, pc}
 8012360:	20013088 	.word	0x20013088

08012364 <siprintf>:
 8012364:	b40e      	push	{r1, r2, r3}
 8012366:	b500      	push	{lr}
 8012368:	b09c      	sub	sp, #112	; 0x70
 801236a:	ab1d      	add	r3, sp, #116	; 0x74
 801236c:	9002      	str	r0, [sp, #8]
 801236e:	9006      	str	r0, [sp, #24]
 8012370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012374:	4809      	ldr	r0, [pc, #36]	; (801239c <siprintf+0x38>)
 8012376:	9107      	str	r1, [sp, #28]
 8012378:	9104      	str	r1, [sp, #16]
 801237a:	4909      	ldr	r1, [pc, #36]	; (80123a0 <siprintf+0x3c>)
 801237c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012380:	9105      	str	r1, [sp, #20]
 8012382:	6800      	ldr	r0, [r0, #0]
 8012384:	9301      	str	r3, [sp, #4]
 8012386:	a902      	add	r1, sp, #8
 8012388:	f003 fa1e 	bl	80157c8 <_svfiprintf_r>
 801238c:	9b02      	ldr	r3, [sp, #8]
 801238e:	2200      	movs	r2, #0
 8012390:	701a      	strb	r2, [r3, #0]
 8012392:	b01c      	add	sp, #112	; 0x70
 8012394:	f85d eb04 	ldr.w	lr, [sp], #4
 8012398:	b003      	add	sp, #12
 801239a:	4770      	bx	lr
 801239c:	200000b4 	.word	0x200000b4
 80123a0:	ffff0208 	.word	0xffff0208

080123a4 <__sread>:
 80123a4:	b510      	push	{r4, lr}
 80123a6:	460c      	mov	r4, r1
 80123a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123ac:	f003 fdfa 	bl	8015fa4 <_read_r>
 80123b0:	2800      	cmp	r0, #0
 80123b2:	bfab      	itete	ge
 80123b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80123b6:	89a3      	ldrhlt	r3, [r4, #12]
 80123b8:	181b      	addge	r3, r3, r0
 80123ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80123be:	bfac      	ite	ge
 80123c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80123c2:	81a3      	strhlt	r3, [r4, #12]
 80123c4:	bd10      	pop	{r4, pc}

080123c6 <__seofread>:
 80123c6:	2000      	movs	r0, #0
 80123c8:	4770      	bx	lr

080123ca <__swrite>:
 80123ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123ce:	461f      	mov	r7, r3
 80123d0:	898b      	ldrh	r3, [r1, #12]
 80123d2:	05db      	lsls	r3, r3, #23
 80123d4:	4605      	mov	r5, r0
 80123d6:	460c      	mov	r4, r1
 80123d8:	4616      	mov	r6, r2
 80123da:	d505      	bpl.n	80123e8 <__swrite+0x1e>
 80123dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123e0:	2302      	movs	r3, #2
 80123e2:	2200      	movs	r2, #0
 80123e4:	f002 fc9a 	bl	8014d1c <_lseek_r>
 80123e8:	89a3      	ldrh	r3, [r4, #12]
 80123ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80123f2:	81a3      	strh	r3, [r4, #12]
 80123f4:	4632      	mov	r2, r6
 80123f6:	463b      	mov	r3, r7
 80123f8:	4628      	mov	r0, r5
 80123fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123fe:	f001 bf0b 	b.w	8014218 <_write_r>

08012402 <__sseek>:
 8012402:	b510      	push	{r4, lr}
 8012404:	460c      	mov	r4, r1
 8012406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801240a:	f002 fc87 	bl	8014d1c <_lseek_r>
 801240e:	1c43      	adds	r3, r0, #1
 8012410:	89a3      	ldrh	r3, [r4, #12]
 8012412:	bf15      	itete	ne
 8012414:	6560      	strne	r0, [r4, #84]	; 0x54
 8012416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801241a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801241e:	81a3      	strheq	r3, [r4, #12]
 8012420:	bf18      	it	ne
 8012422:	81a3      	strhne	r3, [r4, #12]
 8012424:	bd10      	pop	{r4, pc}

08012426 <__sclose>:
 8012426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801242a:	f001 bf29 	b.w	8014280 <_close_r>

0801242e <strcat>:
 801242e:	b510      	push	{r4, lr}
 8012430:	4602      	mov	r2, r0
 8012432:	7814      	ldrb	r4, [r2, #0]
 8012434:	4613      	mov	r3, r2
 8012436:	3201      	adds	r2, #1
 8012438:	2c00      	cmp	r4, #0
 801243a:	d1fa      	bne.n	8012432 <strcat+0x4>
 801243c:	3b01      	subs	r3, #1
 801243e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012446:	2a00      	cmp	r2, #0
 8012448:	d1f9      	bne.n	801243e <strcat+0x10>
 801244a:	bd10      	pop	{r4, pc}

0801244c <strcpy>:
 801244c:	4603      	mov	r3, r0
 801244e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012452:	f803 2b01 	strb.w	r2, [r3], #1
 8012456:	2a00      	cmp	r2, #0
 8012458:	d1f9      	bne.n	801244e <strcpy+0x2>
 801245a:	4770      	bx	lr

0801245c <iso_year_adjust>:
 801245c:	6941      	ldr	r1, [r0, #20]
 801245e:	2900      	cmp	r1, #0
 8012460:	f240 736c 	movw	r3, #1900	; 0x76c
 8012464:	bfa8      	it	ge
 8012466:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801246a:	18ca      	adds	r2, r1, r3
 801246c:	078b      	lsls	r3, r1, #30
 801246e:	d105      	bne.n	801247c <iso_year_adjust+0x20>
 8012470:	2164      	movs	r1, #100	; 0x64
 8012472:	fb92 f3f1 	sdiv	r3, r2, r1
 8012476:	fb01 2313 	mls	r3, r1, r3, r2
 801247a:	b9db      	cbnz	r3, 80124b4 <iso_year_adjust+0x58>
 801247c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012480:	fb92 f3f1 	sdiv	r3, r2, r1
 8012484:	fb01 2313 	mls	r3, r1, r3, r2
 8012488:	fab3 f383 	clz	r3, r3
 801248c:	095b      	lsrs	r3, r3, #5
 801248e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8012492:	0040      	lsls	r0, r0, #1
 8012494:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8012498:	4418      	add	r0, r3
 801249a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801249e:	4298      	cmp	r0, r3
 80124a0:	d03a      	beq.n	8012518 <iso_year_adjust+0xbc>
 80124a2:	dc21      	bgt.n	80124e8 <iso_year_adjust+0x8c>
 80124a4:	2801      	cmp	r0, #1
 80124a6:	dc1a      	bgt.n	80124de <iso_year_adjust+0x82>
 80124a8:	2800      	cmp	r0, #0
 80124aa:	bfb4      	ite	lt
 80124ac:	2000      	movlt	r0, #0
 80124ae:	f04f 30ff 	movge.w	r0, #4294967295
 80124b2:	4770      	bx	lr
 80124b4:	2301      	movs	r3, #1
 80124b6:	e7ea      	b.n	801248e <iso_year_adjust+0x32>
 80124b8:	2817      	cmp	r0, #23
 80124ba:	d813      	bhi.n	80124e4 <iso_year_adjust+0x88>
 80124bc:	e8df f000 	tbb	[pc, r0]
 80124c0:	0c0c0c0c 	.word	0x0c0c0c0c
 80124c4:	0c0c1212 	.word	0x0c0c1212
 80124c8:	12121212 	.word	0x12121212
 80124cc:	12121212 	.word	0x12121212
 80124d0:	0c0c1212 	.word	0x0c0c1212
 80124d4:	0c0c1212 	.word	0x0c0c1212
 80124d8:	f04f 30ff 	mov.w	r0, #4294967295
 80124dc:	4770      	bx	lr
 80124de:	380a      	subs	r0, #10
 80124e0:	2817      	cmp	r0, #23
 80124e2:	d9e9      	bls.n	80124b8 <iso_year_adjust+0x5c>
 80124e4:	2000      	movs	r0, #0
 80124e6:	4770      	bx	lr
 80124e8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80124ec:	4298      	cmp	r0, r3
 80124ee:	dc06      	bgt.n	80124fe <iso_year_adjust+0xa2>
 80124f0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80124f4:	4298      	cmp	r0, r3
 80124f6:	bfd4      	ite	le
 80124f8:	2000      	movle	r0, #0
 80124fa:	2001      	movgt	r0, #1
 80124fc:	4770      	bx	lr
 80124fe:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8012502:	3802      	subs	r0, #2
 8012504:	2815      	cmp	r0, #21
 8012506:	d8ed      	bhi.n	80124e4 <iso_year_adjust+0x88>
 8012508:	2301      	movs	r3, #1
 801250a:	4083      	lsls	r3, r0
 801250c:	4803      	ldr	r0, [pc, #12]	; (801251c <iso_year_adjust+0xc0>)
 801250e:	4018      	ands	r0, r3
 8012510:	3800      	subs	r0, #0
 8012512:	bf18      	it	ne
 8012514:	2001      	movne	r0, #1
 8012516:	4770      	bx	lr
 8012518:	2001      	movs	r0, #1
 801251a:	4770      	bx	lr
 801251c:	002a001f 	.word	0x002a001f

08012520 <__strftime>:
 8012520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012524:	b091      	sub	sp, #68	; 0x44
 8012526:	461d      	mov	r5, r3
 8012528:	2300      	movs	r3, #0
 801252a:	4681      	mov	r9, r0
 801252c:	4688      	mov	r8, r1
 801252e:	9304      	str	r3, [sp, #16]
 8012530:	461c      	mov	r4, r3
 8012532:	7813      	ldrb	r3, [r2, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	f000 84d1 	beq.w	8012edc <__strftime+0x9bc>
 801253a:	2b25      	cmp	r3, #37	; 0x25
 801253c:	d11b      	bne.n	8012576 <__strftime+0x56>
 801253e:	7857      	ldrb	r7, [r2, #1]
 8012540:	2f30      	cmp	r7, #48	; 0x30
 8012542:	d024      	beq.n	801258e <__strftime+0x6e>
 8012544:	2f2b      	cmp	r7, #43	; 0x2b
 8012546:	d022      	beq.n	801258e <__strftime+0x6e>
 8012548:	f102 0b01 	add.w	fp, r2, #1
 801254c:	2700      	movs	r7, #0
 801254e:	f89b 3000 	ldrb.w	r3, [fp]
 8012552:	3b31      	subs	r3, #49	; 0x31
 8012554:	2b08      	cmp	r3, #8
 8012556:	d81d      	bhi.n	8012594 <__strftime+0x74>
 8012558:	4658      	mov	r0, fp
 801255a:	220a      	movs	r2, #10
 801255c:	a908      	add	r1, sp, #32
 801255e:	f001 fc1b 	bl	8013d98 <strtoul>
 8012562:	f8dd b020 	ldr.w	fp, [sp, #32]
 8012566:	4606      	mov	r6, r0
 8012568:	f89b 3000 	ldrb.w	r3, [fp]
 801256c:	2b45      	cmp	r3, #69	; 0x45
 801256e:	d113      	bne.n	8012598 <__strftime+0x78>
 8012570:	f10b 0b01 	add.w	fp, fp, #1
 8012574:	e012      	b.n	801259c <__strftime+0x7c>
 8012576:	f108 31ff 	add.w	r1, r8, #4294967295
 801257a:	42a1      	cmp	r1, r4
 801257c:	d802      	bhi.n	8012584 <__strftime+0x64>
 801257e:	2400      	movs	r4, #0
 8012580:	f000 bcb2 	b.w	8012ee8 <__strftime+0x9c8>
 8012584:	f809 3004 	strb.w	r3, [r9, r4]
 8012588:	3201      	adds	r2, #1
 801258a:	3401      	adds	r4, #1
 801258c:	e7d1      	b.n	8012532 <__strftime+0x12>
 801258e:	f102 0b02 	add.w	fp, r2, #2
 8012592:	e7dc      	b.n	801254e <__strftime+0x2e>
 8012594:	2600      	movs	r6, #0
 8012596:	e7e7      	b.n	8012568 <__strftime+0x48>
 8012598:	2b4f      	cmp	r3, #79	; 0x4f
 801259a:	d0e9      	beq.n	8012570 <__strftime+0x50>
 801259c:	f89b 0000 	ldrb.w	r0, [fp]
 80125a0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80125a4:	2b55      	cmp	r3, #85	; 0x55
 80125a6:	d8ea      	bhi.n	801257e <__strftime+0x5e>
 80125a8:	a201      	add	r2, pc, #4	; (adr r2, 80125b0 <__strftime+0x90>)
 80125aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ae:	bf00      	nop
 80125b0:	08012ecf 	.word	0x08012ecf
 80125b4:	0801257f 	.word	0x0801257f
 80125b8:	0801257f 	.word	0x0801257f
 80125bc:	0801257f 	.word	0x0801257f
 80125c0:	0801257f 	.word	0x0801257f
 80125c4:	0801257f 	.word	0x0801257f
 80125c8:	0801257f 	.word	0x0801257f
 80125cc:	0801257f 	.word	0x0801257f
 80125d0:	0801257f 	.word	0x0801257f
 80125d4:	0801257f 	.word	0x0801257f
 80125d8:	0801257f 	.word	0x0801257f
 80125dc:	0801257f 	.word	0x0801257f
 80125e0:	0801257f 	.word	0x0801257f
 80125e4:	0801257f 	.word	0x0801257f
 80125e8:	0801257f 	.word	0x0801257f
 80125ec:	0801257f 	.word	0x0801257f
 80125f0:	0801257f 	.word	0x0801257f
 80125f4:	0801257f 	.word	0x0801257f
 80125f8:	0801257f 	.word	0x0801257f
 80125fc:	0801257f 	.word	0x0801257f
 8012600:	0801257f 	.word	0x0801257f
 8012604:	0801257f 	.word	0x0801257f
 8012608:	0801257f 	.word	0x0801257f
 801260c:	0801257f 	.word	0x0801257f
 8012610:	0801257f 	.word	0x0801257f
 8012614:	0801257f 	.word	0x0801257f
 8012618:	0801257f 	.word	0x0801257f
 801261c:	0801257f 	.word	0x0801257f
 8012620:	08012747 	.word	0x08012747
 8012624:	080127a1 	.word	0x080127a1
 8012628:	08012817 	.word	0x08012817
 801262c:	080128b1 	.word	0x080128b1
 8012630:	0801257f 	.word	0x0801257f
 8012634:	080128fd 	.word	0x080128fd
 8012638:	080129dd 	.word	0x080129dd
 801263c:	08012adf 	.word	0x08012adf
 8012640:	08012aed 	.word	0x08012aed
 8012644:	0801257f 	.word	0x0801257f
 8012648:	0801257f 	.word	0x0801257f
 801264c:	0801257f 	.word	0x0801257f
 8012650:	08012b1d 	.word	0x08012b1d
 8012654:	0801257f 	.word	0x0801257f
 8012658:	0801257f 	.word	0x0801257f
 801265c:	08012b35 	.word	0x08012b35
 8012660:	0801257f 	.word	0x0801257f
 8012664:	08012b83 	.word	0x08012b83
 8012668:	08012c99 	.word	0x08012c99
 801266c:	08012cab 	.word	0x08012cab
 8012670:	08012d03 	.word	0x08012d03
 8012674:	08012d13 	.word	0x08012d13
 8012678:	08012d89 	.word	0x08012d89
 801267c:	0801280f 	.word	0x0801280f
 8012680:	08012dbd 	.word	0x08012dbd
 8012684:	08012e7b 	.word	0x08012e7b
 8012688:	0801257f 	.word	0x0801257f
 801268c:	0801257f 	.word	0x0801257f
 8012690:	0801257f 	.word	0x0801257f
 8012694:	0801257f 	.word	0x0801257f
 8012698:	0801257f 	.word	0x0801257f
 801269c:	0801257f 	.word	0x0801257f
 80126a0:	08012709 	.word	0x08012709
 80126a4:	08012775 	.word	0x08012775
 80126a8:	080127cf 	.word	0x080127cf
 80126ac:	08012889 	.word	0x08012889
 80126b0:	08012889 	.word	0x08012889
 80126b4:	0801257f 	.word	0x0801257f
 80126b8:	08012945 	.word	0x08012945
 80126bc:	08012775 	.word	0x08012775
 80126c0:	0801257f 	.word	0x0801257f
 80126c4:	08012b0f 	.word	0x08012b0f
 80126c8:	08012adf 	.word	0x08012adf
 80126cc:	08012aed 	.word	0x08012aed
 80126d0:	08012b17 	.word	0x08012b17
 80126d4:	08012b21 	.word	0x08012b21
 80126d8:	0801257f 	.word	0x0801257f
 80126dc:	08012b35 	.word	0x08012b35
 80126e0:	0801257f 	.word	0x0801257f
 80126e4:	080127ff 	.word	0x080127ff
 80126e8:	08012b99 	.word	0x08012b99
 80126ec:	08012c9d 	.word	0x08012c9d
 80126f0:	08012ce5 	.word	0x08012ce5
 80126f4:	0801257f 	.word	0x0801257f
 80126f8:	08012d79 	.word	0x08012d79
 80126fc:	08012807 	.word	0x08012807
 8012700:	08012da1 	.word	0x08012da1
 8012704:	08012e0d 	.word	0x08012e0d
 8012708:	69ab      	ldr	r3, [r5, #24]
 801270a:	4aa7      	ldr	r2, [pc, #668]	; (80129a8 <__strftime+0x488>)
 801270c:	3318      	adds	r3, #24
 801270e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8012712:	4630      	mov	r0, r6
 8012714:	f7ed fd66 	bl	80001e4 <strlen>
 8012718:	3e01      	subs	r6, #1
 801271a:	4420      	add	r0, r4
 801271c:	f108 33ff 	add.w	r3, r8, #4294967295
 8012720:	42a0      	cmp	r0, r4
 8012722:	d107      	bne.n	8012734 <__strftime+0x214>
 8012724:	f89b 3000 	ldrb.w	r3, [fp]
 8012728:	2b00      	cmp	r3, #0
 801272a:	f000 83d7 	beq.w	8012edc <__strftime+0x9bc>
 801272e:	f10b 0201 	add.w	r2, fp, #1
 8012732:	e6fe      	b.n	8012532 <__strftime+0x12>
 8012734:	42a3      	cmp	r3, r4
 8012736:	f67f af22 	bls.w	801257e <__strftime+0x5e>
 801273a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801273e:	f809 2004 	strb.w	r2, [r9, r4]
 8012742:	3401      	adds	r4, #1
 8012744:	e7ec      	b.n	8012720 <__strftime+0x200>
 8012746:	69aa      	ldr	r2, [r5, #24]
 8012748:	4b97      	ldr	r3, [pc, #604]	; (80129a8 <__strftime+0x488>)
 801274a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801274e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8012750:	4630      	mov	r0, r6
 8012752:	f7ed fd47 	bl	80001e4 <strlen>
 8012756:	3e01      	subs	r6, #1
 8012758:	4420      	add	r0, r4
 801275a:	f108 33ff 	add.w	r3, r8, #4294967295
 801275e:	42a0      	cmp	r0, r4
 8012760:	d0e0      	beq.n	8012724 <__strftime+0x204>
 8012762:	42a3      	cmp	r3, r4
 8012764:	f67f af0b 	bls.w	801257e <__strftime+0x5e>
 8012768:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801276c:	f809 2004 	strb.w	r2, [r9, r4]
 8012770:	3401      	adds	r4, #1
 8012772:	e7f4      	b.n	801275e <__strftime+0x23e>
 8012774:	4b8c      	ldr	r3, [pc, #560]	; (80129a8 <__strftime+0x488>)
 8012776:	692a      	ldr	r2, [r5, #16]
 8012778:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801277c:	4630      	mov	r0, r6
 801277e:	f7ed fd31 	bl	80001e4 <strlen>
 8012782:	3e01      	subs	r6, #1
 8012784:	4420      	add	r0, r4
 8012786:	f108 33ff 	add.w	r3, r8, #4294967295
 801278a:	42a0      	cmp	r0, r4
 801278c:	d0ca      	beq.n	8012724 <__strftime+0x204>
 801278e:	42a3      	cmp	r3, r4
 8012790:	f67f aef5 	bls.w	801257e <__strftime+0x5e>
 8012794:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012798:	f809 2004 	strb.w	r2, [r9, r4]
 801279c:	3401      	adds	r4, #1
 801279e:	e7f4      	b.n	801278a <__strftime+0x26a>
 80127a0:	692b      	ldr	r3, [r5, #16]
 80127a2:	4a81      	ldr	r2, [pc, #516]	; (80129a8 <__strftime+0x488>)
 80127a4:	330c      	adds	r3, #12
 80127a6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80127aa:	4630      	mov	r0, r6
 80127ac:	f7ed fd1a 	bl	80001e4 <strlen>
 80127b0:	3e01      	subs	r6, #1
 80127b2:	4420      	add	r0, r4
 80127b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80127b8:	42a0      	cmp	r0, r4
 80127ba:	d0b3      	beq.n	8012724 <__strftime+0x204>
 80127bc:	42a3      	cmp	r3, r4
 80127be:	f67f aede 	bls.w	801257e <__strftime+0x5e>
 80127c2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80127c6:	f809 2004 	strb.w	r2, [r9, r4]
 80127ca:	3401      	adds	r4, #1
 80127cc:	e7f4      	b.n	80127b8 <__strftime+0x298>
 80127ce:	4b76      	ldr	r3, [pc, #472]	; (80129a8 <__strftime+0x488>)
 80127d0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80127d4:	4630      	mov	r0, r6
 80127d6:	f7ed fd05 	bl	80001e4 <strlen>
 80127da:	7833      	ldrb	r3, [r6, #0]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d0a1      	beq.n	8012724 <__strftime+0x204>
 80127e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80127e2:	9300      	str	r3, [sp, #0]
 80127e4:	4632      	mov	r2, r6
 80127e6:	462b      	mov	r3, r5
 80127e8:	eba8 0104 	sub.w	r1, r8, r4
 80127ec:	eb09 0004 	add.w	r0, r9, r4
 80127f0:	f7ff fe96 	bl	8012520 <__strftime>
 80127f4:	2800      	cmp	r0, #0
 80127f6:	f77f aec2 	ble.w	801257e <__strftime+0x5e>
 80127fa:	4404      	add	r4, r0
 80127fc:	e792      	b.n	8012724 <__strftime+0x204>
 80127fe:	4b6a      	ldr	r3, [pc, #424]	; (80129a8 <__strftime+0x488>)
 8012800:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8012804:	e7e6      	b.n	80127d4 <__strftime+0x2b4>
 8012806:	4b68      	ldr	r3, [pc, #416]	; (80129a8 <__strftime+0x488>)
 8012808:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801280c:	e7e2      	b.n	80127d4 <__strftime+0x2b4>
 801280e:	4b66      	ldr	r3, [pc, #408]	; (80129a8 <__strftime+0x488>)
 8012810:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8012814:	e7de      	b.n	80127d4 <__strftime+0x2b4>
 8012816:	4965      	ldr	r1, [pc, #404]	; (80129ac <__strftime+0x48c>)
 8012818:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801281c:	458a      	cmp	sl, r1
 801281e:	bfac      	ite	ge
 8012820:	2100      	movge	r1, #0
 8012822:	2101      	movlt	r1, #1
 8012824:	f1ba 0f00 	cmp.w	sl, #0
 8012828:	db0e      	blt.n	8012848 <__strftime+0x328>
 801282a:	2064      	movs	r0, #100	; 0x64
 801282c:	fb9a f0f0 	sdiv	r0, sl, r0
 8012830:	3013      	adds	r0, #19
 8012832:	b19f      	cbz	r7, 801285c <__strftime+0x33c>
 8012834:	2863      	cmp	r0, #99	; 0x63
 8012836:	dd25      	ble.n	8012884 <__strftime+0x364>
 8012838:	4a5d      	ldr	r2, [pc, #372]	; (80129b0 <__strftime+0x490>)
 801283a:	4b5e      	ldr	r3, [pc, #376]	; (80129b4 <__strftime+0x494>)
 801283c:	2f2b      	cmp	r7, #43	; 0x2b
 801283e:	bf14      	ite	ne
 8012840:	4617      	movne	r7, r2
 8012842:	461f      	moveq	r7, r3
 8012844:	4a5c      	ldr	r2, [pc, #368]	; (80129b8 <__strftime+0x498>)
 8012846:	e00b      	b.n	8012860 <__strftime+0x340>
 8012848:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801284c:	9105      	str	r1, [sp, #20]
 801284e:	f001 fcf5 	bl	801423c <abs>
 8012852:	2364      	movs	r3, #100	; 0x64
 8012854:	9905      	ldr	r1, [sp, #20]
 8012856:	fb90 f0f3 	sdiv	r0, r0, r3
 801285a:	e7ea      	b.n	8012832 <__strftime+0x312>
 801285c:	4f54      	ldr	r7, [pc, #336]	; (80129b0 <__strftime+0x490>)
 801285e:	4a57      	ldr	r2, [pc, #348]	; (80129bc <__strftime+0x49c>)
 8012860:	4b57      	ldr	r3, [pc, #348]	; (80129c0 <__strftime+0x4a0>)
 8012862:	9001      	str	r0, [sp, #4]
 8012864:	2e02      	cmp	r6, #2
 8012866:	bf2c      	ite	cs
 8012868:	ebc1 0606 	rsbcs	r6, r1, r6
 801286c:	f1c1 0602 	rsbcc	r6, r1, #2
 8012870:	494e      	ldr	r1, [pc, #312]	; (80129ac <__strftime+0x48c>)
 8012872:	9600      	str	r6, [sp, #0]
 8012874:	458a      	cmp	sl, r1
 8012876:	bfa8      	it	ge
 8012878:	463b      	movge	r3, r7
 801287a:	eba8 0104 	sub.w	r1, r8, r4
 801287e:	eb09 0004 	add.w	r0, r9, r4
 8012882:	e02a      	b.n	80128da <__strftime+0x3ba>
 8012884:	4f4a      	ldr	r7, [pc, #296]	; (80129b0 <__strftime+0x490>)
 8012886:	e7dd      	b.n	8012844 <__strftime+0x324>
 8012888:	494e      	ldr	r1, [pc, #312]	; (80129c4 <__strftime+0x4a4>)
 801288a:	4a4f      	ldr	r2, [pc, #316]	; (80129c8 <__strftime+0x4a8>)
 801288c:	68eb      	ldr	r3, [r5, #12]
 801288e:	2864      	cmp	r0, #100	; 0x64
 8012890:	bf08      	it	eq
 8012892:	460a      	moveq	r2, r1
 8012894:	eba8 0104 	sub.w	r1, r8, r4
 8012898:	eb09 0004 	add.w	r0, r9, r4
 801289c:	f003 fb9c 	bl	8015fd8 <sniprintf>
 80128a0:	2800      	cmp	r0, #0
 80128a2:	f6ff ae6c 	blt.w	801257e <__strftime+0x5e>
 80128a6:	4404      	add	r4, r0
 80128a8:	45a0      	cmp	r8, r4
 80128aa:	f63f af3b 	bhi.w	8012724 <__strftime+0x204>
 80128ae:	e666      	b.n	801257e <__strftime+0x5e>
 80128b0:	6968      	ldr	r0, [r5, #20]
 80128b2:	692b      	ldr	r3, [r5, #16]
 80128b4:	68ef      	ldr	r7, [r5, #12]
 80128b6:	2800      	cmp	r0, #0
 80128b8:	eb09 0604 	add.w	r6, r9, r4
 80128bc:	eba8 0104 	sub.w	r1, r8, r4
 80128c0:	f103 0301 	add.w	r3, r3, #1
 80128c4:	db0c      	blt.n	80128e0 <__strftime+0x3c0>
 80128c6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80128ca:	fb90 f2fc 	sdiv	r2, r0, ip
 80128ce:	fb0c 0212 	mls	r2, ip, r2, r0
 80128d2:	e9cd 7200 	strd	r7, r2, [sp]
 80128d6:	4a3d      	ldr	r2, [pc, #244]	; (80129cc <__strftime+0x4ac>)
 80128d8:	4630      	mov	r0, r6
 80128da:	f003 fb7d 	bl	8015fd8 <sniprintf>
 80128de:	e7df      	b.n	80128a0 <__strftime+0x380>
 80128e0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80128e4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80128e8:	f001 fca8 	bl	801423c <abs>
 80128ec:	2264      	movs	r2, #100	; 0x64
 80128ee:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 80128f2:	fb90 fcf2 	sdiv	ip, r0, r2
 80128f6:	fb0c 0212 	mls	r2, ip, r2, r0
 80128fa:	e7ea      	b.n	80128d2 <__strftime+0x3b2>
 80128fc:	2325      	movs	r3, #37	; 0x25
 80128fe:	f88d 3020 	strb.w	r3, [sp, #32]
 8012902:	b187      	cbz	r7, 8012926 <__strftime+0x406>
 8012904:	2e06      	cmp	r6, #6
 8012906:	bf38      	it	cc
 8012908:	2606      	movcc	r6, #6
 801290a:	1fb3      	subs	r3, r6, #6
 801290c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8012910:	d10c      	bne.n	801292c <__strftime+0x40c>
 8012912:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8012916:	492e      	ldr	r1, [pc, #184]	; (80129d0 <__strftime+0x4b0>)
 8012918:	f7ff fd98 	bl	801244c <strcpy>
 801291c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801291e:	9300      	str	r3, [sp, #0]
 8012920:	aa08      	add	r2, sp, #32
 8012922:	462b      	mov	r3, r5
 8012924:	e760      	b.n	80127e8 <__strftime+0x2c8>
 8012926:	272b      	movs	r7, #43	; 0x2b
 8012928:	260a      	movs	r6, #10
 801292a:	e7ee      	b.n	801290a <__strftime+0x3ea>
 801292c:	4a29      	ldr	r2, [pc, #164]	; (80129d4 <__strftime+0x4b4>)
 801292e:	211e      	movs	r1, #30
 8012930:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8012934:	f003 fb50 	bl	8015fd8 <sniprintf>
 8012938:	2800      	cmp	r0, #0
 801293a:	ddea      	ble.n	8012912 <__strftime+0x3f2>
 801293c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8012940:	4418      	add	r0, r3
 8012942:	e7e8      	b.n	8012916 <__strftime+0x3f6>
 8012944:	4628      	mov	r0, r5
 8012946:	f7ff fd89 	bl	801245c <iso_year_adjust>
 801294a:	4606      	mov	r6, r0
 801294c:	6968      	ldr	r0, [r5, #20]
 801294e:	2800      	cmp	r0, #0
 8012950:	db11      	blt.n	8012976 <__strftime+0x456>
 8012952:	2264      	movs	r2, #100	; 0x64
 8012954:	fb90 f3f2 	sdiv	r3, r0, r2
 8012958:	fb02 0313 	mls	r3, r2, r3, r0
 801295c:	441e      	add	r6, r3
 801295e:	2364      	movs	r3, #100	; 0x64
 8012960:	fb96 f0f3 	sdiv	r0, r6, r3
 8012964:	fb03 6610 	mls	r6, r3, r0, r6
 8012968:	441e      	add	r6, r3
 801296a:	fbb6 f2f3 	udiv	r2, r6, r3
 801296e:	fb03 6312 	mls	r3, r3, r2, r6
 8012972:	4a14      	ldr	r2, [pc, #80]	; (80129c4 <__strftime+0x4a4>)
 8012974:	e78e      	b.n	8012894 <__strftime+0x374>
 8012976:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801297a:	f001 fc5f 	bl	801423c <abs>
 801297e:	2364      	movs	r3, #100	; 0x64
 8012980:	2e00      	cmp	r6, #0
 8012982:	fb90 f2f3 	sdiv	r2, r0, r3
 8012986:	fb02 0313 	mls	r3, r2, r3, r0
 801298a:	da05      	bge.n	8012998 <__strftime+0x478>
 801298c:	6969      	ldr	r1, [r5, #20]
 801298e:	4a12      	ldr	r2, [pc, #72]	; (80129d8 <__strftime+0x4b8>)
 8012990:	4291      	cmp	r1, r2
 8012992:	bfb8      	it	lt
 8012994:	2601      	movlt	r6, #1
 8012996:	e7e1      	b.n	801295c <__strftime+0x43c>
 8012998:	d0e0      	beq.n	801295c <__strftime+0x43c>
 801299a:	6969      	ldr	r1, [r5, #20]
 801299c:	4a03      	ldr	r2, [pc, #12]	; (80129ac <__strftime+0x48c>)
 801299e:	4291      	cmp	r1, r2
 80129a0:	bfb8      	it	lt
 80129a2:	f04f 36ff 	movlt.w	r6, #4294967295
 80129a6:	e7d9      	b.n	801295c <__strftime+0x43c>
 80129a8:	0802190c 	.word	0x0802190c
 80129ac:	fffff894 	.word	0xfffff894
 80129b0:	08021a7f 	.word	0x08021a7f
 80129b4:	0802173b 	.word	0x0802173b
 80129b8:	08021733 	.word	0x08021733
 80129bc:	0802172c 	.word	0x0802172c
 80129c0:	08021da0 	.word	0x08021da0
 80129c4:	0802174b 	.word	0x0802174b
 80129c8:	0802173d 	.word	0x0802173d
 80129cc:	08021741 	.word	0x08021741
 80129d0:	08021754 	.word	0x08021754
 80129d4:	08021750 	.word	0x08021750
 80129d8:	fffff895 	.word	0xfffff895
 80129dc:	4bb6      	ldr	r3, [pc, #728]	; (8012cb8 <__strftime+0x798>)
 80129de:	6969      	ldr	r1, [r5, #20]
 80129e0:	4299      	cmp	r1, r3
 80129e2:	bfac      	ite	ge
 80129e4:	2300      	movge	r3, #0
 80129e6:	2301      	movlt	r3, #1
 80129e8:	4628      	mov	r0, r5
 80129ea:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80129ee:	f7ff fd35 	bl	801245c <iso_year_adjust>
 80129f2:	9906      	ldr	r1, [sp, #24]
 80129f4:	2900      	cmp	r1, #0
 80129f6:	4682      	mov	sl, r0
 80129f8:	db27      	blt.n	8012a4a <__strftime+0x52a>
 80129fa:	2264      	movs	r2, #100	; 0x64
 80129fc:	fb91 f2f2 	sdiv	r2, r1, r2
 8012a00:	3213      	adds	r2, #19
 8012a02:	6968      	ldr	r0, [r5, #20]
 8012a04:	2800      	cmp	r0, #0
 8012a06:	db2b      	blt.n	8012a60 <__strftime+0x540>
 8012a08:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8012a0c:	fb90 fefc 	sdiv	lr, r0, ip
 8012a10:	fb0c 001e 	mls	r0, ip, lr, r0
 8012a14:	f1ba 0f00 	cmp.w	sl, #0
 8012a18:	da31      	bge.n	8012a7e <__strftime+0x55e>
 8012a1a:	6969      	ldr	r1, [r5, #20]
 8012a1c:	4ba7      	ldr	r3, [pc, #668]	; (8012cbc <__strftime+0x79c>)
 8012a1e:	4299      	cmp	r1, r3
 8012a20:	db38      	blt.n	8012a94 <__strftime+0x574>
 8012a22:	eb0a 0300 	add.w	r3, sl, r0
 8012a26:	1c59      	adds	r1, r3, #1
 8012a28:	d139      	bne.n	8012a9e <__strftime+0x57e>
 8012a2a:	3a01      	subs	r2, #1
 8012a2c:	2363      	movs	r3, #99	; 0x63
 8012a2e:	2064      	movs	r0, #100	; 0x64
 8012a30:	fb00 3202 	mla	r2, r0, r2, r3
 8012a34:	9b05      	ldr	r3, [sp, #20]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d036      	beq.n	8012aa8 <__strftime+0x588>
 8012a3a:	232d      	movs	r3, #45	; 0x2d
 8012a3c:	f88d 3020 	strb.w	r3, [sp, #32]
 8012a40:	b106      	cbz	r6, 8012a44 <__strftime+0x524>
 8012a42:	3e01      	subs	r6, #1
 8012a44:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8012a48:	e038      	b.n	8012abc <__strftime+0x59c>
 8012a4a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8012a4e:	9106      	str	r1, [sp, #24]
 8012a50:	f001 fbf4 	bl	801423c <abs>
 8012a54:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8012a58:	9906      	ldr	r1, [sp, #24]
 8012a5a:	fb90 f2fc 	sdiv	r2, r0, ip
 8012a5e:	e7d0      	b.n	8012a02 <__strftime+0x4e2>
 8012a60:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012a64:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8012a68:	f001 fbe8 	bl	801423c <abs>
 8012a6c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8012a70:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012a74:	fb90 fefc 	sdiv	lr, r0, ip
 8012a78:	fb0e 001c 	mls	r0, lr, ip, r0
 8012a7c:	e7ca      	b.n	8012a14 <__strftime+0x4f4>
 8012a7e:	d0d0      	beq.n	8012a22 <__strftime+0x502>
 8012a80:	4b8d      	ldr	r3, [pc, #564]	; (8012cb8 <__strftime+0x798>)
 8012a82:	4299      	cmp	r1, r3
 8012a84:	bfb4      	ite	lt
 8012a86:	2301      	movlt	r3, #1
 8012a88:	2300      	movge	r3, #0
 8012a8a:	9305      	str	r3, [sp, #20]
 8012a8c:	bfb8      	it	lt
 8012a8e:	f04f 3aff 	movlt.w	sl, #4294967295
 8012a92:	e7c6      	b.n	8012a22 <__strftime+0x502>
 8012a94:	f04f 0a01 	mov.w	sl, #1
 8012a98:	f8cd a014 	str.w	sl, [sp, #20]
 8012a9c:	e7c1      	b.n	8012a22 <__strftime+0x502>
 8012a9e:	2b64      	cmp	r3, #100	; 0x64
 8012aa0:	bf04      	itt	eq
 8012aa2:	3201      	addeq	r2, #1
 8012aa4:	2300      	moveq	r3, #0
 8012aa6:	e7c2      	b.n	8012a2e <__strftime+0x50e>
 8012aa8:	2f2b      	cmp	r7, #43	; 0x2b
 8012aaa:	d106      	bne.n	8012aba <__strftime+0x59a>
 8012aac:	f242 730f 	movw	r3, #9999	; 0x270f
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d902      	bls.n	8012aba <__strftime+0x59a>
 8012ab4:	f88d 7020 	strb.w	r7, [sp, #32]
 8012ab8:	e7c2      	b.n	8012a40 <__strftime+0x520>
 8012aba:	ab08      	add	r3, sp, #32
 8012abc:	2125      	movs	r1, #37	; 0x25
 8012abe:	7019      	strb	r1, [r3, #0]
 8012ac0:	b94f      	cbnz	r7, 8012ad6 <__strftime+0x5b6>
 8012ac2:	1c58      	adds	r0, r3, #1
 8012ac4:	497e      	ldr	r1, [pc, #504]	; (8012cc0 <__strftime+0x7a0>)
 8012ac6:	9205      	str	r2, [sp, #20]
 8012ac8:	f7ff fcc0 	bl	801244c <strcpy>
 8012acc:	9a05      	ldr	r2, [sp, #20]
 8012ace:	9200      	str	r2, [sp, #0]
 8012ad0:	4633      	mov	r3, r6
 8012ad2:	aa08      	add	r2, sp, #32
 8012ad4:	e059      	b.n	8012b8a <__strftime+0x66a>
 8012ad6:	2130      	movs	r1, #48	; 0x30
 8012ad8:	1c98      	adds	r0, r3, #2
 8012ada:	7059      	strb	r1, [r3, #1]
 8012adc:	e7f2      	b.n	8012ac4 <__strftime+0x5a4>
 8012ade:	4979      	ldr	r1, [pc, #484]	; (8012cc4 <__strftime+0x7a4>)
 8012ae0:	4a79      	ldr	r2, [pc, #484]	; (8012cc8 <__strftime+0x7a8>)
 8012ae2:	68ab      	ldr	r3, [r5, #8]
 8012ae4:	286b      	cmp	r0, #107	; 0x6b
 8012ae6:	bf08      	it	eq
 8012ae8:	460a      	moveq	r2, r1
 8012aea:	e6d3      	b.n	8012894 <__strftime+0x374>
 8012aec:	68ab      	ldr	r3, [r5, #8]
 8012aee:	b163      	cbz	r3, 8012b0a <__strftime+0x5ea>
 8012af0:	2b0c      	cmp	r3, #12
 8012af2:	d004      	beq.n	8012afe <__strftime+0x5de>
 8012af4:	210c      	movs	r1, #12
 8012af6:	fb93 f2f1 	sdiv	r2, r3, r1
 8012afa:	fb01 3312 	mls	r3, r1, r2, r3
 8012afe:	4972      	ldr	r1, [pc, #456]	; (8012cc8 <__strftime+0x7a8>)
 8012b00:	4a70      	ldr	r2, [pc, #448]	; (8012cc4 <__strftime+0x7a4>)
 8012b02:	2849      	cmp	r0, #73	; 0x49
 8012b04:	bf08      	it	eq
 8012b06:	460a      	moveq	r2, r1
 8012b08:	e6c4      	b.n	8012894 <__strftime+0x374>
 8012b0a:	230c      	movs	r3, #12
 8012b0c:	e7f7      	b.n	8012afe <__strftime+0x5de>
 8012b0e:	69eb      	ldr	r3, [r5, #28]
 8012b10:	4a6e      	ldr	r2, [pc, #440]	; (8012ccc <__strftime+0x7ac>)
 8012b12:	3301      	adds	r3, #1
 8012b14:	e6be      	b.n	8012894 <__strftime+0x374>
 8012b16:	692b      	ldr	r3, [r5, #16]
 8012b18:	3301      	adds	r3, #1
 8012b1a:	e72a      	b.n	8012972 <__strftime+0x452>
 8012b1c:	686b      	ldr	r3, [r5, #4]
 8012b1e:	e728      	b.n	8012972 <__strftime+0x452>
 8012b20:	f108 33ff 	add.w	r3, r8, #4294967295
 8012b24:	42a3      	cmp	r3, r4
 8012b26:	f67f ad2a 	bls.w	801257e <__strftime+0x5e>
 8012b2a:	230a      	movs	r3, #10
 8012b2c:	f809 3004 	strb.w	r3, [r9, r4]
 8012b30:	3401      	adds	r4, #1
 8012b32:	e5f7      	b.n	8012724 <__strftime+0x204>
 8012b34:	68ab      	ldr	r3, [r5, #8]
 8012b36:	2b0b      	cmp	r3, #11
 8012b38:	bfcc      	ite	gt
 8012b3a:	22a4      	movgt	r2, #164	; 0xa4
 8012b3c:	22a0      	movle	r2, #160	; 0xa0
 8012b3e:	4b64      	ldr	r3, [pc, #400]	; (8012cd0 <__strftime+0x7b0>)
 8012b40:	4413      	add	r3, r2
 8012b42:	685e      	ldr	r6, [r3, #4]
 8012b44:	4630      	mov	r0, r6
 8012b46:	f7ed fb4d 	bl	80001e4 <strlen>
 8012b4a:	1e72      	subs	r2, r6, #1
 8012b4c:	4420      	add	r0, r4
 8012b4e:	f108 36ff 	add.w	r6, r8, #4294967295
 8012b52:	42a0      	cmp	r0, r4
 8012b54:	f43f ade6 	beq.w	8012724 <__strftime+0x204>
 8012b58:	42a6      	cmp	r6, r4
 8012b5a:	f67f ad10 	bls.w	801257e <__strftime+0x5e>
 8012b5e:	f89b 1000 	ldrb.w	r1, [fp]
 8012b62:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012b66:	2950      	cmp	r1, #80	; 0x50
 8012b68:	d107      	bne.n	8012b7a <__strftime+0x65a>
 8012b6a:	495a      	ldr	r1, [pc, #360]	; (8012cd4 <__strftime+0x7b4>)
 8012b6c:	5cc9      	ldrb	r1, [r1, r3]
 8012b6e:	f001 0103 	and.w	r1, r1, #3
 8012b72:	2901      	cmp	r1, #1
 8012b74:	bf08      	it	eq
 8012b76:	3320      	addeq	r3, #32
 8012b78:	b2db      	uxtb	r3, r3
 8012b7a:	f809 3004 	strb.w	r3, [r9, r4]
 8012b7e:	3401      	adds	r4, #1
 8012b80:	e7e7      	b.n	8012b52 <__strftime+0x632>
 8012b82:	686b      	ldr	r3, [r5, #4]
 8012b84:	9300      	str	r3, [sp, #0]
 8012b86:	4a54      	ldr	r2, [pc, #336]	; (8012cd8 <__strftime+0x7b8>)
 8012b88:	68ab      	ldr	r3, [r5, #8]
 8012b8a:	eba8 0104 	sub.w	r1, r8, r4
 8012b8e:	eb09 0004 	add.w	r0, r9, r4
 8012b92:	f003 fa21 	bl	8015fd8 <sniprintf>
 8012b96:	e683      	b.n	80128a0 <__strftime+0x380>
 8012b98:	6a2b      	ldr	r3, [r5, #32]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	db79      	blt.n	8012c92 <__strftime+0x772>
 8012b9e:	f001 f9ad 	bl	8013efc <__tz_lock>
 8012ba2:	9b04      	ldr	r3, [sp, #16]
 8012ba4:	b90b      	cbnz	r3, 8012baa <__strftime+0x68a>
 8012ba6:	f001 f9b5 	bl	8013f14 <_tzset_unlocked>
 8012baa:	f001 ffff 	bl	8014bac <__gettzinfo>
 8012bae:	6a2b      	ldr	r3, [r5, #32]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	bfcc      	ite	gt
 8012bb4:	2350      	movgt	r3, #80	; 0x50
 8012bb6:	2328      	movle	r3, #40	; 0x28
 8012bb8:	58c3      	ldr	r3, [r0, r3]
 8012bba:	f1c3 0a00 	rsb	sl, r3, #0
 8012bbe:	f001 f9a3 	bl	8013f08 <__tz_unlock>
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	9304      	str	r3, [sp, #16]
 8012bc6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8012bca:	4662      	mov	r2, ip
 8012bcc:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8012bd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012bd4:	9602      	str	r6, [sp, #8]
 8012bd6:	f143 36ff 	adc.w	r6, r3, #4294967295
 8012bda:	9603      	str	r6, [sp, #12]
 8012bdc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012be0:	2e00      	cmp	r6, #0
 8012be2:	f177 0600 	sbcs.w	r6, r7, #0
 8012be6:	eba8 0104 	sub.w	r1, r8, r4
 8012bea:	eb09 0004 	add.w	r0, r9, r4
 8012bee:	da05      	bge.n	8012bfc <__strftime+0x6dc>
 8012bf0:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8012bf4:	f143 33ff 	adc.w	r3, r3, #4294967295
 8012bf8:	9602      	str	r6, [sp, #8]
 8012bfa:	9303      	str	r3, [sp, #12]
 8012bfc:	9b02      	ldr	r3, [sp, #8]
 8012bfe:	089e      	lsrs	r6, r3, #2
 8012c00:	9b03      	ldr	r3, [sp, #12]
 8012c02:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8012c06:	f10c 32ff 	add.w	r2, ip, #4294967295
 8012c0a:	109f      	asrs	r7, r3, #2
 8012c0c:	2364      	movs	r3, #100	; 0x64
 8012c0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012c12:	1af6      	subs	r6, r6, r3
 8012c14:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8012c18:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8012c1c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012c20:	fb92 f3f3 	sdiv	r3, r2, r3
 8012c24:	18f6      	adds	r6, r6, r3
 8012c26:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8012c2a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8012c2e:	f240 136d 	movw	r3, #365	; 0x16d
 8012c32:	fb03 fc0c 	mul.w	ip, r3, ip
 8012c36:	69eb      	ldr	r3, [r5, #28]
 8012c38:	eb16 060c 	adds.w	r6, r6, ip
 8012c3c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8012c40:	18f6      	adds	r6, r6, r3
 8012c42:	f04f 0c18 	mov.w	ip, #24
 8012c46:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8012c4a:	fba6 230c 	umull	r2, r3, r6, ip
 8012c4e:	68ae      	ldr	r6, [r5, #8]
 8012c50:	fb0c 3307 	mla	r3, ip, r7, r3
 8012c54:	1992      	adds	r2, r2, r6
 8012c56:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8012c5a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8012c5e:	fba2 670c 	umull	r6, r7, r2, ip
 8012c62:	fb0c 7703 	mla	r7, ip, r3, r7
 8012c66:	686b      	ldr	r3, [r5, #4]
 8012c68:	18f6      	adds	r6, r6, r3
 8012c6a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8012c6e:	fba6 230c 	umull	r2, r3, r6, ip
 8012c72:	682e      	ldr	r6, [r5, #0]
 8012c74:	fb0c 3307 	mla	r3, ip, r7, r3
 8012c78:	1992      	adds	r2, r2, r6
 8012c7a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8012c7e:	ebb2 020a 	subs.w	r2, r2, sl
 8012c82:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8012c86:	e9cd 2300 	strd	r2, r3, [sp]
 8012c8a:	4a14      	ldr	r2, [pc, #80]	; (8012cdc <__strftime+0x7bc>)
 8012c8c:	f003 f9a4 	bl	8015fd8 <sniprintf>
 8012c90:	e606      	b.n	80128a0 <__strftime+0x380>
 8012c92:	f04f 0a00 	mov.w	sl, #0
 8012c96:	e796      	b.n	8012bc6 <__strftime+0x6a6>
 8012c98:	682b      	ldr	r3, [r5, #0]
 8012c9a:	e66a      	b.n	8012972 <__strftime+0x452>
 8012c9c:	f108 33ff 	add.w	r3, r8, #4294967295
 8012ca0:	42a3      	cmp	r3, r4
 8012ca2:	f67f ac6c 	bls.w	801257e <__strftime+0x5e>
 8012ca6:	2309      	movs	r3, #9
 8012ca8:	e740      	b.n	8012b2c <__strftime+0x60c>
 8012caa:	682b      	ldr	r3, [r5, #0]
 8012cac:	9301      	str	r3, [sp, #4]
 8012cae:	686b      	ldr	r3, [r5, #4]
 8012cb0:	9300      	str	r3, [sp, #0]
 8012cb2:	4a0b      	ldr	r2, [pc, #44]	; (8012ce0 <__strftime+0x7c0>)
 8012cb4:	68ab      	ldr	r3, [r5, #8]
 8012cb6:	e5e0      	b.n	801287a <__strftime+0x35a>
 8012cb8:	fffff894 	.word	0xfffff894
 8012cbc:	fffff895 	.word	0xfffff895
 8012cc0:	0802175c 	.word	0x0802175c
 8012cc4:	0802173d 	.word	0x0802173d
 8012cc8:	0802174b 	.word	0x0802174b
 8012ccc:	08021760 	.word	0x08021760
 8012cd0:	0802190c 	.word	0x0802190c
 8012cd4:	08021a81 	.word	0x08021a81
 8012cd8:	0802176f 	.word	0x0802176f
 8012cdc:	08021765 	.word	0x08021765
 8012ce0:	0802176a 	.word	0x0802176a
 8012ce4:	f108 33ff 	add.w	r3, r8, #4294967295
 8012ce8:	42a3      	cmp	r3, r4
 8012cea:	f67f ac48 	bls.w	801257e <__strftime+0x5e>
 8012cee:	69ab      	ldr	r3, [r5, #24]
 8012cf0:	eb09 0204 	add.w	r2, r9, r4
 8012cf4:	3401      	adds	r4, #1
 8012cf6:	b913      	cbnz	r3, 8012cfe <__strftime+0x7de>
 8012cf8:	2337      	movs	r3, #55	; 0x37
 8012cfa:	7013      	strb	r3, [r2, #0]
 8012cfc:	e512      	b.n	8012724 <__strftime+0x204>
 8012cfe:	3330      	adds	r3, #48	; 0x30
 8012d00:	e7fb      	b.n	8012cfa <__strftime+0x7da>
 8012d02:	69eb      	ldr	r3, [r5, #28]
 8012d04:	69aa      	ldr	r2, [r5, #24]
 8012d06:	3307      	adds	r3, #7
 8012d08:	1a9b      	subs	r3, r3, r2
 8012d0a:	2207      	movs	r2, #7
 8012d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d10:	e62f      	b.n	8012972 <__strftime+0x452>
 8012d12:	4628      	mov	r0, r5
 8012d14:	f7ff fba2 	bl	801245c <iso_year_adjust>
 8012d18:	69aa      	ldr	r2, [r5, #24]
 8012d1a:	b132      	cbz	r2, 8012d2a <__strftime+0x80a>
 8012d1c:	3a01      	subs	r2, #1
 8012d1e:	2800      	cmp	r0, #0
 8012d20:	dc28      	bgt.n	8012d74 <__strftime+0x854>
 8012d22:	69eb      	ldr	r3, [r5, #28]
 8012d24:	d103      	bne.n	8012d2e <__strftime+0x80e>
 8012d26:	330a      	adds	r3, #10
 8012d28:	e7ee      	b.n	8012d08 <__strftime+0x7e8>
 8012d2a:	2206      	movs	r2, #6
 8012d2c:	e7f7      	b.n	8012d1e <__strftime+0x7fe>
 8012d2e:	6968      	ldr	r0, [r5, #20]
 8012d30:	2800      	cmp	r0, #0
 8012d32:	eba2 0303 	sub.w	r3, r2, r3
 8012d36:	f240 726b 	movw	r2, #1899	; 0x76b
 8012d3a:	bfa8      	it	ge
 8012d3c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8012d40:	4410      	add	r0, r2
 8012d42:	0782      	lsls	r2, r0, #30
 8012d44:	d105      	bne.n	8012d52 <__strftime+0x832>
 8012d46:	2264      	movs	r2, #100	; 0x64
 8012d48:	fb90 f1f2 	sdiv	r1, r0, r2
 8012d4c:	fb02 0111 	mls	r1, r2, r1, r0
 8012d50:	b971      	cbnz	r1, 8012d70 <__strftime+0x850>
 8012d52:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012d56:	fb90 f2f1 	sdiv	r2, r0, r1
 8012d5a:	fb01 0212 	mls	r2, r1, r2, r0
 8012d5e:	fab2 f282 	clz	r2, r2
 8012d62:	0952      	lsrs	r2, r2, #5
 8012d64:	1a9a      	subs	r2, r3, r2
 8012d66:	2a05      	cmp	r2, #5
 8012d68:	bfb4      	ite	lt
 8012d6a:	2335      	movlt	r3, #53	; 0x35
 8012d6c:	2334      	movge	r3, #52	; 0x34
 8012d6e:	e600      	b.n	8012972 <__strftime+0x452>
 8012d70:	2201      	movs	r2, #1
 8012d72:	e7f7      	b.n	8012d64 <__strftime+0x844>
 8012d74:	2301      	movs	r3, #1
 8012d76:	e5fc      	b.n	8012972 <__strftime+0x452>
 8012d78:	f108 33ff 	add.w	r3, r8, #4294967295
 8012d7c:	42a3      	cmp	r3, r4
 8012d7e:	f67f abfe 	bls.w	801257e <__strftime+0x5e>
 8012d82:	69ab      	ldr	r3, [r5, #24]
 8012d84:	3330      	adds	r3, #48	; 0x30
 8012d86:	e6d1      	b.n	8012b2c <__strftime+0x60c>
 8012d88:	69ab      	ldr	r3, [r5, #24]
 8012d8a:	b13b      	cbz	r3, 8012d9c <__strftime+0x87c>
 8012d8c:	3b01      	subs	r3, #1
 8012d8e:	69ea      	ldr	r2, [r5, #28]
 8012d90:	3207      	adds	r2, #7
 8012d92:	1ad2      	subs	r2, r2, r3
 8012d94:	2307      	movs	r3, #7
 8012d96:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d9a:	e5ea      	b.n	8012972 <__strftime+0x452>
 8012d9c:	2306      	movs	r3, #6
 8012d9e:	e7f6      	b.n	8012d8e <__strftime+0x86e>
 8012da0:	6968      	ldr	r0, [r5, #20]
 8012da2:	2800      	cmp	r0, #0
 8012da4:	db05      	blt.n	8012db2 <__strftime+0x892>
 8012da6:	2264      	movs	r2, #100	; 0x64
 8012da8:	fb90 f3f2 	sdiv	r3, r0, r2
 8012dac:	fb03 0312 	mls	r3, r3, r2, r0
 8012db0:	e5df      	b.n	8012972 <__strftime+0x452>
 8012db2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012db6:	f001 fa41 	bl	801423c <abs>
 8012dba:	e7f4      	b.n	8012da6 <__strftime+0x886>
 8012dbc:	696b      	ldr	r3, [r5, #20]
 8012dbe:	4a4c      	ldr	r2, [pc, #304]	; (8012ef0 <__strftime+0x9d0>)
 8012dc0:	4293      	cmp	r3, r2
 8012dc2:	da09      	bge.n	8012dd8 <__strftime+0x8b8>
 8012dc4:	212d      	movs	r1, #45	; 0x2d
 8012dc6:	f88d 1020 	strb.w	r1, [sp, #32]
 8012dca:	eba2 0a03 	sub.w	sl, r2, r3
 8012dce:	b106      	cbz	r6, 8012dd2 <__strftime+0x8b2>
 8012dd0:	3e01      	subs	r6, #1
 8012dd2:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8012dd6:	e00b      	b.n	8012df0 <__strftime+0x8d0>
 8012dd8:	2f2b      	cmp	r7, #43	; 0x2b
 8012dda:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8012dde:	d106      	bne.n	8012dee <__strftime+0x8ce>
 8012de0:	f242 730f 	movw	r3, #9999	; 0x270f
 8012de4:	459a      	cmp	sl, r3
 8012de6:	d902      	bls.n	8012dee <__strftime+0x8ce>
 8012de8:	f88d 7020 	strb.w	r7, [sp, #32]
 8012dec:	e7ef      	b.n	8012dce <__strftime+0x8ae>
 8012dee:	ab08      	add	r3, sp, #32
 8012df0:	2225      	movs	r2, #37	; 0x25
 8012df2:	701a      	strb	r2, [r3, #0]
 8012df4:	b937      	cbnz	r7, 8012e04 <__strftime+0x8e4>
 8012df6:	1c58      	adds	r0, r3, #1
 8012df8:	493e      	ldr	r1, [pc, #248]	; (8012ef4 <__strftime+0x9d4>)
 8012dfa:	f7ff fb27 	bl	801244c <strcpy>
 8012dfe:	f8cd a000 	str.w	sl, [sp]
 8012e02:	e665      	b.n	8012ad0 <__strftime+0x5b0>
 8012e04:	2230      	movs	r2, #48	; 0x30
 8012e06:	1c98      	adds	r0, r3, #2
 8012e08:	705a      	strb	r2, [r3, #1]
 8012e0a:	e7f5      	b.n	8012df8 <__strftime+0x8d8>
 8012e0c:	6a2b      	ldr	r3, [r5, #32]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	f6ff ac88 	blt.w	8012724 <__strftime+0x204>
 8012e14:	f001 f872 	bl	8013efc <__tz_lock>
 8012e18:	9b04      	ldr	r3, [sp, #16]
 8012e1a:	b90b      	cbnz	r3, 8012e20 <__strftime+0x900>
 8012e1c:	f001 f87a 	bl	8013f14 <_tzset_unlocked>
 8012e20:	f001 fec4 	bl	8014bac <__gettzinfo>
 8012e24:	6a2b      	ldr	r3, [r5, #32]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	bfcc      	ite	gt
 8012e2a:	2350      	movgt	r3, #80	; 0x50
 8012e2c:	2328      	movle	r3, #40	; 0x28
 8012e2e:	eb09 0704 	add.w	r7, r9, r4
 8012e32:	58c6      	ldr	r6, [r0, r3]
 8012e34:	f001 f868 	bl	8013f08 <__tz_unlock>
 8012e38:	4276      	negs	r6, r6
 8012e3a:	233c      	movs	r3, #60	; 0x3c
 8012e3c:	fb96 f0f3 	sdiv	r0, r6, r3
 8012e40:	f001 ff68 	bl	8014d14 <labs>
 8012e44:	233c      	movs	r3, #60	; 0x3c
 8012e46:	eba8 0a04 	sub.w	sl, r8, r4
 8012e4a:	fb90 f2f3 	sdiv	r2, r0, r3
 8012e4e:	fb02 0013 	mls	r0, r2, r3, r0
 8012e52:	9000      	str	r0, [sp, #0]
 8012e54:	4a28      	ldr	r2, [pc, #160]	; (8012ef8 <__strftime+0x9d8>)
 8012e56:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012e5a:	4651      	mov	r1, sl
 8012e5c:	4638      	mov	r0, r7
 8012e5e:	fb96 f3f3 	sdiv	r3, r6, r3
 8012e62:	f003 f8b9 	bl	8015fd8 <sniprintf>
 8012e66:	2800      	cmp	r0, #0
 8012e68:	f6ff ab89 	blt.w	801257e <__strftime+0x5e>
 8012e6c:	4404      	add	r4, r0
 8012e6e:	45a0      	cmp	r8, r4
 8012e70:	f67f ab85 	bls.w	801257e <__strftime+0x5e>
 8012e74:	2301      	movs	r3, #1
 8012e76:	9304      	str	r3, [sp, #16]
 8012e78:	e454      	b.n	8012724 <__strftime+0x204>
 8012e7a:	6a2b      	ldr	r3, [r5, #32]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	f6ff ac51 	blt.w	8012724 <__strftime+0x204>
 8012e82:	f001 f83b 	bl	8013efc <__tz_lock>
 8012e86:	9b04      	ldr	r3, [sp, #16]
 8012e88:	b90b      	cbnz	r3, 8012e8e <__strftime+0x96e>
 8012e8a:	f001 f843 	bl	8013f14 <_tzset_unlocked>
 8012e8e:	6a2b      	ldr	r3, [r5, #32]
 8012e90:	4a1a      	ldr	r2, [pc, #104]	; (8012efc <__strftime+0x9dc>)
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	bfd4      	ite	le
 8012e96:	2300      	movle	r3, #0
 8012e98:	2301      	movgt	r3, #1
 8012e9a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	f7ed f9a0 	bl	80001e4 <strlen>
 8012ea4:	3e01      	subs	r6, #1
 8012ea6:	4420      	add	r0, r4
 8012ea8:	f108 33ff 	add.w	r3, r8, #4294967295
 8012eac:	42a0      	cmp	r0, r4
 8012eae:	d102      	bne.n	8012eb6 <__strftime+0x996>
 8012eb0:	f001 f82a 	bl	8013f08 <__tz_unlock>
 8012eb4:	e7de      	b.n	8012e74 <__strftime+0x954>
 8012eb6:	42a3      	cmp	r3, r4
 8012eb8:	d905      	bls.n	8012ec6 <__strftime+0x9a6>
 8012eba:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012ebe:	f809 2004 	strb.w	r2, [r9, r4]
 8012ec2:	3401      	adds	r4, #1
 8012ec4:	e7f2      	b.n	8012eac <__strftime+0x98c>
 8012ec6:	f001 f81f 	bl	8013f08 <__tz_unlock>
 8012eca:	f7ff bb58 	b.w	801257e <__strftime+0x5e>
 8012ece:	f108 33ff 	add.w	r3, r8, #4294967295
 8012ed2:	42a3      	cmp	r3, r4
 8012ed4:	f67f ab53 	bls.w	801257e <__strftime+0x5e>
 8012ed8:	2325      	movs	r3, #37	; 0x25
 8012eda:	e627      	b.n	8012b2c <__strftime+0x60c>
 8012edc:	f1b8 0f00 	cmp.w	r8, #0
 8012ee0:	d002      	beq.n	8012ee8 <__strftime+0x9c8>
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	f809 3004 	strb.w	r3, [r9, r4]
 8012ee8:	4620      	mov	r0, r4
 8012eea:	b011      	add	sp, #68	; 0x44
 8012eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ef0:	fffff894 	.word	0xfffff894
 8012ef4:	0802175c 	.word	0x0802175c
 8012ef8:	08021779 	.word	0x08021779
 8012efc:	20000118 	.word	0x20000118

08012f00 <strftime>:
 8012f00:	b513      	push	{r0, r1, r4, lr}
 8012f02:	4c03      	ldr	r4, [pc, #12]	; (8012f10 <strftime+0x10>)
 8012f04:	9400      	str	r4, [sp, #0]
 8012f06:	f7ff fb0b 	bl	8012520 <__strftime>
 8012f0a:	b002      	add	sp, #8
 8012f0c:	bd10      	pop	{r4, pc}
 8012f0e:	bf00      	nop
 8012f10:	2000017c 	.word	0x2000017c

08012f14 <sulp>:
 8012f14:	b570      	push	{r4, r5, r6, lr}
 8012f16:	4604      	mov	r4, r0
 8012f18:	460d      	mov	r5, r1
 8012f1a:	ec45 4b10 	vmov	d0, r4, r5
 8012f1e:	4616      	mov	r6, r2
 8012f20:	f002 fa98 	bl	8015454 <__ulp>
 8012f24:	ec51 0b10 	vmov	r0, r1, d0
 8012f28:	b17e      	cbz	r6, 8012f4a <sulp+0x36>
 8012f2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012f2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	dd09      	ble.n	8012f4a <sulp+0x36>
 8012f36:	051b      	lsls	r3, r3, #20
 8012f38:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012f3c:	2400      	movs	r4, #0
 8012f3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012f42:	4622      	mov	r2, r4
 8012f44:	462b      	mov	r3, r5
 8012f46:	f7ed fb67 	bl	8000618 <__aeabi_dmul>
 8012f4a:	bd70      	pop	{r4, r5, r6, pc}
 8012f4c:	0000      	movs	r0, r0
	...

08012f50 <_strtod_l>:
 8012f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f54:	b0a3      	sub	sp, #140	; 0x8c
 8012f56:	461f      	mov	r7, r3
 8012f58:	2300      	movs	r3, #0
 8012f5a:	931e      	str	r3, [sp, #120]	; 0x78
 8012f5c:	4ba4      	ldr	r3, [pc, #656]	; (80131f0 <_strtod_l+0x2a0>)
 8012f5e:	9219      	str	r2, [sp, #100]	; 0x64
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	9307      	str	r3, [sp, #28]
 8012f64:	4604      	mov	r4, r0
 8012f66:	4618      	mov	r0, r3
 8012f68:	4688      	mov	r8, r1
 8012f6a:	f7ed f93b 	bl	80001e4 <strlen>
 8012f6e:	f04f 0a00 	mov.w	sl, #0
 8012f72:	4605      	mov	r5, r0
 8012f74:	f04f 0b00 	mov.w	fp, #0
 8012f78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012f7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f7e:	781a      	ldrb	r2, [r3, #0]
 8012f80:	2a2b      	cmp	r2, #43	; 0x2b
 8012f82:	d04c      	beq.n	801301e <_strtod_l+0xce>
 8012f84:	d839      	bhi.n	8012ffa <_strtod_l+0xaa>
 8012f86:	2a0d      	cmp	r2, #13
 8012f88:	d832      	bhi.n	8012ff0 <_strtod_l+0xa0>
 8012f8a:	2a08      	cmp	r2, #8
 8012f8c:	d832      	bhi.n	8012ff4 <_strtod_l+0xa4>
 8012f8e:	2a00      	cmp	r2, #0
 8012f90:	d03c      	beq.n	801300c <_strtod_l+0xbc>
 8012f92:	2300      	movs	r3, #0
 8012f94:	930e      	str	r3, [sp, #56]	; 0x38
 8012f96:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012f98:	7833      	ldrb	r3, [r6, #0]
 8012f9a:	2b30      	cmp	r3, #48	; 0x30
 8012f9c:	f040 80b4 	bne.w	8013108 <_strtod_l+0x1b8>
 8012fa0:	7873      	ldrb	r3, [r6, #1]
 8012fa2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012fa6:	2b58      	cmp	r3, #88	; 0x58
 8012fa8:	d16c      	bne.n	8013084 <_strtod_l+0x134>
 8012faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fac:	9301      	str	r3, [sp, #4]
 8012fae:	ab1e      	add	r3, sp, #120	; 0x78
 8012fb0:	9702      	str	r7, [sp, #8]
 8012fb2:	9300      	str	r3, [sp, #0]
 8012fb4:	4a8f      	ldr	r2, [pc, #572]	; (80131f4 <_strtod_l+0x2a4>)
 8012fb6:	ab1f      	add	r3, sp, #124	; 0x7c
 8012fb8:	a91d      	add	r1, sp, #116	; 0x74
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f001 faac 	bl	8014518 <__gethex>
 8012fc0:	f010 0707 	ands.w	r7, r0, #7
 8012fc4:	4605      	mov	r5, r0
 8012fc6:	d005      	beq.n	8012fd4 <_strtod_l+0x84>
 8012fc8:	2f06      	cmp	r7, #6
 8012fca:	d12a      	bne.n	8013022 <_strtod_l+0xd2>
 8012fcc:	3601      	adds	r6, #1
 8012fce:	2300      	movs	r3, #0
 8012fd0:	961d      	str	r6, [sp, #116]	; 0x74
 8012fd2:	930e      	str	r3, [sp, #56]	; 0x38
 8012fd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	f040 8596 	bne.w	8013b08 <_strtod_l+0xbb8>
 8012fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fde:	b1db      	cbz	r3, 8013018 <_strtod_l+0xc8>
 8012fe0:	4652      	mov	r2, sl
 8012fe2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012fe6:	ec43 2b10 	vmov	d0, r2, r3
 8012fea:	b023      	add	sp, #140	; 0x8c
 8012fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ff0:	2a20      	cmp	r2, #32
 8012ff2:	d1ce      	bne.n	8012f92 <_strtod_l+0x42>
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	931d      	str	r3, [sp, #116]	; 0x74
 8012ff8:	e7c0      	b.n	8012f7c <_strtod_l+0x2c>
 8012ffa:	2a2d      	cmp	r2, #45	; 0x2d
 8012ffc:	d1c9      	bne.n	8012f92 <_strtod_l+0x42>
 8012ffe:	2201      	movs	r2, #1
 8013000:	920e      	str	r2, [sp, #56]	; 0x38
 8013002:	1c5a      	adds	r2, r3, #1
 8013004:	921d      	str	r2, [sp, #116]	; 0x74
 8013006:	785b      	ldrb	r3, [r3, #1]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d1c4      	bne.n	8012f96 <_strtod_l+0x46>
 801300c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801300e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013012:	2b00      	cmp	r3, #0
 8013014:	f040 8576 	bne.w	8013b04 <_strtod_l+0xbb4>
 8013018:	4652      	mov	r2, sl
 801301a:	465b      	mov	r3, fp
 801301c:	e7e3      	b.n	8012fe6 <_strtod_l+0x96>
 801301e:	2200      	movs	r2, #0
 8013020:	e7ee      	b.n	8013000 <_strtod_l+0xb0>
 8013022:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013024:	b13a      	cbz	r2, 8013036 <_strtod_l+0xe6>
 8013026:	2135      	movs	r1, #53	; 0x35
 8013028:	a820      	add	r0, sp, #128	; 0x80
 801302a:	f002 fb1e 	bl	801566a <__copybits>
 801302e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013030:	4620      	mov	r0, r4
 8013032:	f001 fee3 	bl	8014dfc <_Bfree>
 8013036:	3f01      	subs	r7, #1
 8013038:	2f05      	cmp	r7, #5
 801303a:	d807      	bhi.n	801304c <_strtod_l+0xfc>
 801303c:	e8df f007 	tbb	[pc, r7]
 8013040:	1d180b0e 	.word	0x1d180b0e
 8013044:	030e      	.short	0x030e
 8013046:	f04f 0b00 	mov.w	fp, #0
 801304a:	46da      	mov	sl, fp
 801304c:	0728      	lsls	r0, r5, #28
 801304e:	d5c1      	bpl.n	8012fd4 <_strtod_l+0x84>
 8013050:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013054:	e7be      	b.n	8012fd4 <_strtod_l+0x84>
 8013056:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801305a:	e7f7      	b.n	801304c <_strtod_l+0xfc>
 801305c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8013060:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013062:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013066:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801306a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801306e:	e7ed      	b.n	801304c <_strtod_l+0xfc>
 8013070:	f8df b184 	ldr.w	fp, [pc, #388]	; 80131f8 <_strtod_l+0x2a8>
 8013074:	f04f 0a00 	mov.w	sl, #0
 8013078:	e7e8      	b.n	801304c <_strtod_l+0xfc>
 801307a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801307e:	f04f 3aff 	mov.w	sl, #4294967295
 8013082:	e7e3      	b.n	801304c <_strtod_l+0xfc>
 8013084:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013086:	1c5a      	adds	r2, r3, #1
 8013088:	921d      	str	r2, [sp, #116]	; 0x74
 801308a:	785b      	ldrb	r3, [r3, #1]
 801308c:	2b30      	cmp	r3, #48	; 0x30
 801308e:	d0f9      	beq.n	8013084 <_strtod_l+0x134>
 8013090:	2b00      	cmp	r3, #0
 8013092:	d09f      	beq.n	8012fd4 <_strtod_l+0x84>
 8013094:	2301      	movs	r3, #1
 8013096:	f04f 0900 	mov.w	r9, #0
 801309a:	9304      	str	r3, [sp, #16]
 801309c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801309e:	930a      	str	r3, [sp, #40]	; 0x28
 80130a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80130a4:	464f      	mov	r7, r9
 80130a6:	220a      	movs	r2, #10
 80130a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80130aa:	7806      	ldrb	r6, [r0, #0]
 80130ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80130b0:	b2d9      	uxtb	r1, r3
 80130b2:	2909      	cmp	r1, #9
 80130b4:	d92a      	bls.n	801310c <_strtod_l+0x1bc>
 80130b6:	9907      	ldr	r1, [sp, #28]
 80130b8:	462a      	mov	r2, r5
 80130ba:	f002 ffed 	bl	8016098 <strncmp>
 80130be:	b398      	cbz	r0, 8013128 <_strtod_l+0x1d8>
 80130c0:	2000      	movs	r0, #0
 80130c2:	4633      	mov	r3, r6
 80130c4:	463d      	mov	r5, r7
 80130c6:	9007      	str	r0, [sp, #28]
 80130c8:	4602      	mov	r2, r0
 80130ca:	2b65      	cmp	r3, #101	; 0x65
 80130cc:	d001      	beq.n	80130d2 <_strtod_l+0x182>
 80130ce:	2b45      	cmp	r3, #69	; 0x45
 80130d0:	d118      	bne.n	8013104 <_strtod_l+0x1b4>
 80130d2:	b91d      	cbnz	r5, 80130dc <_strtod_l+0x18c>
 80130d4:	9b04      	ldr	r3, [sp, #16]
 80130d6:	4303      	orrs	r3, r0
 80130d8:	d098      	beq.n	801300c <_strtod_l+0xbc>
 80130da:	2500      	movs	r5, #0
 80130dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80130e0:	f108 0301 	add.w	r3, r8, #1
 80130e4:	931d      	str	r3, [sp, #116]	; 0x74
 80130e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80130ea:	2b2b      	cmp	r3, #43	; 0x2b
 80130ec:	d075      	beq.n	80131da <_strtod_l+0x28a>
 80130ee:	2b2d      	cmp	r3, #45	; 0x2d
 80130f0:	d07b      	beq.n	80131ea <_strtod_l+0x29a>
 80130f2:	f04f 0c00 	mov.w	ip, #0
 80130f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80130fa:	2909      	cmp	r1, #9
 80130fc:	f240 8082 	bls.w	8013204 <_strtod_l+0x2b4>
 8013100:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013104:	2600      	movs	r6, #0
 8013106:	e09d      	b.n	8013244 <_strtod_l+0x2f4>
 8013108:	2300      	movs	r3, #0
 801310a:	e7c4      	b.n	8013096 <_strtod_l+0x146>
 801310c:	2f08      	cmp	r7, #8
 801310e:	bfd8      	it	le
 8013110:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013112:	f100 0001 	add.w	r0, r0, #1
 8013116:	bfda      	itte	le
 8013118:	fb02 3301 	mlale	r3, r2, r1, r3
 801311c:	9309      	strle	r3, [sp, #36]	; 0x24
 801311e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8013122:	3701      	adds	r7, #1
 8013124:	901d      	str	r0, [sp, #116]	; 0x74
 8013126:	e7bf      	b.n	80130a8 <_strtod_l+0x158>
 8013128:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801312a:	195a      	adds	r2, r3, r5
 801312c:	921d      	str	r2, [sp, #116]	; 0x74
 801312e:	5d5b      	ldrb	r3, [r3, r5]
 8013130:	2f00      	cmp	r7, #0
 8013132:	d037      	beq.n	80131a4 <_strtod_l+0x254>
 8013134:	9007      	str	r0, [sp, #28]
 8013136:	463d      	mov	r5, r7
 8013138:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801313c:	2a09      	cmp	r2, #9
 801313e:	d912      	bls.n	8013166 <_strtod_l+0x216>
 8013140:	2201      	movs	r2, #1
 8013142:	e7c2      	b.n	80130ca <_strtod_l+0x17a>
 8013144:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013146:	1c5a      	adds	r2, r3, #1
 8013148:	921d      	str	r2, [sp, #116]	; 0x74
 801314a:	785b      	ldrb	r3, [r3, #1]
 801314c:	3001      	adds	r0, #1
 801314e:	2b30      	cmp	r3, #48	; 0x30
 8013150:	d0f8      	beq.n	8013144 <_strtod_l+0x1f4>
 8013152:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013156:	2a08      	cmp	r2, #8
 8013158:	f200 84db 	bhi.w	8013b12 <_strtod_l+0xbc2>
 801315c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801315e:	9007      	str	r0, [sp, #28]
 8013160:	2000      	movs	r0, #0
 8013162:	920a      	str	r2, [sp, #40]	; 0x28
 8013164:	4605      	mov	r5, r0
 8013166:	3b30      	subs	r3, #48	; 0x30
 8013168:	f100 0201 	add.w	r2, r0, #1
 801316c:	d014      	beq.n	8013198 <_strtod_l+0x248>
 801316e:	9907      	ldr	r1, [sp, #28]
 8013170:	4411      	add	r1, r2
 8013172:	9107      	str	r1, [sp, #28]
 8013174:	462a      	mov	r2, r5
 8013176:	eb00 0e05 	add.w	lr, r0, r5
 801317a:	210a      	movs	r1, #10
 801317c:	4572      	cmp	r2, lr
 801317e:	d113      	bne.n	80131a8 <_strtod_l+0x258>
 8013180:	182a      	adds	r2, r5, r0
 8013182:	2a08      	cmp	r2, #8
 8013184:	f105 0501 	add.w	r5, r5, #1
 8013188:	4405      	add	r5, r0
 801318a:	dc1c      	bgt.n	80131c6 <_strtod_l+0x276>
 801318c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801318e:	220a      	movs	r2, #10
 8013190:	fb02 3301 	mla	r3, r2, r1, r3
 8013194:	9309      	str	r3, [sp, #36]	; 0x24
 8013196:	2200      	movs	r2, #0
 8013198:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801319a:	1c59      	adds	r1, r3, #1
 801319c:	911d      	str	r1, [sp, #116]	; 0x74
 801319e:	785b      	ldrb	r3, [r3, #1]
 80131a0:	4610      	mov	r0, r2
 80131a2:	e7c9      	b.n	8013138 <_strtod_l+0x1e8>
 80131a4:	4638      	mov	r0, r7
 80131a6:	e7d2      	b.n	801314e <_strtod_l+0x1fe>
 80131a8:	2a08      	cmp	r2, #8
 80131aa:	dc04      	bgt.n	80131b6 <_strtod_l+0x266>
 80131ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80131ae:	434e      	muls	r6, r1
 80131b0:	9609      	str	r6, [sp, #36]	; 0x24
 80131b2:	3201      	adds	r2, #1
 80131b4:	e7e2      	b.n	801317c <_strtod_l+0x22c>
 80131b6:	f102 0c01 	add.w	ip, r2, #1
 80131ba:	f1bc 0f10 	cmp.w	ip, #16
 80131be:	bfd8      	it	le
 80131c0:	fb01 f909 	mulle.w	r9, r1, r9
 80131c4:	e7f5      	b.n	80131b2 <_strtod_l+0x262>
 80131c6:	2d10      	cmp	r5, #16
 80131c8:	bfdc      	itt	le
 80131ca:	220a      	movle	r2, #10
 80131cc:	fb02 3909 	mlale	r9, r2, r9, r3
 80131d0:	e7e1      	b.n	8013196 <_strtod_l+0x246>
 80131d2:	2300      	movs	r3, #0
 80131d4:	9307      	str	r3, [sp, #28]
 80131d6:	2201      	movs	r2, #1
 80131d8:	e77c      	b.n	80130d4 <_strtod_l+0x184>
 80131da:	f04f 0c00 	mov.w	ip, #0
 80131de:	f108 0302 	add.w	r3, r8, #2
 80131e2:	931d      	str	r3, [sp, #116]	; 0x74
 80131e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80131e8:	e785      	b.n	80130f6 <_strtod_l+0x1a6>
 80131ea:	f04f 0c01 	mov.w	ip, #1
 80131ee:	e7f6      	b.n	80131de <_strtod_l+0x28e>
 80131f0:	08021bfc 	.word	0x08021bfc
 80131f4:	08021790 	.word	0x08021790
 80131f8:	7ff00000 	.word	0x7ff00000
 80131fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80131fe:	1c59      	adds	r1, r3, #1
 8013200:	911d      	str	r1, [sp, #116]	; 0x74
 8013202:	785b      	ldrb	r3, [r3, #1]
 8013204:	2b30      	cmp	r3, #48	; 0x30
 8013206:	d0f9      	beq.n	80131fc <_strtod_l+0x2ac>
 8013208:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801320c:	2908      	cmp	r1, #8
 801320e:	f63f af79 	bhi.w	8013104 <_strtod_l+0x1b4>
 8013212:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013216:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013218:	9308      	str	r3, [sp, #32]
 801321a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801321c:	1c59      	adds	r1, r3, #1
 801321e:	911d      	str	r1, [sp, #116]	; 0x74
 8013220:	785b      	ldrb	r3, [r3, #1]
 8013222:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8013226:	2e09      	cmp	r6, #9
 8013228:	d937      	bls.n	801329a <_strtod_l+0x34a>
 801322a:	9e08      	ldr	r6, [sp, #32]
 801322c:	1b89      	subs	r1, r1, r6
 801322e:	2908      	cmp	r1, #8
 8013230:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013234:	dc02      	bgt.n	801323c <_strtod_l+0x2ec>
 8013236:	4576      	cmp	r6, lr
 8013238:	bfa8      	it	ge
 801323a:	4676      	movge	r6, lr
 801323c:	f1bc 0f00 	cmp.w	ip, #0
 8013240:	d000      	beq.n	8013244 <_strtod_l+0x2f4>
 8013242:	4276      	negs	r6, r6
 8013244:	2d00      	cmp	r5, #0
 8013246:	d14f      	bne.n	80132e8 <_strtod_l+0x398>
 8013248:	9904      	ldr	r1, [sp, #16]
 801324a:	4301      	orrs	r1, r0
 801324c:	f47f aec2 	bne.w	8012fd4 <_strtod_l+0x84>
 8013250:	2a00      	cmp	r2, #0
 8013252:	f47f aedb 	bne.w	801300c <_strtod_l+0xbc>
 8013256:	2b69      	cmp	r3, #105	; 0x69
 8013258:	d027      	beq.n	80132aa <_strtod_l+0x35a>
 801325a:	dc24      	bgt.n	80132a6 <_strtod_l+0x356>
 801325c:	2b49      	cmp	r3, #73	; 0x49
 801325e:	d024      	beq.n	80132aa <_strtod_l+0x35a>
 8013260:	2b4e      	cmp	r3, #78	; 0x4e
 8013262:	f47f aed3 	bne.w	801300c <_strtod_l+0xbc>
 8013266:	499e      	ldr	r1, [pc, #632]	; (80134e0 <_strtod_l+0x590>)
 8013268:	a81d      	add	r0, sp, #116	; 0x74
 801326a:	f001 fbad 	bl	80149c8 <__match>
 801326e:	2800      	cmp	r0, #0
 8013270:	f43f aecc 	beq.w	801300c <_strtod_l+0xbc>
 8013274:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013276:	781b      	ldrb	r3, [r3, #0]
 8013278:	2b28      	cmp	r3, #40	; 0x28
 801327a:	d12d      	bne.n	80132d8 <_strtod_l+0x388>
 801327c:	4999      	ldr	r1, [pc, #612]	; (80134e4 <_strtod_l+0x594>)
 801327e:	aa20      	add	r2, sp, #128	; 0x80
 8013280:	a81d      	add	r0, sp, #116	; 0x74
 8013282:	f001 fbb5 	bl	80149f0 <__hexnan>
 8013286:	2805      	cmp	r0, #5
 8013288:	d126      	bne.n	80132d8 <_strtod_l+0x388>
 801328a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801328c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8013290:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013294:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013298:	e69c      	b.n	8012fd4 <_strtod_l+0x84>
 801329a:	210a      	movs	r1, #10
 801329c:	fb01 3e0e 	mla	lr, r1, lr, r3
 80132a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80132a4:	e7b9      	b.n	801321a <_strtod_l+0x2ca>
 80132a6:	2b6e      	cmp	r3, #110	; 0x6e
 80132a8:	e7db      	b.n	8013262 <_strtod_l+0x312>
 80132aa:	498f      	ldr	r1, [pc, #572]	; (80134e8 <_strtod_l+0x598>)
 80132ac:	a81d      	add	r0, sp, #116	; 0x74
 80132ae:	f001 fb8b 	bl	80149c8 <__match>
 80132b2:	2800      	cmp	r0, #0
 80132b4:	f43f aeaa 	beq.w	801300c <_strtod_l+0xbc>
 80132b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80132ba:	498c      	ldr	r1, [pc, #560]	; (80134ec <_strtod_l+0x59c>)
 80132bc:	3b01      	subs	r3, #1
 80132be:	a81d      	add	r0, sp, #116	; 0x74
 80132c0:	931d      	str	r3, [sp, #116]	; 0x74
 80132c2:	f001 fb81 	bl	80149c8 <__match>
 80132c6:	b910      	cbnz	r0, 80132ce <_strtod_l+0x37e>
 80132c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80132ca:	3301      	adds	r3, #1
 80132cc:	931d      	str	r3, [sp, #116]	; 0x74
 80132ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80134fc <_strtod_l+0x5ac>
 80132d2:	f04f 0a00 	mov.w	sl, #0
 80132d6:	e67d      	b.n	8012fd4 <_strtod_l+0x84>
 80132d8:	4885      	ldr	r0, [pc, #532]	; (80134f0 <_strtod_l+0x5a0>)
 80132da:	f002 fe75 	bl	8015fc8 <nan>
 80132de:	ed8d 0b04 	vstr	d0, [sp, #16]
 80132e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80132e6:	e675      	b.n	8012fd4 <_strtod_l+0x84>
 80132e8:	9b07      	ldr	r3, [sp, #28]
 80132ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132ec:	1af3      	subs	r3, r6, r3
 80132ee:	2f00      	cmp	r7, #0
 80132f0:	bf08      	it	eq
 80132f2:	462f      	moveq	r7, r5
 80132f4:	2d10      	cmp	r5, #16
 80132f6:	9308      	str	r3, [sp, #32]
 80132f8:	46a8      	mov	r8, r5
 80132fa:	bfa8      	it	ge
 80132fc:	f04f 0810 	movge.w	r8, #16
 8013300:	f7ed f910 	bl	8000524 <__aeabi_ui2d>
 8013304:	2d09      	cmp	r5, #9
 8013306:	4682      	mov	sl, r0
 8013308:	468b      	mov	fp, r1
 801330a:	dd13      	ble.n	8013334 <_strtod_l+0x3e4>
 801330c:	4b79      	ldr	r3, [pc, #484]	; (80134f4 <_strtod_l+0x5a4>)
 801330e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013312:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013316:	f7ed f97f 	bl	8000618 <__aeabi_dmul>
 801331a:	4682      	mov	sl, r0
 801331c:	4648      	mov	r0, r9
 801331e:	468b      	mov	fp, r1
 8013320:	f7ed f900 	bl	8000524 <__aeabi_ui2d>
 8013324:	4602      	mov	r2, r0
 8013326:	460b      	mov	r3, r1
 8013328:	4650      	mov	r0, sl
 801332a:	4659      	mov	r1, fp
 801332c:	f7ec ffbe 	bl	80002ac <__adddf3>
 8013330:	4682      	mov	sl, r0
 8013332:	468b      	mov	fp, r1
 8013334:	2d0f      	cmp	r5, #15
 8013336:	dc38      	bgt.n	80133aa <_strtod_l+0x45a>
 8013338:	9b08      	ldr	r3, [sp, #32]
 801333a:	2b00      	cmp	r3, #0
 801333c:	f43f ae4a 	beq.w	8012fd4 <_strtod_l+0x84>
 8013340:	dd24      	ble.n	801338c <_strtod_l+0x43c>
 8013342:	2b16      	cmp	r3, #22
 8013344:	dc0b      	bgt.n	801335e <_strtod_l+0x40e>
 8013346:	4d6b      	ldr	r5, [pc, #428]	; (80134f4 <_strtod_l+0x5a4>)
 8013348:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801334c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013350:	4652      	mov	r2, sl
 8013352:	465b      	mov	r3, fp
 8013354:	f7ed f960 	bl	8000618 <__aeabi_dmul>
 8013358:	4682      	mov	sl, r0
 801335a:	468b      	mov	fp, r1
 801335c:	e63a      	b.n	8012fd4 <_strtod_l+0x84>
 801335e:	9a08      	ldr	r2, [sp, #32]
 8013360:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013364:	4293      	cmp	r3, r2
 8013366:	db20      	blt.n	80133aa <_strtod_l+0x45a>
 8013368:	4c62      	ldr	r4, [pc, #392]	; (80134f4 <_strtod_l+0x5a4>)
 801336a:	f1c5 050f 	rsb	r5, r5, #15
 801336e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013372:	4652      	mov	r2, sl
 8013374:	465b      	mov	r3, fp
 8013376:	e9d1 0100 	ldrd	r0, r1, [r1]
 801337a:	f7ed f94d 	bl	8000618 <__aeabi_dmul>
 801337e:	9b08      	ldr	r3, [sp, #32]
 8013380:	1b5d      	subs	r5, r3, r5
 8013382:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013386:	e9d4 2300 	ldrd	r2, r3, [r4]
 801338a:	e7e3      	b.n	8013354 <_strtod_l+0x404>
 801338c:	9b08      	ldr	r3, [sp, #32]
 801338e:	3316      	adds	r3, #22
 8013390:	db0b      	blt.n	80133aa <_strtod_l+0x45a>
 8013392:	9b07      	ldr	r3, [sp, #28]
 8013394:	4a57      	ldr	r2, [pc, #348]	; (80134f4 <_strtod_l+0x5a4>)
 8013396:	1b9e      	subs	r6, r3, r6
 8013398:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801339c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80133a0:	4650      	mov	r0, sl
 80133a2:	4659      	mov	r1, fp
 80133a4:	f7ed fa62 	bl	800086c <__aeabi_ddiv>
 80133a8:	e7d6      	b.n	8013358 <_strtod_l+0x408>
 80133aa:	9b08      	ldr	r3, [sp, #32]
 80133ac:	eba5 0808 	sub.w	r8, r5, r8
 80133b0:	4498      	add	r8, r3
 80133b2:	f1b8 0f00 	cmp.w	r8, #0
 80133b6:	dd71      	ble.n	801349c <_strtod_l+0x54c>
 80133b8:	f018 030f 	ands.w	r3, r8, #15
 80133bc:	d00a      	beq.n	80133d4 <_strtod_l+0x484>
 80133be:	494d      	ldr	r1, [pc, #308]	; (80134f4 <_strtod_l+0x5a4>)
 80133c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80133c4:	4652      	mov	r2, sl
 80133c6:	465b      	mov	r3, fp
 80133c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133cc:	f7ed f924 	bl	8000618 <__aeabi_dmul>
 80133d0:	4682      	mov	sl, r0
 80133d2:	468b      	mov	fp, r1
 80133d4:	f038 080f 	bics.w	r8, r8, #15
 80133d8:	d04d      	beq.n	8013476 <_strtod_l+0x526>
 80133da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80133de:	dd22      	ble.n	8013426 <_strtod_l+0x4d6>
 80133e0:	2500      	movs	r5, #0
 80133e2:	462e      	mov	r6, r5
 80133e4:	9509      	str	r5, [sp, #36]	; 0x24
 80133e6:	9507      	str	r5, [sp, #28]
 80133e8:	2322      	movs	r3, #34	; 0x22
 80133ea:	f8df b110 	ldr.w	fp, [pc, #272]	; 80134fc <_strtod_l+0x5ac>
 80133ee:	6023      	str	r3, [r4, #0]
 80133f0:	f04f 0a00 	mov.w	sl, #0
 80133f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	f43f adec 	beq.w	8012fd4 <_strtod_l+0x84>
 80133fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80133fe:	4620      	mov	r0, r4
 8013400:	f001 fcfc 	bl	8014dfc <_Bfree>
 8013404:	9907      	ldr	r1, [sp, #28]
 8013406:	4620      	mov	r0, r4
 8013408:	f001 fcf8 	bl	8014dfc <_Bfree>
 801340c:	4631      	mov	r1, r6
 801340e:	4620      	mov	r0, r4
 8013410:	f001 fcf4 	bl	8014dfc <_Bfree>
 8013414:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013416:	4620      	mov	r0, r4
 8013418:	f001 fcf0 	bl	8014dfc <_Bfree>
 801341c:	4629      	mov	r1, r5
 801341e:	4620      	mov	r0, r4
 8013420:	f001 fcec 	bl	8014dfc <_Bfree>
 8013424:	e5d6      	b.n	8012fd4 <_strtod_l+0x84>
 8013426:	2300      	movs	r3, #0
 8013428:	ea4f 1828 	mov.w	r8, r8, asr #4
 801342c:	4650      	mov	r0, sl
 801342e:	4659      	mov	r1, fp
 8013430:	4699      	mov	r9, r3
 8013432:	f1b8 0f01 	cmp.w	r8, #1
 8013436:	dc21      	bgt.n	801347c <_strtod_l+0x52c>
 8013438:	b10b      	cbz	r3, 801343e <_strtod_l+0x4ee>
 801343a:	4682      	mov	sl, r0
 801343c:	468b      	mov	fp, r1
 801343e:	4b2e      	ldr	r3, [pc, #184]	; (80134f8 <_strtod_l+0x5a8>)
 8013440:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013444:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013448:	4652      	mov	r2, sl
 801344a:	465b      	mov	r3, fp
 801344c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013450:	f7ed f8e2 	bl	8000618 <__aeabi_dmul>
 8013454:	4b29      	ldr	r3, [pc, #164]	; (80134fc <_strtod_l+0x5ac>)
 8013456:	460a      	mov	r2, r1
 8013458:	400b      	ands	r3, r1
 801345a:	4929      	ldr	r1, [pc, #164]	; (8013500 <_strtod_l+0x5b0>)
 801345c:	428b      	cmp	r3, r1
 801345e:	4682      	mov	sl, r0
 8013460:	d8be      	bhi.n	80133e0 <_strtod_l+0x490>
 8013462:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013466:	428b      	cmp	r3, r1
 8013468:	bf86      	itte	hi
 801346a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013504 <_strtod_l+0x5b4>
 801346e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013472:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013476:	2300      	movs	r3, #0
 8013478:	9304      	str	r3, [sp, #16]
 801347a:	e081      	b.n	8013580 <_strtod_l+0x630>
 801347c:	f018 0f01 	tst.w	r8, #1
 8013480:	d007      	beq.n	8013492 <_strtod_l+0x542>
 8013482:	4b1d      	ldr	r3, [pc, #116]	; (80134f8 <_strtod_l+0x5a8>)
 8013484:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348c:	f7ed f8c4 	bl	8000618 <__aeabi_dmul>
 8013490:	2301      	movs	r3, #1
 8013492:	f109 0901 	add.w	r9, r9, #1
 8013496:	ea4f 0868 	mov.w	r8, r8, asr #1
 801349a:	e7ca      	b.n	8013432 <_strtod_l+0x4e2>
 801349c:	d0eb      	beq.n	8013476 <_strtod_l+0x526>
 801349e:	f1c8 0800 	rsb	r8, r8, #0
 80134a2:	f018 020f 	ands.w	r2, r8, #15
 80134a6:	d00a      	beq.n	80134be <_strtod_l+0x56e>
 80134a8:	4b12      	ldr	r3, [pc, #72]	; (80134f4 <_strtod_l+0x5a4>)
 80134aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80134ae:	4650      	mov	r0, sl
 80134b0:	4659      	mov	r1, fp
 80134b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b6:	f7ed f9d9 	bl	800086c <__aeabi_ddiv>
 80134ba:	4682      	mov	sl, r0
 80134bc:	468b      	mov	fp, r1
 80134be:	ea5f 1828 	movs.w	r8, r8, asr #4
 80134c2:	d0d8      	beq.n	8013476 <_strtod_l+0x526>
 80134c4:	f1b8 0f1f 	cmp.w	r8, #31
 80134c8:	dd1e      	ble.n	8013508 <_strtod_l+0x5b8>
 80134ca:	2500      	movs	r5, #0
 80134cc:	462e      	mov	r6, r5
 80134ce:	9509      	str	r5, [sp, #36]	; 0x24
 80134d0:	9507      	str	r5, [sp, #28]
 80134d2:	2322      	movs	r3, #34	; 0x22
 80134d4:	f04f 0a00 	mov.w	sl, #0
 80134d8:	f04f 0b00 	mov.w	fp, #0
 80134dc:	6023      	str	r3, [r4, #0]
 80134de:	e789      	b.n	80133f4 <_strtod_l+0x4a4>
 80134e0:	080217e1 	.word	0x080217e1
 80134e4:	080217a4 	.word	0x080217a4
 80134e8:	08021785 	.word	0x08021785
 80134ec:	08021788 	.word	0x08021788
 80134f0:	08021a7f 	.word	0x08021a7f
 80134f4:	08021c98 	.word	0x08021c98
 80134f8:	08021c70 	.word	0x08021c70
 80134fc:	7ff00000 	.word	0x7ff00000
 8013500:	7ca00000 	.word	0x7ca00000
 8013504:	7fefffff 	.word	0x7fefffff
 8013508:	f018 0310 	ands.w	r3, r8, #16
 801350c:	bf18      	it	ne
 801350e:	236a      	movne	r3, #106	; 0x6a
 8013510:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80138c8 <_strtod_l+0x978>
 8013514:	9304      	str	r3, [sp, #16]
 8013516:	4650      	mov	r0, sl
 8013518:	4659      	mov	r1, fp
 801351a:	2300      	movs	r3, #0
 801351c:	f018 0f01 	tst.w	r8, #1
 8013520:	d004      	beq.n	801352c <_strtod_l+0x5dc>
 8013522:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013526:	f7ed f877 	bl	8000618 <__aeabi_dmul>
 801352a:	2301      	movs	r3, #1
 801352c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013530:	f109 0908 	add.w	r9, r9, #8
 8013534:	d1f2      	bne.n	801351c <_strtod_l+0x5cc>
 8013536:	b10b      	cbz	r3, 801353c <_strtod_l+0x5ec>
 8013538:	4682      	mov	sl, r0
 801353a:	468b      	mov	fp, r1
 801353c:	9b04      	ldr	r3, [sp, #16]
 801353e:	b1bb      	cbz	r3, 8013570 <_strtod_l+0x620>
 8013540:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013544:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013548:	2b00      	cmp	r3, #0
 801354a:	4659      	mov	r1, fp
 801354c:	dd10      	ble.n	8013570 <_strtod_l+0x620>
 801354e:	2b1f      	cmp	r3, #31
 8013550:	f340 8128 	ble.w	80137a4 <_strtod_l+0x854>
 8013554:	2b34      	cmp	r3, #52	; 0x34
 8013556:	bfde      	ittt	le
 8013558:	3b20      	suble	r3, #32
 801355a:	f04f 32ff 	movle.w	r2, #4294967295
 801355e:	fa02 f303 	lslle.w	r3, r2, r3
 8013562:	f04f 0a00 	mov.w	sl, #0
 8013566:	bfcc      	ite	gt
 8013568:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801356c:	ea03 0b01 	andle.w	fp, r3, r1
 8013570:	2200      	movs	r2, #0
 8013572:	2300      	movs	r3, #0
 8013574:	4650      	mov	r0, sl
 8013576:	4659      	mov	r1, fp
 8013578:	f7ed fab6 	bl	8000ae8 <__aeabi_dcmpeq>
 801357c:	2800      	cmp	r0, #0
 801357e:	d1a4      	bne.n	80134ca <_strtod_l+0x57a>
 8013580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013582:	9300      	str	r3, [sp, #0]
 8013584:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013586:	462b      	mov	r3, r5
 8013588:	463a      	mov	r2, r7
 801358a:	4620      	mov	r0, r4
 801358c:	f001 fca2 	bl	8014ed4 <__s2b>
 8013590:	9009      	str	r0, [sp, #36]	; 0x24
 8013592:	2800      	cmp	r0, #0
 8013594:	f43f af24 	beq.w	80133e0 <_strtod_l+0x490>
 8013598:	9b07      	ldr	r3, [sp, #28]
 801359a:	1b9e      	subs	r6, r3, r6
 801359c:	9b08      	ldr	r3, [sp, #32]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	bfb4      	ite	lt
 80135a2:	4633      	movlt	r3, r6
 80135a4:	2300      	movge	r3, #0
 80135a6:	9310      	str	r3, [sp, #64]	; 0x40
 80135a8:	9b08      	ldr	r3, [sp, #32]
 80135aa:	2500      	movs	r5, #0
 80135ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80135b0:	9318      	str	r3, [sp, #96]	; 0x60
 80135b2:	462e      	mov	r6, r5
 80135b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135b6:	4620      	mov	r0, r4
 80135b8:	6859      	ldr	r1, [r3, #4]
 80135ba:	f001 fbdf 	bl	8014d7c <_Balloc>
 80135be:	9007      	str	r0, [sp, #28]
 80135c0:	2800      	cmp	r0, #0
 80135c2:	f43f af11 	beq.w	80133e8 <_strtod_l+0x498>
 80135c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135c8:	691a      	ldr	r2, [r3, #16]
 80135ca:	3202      	adds	r2, #2
 80135cc:	f103 010c 	add.w	r1, r3, #12
 80135d0:	0092      	lsls	r2, r2, #2
 80135d2:	300c      	adds	r0, #12
 80135d4:	f7fe fd8c 	bl	80120f0 <memcpy>
 80135d8:	ec4b ab10 	vmov	d0, sl, fp
 80135dc:	aa20      	add	r2, sp, #128	; 0x80
 80135de:	a91f      	add	r1, sp, #124	; 0x7c
 80135e0:	4620      	mov	r0, r4
 80135e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80135e6:	f001 ffb1 	bl	801554c <__d2b>
 80135ea:	901e      	str	r0, [sp, #120]	; 0x78
 80135ec:	2800      	cmp	r0, #0
 80135ee:	f43f aefb 	beq.w	80133e8 <_strtod_l+0x498>
 80135f2:	2101      	movs	r1, #1
 80135f4:	4620      	mov	r0, r4
 80135f6:	f001 fd07 	bl	8015008 <__i2b>
 80135fa:	4606      	mov	r6, r0
 80135fc:	2800      	cmp	r0, #0
 80135fe:	f43f aef3 	beq.w	80133e8 <_strtod_l+0x498>
 8013602:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013604:	9904      	ldr	r1, [sp, #16]
 8013606:	2b00      	cmp	r3, #0
 8013608:	bfab      	itete	ge
 801360a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801360c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801360e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8013610:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8013614:	bfac      	ite	ge
 8013616:	eb03 0902 	addge.w	r9, r3, r2
 801361a:	1ad7      	sublt	r7, r2, r3
 801361c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801361e:	eba3 0801 	sub.w	r8, r3, r1
 8013622:	4490      	add	r8, r2
 8013624:	4ba3      	ldr	r3, [pc, #652]	; (80138b4 <_strtod_l+0x964>)
 8013626:	f108 38ff 	add.w	r8, r8, #4294967295
 801362a:	4598      	cmp	r8, r3
 801362c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013630:	f280 80cc 	bge.w	80137cc <_strtod_l+0x87c>
 8013634:	eba3 0308 	sub.w	r3, r3, r8
 8013638:	2b1f      	cmp	r3, #31
 801363a:	eba2 0203 	sub.w	r2, r2, r3
 801363e:	f04f 0101 	mov.w	r1, #1
 8013642:	f300 80b6 	bgt.w	80137b2 <_strtod_l+0x862>
 8013646:	fa01 f303 	lsl.w	r3, r1, r3
 801364a:	9311      	str	r3, [sp, #68]	; 0x44
 801364c:	2300      	movs	r3, #0
 801364e:	930c      	str	r3, [sp, #48]	; 0x30
 8013650:	eb09 0802 	add.w	r8, r9, r2
 8013654:	9b04      	ldr	r3, [sp, #16]
 8013656:	45c1      	cmp	r9, r8
 8013658:	4417      	add	r7, r2
 801365a:	441f      	add	r7, r3
 801365c:	464b      	mov	r3, r9
 801365e:	bfa8      	it	ge
 8013660:	4643      	movge	r3, r8
 8013662:	42bb      	cmp	r3, r7
 8013664:	bfa8      	it	ge
 8013666:	463b      	movge	r3, r7
 8013668:	2b00      	cmp	r3, #0
 801366a:	bfc2      	ittt	gt
 801366c:	eba8 0803 	subgt.w	r8, r8, r3
 8013670:	1aff      	subgt	r7, r7, r3
 8013672:	eba9 0903 	subgt.w	r9, r9, r3
 8013676:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013678:	2b00      	cmp	r3, #0
 801367a:	dd17      	ble.n	80136ac <_strtod_l+0x75c>
 801367c:	4631      	mov	r1, r6
 801367e:	461a      	mov	r2, r3
 8013680:	4620      	mov	r0, r4
 8013682:	f001 fd7d 	bl	8015180 <__pow5mult>
 8013686:	4606      	mov	r6, r0
 8013688:	2800      	cmp	r0, #0
 801368a:	f43f aead 	beq.w	80133e8 <_strtod_l+0x498>
 801368e:	4601      	mov	r1, r0
 8013690:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013692:	4620      	mov	r0, r4
 8013694:	f001 fcce 	bl	8015034 <__multiply>
 8013698:	900f      	str	r0, [sp, #60]	; 0x3c
 801369a:	2800      	cmp	r0, #0
 801369c:	f43f aea4 	beq.w	80133e8 <_strtod_l+0x498>
 80136a0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80136a2:	4620      	mov	r0, r4
 80136a4:	f001 fbaa 	bl	8014dfc <_Bfree>
 80136a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136aa:	931e      	str	r3, [sp, #120]	; 0x78
 80136ac:	f1b8 0f00 	cmp.w	r8, #0
 80136b0:	f300 8091 	bgt.w	80137d6 <_strtod_l+0x886>
 80136b4:	9b08      	ldr	r3, [sp, #32]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	dd08      	ble.n	80136cc <_strtod_l+0x77c>
 80136ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80136bc:	9907      	ldr	r1, [sp, #28]
 80136be:	4620      	mov	r0, r4
 80136c0:	f001 fd5e 	bl	8015180 <__pow5mult>
 80136c4:	9007      	str	r0, [sp, #28]
 80136c6:	2800      	cmp	r0, #0
 80136c8:	f43f ae8e 	beq.w	80133e8 <_strtod_l+0x498>
 80136cc:	2f00      	cmp	r7, #0
 80136ce:	dd08      	ble.n	80136e2 <_strtod_l+0x792>
 80136d0:	9907      	ldr	r1, [sp, #28]
 80136d2:	463a      	mov	r2, r7
 80136d4:	4620      	mov	r0, r4
 80136d6:	f001 fdad 	bl	8015234 <__lshift>
 80136da:	9007      	str	r0, [sp, #28]
 80136dc:	2800      	cmp	r0, #0
 80136de:	f43f ae83 	beq.w	80133e8 <_strtod_l+0x498>
 80136e2:	f1b9 0f00 	cmp.w	r9, #0
 80136e6:	dd08      	ble.n	80136fa <_strtod_l+0x7aa>
 80136e8:	4631      	mov	r1, r6
 80136ea:	464a      	mov	r2, r9
 80136ec:	4620      	mov	r0, r4
 80136ee:	f001 fda1 	bl	8015234 <__lshift>
 80136f2:	4606      	mov	r6, r0
 80136f4:	2800      	cmp	r0, #0
 80136f6:	f43f ae77 	beq.w	80133e8 <_strtod_l+0x498>
 80136fa:	9a07      	ldr	r2, [sp, #28]
 80136fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80136fe:	4620      	mov	r0, r4
 8013700:	f001 fe20 	bl	8015344 <__mdiff>
 8013704:	4605      	mov	r5, r0
 8013706:	2800      	cmp	r0, #0
 8013708:	f43f ae6e 	beq.w	80133e8 <_strtod_l+0x498>
 801370c:	68c3      	ldr	r3, [r0, #12]
 801370e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013710:	2300      	movs	r3, #0
 8013712:	60c3      	str	r3, [r0, #12]
 8013714:	4631      	mov	r1, r6
 8013716:	f001 fdf9 	bl	801530c <__mcmp>
 801371a:	2800      	cmp	r0, #0
 801371c:	da65      	bge.n	80137ea <_strtod_l+0x89a>
 801371e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013720:	ea53 030a 	orrs.w	r3, r3, sl
 8013724:	f040 8087 	bne.w	8013836 <_strtod_l+0x8e6>
 8013728:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801372c:	2b00      	cmp	r3, #0
 801372e:	f040 8082 	bne.w	8013836 <_strtod_l+0x8e6>
 8013732:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013736:	0d1b      	lsrs	r3, r3, #20
 8013738:	051b      	lsls	r3, r3, #20
 801373a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801373e:	d97a      	bls.n	8013836 <_strtod_l+0x8e6>
 8013740:	696b      	ldr	r3, [r5, #20]
 8013742:	b913      	cbnz	r3, 801374a <_strtod_l+0x7fa>
 8013744:	692b      	ldr	r3, [r5, #16]
 8013746:	2b01      	cmp	r3, #1
 8013748:	dd75      	ble.n	8013836 <_strtod_l+0x8e6>
 801374a:	4629      	mov	r1, r5
 801374c:	2201      	movs	r2, #1
 801374e:	4620      	mov	r0, r4
 8013750:	f001 fd70 	bl	8015234 <__lshift>
 8013754:	4631      	mov	r1, r6
 8013756:	4605      	mov	r5, r0
 8013758:	f001 fdd8 	bl	801530c <__mcmp>
 801375c:	2800      	cmp	r0, #0
 801375e:	dd6a      	ble.n	8013836 <_strtod_l+0x8e6>
 8013760:	9904      	ldr	r1, [sp, #16]
 8013762:	4a55      	ldr	r2, [pc, #340]	; (80138b8 <_strtod_l+0x968>)
 8013764:	465b      	mov	r3, fp
 8013766:	2900      	cmp	r1, #0
 8013768:	f000 8085 	beq.w	8013876 <_strtod_l+0x926>
 801376c:	ea02 010b 	and.w	r1, r2, fp
 8013770:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013774:	dc7f      	bgt.n	8013876 <_strtod_l+0x926>
 8013776:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801377a:	f77f aeaa 	ble.w	80134d2 <_strtod_l+0x582>
 801377e:	4a4f      	ldr	r2, [pc, #316]	; (80138bc <_strtod_l+0x96c>)
 8013780:	2300      	movs	r3, #0
 8013782:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8013786:	4650      	mov	r0, sl
 8013788:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801378c:	4659      	mov	r1, fp
 801378e:	f7ec ff43 	bl	8000618 <__aeabi_dmul>
 8013792:	460b      	mov	r3, r1
 8013794:	4303      	orrs	r3, r0
 8013796:	bf08      	it	eq
 8013798:	2322      	moveq	r3, #34	; 0x22
 801379a:	4682      	mov	sl, r0
 801379c:	468b      	mov	fp, r1
 801379e:	bf08      	it	eq
 80137a0:	6023      	streq	r3, [r4, #0]
 80137a2:	e62b      	b.n	80133fc <_strtod_l+0x4ac>
 80137a4:	f04f 32ff 	mov.w	r2, #4294967295
 80137a8:	fa02 f303 	lsl.w	r3, r2, r3
 80137ac:	ea03 0a0a 	and.w	sl, r3, sl
 80137b0:	e6de      	b.n	8013570 <_strtod_l+0x620>
 80137b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80137b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80137ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80137be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80137c2:	fa01 f308 	lsl.w	r3, r1, r8
 80137c6:	930c      	str	r3, [sp, #48]	; 0x30
 80137c8:	9111      	str	r1, [sp, #68]	; 0x44
 80137ca:	e741      	b.n	8013650 <_strtod_l+0x700>
 80137cc:	2300      	movs	r3, #0
 80137ce:	930c      	str	r3, [sp, #48]	; 0x30
 80137d0:	2301      	movs	r3, #1
 80137d2:	9311      	str	r3, [sp, #68]	; 0x44
 80137d4:	e73c      	b.n	8013650 <_strtod_l+0x700>
 80137d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80137d8:	4642      	mov	r2, r8
 80137da:	4620      	mov	r0, r4
 80137dc:	f001 fd2a 	bl	8015234 <__lshift>
 80137e0:	901e      	str	r0, [sp, #120]	; 0x78
 80137e2:	2800      	cmp	r0, #0
 80137e4:	f47f af66 	bne.w	80136b4 <_strtod_l+0x764>
 80137e8:	e5fe      	b.n	80133e8 <_strtod_l+0x498>
 80137ea:	465f      	mov	r7, fp
 80137ec:	d16e      	bne.n	80138cc <_strtod_l+0x97c>
 80137ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80137f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137f4:	b342      	cbz	r2, 8013848 <_strtod_l+0x8f8>
 80137f6:	4a32      	ldr	r2, [pc, #200]	; (80138c0 <_strtod_l+0x970>)
 80137f8:	4293      	cmp	r3, r2
 80137fa:	d128      	bne.n	801384e <_strtod_l+0x8fe>
 80137fc:	9b04      	ldr	r3, [sp, #16]
 80137fe:	4650      	mov	r0, sl
 8013800:	b1eb      	cbz	r3, 801383e <_strtod_l+0x8ee>
 8013802:	4a2d      	ldr	r2, [pc, #180]	; (80138b8 <_strtod_l+0x968>)
 8013804:	403a      	ands	r2, r7
 8013806:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801380a:	f04f 31ff 	mov.w	r1, #4294967295
 801380e:	d819      	bhi.n	8013844 <_strtod_l+0x8f4>
 8013810:	0d12      	lsrs	r2, r2, #20
 8013812:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013816:	fa01 f303 	lsl.w	r3, r1, r3
 801381a:	4298      	cmp	r0, r3
 801381c:	d117      	bne.n	801384e <_strtod_l+0x8fe>
 801381e:	4b29      	ldr	r3, [pc, #164]	; (80138c4 <_strtod_l+0x974>)
 8013820:	429f      	cmp	r7, r3
 8013822:	d102      	bne.n	801382a <_strtod_l+0x8da>
 8013824:	3001      	adds	r0, #1
 8013826:	f43f addf 	beq.w	80133e8 <_strtod_l+0x498>
 801382a:	4b23      	ldr	r3, [pc, #140]	; (80138b8 <_strtod_l+0x968>)
 801382c:	403b      	ands	r3, r7
 801382e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013832:	f04f 0a00 	mov.w	sl, #0
 8013836:	9b04      	ldr	r3, [sp, #16]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d1a0      	bne.n	801377e <_strtod_l+0x82e>
 801383c:	e5de      	b.n	80133fc <_strtod_l+0x4ac>
 801383e:	f04f 33ff 	mov.w	r3, #4294967295
 8013842:	e7ea      	b.n	801381a <_strtod_l+0x8ca>
 8013844:	460b      	mov	r3, r1
 8013846:	e7e8      	b.n	801381a <_strtod_l+0x8ca>
 8013848:	ea53 030a 	orrs.w	r3, r3, sl
 801384c:	d088      	beq.n	8013760 <_strtod_l+0x810>
 801384e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013850:	b1db      	cbz	r3, 801388a <_strtod_l+0x93a>
 8013852:	423b      	tst	r3, r7
 8013854:	d0ef      	beq.n	8013836 <_strtod_l+0x8e6>
 8013856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013858:	9a04      	ldr	r2, [sp, #16]
 801385a:	4650      	mov	r0, sl
 801385c:	4659      	mov	r1, fp
 801385e:	b1c3      	cbz	r3, 8013892 <_strtod_l+0x942>
 8013860:	f7ff fb58 	bl	8012f14 <sulp>
 8013864:	4602      	mov	r2, r0
 8013866:	460b      	mov	r3, r1
 8013868:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801386c:	f7ec fd1e 	bl	80002ac <__adddf3>
 8013870:	4682      	mov	sl, r0
 8013872:	468b      	mov	fp, r1
 8013874:	e7df      	b.n	8013836 <_strtod_l+0x8e6>
 8013876:	4013      	ands	r3, r2
 8013878:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801387c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013880:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013884:	f04f 3aff 	mov.w	sl, #4294967295
 8013888:	e7d5      	b.n	8013836 <_strtod_l+0x8e6>
 801388a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801388c:	ea13 0f0a 	tst.w	r3, sl
 8013890:	e7e0      	b.n	8013854 <_strtod_l+0x904>
 8013892:	f7ff fb3f 	bl	8012f14 <sulp>
 8013896:	4602      	mov	r2, r0
 8013898:	460b      	mov	r3, r1
 801389a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801389e:	f7ec fd03 	bl	80002a8 <__aeabi_dsub>
 80138a2:	2200      	movs	r2, #0
 80138a4:	2300      	movs	r3, #0
 80138a6:	4682      	mov	sl, r0
 80138a8:	468b      	mov	fp, r1
 80138aa:	f7ed f91d 	bl	8000ae8 <__aeabi_dcmpeq>
 80138ae:	2800      	cmp	r0, #0
 80138b0:	d0c1      	beq.n	8013836 <_strtod_l+0x8e6>
 80138b2:	e60e      	b.n	80134d2 <_strtod_l+0x582>
 80138b4:	fffffc02 	.word	0xfffffc02
 80138b8:	7ff00000 	.word	0x7ff00000
 80138bc:	39500000 	.word	0x39500000
 80138c0:	000fffff 	.word	0x000fffff
 80138c4:	7fefffff 	.word	0x7fefffff
 80138c8:	080217b8 	.word	0x080217b8
 80138cc:	4631      	mov	r1, r6
 80138ce:	4628      	mov	r0, r5
 80138d0:	f001 fe98 	bl	8015604 <__ratio>
 80138d4:	ec59 8b10 	vmov	r8, r9, d0
 80138d8:	ee10 0a10 	vmov	r0, s0
 80138dc:	2200      	movs	r2, #0
 80138de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80138e2:	4649      	mov	r1, r9
 80138e4:	f7ed f914 	bl	8000b10 <__aeabi_dcmple>
 80138e8:	2800      	cmp	r0, #0
 80138ea:	d07c      	beq.n	80139e6 <_strtod_l+0xa96>
 80138ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d04c      	beq.n	801398c <_strtod_l+0xa3c>
 80138f2:	4b95      	ldr	r3, [pc, #596]	; (8013b48 <_strtod_l+0xbf8>)
 80138f4:	2200      	movs	r2, #0
 80138f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80138fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013b48 <_strtod_l+0xbf8>
 80138fe:	f04f 0800 	mov.w	r8, #0
 8013902:	4b92      	ldr	r3, [pc, #584]	; (8013b4c <_strtod_l+0xbfc>)
 8013904:	403b      	ands	r3, r7
 8013906:	9311      	str	r3, [sp, #68]	; 0x44
 8013908:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801390a:	4b91      	ldr	r3, [pc, #580]	; (8013b50 <_strtod_l+0xc00>)
 801390c:	429a      	cmp	r2, r3
 801390e:	f040 80b2 	bne.w	8013a76 <_strtod_l+0xb26>
 8013912:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801391a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801391e:	ec4b ab10 	vmov	d0, sl, fp
 8013922:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8013926:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801392a:	f001 fd93 	bl	8015454 <__ulp>
 801392e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013932:	ec53 2b10 	vmov	r2, r3, d0
 8013936:	f7ec fe6f 	bl	8000618 <__aeabi_dmul>
 801393a:	4652      	mov	r2, sl
 801393c:	465b      	mov	r3, fp
 801393e:	f7ec fcb5 	bl	80002ac <__adddf3>
 8013942:	460b      	mov	r3, r1
 8013944:	4981      	ldr	r1, [pc, #516]	; (8013b4c <_strtod_l+0xbfc>)
 8013946:	4a83      	ldr	r2, [pc, #524]	; (8013b54 <_strtod_l+0xc04>)
 8013948:	4019      	ands	r1, r3
 801394a:	4291      	cmp	r1, r2
 801394c:	4682      	mov	sl, r0
 801394e:	d95e      	bls.n	8013a0e <_strtod_l+0xabe>
 8013950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013952:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013956:	4293      	cmp	r3, r2
 8013958:	d103      	bne.n	8013962 <_strtod_l+0xa12>
 801395a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801395c:	3301      	adds	r3, #1
 801395e:	f43f ad43 	beq.w	80133e8 <_strtod_l+0x498>
 8013962:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8013b60 <_strtod_l+0xc10>
 8013966:	f04f 3aff 	mov.w	sl, #4294967295
 801396a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801396c:	4620      	mov	r0, r4
 801396e:	f001 fa45 	bl	8014dfc <_Bfree>
 8013972:	9907      	ldr	r1, [sp, #28]
 8013974:	4620      	mov	r0, r4
 8013976:	f001 fa41 	bl	8014dfc <_Bfree>
 801397a:	4631      	mov	r1, r6
 801397c:	4620      	mov	r0, r4
 801397e:	f001 fa3d 	bl	8014dfc <_Bfree>
 8013982:	4629      	mov	r1, r5
 8013984:	4620      	mov	r0, r4
 8013986:	f001 fa39 	bl	8014dfc <_Bfree>
 801398a:	e613      	b.n	80135b4 <_strtod_l+0x664>
 801398c:	f1ba 0f00 	cmp.w	sl, #0
 8013990:	d11b      	bne.n	80139ca <_strtod_l+0xa7a>
 8013992:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013996:	b9f3      	cbnz	r3, 80139d6 <_strtod_l+0xa86>
 8013998:	4b6b      	ldr	r3, [pc, #428]	; (8013b48 <_strtod_l+0xbf8>)
 801399a:	2200      	movs	r2, #0
 801399c:	4640      	mov	r0, r8
 801399e:	4649      	mov	r1, r9
 80139a0:	f7ed f8ac 	bl	8000afc <__aeabi_dcmplt>
 80139a4:	b9d0      	cbnz	r0, 80139dc <_strtod_l+0xa8c>
 80139a6:	4640      	mov	r0, r8
 80139a8:	4649      	mov	r1, r9
 80139aa:	4b6b      	ldr	r3, [pc, #428]	; (8013b58 <_strtod_l+0xc08>)
 80139ac:	2200      	movs	r2, #0
 80139ae:	f7ec fe33 	bl	8000618 <__aeabi_dmul>
 80139b2:	4680      	mov	r8, r0
 80139b4:	4689      	mov	r9, r1
 80139b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80139ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80139be:	931b      	str	r3, [sp, #108]	; 0x6c
 80139c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80139c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80139c8:	e79b      	b.n	8013902 <_strtod_l+0x9b2>
 80139ca:	f1ba 0f01 	cmp.w	sl, #1
 80139ce:	d102      	bne.n	80139d6 <_strtod_l+0xa86>
 80139d0:	2f00      	cmp	r7, #0
 80139d2:	f43f ad7e 	beq.w	80134d2 <_strtod_l+0x582>
 80139d6:	4b61      	ldr	r3, [pc, #388]	; (8013b5c <_strtod_l+0xc0c>)
 80139d8:	2200      	movs	r2, #0
 80139da:	e78c      	b.n	80138f6 <_strtod_l+0x9a6>
 80139dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013b58 <_strtod_l+0xc08>
 80139e0:	f04f 0800 	mov.w	r8, #0
 80139e4:	e7e7      	b.n	80139b6 <_strtod_l+0xa66>
 80139e6:	4b5c      	ldr	r3, [pc, #368]	; (8013b58 <_strtod_l+0xc08>)
 80139e8:	4640      	mov	r0, r8
 80139ea:	4649      	mov	r1, r9
 80139ec:	2200      	movs	r2, #0
 80139ee:	f7ec fe13 	bl	8000618 <__aeabi_dmul>
 80139f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139f4:	4680      	mov	r8, r0
 80139f6:	4689      	mov	r9, r1
 80139f8:	b933      	cbnz	r3, 8013a08 <_strtod_l+0xab8>
 80139fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80139fe:	9012      	str	r0, [sp, #72]	; 0x48
 8013a00:	9313      	str	r3, [sp, #76]	; 0x4c
 8013a02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013a06:	e7dd      	b.n	80139c4 <_strtod_l+0xa74>
 8013a08:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8013a0c:	e7f9      	b.n	8013a02 <_strtod_l+0xab2>
 8013a0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013a12:	9b04      	ldr	r3, [sp, #16]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d1a8      	bne.n	801396a <_strtod_l+0xa1a>
 8013a18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013a1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a1e:	0d1b      	lsrs	r3, r3, #20
 8013a20:	051b      	lsls	r3, r3, #20
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d1a1      	bne.n	801396a <_strtod_l+0xa1a>
 8013a26:	4640      	mov	r0, r8
 8013a28:	4649      	mov	r1, r9
 8013a2a:	f7ed f967 	bl	8000cfc <__aeabi_d2lz>
 8013a2e:	f7ec fdc5 	bl	80005bc <__aeabi_l2d>
 8013a32:	4602      	mov	r2, r0
 8013a34:	460b      	mov	r3, r1
 8013a36:	4640      	mov	r0, r8
 8013a38:	4649      	mov	r1, r9
 8013a3a:	f7ec fc35 	bl	80002a8 <__aeabi_dsub>
 8013a3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013a44:	ea43 030a 	orr.w	r3, r3, sl
 8013a48:	4313      	orrs	r3, r2
 8013a4a:	4680      	mov	r8, r0
 8013a4c:	4689      	mov	r9, r1
 8013a4e:	d053      	beq.n	8013af8 <_strtod_l+0xba8>
 8013a50:	a335      	add	r3, pc, #212	; (adr r3, 8013b28 <_strtod_l+0xbd8>)
 8013a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a56:	f7ed f851 	bl	8000afc <__aeabi_dcmplt>
 8013a5a:	2800      	cmp	r0, #0
 8013a5c:	f47f acce 	bne.w	80133fc <_strtod_l+0x4ac>
 8013a60:	a333      	add	r3, pc, #204	; (adr r3, 8013b30 <_strtod_l+0xbe0>)
 8013a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a66:	4640      	mov	r0, r8
 8013a68:	4649      	mov	r1, r9
 8013a6a:	f7ed f865 	bl	8000b38 <__aeabi_dcmpgt>
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	f43f af7b 	beq.w	801396a <_strtod_l+0xa1a>
 8013a74:	e4c2      	b.n	80133fc <_strtod_l+0x4ac>
 8013a76:	9b04      	ldr	r3, [sp, #16]
 8013a78:	b333      	cbz	r3, 8013ac8 <_strtod_l+0xb78>
 8013a7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013a7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013a80:	d822      	bhi.n	8013ac8 <_strtod_l+0xb78>
 8013a82:	a32d      	add	r3, pc, #180	; (adr r3, 8013b38 <_strtod_l+0xbe8>)
 8013a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a88:	4640      	mov	r0, r8
 8013a8a:	4649      	mov	r1, r9
 8013a8c:	f7ed f840 	bl	8000b10 <__aeabi_dcmple>
 8013a90:	b1a0      	cbz	r0, 8013abc <_strtod_l+0xb6c>
 8013a92:	4649      	mov	r1, r9
 8013a94:	4640      	mov	r0, r8
 8013a96:	f7ed f859 	bl	8000b4c <__aeabi_d2uiz>
 8013a9a:	2801      	cmp	r0, #1
 8013a9c:	bf38      	it	cc
 8013a9e:	2001      	movcc	r0, #1
 8013aa0:	f7ec fd40 	bl	8000524 <__aeabi_ui2d>
 8013aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013aa6:	4680      	mov	r8, r0
 8013aa8:	4689      	mov	r9, r1
 8013aaa:	bb13      	cbnz	r3, 8013af2 <_strtod_l+0xba2>
 8013aac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ab0:	9014      	str	r0, [sp, #80]	; 0x50
 8013ab2:	9315      	str	r3, [sp, #84]	; 0x54
 8013ab4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013ab8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013abe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013ac0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013ac4:	1a9b      	subs	r3, r3, r2
 8013ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8013ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013acc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013ad0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013ad4:	f001 fcbe 	bl	8015454 <__ulp>
 8013ad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013adc:	ec53 2b10 	vmov	r2, r3, d0
 8013ae0:	f7ec fd9a 	bl	8000618 <__aeabi_dmul>
 8013ae4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013ae8:	f7ec fbe0 	bl	80002ac <__adddf3>
 8013aec:	4682      	mov	sl, r0
 8013aee:	468b      	mov	fp, r1
 8013af0:	e78f      	b.n	8013a12 <_strtod_l+0xac2>
 8013af2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8013af6:	e7dd      	b.n	8013ab4 <_strtod_l+0xb64>
 8013af8:	a311      	add	r3, pc, #68	; (adr r3, 8013b40 <_strtod_l+0xbf0>)
 8013afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013afe:	f7ec fffd 	bl	8000afc <__aeabi_dcmplt>
 8013b02:	e7b4      	b.n	8013a6e <_strtod_l+0xb1e>
 8013b04:	2300      	movs	r3, #0
 8013b06:	930e      	str	r3, [sp, #56]	; 0x38
 8013b08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013b0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013b0c:	6013      	str	r3, [r2, #0]
 8013b0e:	f7ff ba65 	b.w	8012fdc <_strtod_l+0x8c>
 8013b12:	2b65      	cmp	r3, #101	; 0x65
 8013b14:	f43f ab5d 	beq.w	80131d2 <_strtod_l+0x282>
 8013b18:	2b45      	cmp	r3, #69	; 0x45
 8013b1a:	f43f ab5a 	beq.w	80131d2 <_strtod_l+0x282>
 8013b1e:	2201      	movs	r2, #1
 8013b20:	f7ff bb92 	b.w	8013248 <_strtod_l+0x2f8>
 8013b24:	f3af 8000 	nop.w
 8013b28:	94a03595 	.word	0x94a03595
 8013b2c:	3fdfffff 	.word	0x3fdfffff
 8013b30:	35afe535 	.word	0x35afe535
 8013b34:	3fe00000 	.word	0x3fe00000
 8013b38:	ffc00000 	.word	0xffc00000
 8013b3c:	41dfffff 	.word	0x41dfffff
 8013b40:	94a03595 	.word	0x94a03595
 8013b44:	3fcfffff 	.word	0x3fcfffff
 8013b48:	3ff00000 	.word	0x3ff00000
 8013b4c:	7ff00000 	.word	0x7ff00000
 8013b50:	7fe00000 	.word	0x7fe00000
 8013b54:	7c9fffff 	.word	0x7c9fffff
 8013b58:	3fe00000 	.word	0x3fe00000
 8013b5c:	bff00000 	.word	0xbff00000
 8013b60:	7fefffff 	.word	0x7fefffff

08013b64 <strtod>:
 8013b64:	460a      	mov	r2, r1
 8013b66:	4601      	mov	r1, r0
 8013b68:	4802      	ldr	r0, [pc, #8]	; (8013b74 <strtod+0x10>)
 8013b6a:	4b03      	ldr	r3, [pc, #12]	; (8013b78 <strtod+0x14>)
 8013b6c:	6800      	ldr	r0, [r0, #0]
 8013b6e:	f7ff b9ef 	b.w	8012f50 <_strtod_l>
 8013b72:	bf00      	nop
 8013b74:	200000b4 	.word	0x200000b4
 8013b78:	2000017c 	.word	0x2000017c

08013b7c <_strtol_l.isra.0>:
 8013b7c:	2b01      	cmp	r3, #1
 8013b7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b82:	d001      	beq.n	8013b88 <_strtol_l.isra.0+0xc>
 8013b84:	2b24      	cmp	r3, #36	; 0x24
 8013b86:	d906      	bls.n	8013b96 <_strtol_l.isra.0+0x1a>
 8013b88:	f7fe f868 	bl	8011c5c <__errno>
 8013b8c:	2316      	movs	r3, #22
 8013b8e:	6003      	str	r3, [r0, #0]
 8013b90:	2000      	movs	r0, #0
 8013b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b96:	4f3a      	ldr	r7, [pc, #232]	; (8013c80 <_strtol_l.isra.0+0x104>)
 8013b98:	468e      	mov	lr, r1
 8013b9a:	4676      	mov	r6, lr
 8013b9c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013ba0:	5de5      	ldrb	r5, [r4, r7]
 8013ba2:	f015 0508 	ands.w	r5, r5, #8
 8013ba6:	d1f8      	bne.n	8013b9a <_strtol_l.isra.0+0x1e>
 8013ba8:	2c2d      	cmp	r4, #45	; 0x2d
 8013baa:	d134      	bne.n	8013c16 <_strtol_l.isra.0+0x9a>
 8013bac:	f89e 4000 	ldrb.w	r4, [lr]
 8013bb0:	f04f 0801 	mov.w	r8, #1
 8013bb4:	f106 0e02 	add.w	lr, r6, #2
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d05c      	beq.n	8013c76 <_strtol_l.isra.0+0xfa>
 8013bbc:	2b10      	cmp	r3, #16
 8013bbe:	d10c      	bne.n	8013bda <_strtol_l.isra.0+0x5e>
 8013bc0:	2c30      	cmp	r4, #48	; 0x30
 8013bc2:	d10a      	bne.n	8013bda <_strtol_l.isra.0+0x5e>
 8013bc4:	f89e 4000 	ldrb.w	r4, [lr]
 8013bc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013bcc:	2c58      	cmp	r4, #88	; 0x58
 8013bce:	d14d      	bne.n	8013c6c <_strtol_l.isra.0+0xf0>
 8013bd0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013bd4:	2310      	movs	r3, #16
 8013bd6:	f10e 0e02 	add.w	lr, lr, #2
 8013bda:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013bde:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013be2:	2600      	movs	r6, #0
 8013be4:	fbbc f9f3 	udiv	r9, ip, r3
 8013be8:	4635      	mov	r5, r6
 8013bea:	fb03 ca19 	mls	sl, r3, r9, ip
 8013bee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013bf2:	2f09      	cmp	r7, #9
 8013bf4:	d818      	bhi.n	8013c28 <_strtol_l.isra.0+0xac>
 8013bf6:	463c      	mov	r4, r7
 8013bf8:	42a3      	cmp	r3, r4
 8013bfa:	dd24      	ble.n	8013c46 <_strtol_l.isra.0+0xca>
 8013bfc:	2e00      	cmp	r6, #0
 8013bfe:	db1f      	blt.n	8013c40 <_strtol_l.isra.0+0xc4>
 8013c00:	45a9      	cmp	r9, r5
 8013c02:	d31d      	bcc.n	8013c40 <_strtol_l.isra.0+0xc4>
 8013c04:	d101      	bne.n	8013c0a <_strtol_l.isra.0+0x8e>
 8013c06:	45a2      	cmp	sl, r4
 8013c08:	db1a      	blt.n	8013c40 <_strtol_l.isra.0+0xc4>
 8013c0a:	fb05 4503 	mla	r5, r5, r3, r4
 8013c0e:	2601      	movs	r6, #1
 8013c10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013c14:	e7eb      	b.n	8013bee <_strtol_l.isra.0+0x72>
 8013c16:	2c2b      	cmp	r4, #43	; 0x2b
 8013c18:	bf08      	it	eq
 8013c1a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013c1e:	46a8      	mov	r8, r5
 8013c20:	bf08      	it	eq
 8013c22:	f106 0e02 	addeq.w	lr, r6, #2
 8013c26:	e7c7      	b.n	8013bb8 <_strtol_l.isra.0+0x3c>
 8013c28:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013c2c:	2f19      	cmp	r7, #25
 8013c2e:	d801      	bhi.n	8013c34 <_strtol_l.isra.0+0xb8>
 8013c30:	3c37      	subs	r4, #55	; 0x37
 8013c32:	e7e1      	b.n	8013bf8 <_strtol_l.isra.0+0x7c>
 8013c34:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013c38:	2f19      	cmp	r7, #25
 8013c3a:	d804      	bhi.n	8013c46 <_strtol_l.isra.0+0xca>
 8013c3c:	3c57      	subs	r4, #87	; 0x57
 8013c3e:	e7db      	b.n	8013bf8 <_strtol_l.isra.0+0x7c>
 8013c40:	f04f 36ff 	mov.w	r6, #4294967295
 8013c44:	e7e4      	b.n	8013c10 <_strtol_l.isra.0+0x94>
 8013c46:	2e00      	cmp	r6, #0
 8013c48:	da05      	bge.n	8013c56 <_strtol_l.isra.0+0xda>
 8013c4a:	2322      	movs	r3, #34	; 0x22
 8013c4c:	6003      	str	r3, [r0, #0]
 8013c4e:	4665      	mov	r5, ip
 8013c50:	b942      	cbnz	r2, 8013c64 <_strtol_l.isra.0+0xe8>
 8013c52:	4628      	mov	r0, r5
 8013c54:	e79d      	b.n	8013b92 <_strtol_l.isra.0+0x16>
 8013c56:	f1b8 0f00 	cmp.w	r8, #0
 8013c5a:	d000      	beq.n	8013c5e <_strtol_l.isra.0+0xe2>
 8013c5c:	426d      	negs	r5, r5
 8013c5e:	2a00      	cmp	r2, #0
 8013c60:	d0f7      	beq.n	8013c52 <_strtol_l.isra.0+0xd6>
 8013c62:	b10e      	cbz	r6, 8013c68 <_strtol_l.isra.0+0xec>
 8013c64:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013c68:	6011      	str	r1, [r2, #0]
 8013c6a:	e7f2      	b.n	8013c52 <_strtol_l.isra.0+0xd6>
 8013c6c:	2430      	movs	r4, #48	; 0x30
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d1b3      	bne.n	8013bda <_strtol_l.isra.0+0x5e>
 8013c72:	2308      	movs	r3, #8
 8013c74:	e7b1      	b.n	8013bda <_strtol_l.isra.0+0x5e>
 8013c76:	2c30      	cmp	r4, #48	; 0x30
 8013c78:	d0a4      	beq.n	8013bc4 <_strtol_l.isra.0+0x48>
 8013c7a:	230a      	movs	r3, #10
 8013c7c:	e7ad      	b.n	8013bda <_strtol_l.isra.0+0x5e>
 8013c7e:	bf00      	nop
 8013c80:	08021a81 	.word	0x08021a81

08013c84 <_strtol_r>:
 8013c84:	f7ff bf7a 	b.w	8013b7c <_strtol_l.isra.0>

08013c88 <strtol>:
 8013c88:	4613      	mov	r3, r2
 8013c8a:	460a      	mov	r2, r1
 8013c8c:	4601      	mov	r1, r0
 8013c8e:	4802      	ldr	r0, [pc, #8]	; (8013c98 <strtol+0x10>)
 8013c90:	6800      	ldr	r0, [r0, #0]
 8013c92:	f7ff bf73 	b.w	8013b7c <_strtol_l.isra.0>
 8013c96:	bf00      	nop
 8013c98:	200000b4 	.word	0x200000b4

08013c9c <_strtoul_l.isra.0>:
 8013c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ca0:	4e3b      	ldr	r6, [pc, #236]	; (8013d90 <_strtoul_l.isra.0+0xf4>)
 8013ca2:	4686      	mov	lr, r0
 8013ca4:	468c      	mov	ip, r1
 8013ca6:	4660      	mov	r0, ip
 8013ca8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013cac:	5da5      	ldrb	r5, [r4, r6]
 8013cae:	f015 0508 	ands.w	r5, r5, #8
 8013cb2:	d1f8      	bne.n	8013ca6 <_strtoul_l.isra.0+0xa>
 8013cb4:	2c2d      	cmp	r4, #45	; 0x2d
 8013cb6:	d134      	bne.n	8013d22 <_strtoul_l.isra.0+0x86>
 8013cb8:	f89c 4000 	ldrb.w	r4, [ip]
 8013cbc:	f04f 0801 	mov.w	r8, #1
 8013cc0:	f100 0c02 	add.w	ip, r0, #2
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d05e      	beq.n	8013d86 <_strtoul_l.isra.0+0xea>
 8013cc8:	2b10      	cmp	r3, #16
 8013cca:	d10c      	bne.n	8013ce6 <_strtoul_l.isra.0+0x4a>
 8013ccc:	2c30      	cmp	r4, #48	; 0x30
 8013cce:	d10a      	bne.n	8013ce6 <_strtoul_l.isra.0+0x4a>
 8013cd0:	f89c 0000 	ldrb.w	r0, [ip]
 8013cd4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013cd8:	2858      	cmp	r0, #88	; 0x58
 8013cda:	d14f      	bne.n	8013d7c <_strtoul_l.isra.0+0xe0>
 8013cdc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013ce0:	2310      	movs	r3, #16
 8013ce2:	f10c 0c02 	add.w	ip, ip, #2
 8013ce6:	f04f 37ff 	mov.w	r7, #4294967295
 8013cea:	2500      	movs	r5, #0
 8013cec:	fbb7 f7f3 	udiv	r7, r7, r3
 8013cf0:	fb03 f907 	mul.w	r9, r3, r7
 8013cf4:	ea6f 0909 	mvn.w	r9, r9
 8013cf8:	4628      	mov	r0, r5
 8013cfa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8013cfe:	2e09      	cmp	r6, #9
 8013d00:	d818      	bhi.n	8013d34 <_strtoul_l.isra.0+0x98>
 8013d02:	4634      	mov	r4, r6
 8013d04:	42a3      	cmp	r3, r4
 8013d06:	dd24      	ble.n	8013d52 <_strtoul_l.isra.0+0xb6>
 8013d08:	2d00      	cmp	r5, #0
 8013d0a:	db1f      	blt.n	8013d4c <_strtoul_l.isra.0+0xb0>
 8013d0c:	4287      	cmp	r7, r0
 8013d0e:	d31d      	bcc.n	8013d4c <_strtoul_l.isra.0+0xb0>
 8013d10:	d101      	bne.n	8013d16 <_strtoul_l.isra.0+0x7a>
 8013d12:	45a1      	cmp	r9, r4
 8013d14:	db1a      	blt.n	8013d4c <_strtoul_l.isra.0+0xb0>
 8013d16:	fb00 4003 	mla	r0, r0, r3, r4
 8013d1a:	2501      	movs	r5, #1
 8013d1c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013d20:	e7eb      	b.n	8013cfa <_strtoul_l.isra.0+0x5e>
 8013d22:	2c2b      	cmp	r4, #43	; 0x2b
 8013d24:	bf08      	it	eq
 8013d26:	f89c 4000 	ldrbeq.w	r4, [ip]
 8013d2a:	46a8      	mov	r8, r5
 8013d2c:	bf08      	it	eq
 8013d2e:	f100 0c02 	addeq.w	ip, r0, #2
 8013d32:	e7c7      	b.n	8013cc4 <_strtoul_l.isra.0+0x28>
 8013d34:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013d38:	2e19      	cmp	r6, #25
 8013d3a:	d801      	bhi.n	8013d40 <_strtoul_l.isra.0+0xa4>
 8013d3c:	3c37      	subs	r4, #55	; 0x37
 8013d3e:	e7e1      	b.n	8013d04 <_strtoul_l.isra.0+0x68>
 8013d40:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013d44:	2e19      	cmp	r6, #25
 8013d46:	d804      	bhi.n	8013d52 <_strtoul_l.isra.0+0xb6>
 8013d48:	3c57      	subs	r4, #87	; 0x57
 8013d4a:	e7db      	b.n	8013d04 <_strtoul_l.isra.0+0x68>
 8013d4c:	f04f 35ff 	mov.w	r5, #4294967295
 8013d50:	e7e4      	b.n	8013d1c <_strtoul_l.isra.0+0x80>
 8013d52:	2d00      	cmp	r5, #0
 8013d54:	da07      	bge.n	8013d66 <_strtoul_l.isra.0+0xca>
 8013d56:	2322      	movs	r3, #34	; 0x22
 8013d58:	f8ce 3000 	str.w	r3, [lr]
 8013d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d60:	b942      	cbnz	r2, 8013d74 <_strtoul_l.isra.0+0xd8>
 8013d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d66:	f1b8 0f00 	cmp.w	r8, #0
 8013d6a:	d000      	beq.n	8013d6e <_strtoul_l.isra.0+0xd2>
 8013d6c:	4240      	negs	r0, r0
 8013d6e:	2a00      	cmp	r2, #0
 8013d70:	d0f7      	beq.n	8013d62 <_strtoul_l.isra.0+0xc6>
 8013d72:	b10d      	cbz	r5, 8013d78 <_strtoul_l.isra.0+0xdc>
 8013d74:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013d78:	6011      	str	r1, [r2, #0]
 8013d7a:	e7f2      	b.n	8013d62 <_strtoul_l.isra.0+0xc6>
 8013d7c:	2430      	movs	r4, #48	; 0x30
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d1b1      	bne.n	8013ce6 <_strtoul_l.isra.0+0x4a>
 8013d82:	2308      	movs	r3, #8
 8013d84:	e7af      	b.n	8013ce6 <_strtoul_l.isra.0+0x4a>
 8013d86:	2c30      	cmp	r4, #48	; 0x30
 8013d88:	d0a2      	beq.n	8013cd0 <_strtoul_l.isra.0+0x34>
 8013d8a:	230a      	movs	r3, #10
 8013d8c:	e7ab      	b.n	8013ce6 <_strtoul_l.isra.0+0x4a>
 8013d8e:	bf00      	nop
 8013d90:	08021a81 	.word	0x08021a81

08013d94 <_strtoul_r>:
 8013d94:	f7ff bf82 	b.w	8013c9c <_strtoul_l.isra.0>

08013d98 <strtoul>:
 8013d98:	4613      	mov	r3, r2
 8013d9a:	460a      	mov	r2, r1
 8013d9c:	4601      	mov	r1, r0
 8013d9e:	4802      	ldr	r0, [pc, #8]	; (8013da8 <strtoul+0x10>)
 8013da0:	6800      	ldr	r0, [r0, #0]
 8013da2:	f7ff bf7b 	b.w	8013c9c <_strtoul_l.isra.0>
 8013da6:	bf00      	nop
 8013da8:	200000b4 	.word	0x200000b4

08013dac <__tzcalc_limits>:
 8013dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db0:	4680      	mov	r8, r0
 8013db2:	f000 fefb 	bl	8014bac <__gettzinfo>
 8013db6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8013dba:	4598      	cmp	r8, r3
 8013dbc:	f340 8098 	ble.w	8013ef0 <__tzcalc_limits+0x144>
 8013dc0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8013dc4:	4443      	add	r3, r8
 8013dc6:	109b      	asrs	r3, r3, #2
 8013dc8:	f240 126d 	movw	r2, #365	; 0x16d
 8013dcc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8013dd0:	fb02 3505 	mla	r5, r2, r5, r3
 8013dd4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8013dd8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8013ddc:	fb93 f3f2 	sdiv	r3, r3, r2
 8013de0:	441d      	add	r5, r3
 8013de2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013de6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8013dea:	fb98 f7f3 	sdiv	r7, r8, r3
 8013dee:	fb03 8717 	mls	r7, r3, r7, r8
 8013df2:	4442      	add	r2, r8
 8013df4:	fab7 fc87 	clz	ip, r7
 8013df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8013dfc:	f008 0303 	and.w	r3, r8, #3
 8013e00:	4415      	add	r5, r2
 8013e02:	2264      	movs	r2, #100	; 0x64
 8013e04:	f8c0 8004 	str.w	r8, [r0, #4]
 8013e08:	fb98 f6f2 	sdiv	r6, r8, r2
 8013e0c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8013e10:	fb02 8616 	mls	r6, r2, r6, r8
 8013e14:	4604      	mov	r4, r0
 8013e16:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8013e1a:	9300      	str	r3, [sp, #0]
 8013e1c:	f04f 0e07 	mov.w	lr, #7
 8013e20:	7a22      	ldrb	r2, [r4, #8]
 8013e22:	6963      	ldr	r3, [r4, #20]
 8013e24:	2a4a      	cmp	r2, #74	; 0x4a
 8013e26:	d128      	bne.n	8013e7a <__tzcalc_limits+0xce>
 8013e28:	9900      	ldr	r1, [sp, #0]
 8013e2a:	18ea      	adds	r2, r5, r3
 8013e2c:	b901      	cbnz	r1, 8013e30 <__tzcalc_limits+0x84>
 8013e2e:	b906      	cbnz	r6, 8013e32 <__tzcalc_limits+0x86>
 8013e30:	bb0f      	cbnz	r7, 8013e76 <__tzcalc_limits+0xca>
 8013e32:	2b3b      	cmp	r3, #59	; 0x3b
 8013e34:	bfd4      	ite	le
 8013e36:	2300      	movle	r3, #0
 8013e38:	2301      	movgt	r3, #1
 8013e3a:	4413      	add	r3, r2
 8013e3c:	1e5a      	subs	r2, r3, #1
 8013e3e:	69a3      	ldr	r3, [r4, #24]
 8013e40:	492c      	ldr	r1, [pc, #176]	; (8013ef4 <__tzcalc_limits+0x148>)
 8013e42:	fb01 3202 	mla	r2, r1, r2, r3
 8013e46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013e48:	4413      	add	r3, r2
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	17db      	asrs	r3, r3, #31
 8013e4e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013e52:	3428      	adds	r4, #40	; 0x28
 8013e54:	45a3      	cmp	fp, r4
 8013e56:	d1e3      	bne.n	8013e20 <__tzcalc_limits+0x74>
 8013e58:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8013e5c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8013e60:	4294      	cmp	r4, r2
 8013e62:	eb75 0303 	sbcs.w	r3, r5, r3
 8013e66:	bfb4      	ite	lt
 8013e68:	2301      	movlt	r3, #1
 8013e6a:	2300      	movge	r3, #0
 8013e6c:	6003      	str	r3, [r0, #0]
 8013e6e:	2001      	movs	r0, #1
 8013e70:	b003      	add	sp, #12
 8013e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e76:	2300      	movs	r3, #0
 8013e78:	e7df      	b.n	8013e3a <__tzcalc_limits+0x8e>
 8013e7a:	2a44      	cmp	r2, #68	; 0x44
 8013e7c:	d101      	bne.n	8013e82 <__tzcalc_limits+0xd6>
 8013e7e:	18ea      	adds	r2, r5, r3
 8013e80:	e7dd      	b.n	8013e3e <__tzcalc_limits+0x92>
 8013e82:	9a00      	ldr	r2, [sp, #0]
 8013e84:	bb72      	cbnz	r2, 8013ee4 <__tzcalc_limits+0x138>
 8013e86:	2e00      	cmp	r6, #0
 8013e88:	bf0c      	ite	eq
 8013e8a:	46e0      	moveq	r8, ip
 8013e8c:	f04f 0801 	movne.w	r8, #1
 8013e90:	4919      	ldr	r1, [pc, #100]	; (8013ef8 <__tzcalc_limits+0x14c>)
 8013e92:	68e2      	ldr	r2, [r4, #12]
 8013e94:	9201      	str	r2, [sp, #4]
 8013e96:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8013e9a:	fb0a 1808 	mla	r8, sl, r8, r1
 8013e9e:	462a      	mov	r2, r5
 8013ea0:	f04f 0900 	mov.w	r9, #0
 8013ea4:	f1a8 0804 	sub.w	r8, r8, #4
 8013ea8:	9901      	ldr	r1, [sp, #4]
 8013eaa:	f109 0901 	add.w	r9, r9, #1
 8013eae:	4549      	cmp	r1, r9
 8013eb0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8013eb4:	dc18      	bgt.n	8013ee8 <__tzcalc_limits+0x13c>
 8013eb6:	f102 0804 	add.w	r8, r2, #4
 8013eba:	fb98 f9fe 	sdiv	r9, r8, lr
 8013ebe:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8013ec2:	eba8 0909 	sub.w	r9, r8, r9
 8013ec6:	ebb3 0909 	subs.w	r9, r3, r9
 8013eca:	6923      	ldr	r3, [r4, #16]
 8013ecc:	f103 33ff 	add.w	r3, r3, #4294967295
 8013ed0:	bf48      	it	mi
 8013ed2:	f109 0907 	addmi.w	r9, r9, #7
 8013ed6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013eda:	444b      	add	r3, r9
 8013edc:	4553      	cmp	r3, sl
 8013ede:	da05      	bge.n	8013eec <__tzcalc_limits+0x140>
 8013ee0:	441a      	add	r2, r3
 8013ee2:	e7ac      	b.n	8013e3e <__tzcalc_limits+0x92>
 8013ee4:	46e0      	mov	r8, ip
 8013ee6:	e7d3      	b.n	8013e90 <__tzcalc_limits+0xe4>
 8013ee8:	4452      	add	r2, sl
 8013eea:	e7dd      	b.n	8013ea8 <__tzcalc_limits+0xfc>
 8013eec:	3b07      	subs	r3, #7
 8013eee:	e7f5      	b.n	8013edc <__tzcalc_limits+0x130>
 8013ef0:	2000      	movs	r0, #0
 8013ef2:	e7bd      	b.n	8013e70 <__tzcalc_limits+0xc4>
 8013ef4:	00015180 	.word	0x00015180
 8013ef8:	080216cc 	.word	0x080216cc

08013efc <__tz_lock>:
 8013efc:	4801      	ldr	r0, [pc, #4]	; (8013f04 <__tz_lock+0x8>)
 8013efe:	f7fe b8e2 	b.w	80120c6 <__retarget_lock_acquire>
 8013f02:	bf00      	nop
 8013f04:	20013083 	.word	0x20013083

08013f08 <__tz_unlock>:
 8013f08:	4801      	ldr	r0, [pc, #4]	; (8013f10 <__tz_unlock+0x8>)
 8013f0a:	f7fe b8de 	b.w	80120ca <__retarget_lock_release>
 8013f0e:	bf00      	nop
 8013f10:	20013083 	.word	0x20013083

08013f14 <_tzset_unlocked>:
 8013f14:	4b01      	ldr	r3, [pc, #4]	; (8013f1c <_tzset_unlocked+0x8>)
 8013f16:	6818      	ldr	r0, [r3, #0]
 8013f18:	f000 b802 	b.w	8013f20 <_tzset_unlocked_r>
 8013f1c:	200000b4 	.word	0x200000b4

08013f20 <_tzset_unlocked_r>:
 8013f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f24:	b08d      	sub	sp, #52	; 0x34
 8013f26:	4607      	mov	r7, r0
 8013f28:	f000 fe40 	bl	8014bac <__gettzinfo>
 8013f2c:	49ae      	ldr	r1, [pc, #696]	; (80141e8 <_tzset_unlocked_r+0x2c8>)
 8013f2e:	4eaf      	ldr	r6, [pc, #700]	; (80141ec <_tzset_unlocked_r+0x2cc>)
 8013f30:	4605      	mov	r5, r0
 8013f32:	4638      	mov	r0, r7
 8013f34:	f000 fe32 	bl	8014b9c <_getenv_r>
 8013f38:	4604      	mov	r4, r0
 8013f3a:	b970      	cbnz	r0, 8013f5a <_tzset_unlocked_r+0x3a>
 8013f3c:	4bac      	ldr	r3, [pc, #688]	; (80141f0 <_tzset_unlocked_r+0x2d0>)
 8013f3e:	4aad      	ldr	r2, [pc, #692]	; (80141f4 <_tzset_unlocked_r+0x2d4>)
 8013f40:	6018      	str	r0, [r3, #0]
 8013f42:	4bad      	ldr	r3, [pc, #692]	; (80141f8 <_tzset_unlocked_r+0x2d8>)
 8013f44:	6018      	str	r0, [r3, #0]
 8013f46:	4bad      	ldr	r3, [pc, #692]	; (80141fc <_tzset_unlocked_r+0x2dc>)
 8013f48:	6830      	ldr	r0, [r6, #0]
 8013f4a:	e9c3 2200 	strd	r2, r2, [r3]
 8013f4e:	f7fe f8c7 	bl	80120e0 <free>
 8013f52:	6034      	str	r4, [r6, #0]
 8013f54:	b00d      	add	sp, #52	; 0x34
 8013f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f5a:	6831      	ldr	r1, [r6, #0]
 8013f5c:	2900      	cmp	r1, #0
 8013f5e:	d15f      	bne.n	8014020 <_tzset_unlocked_r+0x100>
 8013f60:	6830      	ldr	r0, [r6, #0]
 8013f62:	f7fe f8bd 	bl	80120e0 <free>
 8013f66:	4620      	mov	r0, r4
 8013f68:	f7ec f93c 	bl	80001e4 <strlen>
 8013f6c:	1c41      	adds	r1, r0, #1
 8013f6e:	4638      	mov	r0, r7
 8013f70:	f7fe f924 	bl	80121bc <_malloc_r>
 8013f74:	6030      	str	r0, [r6, #0]
 8013f76:	2800      	cmp	r0, #0
 8013f78:	d157      	bne.n	801402a <_tzset_unlocked_r+0x10a>
 8013f7a:	7823      	ldrb	r3, [r4, #0]
 8013f7c:	4aa0      	ldr	r2, [pc, #640]	; (8014200 <_tzset_unlocked_r+0x2e0>)
 8013f7e:	49a1      	ldr	r1, [pc, #644]	; (8014204 <_tzset_unlocked_r+0x2e4>)
 8013f80:	2b3a      	cmp	r3, #58	; 0x3a
 8013f82:	bf08      	it	eq
 8013f84:	3401      	addeq	r4, #1
 8013f86:	ae0a      	add	r6, sp, #40	; 0x28
 8013f88:	4633      	mov	r3, r6
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f002 f858 	bl	8016040 <siscanf>
 8013f90:	2800      	cmp	r0, #0
 8013f92:	dddf      	ble.n	8013f54 <_tzset_unlocked_r+0x34>
 8013f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f96:	18e7      	adds	r7, r4, r3
 8013f98:	5ce3      	ldrb	r3, [r4, r3]
 8013f9a:	2b2d      	cmp	r3, #45	; 0x2d
 8013f9c:	d149      	bne.n	8014032 <_tzset_unlocked_r+0x112>
 8013f9e:	3701      	adds	r7, #1
 8013fa0:	f04f 34ff 	mov.w	r4, #4294967295
 8013fa4:	f10d 0a20 	add.w	sl, sp, #32
 8013fa8:	f10d 0b1e 	add.w	fp, sp, #30
 8013fac:	f04f 0800 	mov.w	r8, #0
 8013fb0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8013fb4:	4994      	ldr	r1, [pc, #592]	; (8014208 <_tzset_unlocked_r+0x2e8>)
 8013fb6:	9603      	str	r6, [sp, #12]
 8013fb8:	f8cd b000 	str.w	fp, [sp]
 8013fbc:	4633      	mov	r3, r6
 8013fbe:	aa07      	add	r2, sp, #28
 8013fc0:	4638      	mov	r0, r7
 8013fc2:	f8ad 801e 	strh.w	r8, [sp, #30]
 8013fc6:	f8ad 8020 	strh.w	r8, [sp, #32]
 8013fca:	f002 f839 	bl	8016040 <siscanf>
 8013fce:	4540      	cmp	r0, r8
 8013fd0:	ddc0      	ble.n	8013f54 <_tzset_unlocked_r+0x34>
 8013fd2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013fd6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013fda:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8014214 <_tzset_unlocked_r+0x2f4>
 8013fde:	213c      	movs	r1, #60	; 0x3c
 8013fe0:	fb01 2203 	mla	r2, r1, r3, r2
 8013fe4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013fe8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013fec:	fb01 2303 	mla	r3, r1, r3, r2
 8013ff0:	435c      	muls	r4, r3
 8013ff2:	62ac      	str	r4, [r5, #40]	; 0x28
 8013ff4:	4c81      	ldr	r4, [pc, #516]	; (80141fc <_tzset_unlocked_r+0x2dc>)
 8013ff6:	4b82      	ldr	r3, [pc, #520]	; (8014200 <_tzset_unlocked_r+0x2e0>)
 8013ff8:	6023      	str	r3, [r4, #0]
 8013ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ffc:	4981      	ldr	r1, [pc, #516]	; (8014204 <_tzset_unlocked_r+0x2e4>)
 8013ffe:	441f      	add	r7, r3
 8014000:	464a      	mov	r2, r9
 8014002:	4633      	mov	r3, r6
 8014004:	4638      	mov	r0, r7
 8014006:	f002 f81b 	bl	8016040 <siscanf>
 801400a:	4540      	cmp	r0, r8
 801400c:	dc16      	bgt.n	801403c <_tzset_unlocked_r+0x11c>
 801400e:	6823      	ldr	r3, [r4, #0]
 8014010:	6063      	str	r3, [r4, #4]
 8014012:	4b77      	ldr	r3, [pc, #476]	; (80141f0 <_tzset_unlocked_r+0x2d0>)
 8014014:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8014016:	601a      	str	r2, [r3, #0]
 8014018:	4b77      	ldr	r3, [pc, #476]	; (80141f8 <_tzset_unlocked_r+0x2d8>)
 801401a:	f8c3 8000 	str.w	r8, [r3]
 801401e:	e799      	b.n	8013f54 <_tzset_unlocked_r+0x34>
 8014020:	f7ec f8d6 	bl	80001d0 <strcmp>
 8014024:	2800      	cmp	r0, #0
 8014026:	d19b      	bne.n	8013f60 <_tzset_unlocked_r+0x40>
 8014028:	e794      	b.n	8013f54 <_tzset_unlocked_r+0x34>
 801402a:	4621      	mov	r1, r4
 801402c:	f7fe fa0e 	bl	801244c <strcpy>
 8014030:	e7a3      	b.n	8013f7a <_tzset_unlocked_r+0x5a>
 8014032:	2b2b      	cmp	r3, #43	; 0x2b
 8014034:	bf08      	it	eq
 8014036:	3701      	addeq	r7, #1
 8014038:	2401      	movs	r4, #1
 801403a:	e7b3      	b.n	8013fa4 <_tzset_unlocked_r+0x84>
 801403c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801403e:	f8c4 9004 	str.w	r9, [r4, #4]
 8014042:	18fc      	adds	r4, r7, r3
 8014044:	5cfb      	ldrb	r3, [r7, r3]
 8014046:	2b2d      	cmp	r3, #45	; 0x2d
 8014048:	f040 808b 	bne.w	8014162 <_tzset_unlocked_r+0x242>
 801404c:	3401      	adds	r4, #1
 801404e:	f04f 37ff 	mov.w	r7, #4294967295
 8014052:	2300      	movs	r3, #0
 8014054:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014058:	f8ad 301e 	strh.w	r3, [sp, #30]
 801405c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014060:	930a      	str	r3, [sp, #40]	; 0x28
 8014062:	e9cd a602 	strd	sl, r6, [sp, #8]
 8014066:	e9cd b600 	strd	fp, r6, [sp]
 801406a:	4967      	ldr	r1, [pc, #412]	; (8014208 <_tzset_unlocked_r+0x2e8>)
 801406c:	4633      	mov	r3, r6
 801406e:	aa07      	add	r2, sp, #28
 8014070:	4620      	mov	r0, r4
 8014072:	f001 ffe5 	bl	8016040 <siscanf>
 8014076:	2800      	cmp	r0, #0
 8014078:	dc78      	bgt.n	801416c <_tzset_unlocked_r+0x24c>
 801407a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801407c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8014080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014082:	652f      	str	r7, [r5, #80]	; 0x50
 8014084:	441c      	add	r4, r3
 8014086:	462f      	mov	r7, r5
 8014088:	f04f 0900 	mov.w	r9, #0
 801408c:	7823      	ldrb	r3, [r4, #0]
 801408e:	2b2c      	cmp	r3, #44	; 0x2c
 8014090:	bf08      	it	eq
 8014092:	3401      	addeq	r4, #1
 8014094:	f894 8000 	ldrb.w	r8, [r4]
 8014098:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801409c:	d178      	bne.n	8014190 <_tzset_unlocked_r+0x270>
 801409e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80140a2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80140a6:	ab09      	add	r3, sp, #36	; 0x24
 80140a8:	9300      	str	r3, [sp, #0]
 80140aa:	4958      	ldr	r1, [pc, #352]	; (801420c <_tzset_unlocked_r+0x2ec>)
 80140ac:	9603      	str	r6, [sp, #12]
 80140ae:	4633      	mov	r3, r6
 80140b0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80140b4:	4620      	mov	r0, r4
 80140b6:	f001 ffc3 	bl	8016040 <siscanf>
 80140ba:	2803      	cmp	r0, #3
 80140bc:	f47f af4a 	bne.w	8013f54 <_tzset_unlocked_r+0x34>
 80140c0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80140c4:	1e4b      	subs	r3, r1, #1
 80140c6:	2b0b      	cmp	r3, #11
 80140c8:	f63f af44 	bhi.w	8013f54 <_tzset_unlocked_r+0x34>
 80140cc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80140d0:	1e53      	subs	r3, r2, #1
 80140d2:	2b04      	cmp	r3, #4
 80140d4:	f63f af3e 	bhi.w	8013f54 <_tzset_unlocked_r+0x34>
 80140d8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80140dc:	2b06      	cmp	r3, #6
 80140de:	f63f af39 	bhi.w	8013f54 <_tzset_unlocked_r+0x34>
 80140e2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80140e6:	f887 8008 	strb.w	r8, [r7, #8]
 80140ea:	617b      	str	r3, [r7, #20]
 80140ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140ee:	eb04 0803 	add.w	r8, r4, r3
 80140f2:	2302      	movs	r3, #2
 80140f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80140f8:	2300      	movs	r3, #0
 80140fa:	f8ad 301e 	strh.w	r3, [sp, #30]
 80140fe:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014102:	930a      	str	r3, [sp, #40]	; 0x28
 8014104:	f898 3000 	ldrb.w	r3, [r8]
 8014108:	2b2f      	cmp	r3, #47	; 0x2f
 801410a:	d109      	bne.n	8014120 <_tzset_unlocked_r+0x200>
 801410c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8014110:	e9cd b600 	strd	fp, r6, [sp]
 8014114:	493e      	ldr	r1, [pc, #248]	; (8014210 <_tzset_unlocked_r+0x2f0>)
 8014116:	4633      	mov	r3, r6
 8014118:	aa07      	add	r2, sp, #28
 801411a:	4640      	mov	r0, r8
 801411c:	f001 ff90 	bl	8016040 <siscanf>
 8014120:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014124:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014128:	213c      	movs	r1, #60	; 0x3c
 801412a:	fb01 2203 	mla	r2, r1, r3, r2
 801412e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8014132:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014136:	fb01 2303 	mla	r3, r1, r3, r2
 801413a:	61bb      	str	r3, [r7, #24]
 801413c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801413e:	3728      	adds	r7, #40	; 0x28
 8014140:	4444      	add	r4, r8
 8014142:	f1b9 0f00 	cmp.w	r9, #0
 8014146:	d020      	beq.n	801418a <_tzset_unlocked_r+0x26a>
 8014148:	6868      	ldr	r0, [r5, #4]
 801414a:	f7ff fe2f 	bl	8013dac <__tzcalc_limits>
 801414e:	4b28      	ldr	r3, [pc, #160]	; (80141f0 <_tzset_unlocked_r+0x2d0>)
 8014150:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8014152:	601a      	str	r2, [r3, #0]
 8014154:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8014156:	1a9b      	subs	r3, r3, r2
 8014158:	4a27      	ldr	r2, [pc, #156]	; (80141f8 <_tzset_unlocked_r+0x2d8>)
 801415a:	bf18      	it	ne
 801415c:	2301      	movne	r3, #1
 801415e:	6013      	str	r3, [r2, #0]
 8014160:	e6f8      	b.n	8013f54 <_tzset_unlocked_r+0x34>
 8014162:	2b2b      	cmp	r3, #43	; 0x2b
 8014164:	bf08      	it	eq
 8014166:	3401      	addeq	r4, #1
 8014168:	2701      	movs	r7, #1
 801416a:	e772      	b.n	8014052 <_tzset_unlocked_r+0x132>
 801416c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014170:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014174:	213c      	movs	r1, #60	; 0x3c
 8014176:	fb01 2203 	mla	r2, r1, r3, r2
 801417a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801417e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014182:	fb01 2303 	mla	r3, r1, r3, r2
 8014186:	435f      	muls	r7, r3
 8014188:	e77a      	b.n	8014080 <_tzset_unlocked_r+0x160>
 801418a:	f04f 0901 	mov.w	r9, #1
 801418e:	e77d      	b.n	801408c <_tzset_unlocked_r+0x16c>
 8014190:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8014194:	bf06      	itte	eq
 8014196:	3401      	addeq	r4, #1
 8014198:	4643      	moveq	r3, r8
 801419a:	2344      	movne	r3, #68	; 0x44
 801419c:	220a      	movs	r2, #10
 801419e:	a90b      	add	r1, sp, #44	; 0x2c
 80141a0:	4620      	mov	r0, r4
 80141a2:	9305      	str	r3, [sp, #20]
 80141a4:	f7ff fdf8 	bl	8013d98 <strtoul>
 80141a8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80141ac:	9b05      	ldr	r3, [sp, #20]
 80141ae:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80141b2:	45a0      	cmp	r8, r4
 80141b4:	d114      	bne.n	80141e0 <_tzset_unlocked_r+0x2c0>
 80141b6:	234d      	movs	r3, #77	; 0x4d
 80141b8:	f1b9 0f00 	cmp.w	r9, #0
 80141bc:	d107      	bne.n	80141ce <_tzset_unlocked_r+0x2ae>
 80141be:	722b      	strb	r3, [r5, #8]
 80141c0:	2103      	movs	r1, #3
 80141c2:	2302      	movs	r3, #2
 80141c4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80141c8:	f8c5 9014 	str.w	r9, [r5, #20]
 80141cc:	e791      	b.n	80140f2 <_tzset_unlocked_r+0x1d2>
 80141ce:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80141d2:	220b      	movs	r2, #11
 80141d4:	2301      	movs	r3, #1
 80141d6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80141da:	2300      	movs	r3, #0
 80141dc:	63eb      	str	r3, [r5, #60]	; 0x3c
 80141de:	e788      	b.n	80140f2 <_tzset_unlocked_r+0x1d2>
 80141e0:	b280      	uxth	r0, r0
 80141e2:	723b      	strb	r3, [r7, #8]
 80141e4:	6178      	str	r0, [r7, #20]
 80141e6:	e784      	b.n	80140f2 <_tzset_unlocked_r+0x1d2>
 80141e8:	08021a08 	.word	0x08021a08
 80141ec:	20010188 	.word	0x20010188
 80141f0:	20010190 	.word	0x20010190
 80141f4:	08021a0b 	.word	0x08021a0b
 80141f8:	2001018c 	.word	0x2001018c
 80141fc:	20000118 	.word	0x20000118
 8014200:	2001017b 	.word	0x2001017b
 8014204:	08021a0f 	.word	0x08021a0f
 8014208:	08021a32 	.word	0x08021a32
 801420c:	08021a1e 	.word	0x08021a1e
 8014210:	08021a31 	.word	0x08021a31
 8014214:	20010170 	.word	0x20010170

08014218 <_write_r>:
 8014218:	b538      	push	{r3, r4, r5, lr}
 801421a:	4d07      	ldr	r5, [pc, #28]	; (8014238 <_write_r+0x20>)
 801421c:	4604      	mov	r4, r0
 801421e:	4608      	mov	r0, r1
 8014220:	4611      	mov	r1, r2
 8014222:	2200      	movs	r2, #0
 8014224:	602a      	str	r2, [r5, #0]
 8014226:	461a      	mov	r2, r3
 8014228:	f7f0 fa47 	bl	80046ba <_write>
 801422c:	1c43      	adds	r3, r0, #1
 801422e:	d102      	bne.n	8014236 <_write_r+0x1e>
 8014230:	682b      	ldr	r3, [r5, #0]
 8014232:	b103      	cbz	r3, 8014236 <_write_r+0x1e>
 8014234:	6023      	str	r3, [r4, #0]
 8014236:	bd38      	pop	{r3, r4, r5, pc}
 8014238:	20013088 	.word	0x20013088

0801423c <abs>:
 801423c:	2800      	cmp	r0, #0
 801423e:	bfb8      	it	lt
 8014240:	4240      	neglt	r0, r0
 8014242:	4770      	bx	lr

08014244 <__assert_func>:
 8014244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014246:	4614      	mov	r4, r2
 8014248:	461a      	mov	r2, r3
 801424a:	4b09      	ldr	r3, [pc, #36]	; (8014270 <__assert_func+0x2c>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	4605      	mov	r5, r0
 8014250:	68d8      	ldr	r0, [r3, #12]
 8014252:	b14c      	cbz	r4, 8014268 <__assert_func+0x24>
 8014254:	4b07      	ldr	r3, [pc, #28]	; (8014274 <__assert_func+0x30>)
 8014256:	9100      	str	r1, [sp, #0]
 8014258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801425c:	4906      	ldr	r1, [pc, #24]	; (8014278 <__assert_func+0x34>)
 801425e:	462b      	mov	r3, r5
 8014260:	f000 f8e0 	bl	8014424 <fiprintf>
 8014264:	f001 fff8 	bl	8016258 <abort>
 8014268:	4b04      	ldr	r3, [pc, #16]	; (801427c <__assert_func+0x38>)
 801426a:	461c      	mov	r4, r3
 801426c:	e7f3      	b.n	8014256 <__assert_func+0x12>
 801426e:	bf00      	nop
 8014270:	200000b4 	.word	0x200000b4
 8014274:	08021a44 	.word	0x08021a44
 8014278:	08021a51 	.word	0x08021a51
 801427c:	08021a7f 	.word	0x08021a7f

08014280 <_close_r>:
 8014280:	b538      	push	{r3, r4, r5, lr}
 8014282:	4d06      	ldr	r5, [pc, #24]	; (801429c <_close_r+0x1c>)
 8014284:	2300      	movs	r3, #0
 8014286:	4604      	mov	r4, r0
 8014288:	4608      	mov	r0, r1
 801428a:	602b      	str	r3, [r5, #0]
 801428c:	f7f0 fa31 	bl	80046f2 <_close>
 8014290:	1c43      	adds	r3, r0, #1
 8014292:	d102      	bne.n	801429a <_close_r+0x1a>
 8014294:	682b      	ldr	r3, [r5, #0]
 8014296:	b103      	cbz	r3, 801429a <_close_r+0x1a>
 8014298:	6023      	str	r3, [r4, #0]
 801429a:	bd38      	pop	{r3, r4, r5, pc}
 801429c:	20013088 	.word	0x20013088

080142a0 <__sflush_r>:
 80142a0:	898a      	ldrh	r2, [r1, #12]
 80142a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142a6:	4605      	mov	r5, r0
 80142a8:	0710      	lsls	r0, r2, #28
 80142aa:	460c      	mov	r4, r1
 80142ac:	d458      	bmi.n	8014360 <__sflush_r+0xc0>
 80142ae:	684b      	ldr	r3, [r1, #4]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	dc05      	bgt.n	80142c0 <__sflush_r+0x20>
 80142b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	dc02      	bgt.n	80142c0 <__sflush_r+0x20>
 80142ba:	2000      	movs	r0, #0
 80142bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142c2:	2e00      	cmp	r6, #0
 80142c4:	d0f9      	beq.n	80142ba <__sflush_r+0x1a>
 80142c6:	2300      	movs	r3, #0
 80142c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80142cc:	682f      	ldr	r7, [r5, #0]
 80142ce:	602b      	str	r3, [r5, #0]
 80142d0:	d032      	beq.n	8014338 <__sflush_r+0x98>
 80142d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80142d4:	89a3      	ldrh	r3, [r4, #12]
 80142d6:	075a      	lsls	r2, r3, #29
 80142d8:	d505      	bpl.n	80142e6 <__sflush_r+0x46>
 80142da:	6863      	ldr	r3, [r4, #4]
 80142dc:	1ac0      	subs	r0, r0, r3
 80142de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80142e0:	b10b      	cbz	r3, 80142e6 <__sflush_r+0x46>
 80142e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80142e4:	1ac0      	subs	r0, r0, r3
 80142e6:	2300      	movs	r3, #0
 80142e8:	4602      	mov	r2, r0
 80142ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142ec:	6a21      	ldr	r1, [r4, #32]
 80142ee:	4628      	mov	r0, r5
 80142f0:	47b0      	blx	r6
 80142f2:	1c43      	adds	r3, r0, #1
 80142f4:	89a3      	ldrh	r3, [r4, #12]
 80142f6:	d106      	bne.n	8014306 <__sflush_r+0x66>
 80142f8:	6829      	ldr	r1, [r5, #0]
 80142fa:	291d      	cmp	r1, #29
 80142fc:	d82c      	bhi.n	8014358 <__sflush_r+0xb8>
 80142fe:	4a2a      	ldr	r2, [pc, #168]	; (80143a8 <__sflush_r+0x108>)
 8014300:	40ca      	lsrs	r2, r1
 8014302:	07d6      	lsls	r6, r2, #31
 8014304:	d528      	bpl.n	8014358 <__sflush_r+0xb8>
 8014306:	2200      	movs	r2, #0
 8014308:	6062      	str	r2, [r4, #4]
 801430a:	04d9      	lsls	r1, r3, #19
 801430c:	6922      	ldr	r2, [r4, #16]
 801430e:	6022      	str	r2, [r4, #0]
 8014310:	d504      	bpl.n	801431c <__sflush_r+0x7c>
 8014312:	1c42      	adds	r2, r0, #1
 8014314:	d101      	bne.n	801431a <__sflush_r+0x7a>
 8014316:	682b      	ldr	r3, [r5, #0]
 8014318:	b903      	cbnz	r3, 801431c <__sflush_r+0x7c>
 801431a:	6560      	str	r0, [r4, #84]	; 0x54
 801431c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801431e:	602f      	str	r7, [r5, #0]
 8014320:	2900      	cmp	r1, #0
 8014322:	d0ca      	beq.n	80142ba <__sflush_r+0x1a>
 8014324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014328:	4299      	cmp	r1, r3
 801432a:	d002      	beq.n	8014332 <__sflush_r+0x92>
 801432c:	4628      	mov	r0, r5
 801432e:	f7fd fef5 	bl	801211c <_free_r>
 8014332:	2000      	movs	r0, #0
 8014334:	6360      	str	r0, [r4, #52]	; 0x34
 8014336:	e7c1      	b.n	80142bc <__sflush_r+0x1c>
 8014338:	6a21      	ldr	r1, [r4, #32]
 801433a:	2301      	movs	r3, #1
 801433c:	4628      	mov	r0, r5
 801433e:	47b0      	blx	r6
 8014340:	1c41      	adds	r1, r0, #1
 8014342:	d1c7      	bne.n	80142d4 <__sflush_r+0x34>
 8014344:	682b      	ldr	r3, [r5, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d0c4      	beq.n	80142d4 <__sflush_r+0x34>
 801434a:	2b1d      	cmp	r3, #29
 801434c:	d001      	beq.n	8014352 <__sflush_r+0xb2>
 801434e:	2b16      	cmp	r3, #22
 8014350:	d101      	bne.n	8014356 <__sflush_r+0xb6>
 8014352:	602f      	str	r7, [r5, #0]
 8014354:	e7b1      	b.n	80142ba <__sflush_r+0x1a>
 8014356:	89a3      	ldrh	r3, [r4, #12]
 8014358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801435c:	81a3      	strh	r3, [r4, #12]
 801435e:	e7ad      	b.n	80142bc <__sflush_r+0x1c>
 8014360:	690f      	ldr	r7, [r1, #16]
 8014362:	2f00      	cmp	r7, #0
 8014364:	d0a9      	beq.n	80142ba <__sflush_r+0x1a>
 8014366:	0793      	lsls	r3, r2, #30
 8014368:	680e      	ldr	r6, [r1, #0]
 801436a:	bf08      	it	eq
 801436c:	694b      	ldreq	r3, [r1, #20]
 801436e:	600f      	str	r7, [r1, #0]
 8014370:	bf18      	it	ne
 8014372:	2300      	movne	r3, #0
 8014374:	eba6 0807 	sub.w	r8, r6, r7
 8014378:	608b      	str	r3, [r1, #8]
 801437a:	f1b8 0f00 	cmp.w	r8, #0
 801437e:	dd9c      	ble.n	80142ba <__sflush_r+0x1a>
 8014380:	6a21      	ldr	r1, [r4, #32]
 8014382:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014384:	4643      	mov	r3, r8
 8014386:	463a      	mov	r2, r7
 8014388:	4628      	mov	r0, r5
 801438a:	47b0      	blx	r6
 801438c:	2800      	cmp	r0, #0
 801438e:	dc06      	bgt.n	801439e <__sflush_r+0xfe>
 8014390:	89a3      	ldrh	r3, [r4, #12]
 8014392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014396:	81a3      	strh	r3, [r4, #12]
 8014398:	f04f 30ff 	mov.w	r0, #4294967295
 801439c:	e78e      	b.n	80142bc <__sflush_r+0x1c>
 801439e:	4407      	add	r7, r0
 80143a0:	eba8 0800 	sub.w	r8, r8, r0
 80143a4:	e7e9      	b.n	801437a <__sflush_r+0xda>
 80143a6:	bf00      	nop
 80143a8:	20400001 	.word	0x20400001

080143ac <_fflush_r>:
 80143ac:	b538      	push	{r3, r4, r5, lr}
 80143ae:	690b      	ldr	r3, [r1, #16]
 80143b0:	4605      	mov	r5, r0
 80143b2:	460c      	mov	r4, r1
 80143b4:	b913      	cbnz	r3, 80143bc <_fflush_r+0x10>
 80143b6:	2500      	movs	r5, #0
 80143b8:	4628      	mov	r0, r5
 80143ba:	bd38      	pop	{r3, r4, r5, pc}
 80143bc:	b118      	cbz	r0, 80143c6 <_fflush_r+0x1a>
 80143be:	6983      	ldr	r3, [r0, #24]
 80143c0:	b90b      	cbnz	r3, 80143c6 <_fflush_r+0x1a>
 80143c2:	f7fd fca9 	bl	8011d18 <__sinit>
 80143c6:	4b14      	ldr	r3, [pc, #80]	; (8014418 <_fflush_r+0x6c>)
 80143c8:	429c      	cmp	r4, r3
 80143ca:	d11b      	bne.n	8014404 <_fflush_r+0x58>
 80143cc:	686c      	ldr	r4, [r5, #4]
 80143ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d0ef      	beq.n	80143b6 <_fflush_r+0xa>
 80143d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80143d8:	07d0      	lsls	r0, r2, #31
 80143da:	d404      	bmi.n	80143e6 <_fflush_r+0x3a>
 80143dc:	0599      	lsls	r1, r3, #22
 80143de:	d402      	bmi.n	80143e6 <_fflush_r+0x3a>
 80143e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143e2:	f7fd fe71 	bl	80120c8 <__retarget_lock_acquire_recursive>
 80143e6:	4628      	mov	r0, r5
 80143e8:	4621      	mov	r1, r4
 80143ea:	f7ff ff59 	bl	80142a0 <__sflush_r>
 80143ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80143f0:	07da      	lsls	r2, r3, #31
 80143f2:	4605      	mov	r5, r0
 80143f4:	d4e0      	bmi.n	80143b8 <_fflush_r+0xc>
 80143f6:	89a3      	ldrh	r3, [r4, #12]
 80143f8:	059b      	lsls	r3, r3, #22
 80143fa:	d4dd      	bmi.n	80143b8 <_fflush_r+0xc>
 80143fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143fe:	f7fd fe65 	bl	80120cc <__retarget_lock_release_recursive>
 8014402:	e7d9      	b.n	80143b8 <_fflush_r+0xc>
 8014404:	4b05      	ldr	r3, [pc, #20]	; (801441c <_fflush_r+0x70>)
 8014406:	429c      	cmp	r4, r3
 8014408:	d101      	bne.n	801440e <_fflush_r+0x62>
 801440a:	68ac      	ldr	r4, [r5, #8]
 801440c:	e7df      	b.n	80143ce <_fflush_r+0x22>
 801440e:	4b04      	ldr	r3, [pc, #16]	; (8014420 <_fflush_r+0x74>)
 8014410:	429c      	cmp	r4, r3
 8014412:	bf08      	it	eq
 8014414:	68ec      	ldreq	r4, [r5, #12]
 8014416:	e7da      	b.n	80143ce <_fflush_r+0x22>
 8014418:	08021610 	.word	0x08021610
 801441c:	08021630 	.word	0x08021630
 8014420:	080215f0 	.word	0x080215f0

08014424 <fiprintf>:
 8014424:	b40e      	push	{r1, r2, r3}
 8014426:	b503      	push	{r0, r1, lr}
 8014428:	4601      	mov	r1, r0
 801442a:	ab03      	add	r3, sp, #12
 801442c:	4805      	ldr	r0, [pc, #20]	; (8014444 <fiprintf+0x20>)
 801442e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014432:	6800      	ldr	r0, [r0, #0]
 8014434:	9301      	str	r3, [sp, #4]
 8014436:	f001 faf1 	bl	8015a1c <_vfiprintf_r>
 801443a:	b002      	add	sp, #8
 801443c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014440:	b003      	add	sp, #12
 8014442:	4770      	bx	lr
 8014444:	200000b4 	.word	0x200000b4

08014448 <rshift>:
 8014448:	6903      	ldr	r3, [r0, #16]
 801444a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801444e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014452:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014456:	f100 0414 	add.w	r4, r0, #20
 801445a:	dd45      	ble.n	80144e8 <rshift+0xa0>
 801445c:	f011 011f 	ands.w	r1, r1, #31
 8014460:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014464:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014468:	d10c      	bne.n	8014484 <rshift+0x3c>
 801446a:	f100 0710 	add.w	r7, r0, #16
 801446e:	4629      	mov	r1, r5
 8014470:	42b1      	cmp	r1, r6
 8014472:	d334      	bcc.n	80144de <rshift+0x96>
 8014474:	1a9b      	subs	r3, r3, r2
 8014476:	009b      	lsls	r3, r3, #2
 8014478:	1eea      	subs	r2, r5, #3
 801447a:	4296      	cmp	r6, r2
 801447c:	bf38      	it	cc
 801447e:	2300      	movcc	r3, #0
 8014480:	4423      	add	r3, r4
 8014482:	e015      	b.n	80144b0 <rshift+0x68>
 8014484:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014488:	f1c1 0820 	rsb	r8, r1, #32
 801448c:	40cf      	lsrs	r7, r1
 801448e:	f105 0e04 	add.w	lr, r5, #4
 8014492:	46a1      	mov	r9, r4
 8014494:	4576      	cmp	r6, lr
 8014496:	46f4      	mov	ip, lr
 8014498:	d815      	bhi.n	80144c6 <rshift+0x7e>
 801449a:	1a9b      	subs	r3, r3, r2
 801449c:	009a      	lsls	r2, r3, #2
 801449e:	3a04      	subs	r2, #4
 80144a0:	3501      	adds	r5, #1
 80144a2:	42ae      	cmp	r6, r5
 80144a4:	bf38      	it	cc
 80144a6:	2200      	movcc	r2, #0
 80144a8:	18a3      	adds	r3, r4, r2
 80144aa:	50a7      	str	r7, [r4, r2]
 80144ac:	b107      	cbz	r7, 80144b0 <rshift+0x68>
 80144ae:	3304      	adds	r3, #4
 80144b0:	1b1a      	subs	r2, r3, r4
 80144b2:	42a3      	cmp	r3, r4
 80144b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80144b8:	bf08      	it	eq
 80144ba:	2300      	moveq	r3, #0
 80144bc:	6102      	str	r2, [r0, #16]
 80144be:	bf08      	it	eq
 80144c0:	6143      	streq	r3, [r0, #20]
 80144c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144c6:	f8dc c000 	ldr.w	ip, [ip]
 80144ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80144ce:	ea4c 0707 	orr.w	r7, ip, r7
 80144d2:	f849 7b04 	str.w	r7, [r9], #4
 80144d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80144da:	40cf      	lsrs	r7, r1
 80144dc:	e7da      	b.n	8014494 <rshift+0x4c>
 80144de:	f851 cb04 	ldr.w	ip, [r1], #4
 80144e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80144e6:	e7c3      	b.n	8014470 <rshift+0x28>
 80144e8:	4623      	mov	r3, r4
 80144ea:	e7e1      	b.n	80144b0 <rshift+0x68>

080144ec <__hexdig_fun>:
 80144ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80144f0:	2b09      	cmp	r3, #9
 80144f2:	d802      	bhi.n	80144fa <__hexdig_fun+0xe>
 80144f4:	3820      	subs	r0, #32
 80144f6:	b2c0      	uxtb	r0, r0
 80144f8:	4770      	bx	lr
 80144fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80144fe:	2b05      	cmp	r3, #5
 8014500:	d801      	bhi.n	8014506 <__hexdig_fun+0x1a>
 8014502:	3847      	subs	r0, #71	; 0x47
 8014504:	e7f7      	b.n	80144f6 <__hexdig_fun+0xa>
 8014506:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801450a:	2b05      	cmp	r3, #5
 801450c:	d801      	bhi.n	8014512 <__hexdig_fun+0x26>
 801450e:	3827      	subs	r0, #39	; 0x27
 8014510:	e7f1      	b.n	80144f6 <__hexdig_fun+0xa>
 8014512:	2000      	movs	r0, #0
 8014514:	4770      	bx	lr
	...

08014518 <__gethex>:
 8014518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801451c:	ed2d 8b02 	vpush	{d8}
 8014520:	b089      	sub	sp, #36	; 0x24
 8014522:	ee08 0a10 	vmov	s16, r0
 8014526:	9304      	str	r3, [sp, #16]
 8014528:	4bbc      	ldr	r3, [pc, #752]	; (801481c <__gethex+0x304>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	9301      	str	r3, [sp, #4]
 801452e:	4618      	mov	r0, r3
 8014530:	468b      	mov	fp, r1
 8014532:	4690      	mov	r8, r2
 8014534:	f7eb fe56 	bl	80001e4 <strlen>
 8014538:	9b01      	ldr	r3, [sp, #4]
 801453a:	f8db 2000 	ldr.w	r2, [fp]
 801453e:	4403      	add	r3, r0
 8014540:	4682      	mov	sl, r0
 8014542:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014546:	9305      	str	r3, [sp, #20]
 8014548:	1c93      	adds	r3, r2, #2
 801454a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801454e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014552:	32fe      	adds	r2, #254	; 0xfe
 8014554:	18d1      	adds	r1, r2, r3
 8014556:	461f      	mov	r7, r3
 8014558:	f813 0b01 	ldrb.w	r0, [r3], #1
 801455c:	9100      	str	r1, [sp, #0]
 801455e:	2830      	cmp	r0, #48	; 0x30
 8014560:	d0f8      	beq.n	8014554 <__gethex+0x3c>
 8014562:	f7ff ffc3 	bl	80144ec <__hexdig_fun>
 8014566:	4604      	mov	r4, r0
 8014568:	2800      	cmp	r0, #0
 801456a:	d13a      	bne.n	80145e2 <__gethex+0xca>
 801456c:	9901      	ldr	r1, [sp, #4]
 801456e:	4652      	mov	r2, sl
 8014570:	4638      	mov	r0, r7
 8014572:	f001 fd91 	bl	8016098 <strncmp>
 8014576:	4605      	mov	r5, r0
 8014578:	2800      	cmp	r0, #0
 801457a:	d168      	bne.n	801464e <__gethex+0x136>
 801457c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014580:	eb07 060a 	add.w	r6, r7, sl
 8014584:	f7ff ffb2 	bl	80144ec <__hexdig_fun>
 8014588:	2800      	cmp	r0, #0
 801458a:	d062      	beq.n	8014652 <__gethex+0x13a>
 801458c:	4633      	mov	r3, r6
 801458e:	7818      	ldrb	r0, [r3, #0]
 8014590:	2830      	cmp	r0, #48	; 0x30
 8014592:	461f      	mov	r7, r3
 8014594:	f103 0301 	add.w	r3, r3, #1
 8014598:	d0f9      	beq.n	801458e <__gethex+0x76>
 801459a:	f7ff ffa7 	bl	80144ec <__hexdig_fun>
 801459e:	2301      	movs	r3, #1
 80145a0:	fab0 f480 	clz	r4, r0
 80145a4:	0964      	lsrs	r4, r4, #5
 80145a6:	4635      	mov	r5, r6
 80145a8:	9300      	str	r3, [sp, #0]
 80145aa:	463a      	mov	r2, r7
 80145ac:	4616      	mov	r6, r2
 80145ae:	3201      	adds	r2, #1
 80145b0:	7830      	ldrb	r0, [r6, #0]
 80145b2:	f7ff ff9b 	bl	80144ec <__hexdig_fun>
 80145b6:	2800      	cmp	r0, #0
 80145b8:	d1f8      	bne.n	80145ac <__gethex+0x94>
 80145ba:	9901      	ldr	r1, [sp, #4]
 80145bc:	4652      	mov	r2, sl
 80145be:	4630      	mov	r0, r6
 80145c0:	f001 fd6a 	bl	8016098 <strncmp>
 80145c4:	b980      	cbnz	r0, 80145e8 <__gethex+0xd0>
 80145c6:	b94d      	cbnz	r5, 80145dc <__gethex+0xc4>
 80145c8:	eb06 050a 	add.w	r5, r6, sl
 80145cc:	462a      	mov	r2, r5
 80145ce:	4616      	mov	r6, r2
 80145d0:	3201      	adds	r2, #1
 80145d2:	7830      	ldrb	r0, [r6, #0]
 80145d4:	f7ff ff8a 	bl	80144ec <__hexdig_fun>
 80145d8:	2800      	cmp	r0, #0
 80145da:	d1f8      	bne.n	80145ce <__gethex+0xb6>
 80145dc:	1bad      	subs	r5, r5, r6
 80145de:	00ad      	lsls	r5, r5, #2
 80145e0:	e004      	b.n	80145ec <__gethex+0xd4>
 80145e2:	2400      	movs	r4, #0
 80145e4:	4625      	mov	r5, r4
 80145e6:	e7e0      	b.n	80145aa <__gethex+0x92>
 80145e8:	2d00      	cmp	r5, #0
 80145ea:	d1f7      	bne.n	80145dc <__gethex+0xc4>
 80145ec:	7833      	ldrb	r3, [r6, #0]
 80145ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80145f2:	2b50      	cmp	r3, #80	; 0x50
 80145f4:	d13b      	bne.n	801466e <__gethex+0x156>
 80145f6:	7873      	ldrb	r3, [r6, #1]
 80145f8:	2b2b      	cmp	r3, #43	; 0x2b
 80145fa:	d02c      	beq.n	8014656 <__gethex+0x13e>
 80145fc:	2b2d      	cmp	r3, #45	; 0x2d
 80145fe:	d02e      	beq.n	801465e <__gethex+0x146>
 8014600:	1c71      	adds	r1, r6, #1
 8014602:	f04f 0900 	mov.w	r9, #0
 8014606:	7808      	ldrb	r0, [r1, #0]
 8014608:	f7ff ff70 	bl	80144ec <__hexdig_fun>
 801460c:	1e43      	subs	r3, r0, #1
 801460e:	b2db      	uxtb	r3, r3
 8014610:	2b18      	cmp	r3, #24
 8014612:	d82c      	bhi.n	801466e <__gethex+0x156>
 8014614:	f1a0 0210 	sub.w	r2, r0, #16
 8014618:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801461c:	f7ff ff66 	bl	80144ec <__hexdig_fun>
 8014620:	1e43      	subs	r3, r0, #1
 8014622:	b2db      	uxtb	r3, r3
 8014624:	2b18      	cmp	r3, #24
 8014626:	d91d      	bls.n	8014664 <__gethex+0x14c>
 8014628:	f1b9 0f00 	cmp.w	r9, #0
 801462c:	d000      	beq.n	8014630 <__gethex+0x118>
 801462e:	4252      	negs	r2, r2
 8014630:	4415      	add	r5, r2
 8014632:	f8cb 1000 	str.w	r1, [fp]
 8014636:	b1e4      	cbz	r4, 8014672 <__gethex+0x15a>
 8014638:	9b00      	ldr	r3, [sp, #0]
 801463a:	2b00      	cmp	r3, #0
 801463c:	bf14      	ite	ne
 801463e:	2700      	movne	r7, #0
 8014640:	2706      	moveq	r7, #6
 8014642:	4638      	mov	r0, r7
 8014644:	b009      	add	sp, #36	; 0x24
 8014646:	ecbd 8b02 	vpop	{d8}
 801464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801464e:	463e      	mov	r6, r7
 8014650:	4625      	mov	r5, r4
 8014652:	2401      	movs	r4, #1
 8014654:	e7ca      	b.n	80145ec <__gethex+0xd4>
 8014656:	f04f 0900 	mov.w	r9, #0
 801465a:	1cb1      	adds	r1, r6, #2
 801465c:	e7d3      	b.n	8014606 <__gethex+0xee>
 801465e:	f04f 0901 	mov.w	r9, #1
 8014662:	e7fa      	b.n	801465a <__gethex+0x142>
 8014664:	230a      	movs	r3, #10
 8014666:	fb03 0202 	mla	r2, r3, r2, r0
 801466a:	3a10      	subs	r2, #16
 801466c:	e7d4      	b.n	8014618 <__gethex+0x100>
 801466e:	4631      	mov	r1, r6
 8014670:	e7df      	b.n	8014632 <__gethex+0x11a>
 8014672:	1bf3      	subs	r3, r6, r7
 8014674:	3b01      	subs	r3, #1
 8014676:	4621      	mov	r1, r4
 8014678:	2b07      	cmp	r3, #7
 801467a:	dc0b      	bgt.n	8014694 <__gethex+0x17c>
 801467c:	ee18 0a10 	vmov	r0, s16
 8014680:	f000 fb7c 	bl	8014d7c <_Balloc>
 8014684:	4604      	mov	r4, r0
 8014686:	b940      	cbnz	r0, 801469a <__gethex+0x182>
 8014688:	4b65      	ldr	r3, [pc, #404]	; (8014820 <__gethex+0x308>)
 801468a:	4602      	mov	r2, r0
 801468c:	21de      	movs	r1, #222	; 0xde
 801468e:	4865      	ldr	r0, [pc, #404]	; (8014824 <__gethex+0x30c>)
 8014690:	f7ff fdd8 	bl	8014244 <__assert_func>
 8014694:	3101      	adds	r1, #1
 8014696:	105b      	asrs	r3, r3, #1
 8014698:	e7ee      	b.n	8014678 <__gethex+0x160>
 801469a:	f100 0914 	add.w	r9, r0, #20
 801469e:	f04f 0b00 	mov.w	fp, #0
 80146a2:	f1ca 0301 	rsb	r3, sl, #1
 80146a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80146aa:	f8cd b000 	str.w	fp, [sp]
 80146ae:	9306      	str	r3, [sp, #24]
 80146b0:	42b7      	cmp	r7, r6
 80146b2:	d340      	bcc.n	8014736 <__gethex+0x21e>
 80146b4:	9802      	ldr	r0, [sp, #8]
 80146b6:	9b00      	ldr	r3, [sp, #0]
 80146b8:	f840 3b04 	str.w	r3, [r0], #4
 80146bc:	eba0 0009 	sub.w	r0, r0, r9
 80146c0:	1080      	asrs	r0, r0, #2
 80146c2:	0146      	lsls	r6, r0, #5
 80146c4:	6120      	str	r0, [r4, #16]
 80146c6:	4618      	mov	r0, r3
 80146c8:	f000 fc4e 	bl	8014f68 <__hi0bits>
 80146cc:	1a30      	subs	r0, r6, r0
 80146ce:	f8d8 6000 	ldr.w	r6, [r8]
 80146d2:	42b0      	cmp	r0, r6
 80146d4:	dd63      	ble.n	801479e <__gethex+0x286>
 80146d6:	1b87      	subs	r7, r0, r6
 80146d8:	4639      	mov	r1, r7
 80146da:	4620      	mov	r0, r4
 80146dc:	f000 ffe8 	bl	80156b0 <__any_on>
 80146e0:	4682      	mov	sl, r0
 80146e2:	b1a8      	cbz	r0, 8014710 <__gethex+0x1f8>
 80146e4:	1e7b      	subs	r3, r7, #1
 80146e6:	1159      	asrs	r1, r3, #5
 80146e8:	f003 021f 	and.w	r2, r3, #31
 80146ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80146f0:	f04f 0a01 	mov.w	sl, #1
 80146f4:	fa0a f202 	lsl.w	r2, sl, r2
 80146f8:	420a      	tst	r2, r1
 80146fa:	d009      	beq.n	8014710 <__gethex+0x1f8>
 80146fc:	4553      	cmp	r3, sl
 80146fe:	dd05      	ble.n	801470c <__gethex+0x1f4>
 8014700:	1eb9      	subs	r1, r7, #2
 8014702:	4620      	mov	r0, r4
 8014704:	f000 ffd4 	bl	80156b0 <__any_on>
 8014708:	2800      	cmp	r0, #0
 801470a:	d145      	bne.n	8014798 <__gethex+0x280>
 801470c:	f04f 0a02 	mov.w	sl, #2
 8014710:	4639      	mov	r1, r7
 8014712:	4620      	mov	r0, r4
 8014714:	f7ff fe98 	bl	8014448 <rshift>
 8014718:	443d      	add	r5, r7
 801471a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801471e:	42ab      	cmp	r3, r5
 8014720:	da4c      	bge.n	80147bc <__gethex+0x2a4>
 8014722:	ee18 0a10 	vmov	r0, s16
 8014726:	4621      	mov	r1, r4
 8014728:	f000 fb68 	bl	8014dfc <_Bfree>
 801472c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801472e:	2300      	movs	r3, #0
 8014730:	6013      	str	r3, [r2, #0]
 8014732:	27a3      	movs	r7, #163	; 0xa3
 8014734:	e785      	b.n	8014642 <__gethex+0x12a>
 8014736:	1e73      	subs	r3, r6, #1
 8014738:	9a05      	ldr	r2, [sp, #20]
 801473a:	9303      	str	r3, [sp, #12]
 801473c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014740:	4293      	cmp	r3, r2
 8014742:	d019      	beq.n	8014778 <__gethex+0x260>
 8014744:	f1bb 0f20 	cmp.w	fp, #32
 8014748:	d107      	bne.n	801475a <__gethex+0x242>
 801474a:	9b02      	ldr	r3, [sp, #8]
 801474c:	9a00      	ldr	r2, [sp, #0]
 801474e:	f843 2b04 	str.w	r2, [r3], #4
 8014752:	9302      	str	r3, [sp, #8]
 8014754:	2300      	movs	r3, #0
 8014756:	9300      	str	r3, [sp, #0]
 8014758:	469b      	mov	fp, r3
 801475a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801475e:	f7ff fec5 	bl	80144ec <__hexdig_fun>
 8014762:	9b00      	ldr	r3, [sp, #0]
 8014764:	f000 000f 	and.w	r0, r0, #15
 8014768:	fa00 f00b 	lsl.w	r0, r0, fp
 801476c:	4303      	orrs	r3, r0
 801476e:	9300      	str	r3, [sp, #0]
 8014770:	f10b 0b04 	add.w	fp, fp, #4
 8014774:	9b03      	ldr	r3, [sp, #12]
 8014776:	e00d      	b.n	8014794 <__gethex+0x27c>
 8014778:	9b03      	ldr	r3, [sp, #12]
 801477a:	9a06      	ldr	r2, [sp, #24]
 801477c:	4413      	add	r3, r2
 801477e:	42bb      	cmp	r3, r7
 8014780:	d3e0      	bcc.n	8014744 <__gethex+0x22c>
 8014782:	4618      	mov	r0, r3
 8014784:	9901      	ldr	r1, [sp, #4]
 8014786:	9307      	str	r3, [sp, #28]
 8014788:	4652      	mov	r2, sl
 801478a:	f001 fc85 	bl	8016098 <strncmp>
 801478e:	9b07      	ldr	r3, [sp, #28]
 8014790:	2800      	cmp	r0, #0
 8014792:	d1d7      	bne.n	8014744 <__gethex+0x22c>
 8014794:	461e      	mov	r6, r3
 8014796:	e78b      	b.n	80146b0 <__gethex+0x198>
 8014798:	f04f 0a03 	mov.w	sl, #3
 801479c:	e7b8      	b.n	8014710 <__gethex+0x1f8>
 801479e:	da0a      	bge.n	80147b6 <__gethex+0x29e>
 80147a0:	1a37      	subs	r7, r6, r0
 80147a2:	4621      	mov	r1, r4
 80147a4:	ee18 0a10 	vmov	r0, s16
 80147a8:	463a      	mov	r2, r7
 80147aa:	f000 fd43 	bl	8015234 <__lshift>
 80147ae:	1bed      	subs	r5, r5, r7
 80147b0:	4604      	mov	r4, r0
 80147b2:	f100 0914 	add.w	r9, r0, #20
 80147b6:	f04f 0a00 	mov.w	sl, #0
 80147ba:	e7ae      	b.n	801471a <__gethex+0x202>
 80147bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80147c0:	42a8      	cmp	r0, r5
 80147c2:	dd72      	ble.n	80148aa <__gethex+0x392>
 80147c4:	1b45      	subs	r5, r0, r5
 80147c6:	42ae      	cmp	r6, r5
 80147c8:	dc36      	bgt.n	8014838 <__gethex+0x320>
 80147ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80147ce:	2b02      	cmp	r3, #2
 80147d0:	d02a      	beq.n	8014828 <__gethex+0x310>
 80147d2:	2b03      	cmp	r3, #3
 80147d4:	d02c      	beq.n	8014830 <__gethex+0x318>
 80147d6:	2b01      	cmp	r3, #1
 80147d8:	d115      	bne.n	8014806 <__gethex+0x2ee>
 80147da:	42ae      	cmp	r6, r5
 80147dc:	d113      	bne.n	8014806 <__gethex+0x2ee>
 80147de:	2e01      	cmp	r6, #1
 80147e0:	d10b      	bne.n	80147fa <__gethex+0x2e2>
 80147e2:	9a04      	ldr	r2, [sp, #16]
 80147e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80147e8:	6013      	str	r3, [r2, #0]
 80147ea:	2301      	movs	r3, #1
 80147ec:	6123      	str	r3, [r4, #16]
 80147ee:	f8c9 3000 	str.w	r3, [r9]
 80147f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80147f4:	2762      	movs	r7, #98	; 0x62
 80147f6:	601c      	str	r4, [r3, #0]
 80147f8:	e723      	b.n	8014642 <__gethex+0x12a>
 80147fa:	1e71      	subs	r1, r6, #1
 80147fc:	4620      	mov	r0, r4
 80147fe:	f000 ff57 	bl	80156b0 <__any_on>
 8014802:	2800      	cmp	r0, #0
 8014804:	d1ed      	bne.n	80147e2 <__gethex+0x2ca>
 8014806:	ee18 0a10 	vmov	r0, s16
 801480a:	4621      	mov	r1, r4
 801480c:	f000 faf6 	bl	8014dfc <_Bfree>
 8014810:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014812:	2300      	movs	r3, #0
 8014814:	6013      	str	r3, [r2, #0]
 8014816:	2750      	movs	r7, #80	; 0x50
 8014818:	e713      	b.n	8014642 <__gethex+0x12a>
 801481a:	bf00      	nop
 801481c:	08021bfc 	.word	0x08021bfc
 8014820:	08021b81 	.word	0x08021b81
 8014824:	08021b92 	.word	0x08021b92
 8014828:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801482a:	2b00      	cmp	r3, #0
 801482c:	d1eb      	bne.n	8014806 <__gethex+0x2ee>
 801482e:	e7d8      	b.n	80147e2 <__gethex+0x2ca>
 8014830:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014832:	2b00      	cmp	r3, #0
 8014834:	d1d5      	bne.n	80147e2 <__gethex+0x2ca>
 8014836:	e7e6      	b.n	8014806 <__gethex+0x2ee>
 8014838:	1e6f      	subs	r7, r5, #1
 801483a:	f1ba 0f00 	cmp.w	sl, #0
 801483e:	d131      	bne.n	80148a4 <__gethex+0x38c>
 8014840:	b127      	cbz	r7, 801484c <__gethex+0x334>
 8014842:	4639      	mov	r1, r7
 8014844:	4620      	mov	r0, r4
 8014846:	f000 ff33 	bl	80156b0 <__any_on>
 801484a:	4682      	mov	sl, r0
 801484c:	117b      	asrs	r3, r7, #5
 801484e:	2101      	movs	r1, #1
 8014850:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014854:	f007 071f 	and.w	r7, r7, #31
 8014858:	fa01 f707 	lsl.w	r7, r1, r7
 801485c:	421f      	tst	r7, r3
 801485e:	4629      	mov	r1, r5
 8014860:	4620      	mov	r0, r4
 8014862:	bf18      	it	ne
 8014864:	f04a 0a02 	orrne.w	sl, sl, #2
 8014868:	1b76      	subs	r6, r6, r5
 801486a:	f7ff fded 	bl	8014448 <rshift>
 801486e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014872:	2702      	movs	r7, #2
 8014874:	f1ba 0f00 	cmp.w	sl, #0
 8014878:	d048      	beq.n	801490c <__gethex+0x3f4>
 801487a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801487e:	2b02      	cmp	r3, #2
 8014880:	d015      	beq.n	80148ae <__gethex+0x396>
 8014882:	2b03      	cmp	r3, #3
 8014884:	d017      	beq.n	80148b6 <__gethex+0x39e>
 8014886:	2b01      	cmp	r3, #1
 8014888:	d109      	bne.n	801489e <__gethex+0x386>
 801488a:	f01a 0f02 	tst.w	sl, #2
 801488e:	d006      	beq.n	801489e <__gethex+0x386>
 8014890:	f8d9 0000 	ldr.w	r0, [r9]
 8014894:	ea4a 0a00 	orr.w	sl, sl, r0
 8014898:	f01a 0f01 	tst.w	sl, #1
 801489c:	d10e      	bne.n	80148bc <__gethex+0x3a4>
 801489e:	f047 0710 	orr.w	r7, r7, #16
 80148a2:	e033      	b.n	801490c <__gethex+0x3f4>
 80148a4:	f04f 0a01 	mov.w	sl, #1
 80148a8:	e7d0      	b.n	801484c <__gethex+0x334>
 80148aa:	2701      	movs	r7, #1
 80148ac:	e7e2      	b.n	8014874 <__gethex+0x35c>
 80148ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148b0:	f1c3 0301 	rsb	r3, r3, #1
 80148b4:	9315      	str	r3, [sp, #84]	; 0x54
 80148b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d0f0      	beq.n	801489e <__gethex+0x386>
 80148bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80148c0:	f104 0314 	add.w	r3, r4, #20
 80148c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80148c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80148cc:	f04f 0c00 	mov.w	ip, #0
 80148d0:	4618      	mov	r0, r3
 80148d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80148d6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80148da:	d01c      	beq.n	8014916 <__gethex+0x3fe>
 80148dc:	3201      	adds	r2, #1
 80148de:	6002      	str	r2, [r0, #0]
 80148e0:	2f02      	cmp	r7, #2
 80148e2:	f104 0314 	add.w	r3, r4, #20
 80148e6:	d13f      	bne.n	8014968 <__gethex+0x450>
 80148e8:	f8d8 2000 	ldr.w	r2, [r8]
 80148ec:	3a01      	subs	r2, #1
 80148ee:	42b2      	cmp	r2, r6
 80148f0:	d10a      	bne.n	8014908 <__gethex+0x3f0>
 80148f2:	1171      	asrs	r1, r6, #5
 80148f4:	2201      	movs	r2, #1
 80148f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80148fa:	f006 061f 	and.w	r6, r6, #31
 80148fe:	fa02 f606 	lsl.w	r6, r2, r6
 8014902:	421e      	tst	r6, r3
 8014904:	bf18      	it	ne
 8014906:	4617      	movne	r7, r2
 8014908:	f047 0720 	orr.w	r7, r7, #32
 801490c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801490e:	601c      	str	r4, [r3, #0]
 8014910:	9b04      	ldr	r3, [sp, #16]
 8014912:	601d      	str	r5, [r3, #0]
 8014914:	e695      	b.n	8014642 <__gethex+0x12a>
 8014916:	4299      	cmp	r1, r3
 8014918:	f843 cc04 	str.w	ip, [r3, #-4]
 801491c:	d8d8      	bhi.n	80148d0 <__gethex+0x3b8>
 801491e:	68a3      	ldr	r3, [r4, #8]
 8014920:	459b      	cmp	fp, r3
 8014922:	db19      	blt.n	8014958 <__gethex+0x440>
 8014924:	6861      	ldr	r1, [r4, #4]
 8014926:	ee18 0a10 	vmov	r0, s16
 801492a:	3101      	adds	r1, #1
 801492c:	f000 fa26 	bl	8014d7c <_Balloc>
 8014930:	4681      	mov	r9, r0
 8014932:	b918      	cbnz	r0, 801493c <__gethex+0x424>
 8014934:	4b1a      	ldr	r3, [pc, #104]	; (80149a0 <__gethex+0x488>)
 8014936:	4602      	mov	r2, r0
 8014938:	2184      	movs	r1, #132	; 0x84
 801493a:	e6a8      	b.n	801468e <__gethex+0x176>
 801493c:	6922      	ldr	r2, [r4, #16]
 801493e:	3202      	adds	r2, #2
 8014940:	f104 010c 	add.w	r1, r4, #12
 8014944:	0092      	lsls	r2, r2, #2
 8014946:	300c      	adds	r0, #12
 8014948:	f7fd fbd2 	bl	80120f0 <memcpy>
 801494c:	4621      	mov	r1, r4
 801494e:	ee18 0a10 	vmov	r0, s16
 8014952:	f000 fa53 	bl	8014dfc <_Bfree>
 8014956:	464c      	mov	r4, r9
 8014958:	6923      	ldr	r3, [r4, #16]
 801495a:	1c5a      	adds	r2, r3, #1
 801495c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014960:	6122      	str	r2, [r4, #16]
 8014962:	2201      	movs	r2, #1
 8014964:	615a      	str	r2, [r3, #20]
 8014966:	e7bb      	b.n	80148e0 <__gethex+0x3c8>
 8014968:	6922      	ldr	r2, [r4, #16]
 801496a:	455a      	cmp	r2, fp
 801496c:	dd0b      	ble.n	8014986 <__gethex+0x46e>
 801496e:	2101      	movs	r1, #1
 8014970:	4620      	mov	r0, r4
 8014972:	f7ff fd69 	bl	8014448 <rshift>
 8014976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801497a:	3501      	adds	r5, #1
 801497c:	42ab      	cmp	r3, r5
 801497e:	f6ff aed0 	blt.w	8014722 <__gethex+0x20a>
 8014982:	2701      	movs	r7, #1
 8014984:	e7c0      	b.n	8014908 <__gethex+0x3f0>
 8014986:	f016 061f 	ands.w	r6, r6, #31
 801498a:	d0fa      	beq.n	8014982 <__gethex+0x46a>
 801498c:	449a      	add	sl, r3
 801498e:	f1c6 0620 	rsb	r6, r6, #32
 8014992:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014996:	f000 fae7 	bl	8014f68 <__hi0bits>
 801499a:	42b0      	cmp	r0, r6
 801499c:	dbe7      	blt.n	801496e <__gethex+0x456>
 801499e:	e7f0      	b.n	8014982 <__gethex+0x46a>
 80149a0:	08021b81 	.word	0x08021b81

080149a4 <L_shift>:
 80149a4:	f1c2 0208 	rsb	r2, r2, #8
 80149a8:	0092      	lsls	r2, r2, #2
 80149aa:	b570      	push	{r4, r5, r6, lr}
 80149ac:	f1c2 0620 	rsb	r6, r2, #32
 80149b0:	6843      	ldr	r3, [r0, #4]
 80149b2:	6804      	ldr	r4, [r0, #0]
 80149b4:	fa03 f506 	lsl.w	r5, r3, r6
 80149b8:	432c      	orrs	r4, r5
 80149ba:	40d3      	lsrs	r3, r2
 80149bc:	6004      	str	r4, [r0, #0]
 80149be:	f840 3f04 	str.w	r3, [r0, #4]!
 80149c2:	4288      	cmp	r0, r1
 80149c4:	d3f4      	bcc.n	80149b0 <L_shift+0xc>
 80149c6:	bd70      	pop	{r4, r5, r6, pc}

080149c8 <__match>:
 80149c8:	b530      	push	{r4, r5, lr}
 80149ca:	6803      	ldr	r3, [r0, #0]
 80149cc:	3301      	adds	r3, #1
 80149ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80149d2:	b914      	cbnz	r4, 80149da <__match+0x12>
 80149d4:	6003      	str	r3, [r0, #0]
 80149d6:	2001      	movs	r0, #1
 80149d8:	bd30      	pop	{r4, r5, pc}
 80149da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80149e2:	2d19      	cmp	r5, #25
 80149e4:	bf98      	it	ls
 80149e6:	3220      	addls	r2, #32
 80149e8:	42a2      	cmp	r2, r4
 80149ea:	d0f0      	beq.n	80149ce <__match+0x6>
 80149ec:	2000      	movs	r0, #0
 80149ee:	e7f3      	b.n	80149d8 <__match+0x10>

080149f0 <__hexnan>:
 80149f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149f4:	680b      	ldr	r3, [r1, #0]
 80149f6:	6801      	ldr	r1, [r0, #0]
 80149f8:	115e      	asrs	r6, r3, #5
 80149fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80149fe:	f013 031f 	ands.w	r3, r3, #31
 8014a02:	b087      	sub	sp, #28
 8014a04:	bf18      	it	ne
 8014a06:	3604      	addne	r6, #4
 8014a08:	2500      	movs	r5, #0
 8014a0a:	1f37      	subs	r7, r6, #4
 8014a0c:	4682      	mov	sl, r0
 8014a0e:	4690      	mov	r8, r2
 8014a10:	9301      	str	r3, [sp, #4]
 8014a12:	f846 5c04 	str.w	r5, [r6, #-4]
 8014a16:	46b9      	mov	r9, r7
 8014a18:	463c      	mov	r4, r7
 8014a1a:	9502      	str	r5, [sp, #8]
 8014a1c:	46ab      	mov	fp, r5
 8014a1e:	784a      	ldrb	r2, [r1, #1]
 8014a20:	1c4b      	adds	r3, r1, #1
 8014a22:	9303      	str	r3, [sp, #12]
 8014a24:	b342      	cbz	r2, 8014a78 <__hexnan+0x88>
 8014a26:	4610      	mov	r0, r2
 8014a28:	9105      	str	r1, [sp, #20]
 8014a2a:	9204      	str	r2, [sp, #16]
 8014a2c:	f7ff fd5e 	bl	80144ec <__hexdig_fun>
 8014a30:	2800      	cmp	r0, #0
 8014a32:	d14f      	bne.n	8014ad4 <__hexnan+0xe4>
 8014a34:	9a04      	ldr	r2, [sp, #16]
 8014a36:	9905      	ldr	r1, [sp, #20]
 8014a38:	2a20      	cmp	r2, #32
 8014a3a:	d818      	bhi.n	8014a6e <__hexnan+0x7e>
 8014a3c:	9b02      	ldr	r3, [sp, #8]
 8014a3e:	459b      	cmp	fp, r3
 8014a40:	dd13      	ble.n	8014a6a <__hexnan+0x7a>
 8014a42:	454c      	cmp	r4, r9
 8014a44:	d206      	bcs.n	8014a54 <__hexnan+0x64>
 8014a46:	2d07      	cmp	r5, #7
 8014a48:	dc04      	bgt.n	8014a54 <__hexnan+0x64>
 8014a4a:	462a      	mov	r2, r5
 8014a4c:	4649      	mov	r1, r9
 8014a4e:	4620      	mov	r0, r4
 8014a50:	f7ff ffa8 	bl	80149a4 <L_shift>
 8014a54:	4544      	cmp	r4, r8
 8014a56:	d950      	bls.n	8014afa <__hexnan+0x10a>
 8014a58:	2300      	movs	r3, #0
 8014a5a:	f1a4 0904 	sub.w	r9, r4, #4
 8014a5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014a62:	f8cd b008 	str.w	fp, [sp, #8]
 8014a66:	464c      	mov	r4, r9
 8014a68:	461d      	mov	r5, r3
 8014a6a:	9903      	ldr	r1, [sp, #12]
 8014a6c:	e7d7      	b.n	8014a1e <__hexnan+0x2e>
 8014a6e:	2a29      	cmp	r2, #41	; 0x29
 8014a70:	d156      	bne.n	8014b20 <__hexnan+0x130>
 8014a72:	3102      	adds	r1, #2
 8014a74:	f8ca 1000 	str.w	r1, [sl]
 8014a78:	f1bb 0f00 	cmp.w	fp, #0
 8014a7c:	d050      	beq.n	8014b20 <__hexnan+0x130>
 8014a7e:	454c      	cmp	r4, r9
 8014a80:	d206      	bcs.n	8014a90 <__hexnan+0xa0>
 8014a82:	2d07      	cmp	r5, #7
 8014a84:	dc04      	bgt.n	8014a90 <__hexnan+0xa0>
 8014a86:	462a      	mov	r2, r5
 8014a88:	4649      	mov	r1, r9
 8014a8a:	4620      	mov	r0, r4
 8014a8c:	f7ff ff8a 	bl	80149a4 <L_shift>
 8014a90:	4544      	cmp	r4, r8
 8014a92:	d934      	bls.n	8014afe <__hexnan+0x10e>
 8014a94:	f1a8 0204 	sub.w	r2, r8, #4
 8014a98:	4623      	mov	r3, r4
 8014a9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8014a9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014aa2:	429f      	cmp	r7, r3
 8014aa4:	d2f9      	bcs.n	8014a9a <__hexnan+0xaa>
 8014aa6:	1b3b      	subs	r3, r7, r4
 8014aa8:	f023 0303 	bic.w	r3, r3, #3
 8014aac:	3304      	adds	r3, #4
 8014aae:	3401      	adds	r4, #1
 8014ab0:	3e03      	subs	r6, #3
 8014ab2:	42b4      	cmp	r4, r6
 8014ab4:	bf88      	it	hi
 8014ab6:	2304      	movhi	r3, #4
 8014ab8:	4443      	add	r3, r8
 8014aba:	2200      	movs	r2, #0
 8014abc:	f843 2b04 	str.w	r2, [r3], #4
 8014ac0:	429f      	cmp	r7, r3
 8014ac2:	d2fb      	bcs.n	8014abc <__hexnan+0xcc>
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	b91b      	cbnz	r3, 8014ad0 <__hexnan+0xe0>
 8014ac8:	4547      	cmp	r7, r8
 8014aca:	d127      	bne.n	8014b1c <__hexnan+0x12c>
 8014acc:	2301      	movs	r3, #1
 8014ace:	603b      	str	r3, [r7, #0]
 8014ad0:	2005      	movs	r0, #5
 8014ad2:	e026      	b.n	8014b22 <__hexnan+0x132>
 8014ad4:	3501      	adds	r5, #1
 8014ad6:	2d08      	cmp	r5, #8
 8014ad8:	f10b 0b01 	add.w	fp, fp, #1
 8014adc:	dd06      	ble.n	8014aec <__hexnan+0xfc>
 8014ade:	4544      	cmp	r4, r8
 8014ae0:	d9c3      	bls.n	8014a6a <__hexnan+0x7a>
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ae8:	2501      	movs	r5, #1
 8014aea:	3c04      	subs	r4, #4
 8014aec:	6822      	ldr	r2, [r4, #0]
 8014aee:	f000 000f 	and.w	r0, r0, #15
 8014af2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014af6:	6022      	str	r2, [r4, #0]
 8014af8:	e7b7      	b.n	8014a6a <__hexnan+0x7a>
 8014afa:	2508      	movs	r5, #8
 8014afc:	e7b5      	b.n	8014a6a <__hexnan+0x7a>
 8014afe:	9b01      	ldr	r3, [sp, #4]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d0df      	beq.n	8014ac4 <__hexnan+0xd4>
 8014b04:	f04f 32ff 	mov.w	r2, #4294967295
 8014b08:	f1c3 0320 	rsb	r3, r3, #32
 8014b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8014b10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014b14:	401a      	ands	r2, r3
 8014b16:	f846 2c04 	str.w	r2, [r6, #-4]
 8014b1a:	e7d3      	b.n	8014ac4 <__hexnan+0xd4>
 8014b1c:	3f04      	subs	r7, #4
 8014b1e:	e7d1      	b.n	8014ac4 <__hexnan+0xd4>
 8014b20:	2004      	movs	r0, #4
 8014b22:	b007      	add	sp, #28
 8014b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b28 <_findenv_r>:
 8014b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b2c:	4607      	mov	r7, r0
 8014b2e:	4689      	mov	r9, r1
 8014b30:	4616      	mov	r6, r2
 8014b32:	f001 fb99 	bl	8016268 <__env_lock>
 8014b36:	4b18      	ldr	r3, [pc, #96]	; (8014b98 <_findenv_r+0x70>)
 8014b38:	681c      	ldr	r4, [r3, #0]
 8014b3a:	469a      	mov	sl, r3
 8014b3c:	b134      	cbz	r4, 8014b4c <_findenv_r+0x24>
 8014b3e:	464b      	mov	r3, r9
 8014b40:	4698      	mov	r8, r3
 8014b42:	f813 1b01 	ldrb.w	r1, [r3], #1
 8014b46:	b139      	cbz	r1, 8014b58 <_findenv_r+0x30>
 8014b48:	293d      	cmp	r1, #61	; 0x3d
 8014b4a:	d1f9      	bne.n	8014b40 <_findenv_r+0x18>
 8014b4c:	4638      	mov	r0, r7
 8014b4e:	f001 fb91 	bl	8016274 <__env_unlock>
 8014b52:	2000      	movs	r0, #0
 8014b54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b58:	eba8 0809 	sub.w	r8, r8, r9
 8014b5c:	46a3      	mov	fp, r4
 8014b5e:	f854 0b04 	ldr.w	r0, [r4], #4
 8014b62:	2800      	cmp	r0, #0
 8014b64:	d0f2      	beq.n	8014b4c <_findenv_r+0x24>
 8014b66:	4642      	mov	r2, r8
 8014b68:	4649      	mov	r1, r9
 8014b6a:	f001 fa95 	bl	8016098 <strncmp>
 8014b6e:	2800      	cmp	r0, #0
 8014b70:	d1f4      	bne.n	8014b5c <_findenv_r+0x34>
 8014b72:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014b76:	eb03 0508 	add.w	r5, r3, r8
 8014b7a:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014b7e:	2b3d      	cmp	r3, #61	; 0x3d
 8014b80:	d1ec      	bne.n	8014b5c <_findenv_r+0x34>
 8014b82:	f8da 3000 	ldr.w	r3, [sl]
 8014b86:	ebab 0303 	sub.w	r3, fp, r3
 8014b8a:	109b      	asrs	r3, r3, #2
 8014b8c:	4638      	mov	r0, r7
 8014b8e:	6033      	str	r3, [r6, #0]
 8014b90:	f001 fb70 	bl	8016274 <__env_unlock>
 8014b94:	1c68      	adds	r0, r5, #1
 8014b96:	e7dd      	b.n	8014b54 <_findenv_r+0x2c>
 8014b98:	20000040 	.word	0x20000040

08014b9c <_getenv_r>:
 8014b9c:	b507      	push	{r0, r1, r2, lr}
 8014b9e:	aa01      	add	r2, sp, #4
 8014ba0:	f7ff ffc2 	bl	8014b28 <_findenv_r>
 8014ba4:	b003      	add	sp, #12
 8014ba6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014bac <__gettzinfo>:
 8014bac:	4800      	ldr	r0, [pc, #0]	; (8014bb0 <__gettzinfo+0x4>)
 8014bae:	4770      	bx	lr
 8014bb0:	20000120 	.word	0x20000120

08014bb4 <gmtime_r>:
 8014bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb8:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014bbc:	460c      	mov	r4, r1
 8014bbe:	4a51      	ldr	r2, [pc, #324]	; (8014d04 <gmtime_r+0x150>)
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	4630      	mov	r0, r6
 8014bc4:	4639      	mov	r1, r7
 8014bc6:	f7ec f831 	bl	8000c2c <__aeabi_ldivmod>
 8014bca:	4639      	mov	r1, r7
 8014bcc:	4605      	mov	r5, r0
 8014bce:	4a4d      	ldr	r2, [pc, #308]	; (8014d04 <gmtime_r+0x150>)
 8014bd0:	4630      	mov	r0, r6
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	f7ec f82a 	bl	8000c2c <__aeabi_ldivmod>
 8014bd8:	2a00      	cmp	r2, #0
 8014bda:	bfbc      	itt	lt
 8014bdc:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8014be0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8014be4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014be8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8014bec:	fbb2 f3f1 	udiv	r3, r2, r1
 8014bf0:	fb01 2213 	mls	r2, r1, r3, r2
 8014bf4:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8014bf8:	bfac      	ite	ge
 8014bfa:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8014bfe:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8014c02:	60a3      	str	r3, [r4, #8]
 8014c04:	fbb2 f3f1 	udiv	r3, r2, r1
 8014c08:	fb01 2213 	mls	r2, r1, r3, r2
 8014c0c:	6063      	str	r3, [r4, #4]
 8014c0e:	6022      	str	r2, [r4, #0]
 8014c10:	1cc3      	adds	r3, r0, #3
 8014c12:	2207      	movs	r2, #7
 8014c14:	fb93 f2f2 	sdiv	r2, r3, r2
 8014c18:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8014c1c:	1a9b      	subs	r3, r3, r2
 8014c1e:	bf48      	it	mi
 8014c20:	3307      	addmi	r3, #7
 8014c22:	2800      	cmp	r0, #0
 8014c24:	61a3      	str	r3, [r4, #24]
 8014c26:	bfb8      	it	lt
 8014c28:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8014c2c:	4936      	ldr	r1, [pc, #216]	; (8014d08 <gmtime_r+0x154>)
 8014c2e:	bfae      	itee	ge
 8014c30:	fb90 f1f1 	sdivge	r1, r0, r1
 8014c34:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8014c38:	fb93 f1f1 	sdivlt	r1, r3, r1
 8014c3c:	4b33      	ldr	r3, [pc, #204]	; (8014d0c <gmtime_r+0x158>)
 8014c3e:	fb03 0001 	mla	r0, r3, r1, r0
 8014c42:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8014c46:	fbb0 f2f2 	udiv	r2, r0, r2
 8014c4a:	4402      	add	r2, r0
 8014c4c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8014c50:	fbb0 f3fc 	udiv	r3, r0, ip
 8014c54:	1ad2      	subs	r2, r2, r3
 8014c56:	f240 176d 	movw	r7, #365	; 0x16d
 8014c5a:	4b2d      	ldr	r3, [pc, #180]	; (8014d10 <gmtime_r+0x15c>)
 8014c5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8014c60:	2664      	movs	r6, #100	; 0x64
 8014c62:	1ad3      	subs	r3, r2, r3
 8014c64:	fbb3 f5f7 	udiv	r5, r3, r7
 8014c68:	fbb3 f3fc 	udiv	r3, r3, ip
 8014c6c:	fbb5 f2f6 	udiv	r2, r5, r6
 8014c70:	1ad3      	subs	r3, r2, r3
 8014c72:	4403      	add	r3, r0
 8014c74:	fb07 3315 	mls	r3, r7, r5, r3
 8014c78:	2099      	movs	r0, #153	; 0x99
 8014c7a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8014c7e:	f10c 0c02 	add.w	ip, ip, #2
 8014c82:	f103 0e01 	add.w	lr, r3, #1
 8014c86:	fbbc f7f0 	udiv	r7, ip, r0
 8014c8a:	4378      	muls	r0, r7
 8014c8c:	3002      	adds	r0, #2
 8014c8e:	f04f 0805 	mov.w	r8, #5
 8014c92:	fbb0 f0f8 	udiv	r0, r0, r8
 8014c96:	ebae 0000 	sub.w	r0, lr, r0
 8014c9a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8014c9e:	45f4      	cmp	ip, lr
 8014ca0:	bf94      	ite	ls
 8014ca2:	f04f 0c02 	movls.w	ip, #2
 8014ca6:	f06f 0c09 	mvnhi.w	ip, #9
 8014caa:	4467      	add	r7, ip
 8014cac:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8014cb0:	fb0c 5101 	mla	r1, ip, r1, r5
 8014cb4:	2f01      	cmp	r7, #1
 8014cb6:	bf98      	it	ls
 8014cb8:	3101      	addls	r1, #1
 8014cba:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8014cbe:	d30c      	bcc.n	8014cda <gmtime_r+0x126>
 8014cc0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8014cc4:	61e3      	str	r3, [r4, #28]
 8014cc6:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8014cca:	2300      	movs	r3, #0
 8014ccc:	60e0      	str	r0, [r4, #12]
 8014cce:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8014cd2:	6223      	str	r3, [r4, #32]
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cda:	f015 0f03 	tst.w	r5, #3
 8014cde:	d102      	bne.n	8014ce6 <gmtime_r+0x132>
 8014ce0:	fb06 5212 	mls	r2, r6, r2, r5
 8014ce4:	b95a      	cbnz	r2, 8014cfe <gmtime_r+0x14a>
 8014ce6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8014cea:	fbb5 f2f6 	udiv	r2, r5, r6
 8014cee:	fb06 5212 	mls	r2, r6, r2, r5
 8014cf2:	fab2 f282 	clz	r2, r2
 8014cf6:	0952      	lsrs	r2, r2, #5
 8014cf8:	333b      	adds	r3, #59	; 0x3b
 8014cfa:	4413      	add	r3, r2
 8014cfc:	e7e2      	b.n	8014cc4 <gmtime_r+0x110>
 8014cfe:	2201      	movs	r2, #1
 8014d00:	e7fa      	b.n	8014cf8 <gmtime_r+0x144>
 8014d02:	bf00      	nop
 8014d04:	00015180 	.word	0x00015180
 8014d08:	00023ab1 	.word	0x00023ab1
 8014d0c:	fffdc54f 	.word	0xfffdc54f
 8014d10:	00023ab0 	.word	0x00023ab0

08014d14 <labs>:
 8014d14:	2800      	cmp	r0, #0
 8014d16:	bfb8      	it	lt
 8014d18:	4240      	neglt	r0, r0
 8014d1a:	4770      	bx	lr

08014d1c <_lseek_r>:
 8014d1c:	b538      	push	{r3, r4, r5, lr}
 8014d1e:	4d07      	ldr	r5, [pc, #28]	; (8014d3c <_lseek_r+0x20>)
 8014d20:	4604      	mov	r4, r0
 8014d22:	4608      	mov	r0, r1
 8014d24:	4611      	mov	r1, r2
 8014d26:	2200      	movs	r2, #0
 8014d28:	602a      	str	r2, [r5, #0]
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	f7ef fd08 	bl	8004740 <_lseek>
 8014d30:	1c43      	adds	r3, r0, #1
 8014d32:	d102      	bne.n	8014d3a <_lseek_r+0x1e>
 8014d34:	682b      	ldr	r3, [r5, #0]
 8014d36:	b103      	cbz	r3, 8014d3a <_lseek_r+0x1e>
 8014d38:	6023      	str	r3, [r4, #0]
 8014d3a:	bd38      	pop	{r3, r4, r5, pc}
 8014d3c:	20013088 	.word	0x20013088

08014d40 <__ascii_mbtowc>:
 8014d40:	b082      	sub	sp, #8
 8014d42:	b901      	cbnz	r1, 8014d46 <__ascii_mbtowc+0x6>
 8014d44:	a901      	add	r1, sp, #4
 8014d46:	b142      	cbz	r2, 8014d5a <__ascii_mbtowc+0x1a>
 8014d48:	b14b      	cbz	r3, 8014d5e <__ascii_mbtowc+0x1e>
 8014d4a:	7813      	ldrb	r3, [r2, #0]
 8014d4c:	600b      	str	r3, [r1, #0]
 8014d4e:	7812      	ldrb	r2, [r2, #0]
 8014d50:	1e10      	subs	r0, r2, #0
 8014d52:	bf18      	it	ne
 8014d54:	2001      	movne	r0, #1
 8014d56:	b002      	add	sp, #8
 8014d58:	4770      	bx	lr
 8014d5a:	4610      	mov	r0, r2
 8014d5c:	e7fb      	b.n	8014d56 <__ascii_mbtowc+0x16>
 8014d5e:	f06f 0001 	mvn.w	r0, #1
 8014d62:	e7f8      	b.n	8014d56 <__ascii_mbtowc+0x16>

08014d64 <__malloc_lock>:
 8014d64:	4801      	ldr	r0, [pc, #4]	; (8014d6c <__malloc_lock+0x8>)
 8014d66:	f7fd b9af 	b.w	80120c8 <__retarget_lock_acquire_recursive>
 8014d6a:	bf00      	nop
 8014d6c:	20013080 	.word	0x20013080

08014d70 <__malloc_unlock>:
 8014d70:	4801      	ldr	r0, [pc, #4]	; (8014d78 <__malloc_unlock+0x8>)
 8014d72:	f7fd b9ab 	b.w	80120cc <__retarget_lock_release_recursive>
 8014d76:	bf00      	nop
 8014d78:	20013080 	.word	0x20013080

08014d7c <_Balloc>:
 8014d7c:	b570      	push	{r4, r5, r6, lr}
 8014d7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014d80:	4604      	mov	r4, r0
 8014d82:	460d      	mov	r5, r1
 8014d84:	b976      	cbnz	r6, 8014da4 <_Balloc+0x28>
 8014d86:	2010      	movs	r0, #16
 8014d88:	f7fd f9a2 	bl	80120d0 <malloc>
 8014d8c:	4602      	mov	r2, r0
 8014d8e:	6260      	str	r0, [r4, #36]	; 0x24
 8014d90:	b920      	cbnz	r0, 8014d9c <_Balloc+0x20>
 8014d92:	4b18      	ldr	r3, [pc, #96]	; (8014df4 <_Balloc+0x78>)
 8014d94:	4818      	ldr	r0, [pc, #96]	; (8014df8 <_Balloc+0x7c>)
 8014d96:	2166      	movs	r1, #102	; 0x66
 8014d98:	f7ff fa54 	bl	8014244 <__assert_func>
 8014d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014da0:	6006      	str	r6, [r0, #0]
 8014da2:	60c6      	str	r6, [r0, #12]
 8014da4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014da6:	68f3      	ldr	r3, [r6, #12]
 8014da8:	b183      	cbz	r3, 8014dcc <_Balloc+0x50>
 8014daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dac:	68db      	ldr	r3, [r3, #12]
 8014dae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014db2:	b9b8      	cbnz	r0, 8014de4 <_Balloc+0x68>
 8014db4:	2101      	movs	r1, #1
 8014db6:	fa01 f605 	lsl.w	r6, r1, r5
 8014dba:	1d72      	adds	r2, r6, #5
 8014dbc:	0092      	lsls	r2, r2, #2
 8014dbe:	4620      	mov	r0, r4
 8014dc0:	f000 fc97 	bl	80156f2 <_calloc_r>
 8014dc4:	b160      	cbz	r0, 8014de0 <_Balloc+0x64>
 8014dc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014dca:	e00e      	b.n	8014dea <_Balloc+0x6e>
 8014dcc:	2221      	movs	r2, #33	; 0x21
 8014dce:	2104      	movs	r1, #4
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	f000 fc8e 	bl	80156f2 <_calloc_r>
 8014dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dd8:	60f0      	str	r0, [r6, #12]
 8014dda:	68db      	ldr	r3, [r3, #12]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d1e4      	bne.n	8014daa <_Balloc+0x2e>
 8014de0:	2000      	movs	r0, #0
 8014de2:	bd70      	pop	{r4, r5, r6, pc}
 8014de4:	6802      	ldr	r2, [r0, #0]
 8014de6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014dea:	2300      	movs	r3, #0
 8014dec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014df0:	e7f7      	b.n	8014de2 <_Balloc+0x66>
 8014df2:	bf00      	nop
 8014df4:	08021654 	.word	0x08021654
 8014df8:	08021c10 	.word	0x08021c10

08014dfc <_Bfree>:
 8014dfc:	b570      	push	{r4, r5, r6, lr}
 8014dfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014e00:	4605      	mov	r5, r0
 8014e02:	460c      	mov	r4, r1
 8014e04:	b976      	cbnz	r6, 8014e24 <_Bfree+0x28>
 8014e06:	2010      	movs	r0, #16
 8014e08:	f7fd f962 	bl	80120d0 <malloc>
 8014e0c:	4602      	mov	r2, r0
 8014e0e:	6268      	str	r0, [r5, #36]	; 0x24
 8014e10:	b920      	cbnz	r0, 8014e1c <_Bfree+0x20>
 8014e12:	4b09      	ldr	r3, [pc, #36]	; (8014e38 <_Bfree+0x3c>)
 8014e14:	4809      	ldr	r0, [pc, #36]	; (8014e3c <_Bfree+0x40>)
 8014e16:	218a      	movs	r1, #138	; 0x8a
 8014e18:	f7ff fa14 	bl	8014244 <__assert_func>
 8014e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014e20:	6006      	str	r6, [r0, #0]
 8014e22:	60c6      	str	r6, [r0, #12]
 8014e24:	b13c      	cbz	r4, 8014e36 <_Bfree+0x3a>
 8014e26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014e28:	6862      	ldr	r2, [r4, #4]
 8014e2a:	68db      	ldr	r3, [r3, #12]
 8014e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014e30:	6021      	str	r1, [r4, #0]
 8014e32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014e36:	bd70      	pop	{r4, r5, r6, pc}
 8014e38:	08021654 	.word	0x08021654
 8014e3c:	08021c10 	.word	0x08021c10

08014e40 <__multadd>:
 8014e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e44:	690e      	ldr	r6, [r1, #16]
 8014e46:	4607      	mov	r7, r0
 8014e48:	4698      	mov	r8, r3
 8014e4a:	460c      	mov	r4, r1
 8014e4c:	f101 0014 	add.w	r0, r1, #20
 8014e50:	2300      	movs	r3, #0
 8014e52:	6805      	ldr	r5, [r0, #0]
 8014e54:	b2a9      	uxth	r1, r5
 8014e56:	fb02 8101 	mla	r1, r2, r1, r8
 8014e5a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014e5e:	0c2d      	lsrs	r5, r5, #16
 8014e60:	fb02 c505 	mla	r5, r2, r5, ip
 8014e64:	b289      	uxth	r1, r1
 8014e66:	3301      	adds	r3, #1
 8014e68:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014e6c:	429e      	cmp	r6, r3
 8014e6e:	f840 1b04 	str.w	r1, [r0], #4
 8014e72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014e76:	dcec      	bgt.n	8014e52 <__multadd+0x12>
 8014e78:	f1b8 0f00 	cmp.w	r8, #0
 8014e7c:	d022      	beq.n	8014ec4 <__multadd+0x84>
 8014e7e:	68a3      	ldr	r3, [r4, #8]
 8014e80:	42b3      	cmp	r3, r6
 8014e82:	dc19      	bgt.n	8014eb8 <__multadd+0x78>
 8014e84:	6861      	ldr	r1, [r4, #4]
 8014e86:	4638      	mov	r0, r7
 8014e88:	3101      	adds	r1, #1
 8014e8a:	f7ff ff77 	bl	8014d7c <_Balloc>
 8014e8e:	4605      	mov	r5, r0
 8014e90:	b928      	cbnz	r0, 8014e9e <__multadd+0x5e>
 8014e92:	4602      	mov	r2, r0
 8014e94:	4b0d      	ldr	r3, [pc, #52]	; (8014ecc <__multadd+0x8c>)
 8014e96:	480e      	ldr	r0, [pc, #56]	; (8014ed0 <__multadd+0x90>)
 8014e98:	21b5      	movs	r1, #181	; 0xb5
 8014e9a:	f7ff f9d3 	bl	8014244 <__assert_func>
 8014e9e:	6922      	ldr	r2, [r4, #16]
 8014ea0:	3202      	adds	r2, #2
 8014ea2:	f104 010c 	add.w	r1, r4, #12
 8014ea6:	0092      	lsls	r2, r2, #2
 8014ea8:	300c      	adds	r0, #12
 8014eaa:	f7fd f921 	bl	80120f0 <memcpy>
 8014eae:	4621      	mov	r1, r4
 8014eb0:	4638      	mov	r0, r7
 8014eb2:	f7ff ffa3 	bl	8014dfc <_Bfree>
 8014eb6:	462c      	mov	r4, r5
 8014eb8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014ebc:	3601      	adds	r6, #1
 8014ebe:	f8c3 8014 	str.w	r8, [r3, #20]
 8014ec2:	6126      	str	r6, [r4, #16]
 8014ec4:	4620      	mov	r0, r4
 8014ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eca:	bf00      	nop
 8014ecc:	08021b81 	.word	0x08021b81
 8014ed0:	08021c10 	.word	0x08021c10

08014ed4 <__s2b>:
 8014ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ed8:	460c      	mov	r4, r1
 8014eda:	4615      	mov	r5, r2
 8014edc:	461f      	mov	r7, r3
 8014ede:	2209      	movs	r2, #9
 8014ee0:	3308      	adds	r3, #8
 8014ee2:	4606      	mov	r6, r0
 8014ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8014ee8:	2100      	movs	r1, #0
 8014eea:	2201      	movs	r2, #1
 8014eec:	429a      	cmp	r2, r3
 8014eee:	db09      	blt.n	8014f04 <__s2b+0x30>
 8014ef0:	4630      	mov	r0, r6
 8014ef2:	f7ff ff43 	bl	8014d7c <_Balloc>
 8014ef6:	b940      	cbnz	r0, 8014f0a <__s2b+0x36>
 8014ef8:	4602      	mov	r2, r0
 8014efa:	4b19      	ldr	r3, [pc, #100]	; (8014f60 <__s2b+0x8c>)
 8014efc:	4819      	ldr	r0, [pc, #100]	; (8014f64 <__s2b+0x90>)
 8014efe:	21ce      	movs	r1, #206	; 0xce
 8014f00:	f7ff f9a0 	bl	8014244 <__assert_func>
 8014f04:	0052      	lsls	r2, r2, #1
 8014f06:	3101      	adds	r1, #1
 8014f08:	e7f0      	b.n	8014eec <__s2b+0x18>
 8014f0a:	9b08      	ldr	r3, [sp, #32]
 8014f0c:	6143      	str	r3, [r0, #20]
 8014f0e:	2d09      	cmp	r5, #9
 8014f10:	f04f 0301 	mov.w	r3, #1
 8014f14:	6103      	str	r3, [r0, #16]
 8014f16:	dd16      	ble.n	8014f46 <__s2b+0x72>
 8014f18:	f104 0909 	add.w	r9, r4, #9
 8014f1c:	46c8      	mov	r8, r9
 8014f1e:	442c      	add	r4, r5
 8014f20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014f24:	4601      	mov	r1, r0
 8014f26:	3b30      	subs	r3, #48	; 0x30
 8014f28:	220a      	movs	r2, #10
 8014f2a:	4630      	mov	r0, r6
 8014f2c:	f7ff ff88 	bl	8014e40 <__multadd>
 8014f30:	45a0      	cmp	r8, r4
 8014f32:	d1f5      	bne.n	8014f20 <__s2b+0x4c>
 8014f34:	f1a5 0408 	sub.w	r4, r5, #8
 8014f38:	444c      	add	r4, r9
 8014f3a:	1b2d      	subs	r5, r5, r4
 8014f3c:	1963      	adds	r3, r4, r5
 8014f3e:	42bb      	cmp	r3, r7
 8014f40:	db04      	blt.n	8014f4c <__s2b+0x78>
 8014f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f46:	340a      	adds	r4, #10
 8014f48:	2509      	movs	r5, #9
 8014f4a:	e7f6      	b.n	8014f3a <__s2b+0x66>
 8014f4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014f50:	4601      	mov	r1, r0
 8014f52:	3b30      	subs	r3, #48	; 0x30
 8014f54:	220a      	movs	r2, #10
 8014f56:	4630      	mov	r0, r6
 8014f58:	f7ff ff72 	bl	8014e40 <__multadd>
 8014f5c:	e7ee      	b.n	8014f3c <__s2b+0x68>
 8014f5e:	bf00      	nop
 8014f60:	08021b81 	.word	0x08021b81
 8014f64:	08021c10 	.word	0x08021c10

08014f68 <__hi0bits>:
 8014f68:	0c03      	lsrs	r3, r0, #16
 8014f6a:	041b      	lsls	r3, r3, #16
 8014f6c:	b9d3      	cbnz	r3, 8014fa4 <__hi0bits+0x3c>
 8014f6e:	0400      	lsls	r0, r0, #16
 8014f70:	2310      	movs	r3, #16
 8014f72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014f76:	bf04      	itt	eq
 8014f78:	0200      	lsleq	r0, r0, #8
 8014f7a:	3308      	addeq	r3, #8
 8014f7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014f80:	bf04      	itt	eq
 8014f82:	0100      	lsleq	r0, r0, #4
 8014f84:	3304      	addeq	r3, #4
 8014f86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014f8a:	bf04      	itt	eq
 8014f8c:	0080      	lsleq	r0, r0, #2
 8014f8e:	3302      	addeq	r3, #2
 8014f90:	2800      	cmp	r0, #0
 8014f92:	db05      	blt.n	8014fa0 <__hi0bits+0x38>
 8014f94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014f98:	f103 0301 	add.w	r3, r3, #1
 8014f9c:	bf08      	it	eq
 8014f9e:	2320      	moveq	r3, #32
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	4770      	bx	lr
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	e7e4      	b.n	8014f72 <__hi0bits+0xa>

08014fa8 <__lo0bits>:
 8014fa8:	6803      	ldr	r3, [r0, #0]
 8014faa:	f013 0207 	ands.w	r2, r3, #7
 8014fae:	4601      	mov	r1, r0
 8014fb0:	d00b      	beq.n	8014fca <__lo0bits+0x22>
 8014fb2:	07da      	lsls	r2, r3, #31
 8014fb4:	d424      	bmi.n	8015000 <__lo0bits+0x58>
 8014fb6:	0798      	lsls	r0, r3, #30
 8014fb8:	bf49      	itett	mi
 8014fba:	085b      	lsrmi	r3, r3, #1
 8014fbc:	089b      	lsrpl	r3, r3, #2
 8014fbe:	2001      	movmi	r0, #1
 8014fc0:	600b      	strmi	r3, [r1, #0]
 8014fc2:	bf5c      	itt	pl
 8014fc4:	600b      	strpl	r3, [r1, #0]
 8014fc6:	2002      	movpl	r0, #2
 8014fc8:	4770      	bx	lr
 8014fca:	b298      	uxth	r0, r3
 8014fcc:	b9b0      	cbnz	r0, 8014ffc <__lo0bits+0x54>
 8014fce:	0c1b      	lsrs	r3, r3, #16
 8014fd0:	2010      	movs	r0, #16
 8014fd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014fd6:	bf04      	itt	eq
 8014fd8:	0a1b      	lsreq	r3, r3, #8
 8014fda:	3008      	addeq	r0, #8
 8014fdc:	071a      	lsls	r2, r3, #28
 8014fde:	bf04      	itt	eq
 8014fe0:	091b      	lsreq	r3, r3, #4
 8014fe2:	3004      	addeq	r0, #4
 8014fe4:	079a      	lsls	r2, r3, #30
 8014fe6:	bf04      	itt	eq
 8014fe8:	089b      	lsreq	r3, r3, #2
 8014fea:	3002      	addeq	r0, #2
 8014fec:	07da      	lsls	r2, r3, #31
 8014fee:	d403      	bmi.n	8014ff8 <__lo0bits+0x50>
 8014ff0:	085b      	lsrs	r3, r3, #1
 8014ff2:	f100 0001 	add.w	r0, r0, #1
 8014ff6:	d005      	beq.n	8015004 <__lo0bits+0x5c>
 8014ff8:	600b      	str	r3, [r1, #0]
 8014ffa:	4770      	bx	lr
 8014ffc:	4610      	mov	r0, r2
 8014ffe:	e7e8      	b.n	8014fd2 <__lo0bits+0x2a>
 8015000:	2000      	movs	r0, #0
 8015002:	4770      	bx	lr
 8015004:	2020      	movs	r0, #32
 8015006:	4770      	bx	lr

08015008 <__i2b>:
 8015008:	b510      	push	{r4, lr}
 801500a:	460c      	mov	r4, r1
 801500c:	2101      	movs	r1, #1
 801500e:	f7ff feb5 	bl	8014d7c <_Balloc>
 8015012:	4602      	mov	r2, r0
 8015014:	b928      	cbnz	r0, 8015022 <__i2b+0x1a>
 8015016:	4b05      	ldr	r3, [pc, #20]	; (801502c <__i2b+0x24>)
 8015018:	4805      	ldr	r0, [pc, #20]	; (8015030 <__i2b+0x28>)
 801501a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801501e:	f7ff f911 	bl	8014244 <__assert_func>
 8015022:	2301      	movs	r3, #1
 8015024:	6144      	str	r4, [r0, #20]
 8015026:	6103      	str	r3, [r0, #16]
 8015028:	bd10      	pop	{r4, pc}
 801502a:	bf00      	nop
 801502c:	08021b81 	.word	0x08021b81
 8015030:	08021c10 	.word	0x08021c10

08015034 <__multiply>:
 8015034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015038:	4614      	mov	r4, r2
 801503a:	690a      	ldr	r2, [r1, #16]
 801503c:	6923      	ldr	r3, [r4, #16]
 801503e:	429a      	cmp	r2, r3
 8015040:	bfb8      	it	lt
 8015042:	460b      	movlt	r3, r1
 8015044:	460d      	mov	r5, r1
 8015046:	bfbc      	itt	lt
 8015048:	4625      	movlt	r5, r4
 801504a:	461c      	movlt	r4, r3
 801504c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015050:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015054:	68ab      	ldr	r3, [r5, #8]
 8015056:	6869      	ldr	r1, [r5, #4]
 8015058:	eb0a 0709 	add.w	r7, sl, r9
 801505c:	42bb      	cmp	r3, r7
 801505e:	b085      	sub	sp, #20
 8015060:	bfb8      	it	lt
 8015062:	3101      	addlt	r1, #1
 8015064:	f7ff fe8a 	bl	8014d7c <_Balloc>
 8015068:	b930      	cbnz	r0, 8015078 <__multiply+0x44>
 801506a:	4602      	mov	r2, r0
 801506c:	4b42      	ldr	r3, [pc, #264]	; (8015178 <__multiply+0x144>)
 801506e:	4843      	ldr	r0, [pc, #268]	; (801517c <__multiply+0x148>)
 8015070:	f240 115d 	movw	r1, #349	; 0x15d
 8015074:	f7ff f8e6 	bl	8014244 <__assert_func>
 8015078:	f100 0614 	add.w	r6, r0, #20
 801507c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015080:	4633      	mov	r3, r6
 8015082:	2200      	movs	r2, #0
 8015084:	4543      	cmp	r3, r8
 8015086:	d31e      	bcc.n	80150c6 <__multiply+0x92>
 8015088:	f105 0c14 	add.w	ip, r5, #20
 801508c:	f104 0314 	add.w	r3, r4, #20
 8015090:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015094:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015098:	9202      	str	r2, [sp, #8]
 801509a:	ebac 0205 	sub.w	r2, ip, r5
 801509e:	3a15      	subs	r2, #21
 80150a0:	f022 0203 	bic.w	r2, r2, #3
 80150a4:	3204      	adds	r2, #4
 80150a6:	f105 0115 	add.w	r1, r5, #21
 80150aa:	458c      	cmp	ip, r1
 80150ac:	bf38      	it	cc
 80150ae:	2204      	movcc	r2, #4
 80150b0:	9201      	str	r2, [sp, #4]
 80150b2:	9a02      	ldr	r2, [sp, #8]
 80150b4:	9303      	str	r3, [sp, #12]
 80150b6:	429a      	cmp	r2, r3
 80150b8:	d808      	bhi.n	80150cc <__multiply+0x98>
 80150ba:	2f00      	cmp	r7, #0
 80150bc:	dc55      	bgt.n	801516a <__multiply+0x136>
 80150be:	6107      	str	r7, [r0, #16]
 80150c0:	b005      	add	sp, #20
 80150c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150c6:	f843 2b04 	str.w	r2, [r3], #4
 80150ca:	e7db      	b.n	8015084 <__multiply+0x50>
 80150cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80150d0:	f1ba 0f00 	cmp.w	sl, #0
 80150d4:	d020      	beq.n	8015118 <__multiply+0xe4>
 80150d6:	f105 0e14 	add.w	lr, r5, #20
 80150da:	46b1      	mov	r9, r6
 80150dc:	2200      	movs	r2, #0
 80150de:	f85e 4b04 	ldr.w	r4, [lr], #4
 80150e2:	f8d9 b000 	ldr.w	fp, [r9]
 80150e6:	b2a1      	uxth	r1, r4
 80150e8:	fa1f fb8b 	uxth.w	fp, fp
 80150ec:	fb0a b101 	mla	r1, sl, r1, fp
 80150f0:	4411      	add	r1, r2
 80150f2:	f8d9 2000 	ldr.w	r2, [r9]
 80150f6:	0c24      	lsrs	r4, r4, #16
 80150f8:	0c12      	lsrs	r2, r2, #16
 80150fa:	fb0a 2404 	mla	r4, sl, r4, r2
 80150fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015102:	b289      	uxth	r1, r1
 8015104:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015108:	45f4      	cmp	ip, lr
 801510a:	f849 1b04 	str.w	r1, [r9], #4
 801510e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015112:	d8e4      	bhi.n	80150de <__multiply+0xaa>
 8015114:	9901      	ldr	r1, [sp, #4]
 8015116:	5072      	str	r2, [r6, r1]
 8015118:	9a03      	ldr	r2, [sp, #12]
 801511a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801511e:	3304      	adds	r3, #4
 8015120:	f1b9 0f00 	cmp.w	r9, #0
 8015124:	d01f      	beq.n	8015166 <__multiply+0x132>
 8015126:	6834      	ldr	r4, [r6, #0]
 8015128:	f105 0114 	add.w	r1, r5, #20
 801512c:	46b6      	mov	lr, r6
 801512e:	f04f 0a00 	mov.w	sl, #0
 8015132:	880a      	ldrh	r2, [r1, #0]
 8015134:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015138:	fb09 b202 	mla	r2, r9, r2, fp
 801513c:	4492      	add	sl, r2
 801513e:	b2a4      	uxth	r4, r4
 8015140:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015144:	f84e 4b04 	str.w	r4, [lr], #4
 8015148:	f851 4b04 	ldr.w	r4, [r1], #4
 801514c:	f8be 2000 	ldrh.w	r2, [lr]
 8015150:	0c24      	lsrs	r4, r4, #16
 8015152:	fb09 2404 	mla	r4, r9, r4, r2
 8015156:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801515a:	458c      	cmp	ip, r1
 801515c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015160:	d8e7      	bhi.n	8015132 <__multiply+0xfe>
 8015162:	9a01      	ldr	r2, [sp, #4]
 8015164:	50b4      	str	r4, [r6, r2]
 8015166:	3604      	adds	r6, #4
 8015168:	e7a3      	b.n	80150b2 <__multiply+0x7e>
 801516a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801516e:	2b00      	cmp	r3, #0
 8015170:	d1a5      	bne.n	80150be <__multiply+0x8a>
 8015172:	3f01      	subs	r7, #1
 8015174:	e7a1      	b.n	80150ba <__multiply+0x86>
 8015176:	bf00      	nop
 8015178:	08021b81 	.word	0x08021b81
 801517c:	08021c10 	.word	0x08021c10

08015180 <__pow5mult>:
 8015180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015184:	4615      	mov	r5, r2
 8015186:	f012 0203 	ands.w	r2, r2, #3
 801518a:	4606      	mov	r6, r0
 801518c:	460f      	mov	r7, r1
 801518e:	d007      	beq.n	80151a0 <__pow5mult+0x20>
 8015190:	4c25      	ldr	r4, [pc, #148]	; (8015228 <__pow5mult+0xa8>)
 8015192:	3a01      	subs	r2, #1
 8015194:	2300      	movs	r3, #0
 8015196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801519a:	f7ff fe51 	bl	8014e40 <__multadd>
 801519e:	4607      	mov	r7, r0
 80151a0:	10ad      	asrs	r5, r5, #2
 80151a2:	d03d      	beq.n	8015220 <__pow5mult+0xa0>
 80151a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80151a6:	b97c      	cbnz	r4, 80151c8 <__pow5mult+0x48>
 80151a8:	2010      	movs	r0, #16
 80151aa:	f7fc ff91 	bl	80120d0 <malloc>
 80151ae:	4602      	mov	r2, r0
 80151b0:	6270      	str	r0, [r6, #36]	; 0x24
 80151b2:	b928      	cbnz	r0, 80151c0 <__pow5mult+0x40>
 80151b4:	4b1d      	ldr	r3, [pc, #116]	; (801522c <__pow5mult+0xac>)
 80151b6:	481e      	ldr	r0, [pc, #120]	; (8015230 <__pow5mult+0xb0>)
 80151b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80151bc:	f7ff f842 	bl	8014244 <__assert_func>
 80151c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80151c4:	6004      	str	r4, [r0, #0]
 80151c6:	60c4      	str	r4, [r0, #12]
 80151c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80151cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80151d0:	b94c      	cbnz	r4, 80151e6 <__pow5mult+0x66>
 80151d2:	f240 2171 	movw	r1, #625	; 0x271
 80151d6:	4630      	mov	r0, r6
 80151d8:	f7ff ff16 	bl	8015008 <__i2b>
 80151dc:	2300      	movs	r3, #0
 80151de:	f8c8 0008 	str.w	r0, [r8, #8]
 80151e2:	4604      	mov	r4, r0
 80151e4:	6003      	str	r3, [r0, #0]
 80151e6:	f04f 0900 	mov.w	r9, #0
 80151ea:	07eb      	lsls	r3, r5, #31
 80151ec:	d50a      	bpl.n	8015204 <__pow5mult+0x84>
 80151ee:	4639      	mov	r1, r7
 80151f0:	4622      	mov	r2, r4
 80151f2:	4630      	mov	r0, r6
 80151f4:	f7ff ff1e 	bl	8015034 <__multiply>
 80151f8:	4639      	mov	r1, r7
 80151fa:	4680      	mov	r8, r0
 80151fc:	4630      	mov	r0, r6
 80151fe:	f7ff fdfd 	bl	8014dfc <_Bfree>
 8015202:	4647      	mov	r7, r8
 8015204:	106d      	asrs	r5, r5, #1
 8015206:	d00b      	beq.n	8015220 <__pow5mult+0xa0>
 8015208:	6820      	ldr	r0, [r4, #0]
 801520a:	b938      	cbnz	r0, 801521c <__pow5mult+0x9c>
 801520c:	4622      	mov	r2, r4
 801520e:	4621      	mov	r1, r4
 8015210:	4630      	mov	r0, r6
 8015212:	f7ff ff0f 	bl	8015034 <__multiply>
 8015216:	6020      	str	r0, [r4, #0]
 8015218:	f8c0 9000 	str.w	r9, [r0]
 801521c:	4604      	mov	r4, r0
 801521e:	e7e4      	b.n	80151ea <__pow5mult+0x6a>
 8015220:	4638      	mov	r0, r7
 8015222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015226:	bf00      	nop
 8015228:	08021d60 	.word	0x08021d60
 801522c:	08021654 	.word	0x08021654
 8015230:	08021c10 	.word	0x08021c10

08015234 <__lshift>:
 8015234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015238:	460c      	mov	r4, r1
 801523a:	6849      	ldr	r1, [r1, #4]
 801523c:	6923      	ldr	r3, [r4, #16]
 801523e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015242:	68a3      	ldr	r3, [r4, #8]
 8015244:	4607      	mov	r7, r0
 8015246:	4691      	mov	r9, r2
 8015248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801524c:	f108 0601 	add.w	r6, r8, #1
 8015250:	42b3      	cmp	r3, r6
 8015252:	db0b      	blt.n	801526c <__lshift+0x38>
 8015254:	4638      	mov	r0, r7
 8015256:	f7ff fd91 	bl	8014d7c <_Balloc>
 801525a:	4605      	mov	r5, r0
 801525c:	b948      	cbnz	r0, 8015272 <__lshift+0x3e>
 801525e:	4602      	mov	r2, r0
 8015260:	4b28      	ldr	r3, [pc, #160]	; (8015304 <__lshift+0xd0>)
 8015262:	4829      	ldr	r0, [pc, #164]	; (8015308 <__lshift+0xd4>)
 8015264:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015268:	f7fe ffec 	bl	8014244 <__assert_func>
 801526c:	3101      	adds	r1, #1
 801526e:	005b      	lsls	r3, r3, #1
 8015270:	e7ee      	b.n	8015250 <__lshift+0x1c>
 8015272:	2300      	movs	r3, #0
 8015274:	f100 0114 	add.w	r1, r0, #20
 8015278:	f100 0210 	add.w	r2, r0, #16
 801527c:	4618      	mov	r0, r3
 801527e:	4553      	cmp	r3, sl
 8015280:	db33      	blt.n	80152ea <__lshift+0xb6>
 8015282:	6920      	ldr	r0, [r4, #16]
 8015284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015288:	f104 0314 	add.w	r3, r4, #20
 801528c:	f019 091f 	ands.w	r9, r9, #31
 8015290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015294:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015298:	d02b      	beq.n	80152f2 <__lshift+0xbe>
 801529a:	f1c9 0e20 	rsb	lr, r9, #32
 801529e:	468a      	mov	sl, r1
 80152a0:	2200      	movs	r2, #0
 80152a2:	6818      	ldr	r0, [r3, #0]
 80152a4:	fa00 f009 	lsl.w	r0, r0, r9
 80152a8:	4302      	orrs	r2, r0
 80152aa:	f84a 2b04 	str.w	r2, [sl], #4
 80152ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80152b2:	459c      	cmp	ip, r3
 80152b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80152b8:	d8f3      	bhi.n	80152a2 <__lshift+0x6e>
 80152ba:	ebac 0304 	sub.w	r3, ip, r4
 80152be:	3b15      	subs	r3, #21
 80152c0:	f023 0303 	bic.w	r3, r3, #3
 80152c4:	3304      	adds	r3, #4
 80152c6:	f104 0015 	add.w	r0, r4, #21
 80152ca:	4584      	cmp	ip, r0
 80152cc:	bf38      	it	cc
 80152ce:	2304      	movcc	r3, #4
 80152d0:	50ca      	str	r2, [r1, r3]
 80152d2:	b10a      	cbz	r2, 80152d8 <__lshift+0xa4>
 80152d4:	f108 0602 	add.w	r6, r8, #2
 80152d8:	3e01      	subs	r6, #1
 80152da:	4638      	mov	r0, r7
 80152dc:	612e      	str	r6, [r5, #16]
 80152de:	4621      	mov	r1, r4
 80152e0:	f7ff fd8c 	bl	8014dfc <_Bfree>
 80152e4:	4628      	mov	r0, r5
 80152e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80152ee:	3301      	adds	r3, #1
 80152f0:	e7c5      	b.n	801527e <__lshift+0x4a>
 80152f2:	3904      	subs	r1, #4
 80152f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80152f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80152fc:	459c      	cmp	ip, r3
 80152fe:	d8f9      	bhi.n	80152f4 <__lshift+0xc0>
 8015300:	e7ea      	b.n	80152d8 <__lshift+0xa4>
 8015302:	bf00      	nop
 8015304:	08021b81 	.word	0x08021b81
 8015308:	08021c10 	.word	0x08021c10

0801530c <__mcmp>:
 801530c:	b530      	push	{r4, r5, lr}
 801530e:	6902      	ldr	r2, [r0, #16]
 8015310:	690c      	ldr	r4, [r1, #16]
 8015312:	1b12      	subs	r2, r2, r4
 8015314:	d10e      	bne.n	8015334 <__mcmp+0x28>
 8015316:	f100 0314 	add.w	r3, r0, #20
 801531a:	3114      	adds	r1, #20
 801531c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015320:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015324:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015328:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801532c:	42a5      	cmp	r5, r4
 801532e:	d003      	beq.n	8015338 <__mcmp+0x2c>
 8015330:	d305      	bcc.n	801533e <__mcmp+0x32>
 8015332:	2201      	movs	r2, #1
 8015334:	4610      	mov	r0, r2
 8015336:	bd30      	pop	{r4, r5, pc}
 8015338:	4283      	cmp	r3, r0
 801533a:	d3f3      	bcc.n	8015324 <__mcmp+0x18>
 801533c:	e7fa      	b.n	8015334 <__mcmp+0x28>
 801533e:	f04f 32ff 	mov.w	r2, #4294967295
 8015342:	e7f7      	b.n	8015334 <__mcmp+0x28>

08015344 <__mdiff>:
 8015344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015348:	460c      	mov	r4, r1
 801534a:	4606      	mov	r6, r0
 801534c:	4611      	mov	r1, r2
 801534e:	4620      	mov	r0, r4
 8015350:	4617      	mov	r7, r2
 8015352:	f7ff ffdb 	bl	801530c <__mcmp>
 8015356:	1e05      	subs	r5, r0, #0
 8015358:	d110      	bne.n	801537c <__mdiff+0x38>
 801535a:	4629      	mov	r1, r5
 801535c:	4630      	mov	r0, r6
 801535e:	f7ff fd0d 	bl	8014d7c <_Balloc>
 8015362:	b930      	cbnz	r0, 8015372 <__mdiff+0x2e>
 8015364:	4b39      	ldr	r3, [pc, #228]	; (801544c <__mdiff+0x108>)
 8015366:	4602      	mov	r2, r0
 8015368:	f240 2132 	movw	r1, #562	; 0x232
 801536c:	4838      	ldr	r0, [pc, #224]	; (8015450 <__mdiff+0x10c>)
 801536e:	f7fe ff69 	bl	8014244 <__assert_func>
 8015372:	2301      	movs	r3, #1
 8015374:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801537c:	bfa4      	itt	ge
 801537e:	463b      	movge	r3, r7
 8015380:	4627      	movge	r7, r4
 8015382:	4630      	mov	r0, r6
 8015384:	6879      	ldr	r1, [r7, #4]
 8015386:	bfa6      	itte	ge
 8015388:	461c      	movge	r4, r3
 801538a:	2500      	movge	r5, #0
 801538c:	2501      	movlt	r5, #1
 801538e:	f7ff fcf5 	bl	8014d7c <_Balloc>
 8015392:	b920      	cbnz	r0, 801539e <__mdiff+0x5a>
 8015394:	4b2d      	ldr	r3, [pc, #180]	; (801544c <__mdiff+0x108>)
 8015396:	4602      	mov	r2, r0
 8015398:	f44f 7110 	mov.w	r1, #576	; 0x240
 801539c:	e7e6      	b.n	801536c <__mdiff+0x28>
 801539e:	693e      	ldr	r6, [r7, #16]
 80153a0:	60c5      	str	r5, [r0, #12]
 80153a2:	6925      	ldr	r5, [r4, #16]
 80153a4:	f107 0114 	add.w	r1, r7, #20
 80153a8:	f104 0914 	add.w	r9, r4, #20
 80153ac:	f100 0e14 	add.w	lr, r0, #20
 80153b0:	f107 0210 	add.w	r2, r7, #16
 80153b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80153b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80153bc:	46f2      	mov	sl, lr
 80153be:	2700      	movs	r7, #0
 80153c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80153c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80153c8:	fa1f f883 	uxth.w	r8, r3
 80153cc:	fa17 f78b 	uxtah	r7, r7, fp
 80153d0:	0c1b      	lsrs	r3, r3, #16
 80153d2:	eba7 0808 	sub.w	r8, r7, r8
 80153d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80153da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80153de:	fa1f f888 	uxth.w	r8, r8
 80153e2:	141f      	asrs	r7, r3, #16
 80153e4:	454d      	cmp	r5, r9
 80153e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80153ea:	f84a 3b04 	str.w	r3, [sl], #4
 80153ee:	d8e7      	bhi.n	80153c0 <__mdiff+0x7c>
 80153f0:	1b2b      	subs	r3, r5, r4
 80153f2:	3b15      	subs	r3, #21
 80153f4:	f023 0303 	bic.w	r3, r3, #3
 80153f8:	3304      	adds	r3, #4
 80153fa:	3415      	adds	r4, #21
 80153fc:	42a5      	cmp	r5, r4
 80153fe:	bf38      	it	cc
 8015400:	2304      	movcc	r3, #4
 8015402:	4419      	add	r1, r3
 8015404:	4473      	add	r3, lr
 8015406:	469e      	mov	lr, r3
 8015408:	460d      	mov	r5, r1
 801540a:	4565      	cmp	r5, ip
 801540c:	d30e      	bcc.n	801542c <__mdiff+0xe8>
 801540e:	f10c 0203 	add.w	r2, ip, #3
 8015412:	1a52      	subs	r2, r2, r1
 8015414:	f022 0203 	bic.w	r2, r2, #3
 8015418:	3903      	subs	r1, #3
 801541a:	458c      	cmp	ip, r1
 801541c:	bf38      	it	cc
 801541e:	2200      	movcc	r2, #0
 8015420:	441a      	add	r2, r3
 8015422:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015426:	b17b      	cbz	r3, 8015448 <__mdiff+0x104>
 8015428:	6106      	str	r6, [r0, #16]
 801542a:	e7a5      	b.n	8015378 <__mdiff+0x34>
 801542c:	f855 8b04 	ldr.w	r8, [r5], #4
 8015430:	fa17 f488 	uxtah	r4, r7, r8
 8015434:	1422      	asrs	r2, r4, #16
 8015436:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801543a:	b2a4      	uxth	r4, r4
 801543c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015440:	f84e 4b04 	str.w	r4, [lr], #4
 8015444:	1417      	asrs	r7, r2, #16
 8015446:	e7e0      	b.n	801540a <__mdiff+0xc6>
 8015448:	3e01      	subs	r6, #1
 801544a:	e7ea      	b.n	8015422 <__mdiff+0xde>
 801544c:	08021b81 	.word	0x08021b81
 8015450:	08021c10 	.word	0x08021c10

08015454 <__ulp>:
 8015454:	b082      	sub	sp, #8
 8015456:	ed8d 0b00 	vstr	d0, [sp]
 801545a:	9b01      	ldr	r3, [sp, #4]
 801545c:	4912      	ldr	r1, [pc, #72]	; (80154a8 <__ulp+0x54>)
 801545e:	4019      	ands	r1, r3
 8015460:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015464:	2900      	cmp	r1, #0
 8015466:	dd05      	ble.n	8015474 <__ulp+0x20>
 8015468:	2200      	movs	r2, #0
 801546a:	460b      	mov	r3, r1
 801546c:	ec43 2b10 	vmov	d0, r2, r3
 8015470:	b002      	add	sp, #8
 8015472:	4770      	bx	lr
 8015474:	4249      	negs	r1, r1
 8015476:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801547a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801547e:	f04f 0200 	mov.w	r2, #0
 8015482:	f04f 0300 	mov.w	r3, #0
 8015486:	da04      	bge.n	8015492 <__ulp+0x3e>
 8015488:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801548c:	fa41 f300 	asr.w	r3, r1, r0
 8015490:	e7ec      	b.n	801546c <__ulp+0x18>
 8015492:	f1a0 0114 	sub.w	r1, r0, #20
 8015496:	291e      	cmp	r1, #30
 8015498:	bfda      	itte	le
 801549a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801549e:	fa20 f101 	lsrle.w	r1, r0, r1
 80154a2:	2101      	movgt	r1, #1
 80154a4:	460a      	mov	r2, r1
 80154a6:	e7e1      	b.n	801546c <__ulp+0x18>
 80154a8:	7ff00000 	.word	0x7ff00000

080154ac <__b2d>:
 80154ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ae:	6905      	ldr	r5, [r0, #16]
 80154b0:	f100 0714 	add.w	r7, r0, #20
 80154b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80154b8:	1f2e      	subs	r6, r5, #4
 80154ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80154be:	4620      	mov	r0, r4
 80154c0:	f7ff fd52 	bl	8014f68 <__hi0bits>
 80154c4:	f1c0 0320 	rsb	r3, r0, #32
 80154c8:	280a      	cmp	r0, #10
 80154ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015548 <__b2d+0x9c>
 80154ce:	600b      	str	r3, [r1, #0]
 80154d0:	dc14      	bgt.n	80154fc <__b2d+0x50>
 80154d2:	f1c0 0e0b 	rsb	lr, r0, #11
 80154d6:	fa24 f10e 	lsr.w	r1, r4, lr
 80154da:	42b7      	cmp	r7, r6
 80154dc:	ea41 030c 	orr.w	r3, r1, ip
 80154e0:	bf34      	ite	cc
 80154e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80154e6:	2100      	movcs	r1, #0
 80154e8:	3015      	adds	r0, #21
 80154ea:	fa04 f000 	lsl.w	r0, r4, r0
 80154ee:	fa21 f10e 	lsr.w	r1, r1, lr
 80154f2:	ea40 0201 	orr.w	r2, r0, r1
 80154f6:	ec43 2b10 	vmov	d0, r2, r3
 80154fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154fc:	42b7      	cmp	r7, r6
 80154fe:	bf3a      	itte	cc
 8015500:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015504:	f1a5 0608 	subcc.w	r6, r5, #8
 8015508:	2100      	movcs	r1, #0
 801550a:	380b      	subs	r0, #11
 801550c:	d017      	beq.n	801553e <__b2d+0x92>
 801550e:	f1c0 0c20 	rsb	ip, r0, #32
 8015512:	fa04 f500 	lsl.w	r5, r4, r0
 8015516:	42be      	cmp	r6, r7
 8015518:	fa21 f40c 	lsr.w	r4, r1, ip
 801551c:	ea45 0504 	orr.w	r5, r5, r4
 8015520:	bf8c      	ite	hi
 8015522:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015526:	2400      	movls	r4, #0
 8015528:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801552c:	fa01 f000 	lsl.w	r0, r1, r0
 8015530:	fa24 f40c 	lsr.w	r4, r4, ip
 8015534:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015538:	ea40 0204 	orr.w	r2, r0, r4
 801553c:	e7db      	b.n	80154f6 <__b2d+0x4a>
 801553e:	ea44 030c 	orr.w	r3, r4, ip
 8015542:	460a      	mov	r2, r1
 8015544:	e7d7      	b.n	80154f6 <__b2d+0x4a>
 8015546:	bf00      	nop
 8015548:	3ff00000 	.word	0x3ff00000

0801554c <__d2b>:
 801554c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015550:	4689      	mov	r9, r1
 8015552:	2101      	movs	r1, #1
 8015554:	ec57 6b10 	vmov	r6, r7, d0
 8015558:	4690      	mov	r8, r2
 801555a:	f7ff fc0f 	bl	8014d7c <_Balloc>
 801555e:	4604      	mov	r4, r0
 8015560:	b930      	cbnz	r0, 8015570 <__d2b+0x24>
 8015562:	4602      	mov	r2, r0
 8015564:	4b25      	ldr	r3, [pc, #148]	; (80155fc <__d2b+0xb0>)
 8015566:	4826      	ldr	r0, [pc, #152]	; (8015600 <__d2b+0xb4>)
 8015568:	f240 310a 	movw	r1, #778	; 0x30a
 801556c:	f7fe fe6a 	bl	8014244 <__assert_func>
 8015570:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015574:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015578:	bb35      	cbnz	r5, 80155c8 <__d2b+0x7c>
 801557a:	2e00      	cmp	r6, #0
 801557c:	9301      	str	r3, [sp, #4]
 801557e:	d028      	beq.n	80155d2 <__d2b+0x86>
 8015580:	4668      	mov	r0, sp
 8015582:	9600      	str	r6, [sp, #0]
 8015584:	f7ff fd10 	bl	8014fa8 <__lo0bits>
 8015588:	9900      	ldr	r1, [sp, #0]
 801558a:	b300      	cbz	r0, 80155ce <__d2b+0x82>
 801558c:	9a01      	ldr	r2, [sp, #4]
 801558e:	f1c0 0320 	rsb	r3, r0, #32
 8015592:	fa02 f303 	lsl.w	r3, r2, r3
 8015596:	430b      	orrs	r3, r1
 8015598:	40c2      	lsrs	r2, r0
 801559a:	6163      	str	r3, [r4, #20]
 801559c:	9201      	str	r2, [sp, #4]
 801559e:	9b01      	ldr	r3, [sp, #4]
 80155a0:	61a3      	str	r3, [r4, #24]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	bf14      	ite	ne
 80155a6:	2202      	movne	r2, #2
 80155a8:	2201      	moveq	r2, #1
 80155aa:	6122      	str	r2, [r4, #16]
 80155ac:	b1d5      	cbz	r5, 80155e4 <__d2b+0x98>
 80155ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80155b2:	4405      	add	r5, r0
 80155b4:	f8c9 5000 	str.w	r5, [r9]
 80155b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80155bc:	f8c8 0000 	str.w	r0, [r8]
 80155c0:	4620      	mov	r0, r4
 80155c2:	b003      	add	sp, #12
 80155c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80155cc:	e7d5      	b.n	801557a <__d2b+0x2e>
 80155ce:	6161      	str	r1, [r4, #20]
 80155d0:	e7e5      	b.n	801559e <__d2b+0x52>
 80155d2:	a801      	add	r0, sp, #4
 80155d4:	f7ff fce8 	bl	8014fa8 <__lo0bits>
 80155d8:	9b01      	ldr	r3, [sp, #4]
 80155da:	6163      	str	r3, [r4, #20]
 80155dc:	2201      	movs	r2, #1
 80155de:	6122      	str	r2, [r4, #16]
 80155e0:	3020      	adds	r0, #32
 80155e2:	e7e3      	b.n	80155ac <__d2b+0x60>
 80155e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80155e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80155ec:	f8c9 0000 	str.w	r0, [r9]
 80155f0:	6918      	ldr	r0, [r3, #16]
 80155f2:	f7ff fcb9 	bl	8014f68 <__hi0bits>
 80155f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80155fa:	e7df      	b.n	80155bc <__d2b+0x70>
 80155fc:	08021b81 	.word	0x08021b81
 8015600:	08021c10 	.word	0x08021c10

08015604 <__ratio>:
 8015604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015608:	4688      	mov	r8, r1
 801560a:	4669      	mov	r1, sp
 801560c:	4681      	mov	r9, r0
 801560e:	f7ff ff4d 	bl	80154ac <__b2d>
 8015612:	a901      	add	r1, sp, #4
 8015614:	4640      	mov	r0, r8
 8015616:	ec55 4b10 	vmov	r4, r5, d0
 801561a:	f7ff ff47 	bl	80154ac <__b2d>
 801561e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015622:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015626:	eba3 0c02 	sub.w	ip, r3, r2
 801562a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801562e:	1a9b      	subs	r3, r3, r2
 8015630:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015634:	ec51 0b10 	vmov	r0, r1, d0
 8015638:	2b00      	cmp	r3, #0
 801563a:	bfd6      	itet	le
 801563c:	460a      	movle	r2, r1
 801563e:	462a      	movgt	r2, r5
 8015640:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015644:	468b      	mov	fp, r1
 8015646:	462f      	mov	r7, r5
 8015648:	bfd4      	ite	le
 801564a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801564e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015652:	4620      	mov	r0, r4
 8015654:	ee10 2a10 	vmov	r2, s0
 8015658:	465b      	mov	r3, fp
 801565a:	4639      	mov	r1, r7
 801565c:	f7eb f906 	bl	800086c <__aeabi_ddiv>
 8015660:	ec41 0b10 	vmov	d0, r0, r1
 8015664:	b003      	add	sp, #12
 8015666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801566a <__copybits>:
 801566a:	3901      	subs	r1, #1
 801566c:	b570      	push	{r4, r5, r6, lr}
 801566e:	1149      	asrs	r1, r1, #5
 8015670:	6914      	ldr	r4, [r2, #16]
 8015672:	3101      	adds	r1, #1
 8015674:	f102 0314 	add.w	r3, r2, #20
 8015678:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801567c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015680:	1f05      	subs	r5, r0, #4
 8015682:	42a3      	cmp	r3, r4
 8015684:	d30c      	bcc.n	80156a0 <__copybits+0x36>
 8015686:	1aa3      	subs	r3, r4, r2
 8015688:	3b11      	subs	r3, #17
 801568a:	f023 0303 	bic.w	r3, r3, #3
 801568e:	3211      	adds	r2, #17
 8015690:	42a2      	cmp	r2, r4
 8015692:	bf88      	it	hi
 8015694:	2300      	movhi	r3, #0
 8015696:	4418      	add	r0, r3
 8015698:	2300      	movs	r3, #0
 801569a:	4288      	cmp	r0, r1
 801569c:	d305      	bcc.n	80156aa <__copybits+0x40>
 801569e:	bd70      	pop	{r4, r5, r6, pc}
 80156a0:	f853 6b04 	ldr.w	r6, [r3], #4
 80156a4:	f845 6f04 	str.w	r6, [r5, #4]!
 80156a8:	e7eb      	b.n	8015682 <__copybits+0x18>
 80156aa:	f840 3b04 	str.w	r3, [r0], #4
 80156ae:	e7f4      	b.n	801569a <__copybits+0x30>

080156b0 <__any_on>:
 80156b0:	f100 0214 	add.w	r2, r0, #20
 80156b4:	6900      	ldr	r0, [r0, #16]
 80156b6:	114b      	asrs	r3, r1, #5
 80156b8:	4298      	cmp	r0, r3
 80156ba:	b510      	push	{r4, lr}
 80156bc:	db11      	blt.n	80156e2 <__any_on+0x32>
 80156be:	dd0a      	ble.n	80156d6 <__any_on+0x26>
 80156c0:	f011 011f 	ands.w	r1, r1, #31
 80156c4:	d007      	beq.n	80156d6 <__any_on+0x26>
 80156c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80156ca:	fa24 f001 	lsr.w	r0, r4, r1
 80156ce:	fa00 f101 	lsl.w	r1, r0, r1
 80156d2:	428c      	cmp	r4, r1
 80156d4:	d10b      	bne.n	80156ee <__any_on+0x3e>
 80156d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80156da:	4293      	cmp	r3, r2
 80156dc:	d803      	bhi.n	80156e6 <__any_on+0x36>
 80156de:	2000      	movs	r0, #0
 80156e0:	bd10      	pop	{r4, pc}
 80156e2:	4603      	mov	r3, r0
 80156e4:	e7f7      	b.n	80156d6 <__any_on+0x26>
 80156e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80156ea:	2900      	cmp	r1, #0
 80156ec:	d0f5      	beq.n	80156da <__any_on+0x2a>
 80156ee:	2001      	movs	r0, #1
 80156f0:	e7f6      	b.n	80156e0 <__any_on+0x30>

080156f2 <_calloc_r>:
 80156f2:	b513      	push	{r0, r1, r4, lr}
 80156f4:	434a      	muls	r2, r1
 80156f6:	4611      	mov	r1, r2
 80156f8:	9201      	str	r2, [sp, #4]
 80156fa:	f7fc fd5f 	bl	80121bc <_malloc_r>
 80156fe:	4604      	mov	r4, r0
 8015700:	b118      	cbz	r0, 801570a <_calloc_r+0x18>
 8015702:	9a01      	ldr	r2, [sp, #4]
 8015704:	2100      	movs	r1, #0
 8015706:	f7fc fd01 	bl	801210c <memset>
 801570a:	4620      	mov	r0, r4
 801570c:	b002      	add	sp, #8
 801570e:	bd10      	pop	{r4, pc}

08015710 <__ssputs_r>:
 8015710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015714:	688e      	ldr	r6, [r1, #8]
 8015716:	429e      	cmp	r6, r3
 8015718:	4682      	mov	sl, r0
 801571a:	460c      	mov	r4, r1
 801571c:	4690      	mov	r8, r2
 801571e:	461f      	mov	r7, r3
 8015720:	d838      	bhi.n	8015794 <__ssputs_r+0x84>
 8015722:	898a      	ldrh	r2, [r1, #12]
 8015724:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015728:	d032      	beq.n	8015790 <__ssputs_r+0x80>
 801572a:	6825      	ldr	r5, [r4, #0]
 801572c:	6909      	ldr	r1, [r1, #16]
 801572e:	eba5 0901 	sub.w	r9, r5, r1
 8015732:	6965      	ldr	r5, [r4, #20]
 8015734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015738:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801573c:	3301      	adds	r3, #1
 801573e:	444b      	add	r3, r9
 8015740:	106d      	asrs	r5, r5, #1
 8015742:	429d      	cmp	r5, r3
 8015744:	bf38      	it	cc
 8015746:	461d      	movcc	r5, r3
 8015748:	0553      	lsls	r3, r2, #21
 801574a:	d531      	bpl.n	80157b0 <__ssputs_r+0xa0>
 801574c:	4629      	mov	r1, r5
 801574e:	f7fc fd35 	bl	80121bc <_malloc_r>
 8015752:	4606      	mov	r6, r0
 8015754:	b950      	cbnz	r0, 801576c <__ssputs_r+0x5c>
 8015756:	230c      	movs	r3, #12
 8015758:	f8ca 3000 	str.w	r3, [sl]
 801575c:	89a3      	ldrh	r3, [r4, #12]
 801575e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015762:	81a3      	strh	r3, [r4, #12]
 8015764:	f04f 30ff 	mov.w	r0, #4294967295
 8015768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801576c:	6921      	ldr	r1, [r4, #16]
 801576e:	464a      	mov	r2, r9
 8015770:	f7fc fcbe 	bl	80120f0 <memcpy>
 8015774:	89a3      	ldrh	r3, [r4, #12]
 8015776:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801577a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801577e:	81a3      	strh	r3, [r4, #12]
 8015780:	6126      	str	r6, [r4, #16]
 8015782:	6165      	str	r5, [r4, #20]
 8015784:	444e      	add	r6, r9
 8015786:	eba5 0509 	sub.w	r5, r5, r9
 801578a:	6026      	str	r6, [r4, #0]
 801578c:	60a5      	str	r5, [r4, #8]
 801578e:	463e      	mov	r6, r7
 8015790:	42be      	cmp	r6, r7
 8015792:	d900      	bls.n	8015796 <__ssputs_r+0x86>
 8015794:	463e      	mov	r6, r7
 8015796:	4632      	mov	r2, r6
 8015798:	6820      	ldr	r0, [r4, #0]
 801579a:	4641      	mov	r1, r8
 801579c:	f000 fdd4 	bl	8016348 <memmove>
 80157a0:	68a3      	ldr	r3, [r4, #8]
 80157a2:	6822      	ldr	r2, [r4, #0]
 80157a4:	1b9b      	subs	r3, r3, r6
 80157a6:	4432      	add	r2, r6
 80157a8:	60a3      	str	r3, [r4, #8]
 80157aa:	6022      	str	r2, [r4, #0]
 80157ac:	2000      	movs	r0, #0
 80157ae:	e7db      	b.n	8015768 <__ssputs_r+0x58>
 80157b0:	462a      	mov	r2, r5
 80157b2:	f000 fde3 	bl	801637c <_realloc_r>
 80157b6:	4606      	mov	r6, r0
 80157b8:	2800      	cmp	r0, #0
 80157ba:	d1e1      	bne.n	8015780 <__ssputs_r+0x70>
 80157bc:	6921      	ldr	r1, [r4, #16]
 80157be:	4650      	mov	r0, sl
 80157c0:	f7fc fcac 	bl	801211c <_free_r>
 80157c4:	e7c7      	b.n	8015756 <__ssputs_r+0x46>
	...

080157c8 <_svfiprintf_r>:
 80157c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157cc:	4698      	mov	r8, r3
 80157ce:	898b      	ldrh	r3, [r1, #12]
 80157d0:	061b      	lsls	r3, r3, #24
 80157d2:	b09d      	sub	sp, #116	; 0x74
 80157d4:	4607      	mov	r7, r0
 80157d6:	460d      	mov	r5, r1
 80157d8:	4614      	mov	r4, r2
 80157da:	d50e      	bpl.n	80157fa <_svfiprintf_r+0x32>
 80157dc:	690b      	ldr	r3, [r1, #16]
 80157de:	b963      	cbnz	r3, 80157fa <_svfiprintf_r+0x32>
 80157e0:	2140      	movs	r1, #64	; 0x40
 80157e2:	f7fc fceb 	bl	80121bc <_malloc_r>
 80157e6:	6028      	str	r0, [r5, #0]
 80157e8:	6128      	str	r0, [r5, #16]
 80157ea:	b920      	cbnz	r0, 80157f6 <_svfiprintf_r+0x2e>
 80157ec:	230c      	movs	r3, #12
 80157ee:	603b      	str	r3, [r7, #0]
 80157f0:	f04f 30ff 	mov.w	r0, #4294967295
 80157f4:	e0d1      	b.n	801599a <_svfiprintf_r+0x1d2>
 80157f6:	2340      	movs	r3, #64	; 0x40
 80157f8:	616b      	str	r3, [r5, #20]
 80157fa:	2300      	movs	r3, #0
 80157fc:	9309      	str	r3, [sp, #36]	; 0x24
 80157fe:	2320      	movs	r3, #32
 8015800:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015804:	f8cd 800c 	str.w	r8, [sp, #12]
 8015808:	2330      	movs	r3, #48	; 0x30
 801580a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80159b4 <_svfiprintf_r+0x1ec>
 801580e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015812:	f04f 0901 	mov.w	r9, #1
 8015816:	4623      	mov	r3, r4
 8015818:	469a      	mov	sl, r3
 801581a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801581e:	b10a      	cbz	r2, 8015824 <_svfiprintf_r+0x5c>
 8015820:	2a25      	cmp	r2, #37	; 0x25
 8015822:	d1f9      	bne.n	8015818 <_svfiprintf_r+0x50>
 8015824:	ebba 0b04 	subs.w	fp, sl, r4
 8015828:	d00b      	beq.n	8015842 <_svfiprintf_r+0x7a>
 801582a:	465b      	mov	r3, fp
 801582c:	4622      	mov	r2, r4
 801582e:	4629      	mov	r1, r5
 8015830:	4638      	mov	r0, r7
 8015832:	f7ff ff6d 	bl	8015710 <__ssputs_r>
 8015836:	3001      	adds	r0, #1
 8015838:	f000 80aa 	beq.w	8015990 <_svfiprintf_r+0x1c8>
 801583c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801583e:	445a      	add	r2, fp
 8015840:	9209      	str	r2, [sp, #36]	; 0x24
 8015842:	f89a 3000 	ldrb.w	r3, [sl]
 8015846:	2b00      	cmp	r3, #0
 8015848:	f000 80a2 	beq.w	8015990 <_svfiprintf_r+0x1c8>
 801584c:	2300      	movs	r3, #0
 801584e:	f04f 32ff 	mov.w	r2, #4294967295
 8015852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015856:	f10a 0a01 	add.w	sl, sl, #1
 801585a:	9304      	str	r3, [sp, #16]
 801585c:	9307      	str	r3, [sp, #28]
 801585e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015862:	931a      	str	r3, [sp, #104]	; 0x68
 8015864:	4654      	mov	r4, sl
 8015866:	2205      	movs	r2, #5
 8015868:	f814 1b01 	ldrb.w	r1, [r4], #1
 801586c:	4851      	ldr	r0, [pc, #324]	; (80159b4 <_svfiprintf_r+0x1ec>)
 801586e:	f7ea fcc7 	bl	8000200 <memchr>
 8015872:	9a04      	ldr	r2, [sp, #16]
 8015874:	b9d8      	cbnz	r0, 80158ae <_svfiprintf_r+0xe6>
 8015876:	06d0      	lsls	r0, r2, #27
 8015878:	bf44      	itt	mi
 801587a:	2320      	movmi	r3, #32
 801587c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015880:	0711      	lsls	r1, r2, #28
 8015882:	bf44      	itt	mi
 8015884:	232b      	movmi	r3, #43	; 0x2b
 8015886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801588a:	f89a 3000 	ldrb.w	r3, [sl]
 801588e:	2b2a      	cmp	r3, #42	; 0x2a
 8015890:	d015      	beq.n	80158be <_svfiprintf_r+0xf6>
 8015892:	9a07      	ldr	r2, [sp, #28]
 8015894:	4654      	mov	r4, sl
 8015896:	2000      	movs	r0, #0
 8015898:	f04f 0c0a 	mov.w	ip, #10
 801589c:	4621      	mov	r1, r4
 801589e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80158a2:	3b30      	subs	r3, #48	; 0x30
 80158a4:	2b09      	cmp	r3, #9
 80158a6:	d94e      	bls.n	8015946 <_svfiprintf_r+0x17e>
 80158a8:	b1b0      	cbz	r0, 80158d8 <_svfiprintf_r+0x110>
 80158aa:	9207      	str	r2, [sp, #28]
 80158ac:	e014      	b.n	80158d8 <_svfiprintf_r+0x110>
 80158ae:	eba0 0308 	sub.w	r3, r0, r8
 80158b2:	fa09 f303 	lsl.w	r3, r9, r3
 80158b6:	4313      	orrs	r3, r2
 80158b8:	9304      	str	r3, [sp, #16]
 80158ba:	46a2      	mov	sl, r4
 80158bc:	e7d2      	b.n	8015864 <_svfiprintf_r+0x9c>
 80158be:	9b03      	ldr	r3, [sp, #12]
 80158c0:	1d19      	adds	r1, r3, #4
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	9103      	str	r1, [sp, #12]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	bfbb      	ittet	lt
 80158ca:	425b      	neglt	r3, r3
 80158cc:	f042 0202 	orrlt.w	r2, r2, #2
 80158d0:	9307      	strge	r3, [sp, #28]
 80158d2:	9307      	strlt	r3, [sp, #28]
 80158d4:	bfb8      	it	lt
 80158d6:	9204      	strlt	r2, [sp, #16]
 80158d8:	7823      	ldrb	r3, [r4, #0]
 80158da:	2b2e      	cmp	r3, #46	; 0x2e
 80158dc:	d10c      	bne.n	80158f8 <_svfiprintf_r+0x130>
 80158de:	7863      	ldrb	r3, [r4, #1]
 80158e0:	2b2a      	cmp	r3, #42	; 0x2a
 80158e2:	d135      	bne.n	8015950 <_svfiprintf_r+0x188>
 80158e4:	9b03      	ldr	r3, [sp, #12]
 80158e6:	1d1a      	adds	r2, r3, #4
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	9203      	str	r2, [sp, #12]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	bfb8      	it	lt
 80158f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80158f4:	3402      	adds	r4, #2
 80158f6:	9305      	str	r3, [sp, #20]
 80158f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80159c4 <_svfiprintf_r+0x1fc>
 80158fc:	7821      	ldrb	r1, [r4, #0]
 80158fe:	2203      	movs	r2, #3
 8015900:	4650      	mov	r0, sl
 8015902:	f7ea fc7d 	bl	8000200 <memchr>
 8015906:	b140      	cbz	r0, 801591a <_svfiprintf_r+0x152>
 8015908:	2340      	movs	r3, #64	; 0x40
 801590a:	eba0 000a 	sub.w	r0, r0, sl
 801590e:	fa03 f000 	lsl.w	r0, r3, r0
 8015912:	9b04      	ldr	r3, [sp, #16]
 8015914:	4303      	orrs	r3, r0
 8015916:	3401      	adds	r4, #1
 8015918:	9304      	str	r3, [sp, #16]
 801591a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801591e:	4826      	ldr	r0, [pc, #152]	; (80159b8 <_svfiprintf_r+0x1f0>)
 8015920:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015924:	2206      	movs	r2, #6
 8015926:	f7ea fc6b 	bl	8000200 <memchr>
 801592a:	2800      	cmp	r0, #0
 801592c:	d038      	beq.n	80159a0 <_svfiprintf_r+0x1d8>
 801592e:	4b23      	ldr	r3, [pc, #140]	; (80159bc <_svfiprintf_r+0x1f4>)
 8015930:	bb1b      	cbnz	r3, 801597a <_svfiprintf_r+0x1b2>
 8015932:	9b03      	ldr	r3, [sp, #12]
 8015934:	3307      	adds	r3, #7
 8015936:	f023 0307 	bic.w	r3, r3, #7
 801593a:	3308      	adds	r3, #8
 801593c:	9303      	str	r3, [sp, #12]
 801593e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015940:	4433      	add	r3, r6
 8015942:	9309      	str	r3, [sp, #36]	; 0x24
 8015944:	e767      	b.n	8015816 <_svfiprintf_r+0x4e>
 8015946:	fb0c 3202 	mla	r2, ip, r2, r3
 801594a:	460c      	mov	r4, r1
 801594c:	2001      	movs	r0, #1
 801594e:	e7a5      	b.n	801589c <_svfiprintf_r+0xd4>
 8015950:	2300      	movs	r3, #0
 8015952:	3401      	adds	r4, #1
 8015954:	9305      	str	r3, [sp, #20]
 8015956:	4619      	mov	r1, r3
 8015958:	f04f 0c0a 	mov.w	ip, #10
 801595c:	4620      	mov	r0, r4
 801595e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015962:	3a30      	subs	r2, #48	; 0x30
 8015964:	2a09      	cmp	r2, #9
 8015966:	d903      	bls.n	8015970 <_svfiprintf_r+0x1a8>
 8015968:	2b00      	cmp	r3, #0
 801596a:	d0c5      	beq.n	80158f8 <_svfiprintf_r+0x130>
 801596c:	9105      	str	r1, [sp, #20]
 801596e:	e7c3      	b.n	80158f8 <_svfiprintf_r+0x130>
 8015970:	fb0c 2101 	mla	r1, ip, r1, r2
 8015974:	4604      	mov	r4, r0
 8015976:	2301      	movs	r3, #1
 8015978:	e7f0      	b.n	801595c <_svfiprintf_r+0x194>
 801597a:	ab03      	add	r3, sp, #12
 801597c:	9300      	str	r3, [sp, #0]
 801597e:	462a      	mov	r2, r5
 8015980:	4b0f      	ldr	r3, [pc, #60]	; (80159c0 <_svfiprintf_r+0x1f8>)
 8015982:	a904      	add	r1, sp, #16
 8015984:	4638      	mov	r0, r7
 8015986:	f3af 8000 	nop.w
 801598a:	1c42      	adds	r2, r0, #1
 801598c:	4606      	mov	r6, r0
 801598e:	d1d6      	bne.n	801593e <_svfiprintf_r+0x176>
 8015990:	89ab      	ldrh	r3, [r5, #12]
 8015992:	065b      	lsls	r3, r3, #25
 8015994:	f53f af2c 	bmi.w	80157f0 <_svfiprintf_r+0x28>
 8015998:	9809      	ldr	r0, [sp, #36]	; 0x24
 801599a:	b01d      	add	sp, #116	; 0x74
 801599c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159a0:	ab03      	add	r3, sp, #12
 80159a2:	9300      	str	r3, [sp, #0]
 80159a4:	462a      	mov	r2, r5
 80159a6:	4b06      	ldr	r3, [pc, #24]	; (80159c0 <_svfiprintf_r+0x1f8>)
 80159a8:	a904      	add	r1, sp, #16
 80159aa:	4638      	mov	r0, r7
 80159ac:	f000 f9d4 	bl	8015d58 <_printf_i>
 80159b0:	e7eb      	b.n	801598a <_svfiprintf_r+0x1c2>
 80159b2:	bf00      	nop
 80159b4:	08021d6c 	.word	0x08021d6c
 80159b8:	08021d76 	.word	0x08021d76
 80159bc:	00000000 	.word	0x00000000
 80159c0:	08015711 	.word	0x08015711
 80159c4:	08021d72 	.word	0x08021d72

080159c8 <__sfputc_r>:
 80159c8:	6893      	ldr	r3, [r2, #8]
 80159ca:	3b01      	subs	r3, #1
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	b410      	push	{r4}
 80159d0:	6093      	str	r3, [r2, #8]
 80159d2:	da08      	bge.n	80159e6 <__sfputc_r+0x1e>
 80159d4:	6994      	ldr	r4, [r2, #24]
 80159d6:	42a3      	cmp	r3, r4
 80159d8:	db01      	blt.n	80159de <__sfputc_r+0x16>
 80159da:	290a      	cmp	r1, #10
 80159dc:	d103      	bne.n	80159e6 <__sfputc_r+0x1e>
 80159de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159e2:	f000 bb6b 	b.w	80160bc <__swbuf_r>
 80159e6:	6813      	ldr	r3, [r2, #0]
 80159e8:	1c58      	adds	r0, r3, #1
 80159ea:	6010      	str	r0, [r2, #0]
 80159ec:	7019      	strb	r1, [r3, #0]
 80159ee:	4608      	mov	r0, r1
 80159f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159f4:	4770      	bx	lr

080159f6 <__sfputs_r>:
 80159f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159f8:	4606      	mov	r6, r0
 80159fa:	460f      	mov	r7, r1
 80159fc:	4614      	mov	r4, r2
 80159fe:	18d5      	adds	r5, r2, r3
 8015a00:	42ac      	cmp	r4, r5
 8015a02:	d101      	bne.n	8015a08 <__sfputs_r+0x12>
 8015a04:	2000      	movs	r0, #0
 8015a06:	e007      	b.n	8015a18 <__sfputs_r+0x22>
 8015a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a0c:	463a      	mov	r2, r7
 8015a0e:	4630      	mov	r0, r6
 8015a10:	f7ff ffda 	bl	80159c8 <__sfputc_r>
 8015a14:	1c43      	adds	r3, r0, #1
 8015a16:	d1f3      	bne.n	8015a00 <__sfputs_r+0xa>
 8015a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015a1c <_vfiprintf_r>:
 8015a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a20:	460d      	mov	r5, r1
 8015a22:	b09d      	sub	sp, #116	; 0x74
 8015a24:	4614      	mov	r4, r2
 8015a26:	4698      	mov	r8, r3
 8015a28:	4606      	mov	r6, r0
 8015a2a:	b118      	cbz	r0, 8015a34 <_vfiprintf_r+0x18>
 8015a2c:	6983      	ldr	r3, [r0, #24]
 8015a2e:	b90b      	cbnz	r3, 8015a34 <_vfiprintf_r+0x18>
 8015a30:	f7fc f972 	bl	8011d18 <__sinit>
 8015a34:	4b89      	ldr	r3, [pc, #548]	; (8015c5c <_vfiprintf_r+0x240>)
 8015a36:	429d      	cmp	r5, r3
 8015a38:	d11b      	bne.n	8015a72 <_vfiprintf_r+0x56>
 8015a3a:	6875      	ldr	r5, [r6, #4]
 8015a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a3e:	07d9      	lsls	r1, r3, #31
 8015a40:	d405      	bmi.n	8015a4e <_vfiprintf_r+0x32>
 8015a42:	89ab      	ldrh	r3, [r5, #12]
 8015a44:	059a      	lsls	r2, r3, #22
 8015a46:	d402      	bmi.n	8015a4e <_vfiprintf_r+0x32>
 8015a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a4a:	f7fc fb3d 	bl	80120c8 <__retarget_lock_acquire_recursive>
 8015a4e:	89ab      	ldrh	r3, [r5, #12]
 8015a50:	071b      	lsls	r3, r3, #28
 8015a52:	d501      	bpl.n	8015a58 <_vfiprintf_r+0x3c>
 8015a54:	692b      	ldr	r3, [r5, #16]
 8015a56:	b9eb      	cbnz	r3, 8015a94 <_vfiprintf_r+0x78>
 8015a58:	4629      	mov	r1, r5
 8015a5a:	4630      	mov	r0, r6
 8015a5c:	f000 fb8e 	bl	801617c <__swsetup_r>
 8015a60:	b1c0      	cbz	r0, 8015a94 <_vfiprintf_r+0x78>
 8015a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a64:	07dc      	lsls	r4, r3, #31
 8015a66:	d50e      	bpl.n	8015a86 <_vfiprintf_r+0x6a>
 8015a68:	f04f 30ff 	mov.w	r0, #4294967295
 8015a6c:	b01d      	add	sp, #116	; 0x74
 8015a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a72:	4b7b      	ldr	r3, [pc, #492]	; (8015c60 <_vfiprintf_r+0x244>)
 8015a74:	429d      	cmp	r5, r3
 8015a76:	d101      	bne.n	8015a7c <_vfiprintf_r+0x60>
 8015a78:	68b5      	ldr	r5, [r6, #8]
 8015a7a:	e7df      	b.n	8015a3c <_vfiprintf_r+0x20>
 8015a7c:	4b79      	ldr	r3, [pc, #484]	; (8015c64 <_vfiprintf_r+0x248>)
 8015a7e:	429d      	cmp	r5, r3
 8015a80:	bf08      	it	eq
 8015a82:	68f5      	ldreq	r5, [r6, #12]
 8015a84:	e7da      	b.n	8015a3c <_vfiprintf_r+0x20>
 8015a86:	89ab      	ldrh	r3, [r5, #12]
 8015a88:	0598      	lsls	r0, r3, #22
 8015a8a:	d4ed      	bmi.n	8015a68 <_vfiprintf_r+0x4c>
 8015a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a8e:	f7fc fb1d 	bl	80120cc <__retarget_lock_release_recursive>
 8015a92:	e7e9      	b.n	8015a68 <_vfiprintf_r+0x4c>
 8015a94:	2300      	movs	r3, #0
 8015a96:	9309      	str	r3, [sp, #36]	; 0x24
 8015a98:	2320      	movs	r3, #32
 8015a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015aa2:	2330      	movs	r3, #48	; 0x30
 8015aa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015c68 <_vfiprintf_r+0x24c>
 8015aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015aac:	f04f 0901 	mov.w	r9, #1
 8015ab0:	4623      	mov	r3, r4
 8015ab2:	469a      	mov	sl, r3
 8015ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ab8:	b10a      	cbz	r2, 8015abe <_vfiprintf_r+0xa2>
 8015aba:	2a25      	cmp	r2, #37	; 0x25
 8015abc:	d1f9      	bne.n	8015ab2 <_vfiprintf_r+0x96>
 8015abe:	ebba 0b04 	subs.w	fp, sl, r4
 8015ac2:	d00b      	beq.n	8015adc <_vfiprintf_r+0xc0>
 8015ac4:	465b      	mov	r3, fp
 8015ac6:	4622      	mov	r2, r4
 8015ac8:	4629      	mov	r1, r5
 8015aca:	4630      	mov	r0, r6
 8015acc:	f7ff ff93 	bl	80159f6 <__sfputs_r>
 8015ad0:	3001      	adds	r0, #1
 8015ad2:	f000 80aa 	beq.w	8015c2a <_vfiprintf_r+0x20e>
 8015ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ad8:	445a      	add	r2, fp
 8015ada:	9209      	str	r2, [sp, #36]	; 0x24
 8015adc:	f89a 3000 	ldrb.w	r3, [sl]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	f000 80a2 	beq.w	8015c2a <_vfiprintf_r+0x20e>
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8015aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015af0:	f10a 0a01 	add.w	sl, sl, #1
 8015af4:	9304      	str	r3, [sp, #16]
 8015af6:	9307      	str	r3, [sp, #28]
 8015af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015afc:	931a      	str	r3, [sp, #104]	; 0x68
 8015afe:	4654      	mov	r4, sl
 8015b00:	2205      	movs	r2, #5
 8015b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b06:	4858      	ldr	r0, [pc, #352]	; (8015c68 <_vfiprintf_r+0x24c>)
 8015b08:	f7ea fb7a 	bl	8000200 <memchr>
 8015b0c:	9a04      	ldr	r2, [sp, #16]
 8015b0e:	b9d8      	cbnz	r0, 8015b48 <_vfiprintf_r+0x12c>
 8015b10:	06d1      	lsls	r1, r2, #27
 8015b12:	bf44      	itt	mi
 8015b14:	2320      	movmi	r3, #32
 8015b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b1a:	0713      	lsls	r3, r2, #28
 8015b1c:	bf44      	itt	mi
 8015b1e:	232b      	movmi	r3, #43	; 0x2b
 8015b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b24:	f89a 3000 	ldrb.w	r3, [sl]
 8015b28:	2b2a      	cmp	r3, #42	; 0x2a
 8015b2a:	d015      	beq.n	8015b58 <_vfiprintf_r+0x13c>
 8015b2c:	9a07      	ldr	r2, [sp, #28]
 8015b2e:	4654      	mov	r4, sl
 8015b30:	2000      	movs	r0, #0
 8015b32:	f04f 0c0a 	mov.w	ip, #10
 8015b36:	4621      	mov	r1, r4
 8015b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b3c:	3b30      	subs	r3, #48	; 0x30
 8015b3e:	2b09      	cmp	r3, #9
 8015b40:	d94e      	bls.n	8015be0 <_vfiprintf_r+0x1c4>
 8015b42:	b1b0      	cbz	r0, 8015b72 <_vfiprintf_r+0x156>
 8015b44:	9207      	str	r2, [sp, #28]
 8015b46:	e014      	b.n	8015b72 <_vfiprintf_r+0x156>
 8015b48:	eba0 0308 	sub.w	r3, r0, r8
 8015b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8015b50:	4313      	orrs	r3, r2
 8015b52:	9304      	str	r3, [sp, #16]
 8015b54:	46a2      	mov	sl, r4
 8015b56:	e7d2      	b.n	8015afe <_vfiprintf_r+0xe2>
 8015b58:	9b03      	ldr	r3, [sp, #12]
 8015b5a:	1d19      	adds	r1, r3, #4
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	9103      	str	r1, [sp, #12]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	bfbb      	ittet	lt
 8015b64:	425b      	neglt	r3, r3
 8015b66:	f042 0202 	orrlt.w	r2, r2, #2
 8015b6a:	9307      	strge	r3, [sp, #28]
 8015b6c:	9307      	strlt	r3, [sp, #28]
 8015b6e:	bfb8      	it	lt
 8015b70:	9204      	strlt	r2, [sp, #16]
 8015b72:	7823      	ldrb	r3, [r4, #0]
 8015b74:	2b2e      	cmp	r3, #46	; 0x2e
 8015b76:	d10c      	bne.n	8015b92 <_vfiprintf_r+0x176>
 8015b78:	7863      	ldrb	r3, [r4, #1]
 8015b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8015b7c:	d135      	bne.n	8015bea <_vfiprintf_r+0x1ce>
 8015b7e:	9b03      	ldr	r3, [sp, #12]
 8015b80:	1d1a      	adds	r2, r3, #4
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	9203      	str	r2, [sp, #12]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	bfb8      	it	lt
 8015b8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8015b8e:	3402      	adds	r4, #2
 8015b90:	9305      	str	r3, [sp, #20]
 8015b92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015c78 <_vfiprintf_r+0x25c>
 8015b96:	7821      	ldrb	r1, [r4, #0]
 8015b98:	2203      	movs	r2, #3
 8015b9a:	4650      	mov	r0, sl
 8015b9c:	f7ea fb30 	bl	8000200 <memchr>
 8015ba0:	b140      	cbz	r0, 8015bb4 <_vfiprintf_r+0x198>
 8015ba2:	2340      	movs	r3, #64	; 0x40
 8015ba4:	eba0 000a 	sub.w	r0, r0, sl
 8015ba8:	fa03 f000 	lsl.w	r0, r3, r0
 8015bac:	9b04      	ldr	r3, [sp, #16]
 8015bae:	4303      	orrs	r3, r0
 8015bb0:	3401      	adds	r4, #1
 8015bb2:	9304      	str	r3, [sp, #16]
 8015bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bb8:	482c      	ldr	r0, [pc, #176]	; (8015c6c <_vfiprintf_r+0x250>)
 8015bba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015bbe:	2206      	movs	r2, #6
 8015bc0:	f7ea fb1e 	bl	8000200 <memchr>
 8015bc4:	2800      	cmp	r0, #0
 8015bc6:	d03f      	beq.n	8015c48 <_vfiprintf_r+0x22c>
 8015bc8:	4b29      	ldr	r3, [pc, #164]	; (8015c70 <_vfiprintf_r+0x254>)
 8015bca:	bb1b      	cbnz	r3, 8015c14 <_vfiprintf_r+0x1f8>
 8015bcc:	9b03      	ldr	r3, [sp, #12]
 8015bce:	3307      	adds	r3, #7
 8015bd0:	f023 0307 	bic.w	r3, r3, #7
 8015bd4:	3308      	adds	r3, #8
 8015bd6:	9303      	str	r3, [sp, #12]
 8015bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bda:	443b      	add	r3, r7
 8015bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8015bde:	e767      	b.n	8015ab0 <_vfiprintf_r+0x94>
 8015be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8015be4:	460c      	mov	r4, r1
 8015be6:	2001      	movs	r0, #1
 8015be8:	e7a5      	b.n	8015b36 <_vfiprintf_r+0x11a>
 8015bea:	2300      	movs	r3, #0
 8015bec:	3401      	adds	r4, #1
 8015bee:	9305      	str	r3, [sp, #20]
 8015bf0:	4619      	mov	r1, r3
 8015bf2:	f04f 0c0a 	mov.w	ip, #10
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bfc:	3a30      	subs	r2, #48	; 0x30
 8015bfe:	2a09      	cmp	r2, #9
 8015c00:	d903      	bls.n	8015c0a <_vfiprintf_r+0x1ee>
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d0c5      	beq.n	8015b92 <_vfiprintf_r+0x176>
 8015c06:	9105      	str	r1, [sp, #20]
 8015c08:	e7c3      	b.n	8015b92 <_vfiprintf_r+0x176>
 8015c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c0e:	4604      	mov	r4, r0
 8015c10:	2301      	movs	r3, #1
 8015c12:	e7f0      	b.n	8015bf6 <_vfiprintf_r+0x1da>
 8015c14:	ab03      	add	r3, sp, #12
 8015c16:	9300      	str	r3, [sp, #0]
 8015c18:	462a      	mov	r2, r5
 8015c1a:	4b16      	ldr	r3, [pc, #88]	; (8015c74 <_vfiprintf_r+0x258>)
 8015c1c:	a904      	add	r1, sp, #16
 8015c1e:	4630      	mov	r0, r6
 8015c20:	f3af 8000 	nop.w
 8015c24:	4607      	mov	r7, r0
 8015c26:	1c78      	adds	r0, r7, #1
 8015c28:	d1d6      	bne.n	8015bd8 <_vfiprintf_r+0x1bc>
 8015c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c2c:	07d9      	lsls	r1, r3, #31
 8015c2e:	d405      	bmi.n	8015c3c <_vfiprintf_r+0x220>
 8015c30:	89ab      	ldrh	r3, [r5, #12]
 8015c32:	059a      	lsls	r2, r3, #22
 8015c34:	d402      	bmi.n	8015c3c <_vfiprintf_r+0x220>
 8015c36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c38:	f7fc fa48 	bl	80120cc <__retarget_lock_release_recursive>
 8015c3c:	89ab      	ldrh	r3, [r5, #12]
 8015c3e:	065b      	lsls	r3, r3, #25
 8015c40:	f53f af12 	bmi.w	8015a68 <_vfiprintf_r+0x4c>
 8015c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c46:	e711      	b.n	8015a6c <_vfiprintf_r+0x50>
 8015c48:	ab03      	add	r3, sp, #12
 8015c4a:	9300      	str	r3, [sp, #0]
 8015c4c:	462a      	mov	r2, r5
 8015c4e:	4b09      	ldr	r3, [pc, #36]	; (8015c74 <_vfiprintf_r+0x258>)
 8015c50:	a904      	add	r1, sp, #16
 8015c52:	4630      	mov	r0, r6
 8015c54:	f000 f880 	bl	8015d58 <_printf_i>
 8015c58:	e7e4      	b.n	8015c24 <_vfiprintf_r+0x208>
 8015c5a:	bf00      	nop
 8015c5c:	08021610 	.word	0x08021610
 8015c60:	08021630 	.word	0x08021630
 8015c64:	080215f0 	.word	0x080215f0
 8015c68:	08021d6c 	.word	0x08021d6c
 8015c6c:	08021d76 	.word	0x08021d76
 8015c70:	00000000 	.word	0x00000000
 8015c74:	080159f7 	.word	0x080159f7
 8015c78:	08021d72 	.word	0x08021d72

08015c7c <_printf_common>:
 8015c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c80:	4616      	mov	r6, r2
 8015c82:	4699      	mov	r9, r3
 8015c84:	688a      	ldr	r2, [r1, #8]
 8015c86:	690b      	ldr	r3, [r1, #16]
 8015c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015c8c:	4293      	cmp	r3, r2
 8015c8e:	bfb8      	it	lt
 8015c90:	4613      	movlt	r3, r2
 8015c92:	6033      	str	r3, [r6, #0]
 8015c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015c98:	4607      	mov	r7, r0
 8015c9a:	460c      	mov	r4, r1
 8015c9c:	b10a      	cbz	r2, 8015ca2 <_printf_common+0x26>
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	6033      	str	r3, [r6, #0]
 8015ca2:	6823      	ldr	r3, [r4, #0]
 8015ca4:	0699      	lsls	r1, r3, #26
 8015ca6:	bf42      	ittt	mi
 8015ca8:	6833      	ldrmi	r3, [r6, #0]
 8015caa:	3302      	addmi	r3, #2
 8015cac:	6033      	strmi	r3, [r6, #0]
 8015cae:	6825      	ldr	r5, [r4, #0]
 8015cb0:	f015 0506 	ands.w	r5, r5, #6
 8015cb4:	d106      	bne.n	8015cc4 <_printf_common+0x48>
 8015cb6:	f104 0a19 	add.w	sl, r4, #25
 8015cba:	68e3      	ldr	r3, [r4, #12]
 8015cbc:	6832      	ldr	r2, [r6, #0]
 8015cbe:	1a9b      	subs	r3, r3, r2
 8015cc0:	42ab      	cmp	r3, r5
 8015cc2:	dc26      	bgt.n	8015d12 <_printf_common+0x96>
 8015cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015cc8:	1e13      	subs	r3, r2, #0
 8015cca:	6822      	ldr	r2, [r4, #0]
 8015ccc:	bf18      	it	ne
 8015cce:	2301      	movne	r3, #1
 8015cd0:	0692      	lsls	r2, r2, #26
 8015cd2:	d42b      	bmi.n	8015d2c <_printf_common+0xb0>
 8015cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015cd8:	4649      	mov	r1, r9
 8015cda:	4638      	mov	r0, r7
 8015cdc:	47c0      	blx	r8
 8015cde:	3001      	adds	r0, #1
 8015ce0:	d01e      	beq.n	8015d20 <_printf_common+0xa4>
 8015ce2:	6823      	ldr	r3, [r4, #0]
 8015ce4:	68e5      	ldr	r5, [r4, #12]
 8015ce6:	6832      	ldr	r2, [r6, #0]
 8015ce8:	f003 0306 	and.w	r3, r3, #6
 8015cec:	2b04      	cmp	r3, #4
 8015cee:	bf08      	it	eq
 8015cf0:	1aad      	subeq	r5, r5, r2
 8015cf2:	68a3      	ldr	r3, [r4, #8]
 8015cf4:	6922      	ldr	r2, [r4, #16]
 8015cf6:	bf0c      	ite	eq
 8015cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015cfc:	2500      	movne	r5, #0
 8015cfe:	4293      	cmp	r3, r2
 8015d00:	bfc4      	itt	gt
 8015d02:	1a9b      	subgt	r3, r3, r2
 8015d04:	18ed      	addgt	r5, r5, r3
 8015d06:	2600      	movs	r6, #0
 8015d08:	341a      	adds	r4, #26
 8015d0a:	42b5      	cmp	r5, r6
 8015d0c:	d11a      	bne.n	8015d44 <_printf_common+0xc8>
 8015d0e:	2000      	movs	r0, #0
 8015d10:	e008      	b.n	8015d24 <_printf_common+0xa8>
 8015d12:	2301      	movs	r3, #1
 8015d14:	4652      	mov	r2, sl
 8015d16:	4649      	mov	r1, r9
 8015d18:	4638      	mov	r0, r7
 8015d1a:	47c0      	blx	r8
 8015d1c:	3001      	adds	r0, #1
 8015d1e:	d103      	bne.n	8015d28 <_printf_common+0xac>
 8015d20:	f04f 30ff 	mov.w	r0, #4294967295
 8015d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d28:	3501      	adds	r5, #1
 8015d2a:	e7c6      	b.n	8015cba <_printf_common+0x3e>
 8015d2c:	18e1      	adds	r1, r4, r3
 8015d2e:	1c5a      	adds	r2, r3, #1
 8015d30:	2030      	movs	r0, #48	; 0x30
 8015d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015d36:	4422      	add	r2, r4
 8015d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015d40:	3302      	adds	r3, #2
 8015d42:	e7c7      	b.n	8015cd4 <_printf_common+0x58>
 8015d44:	2301      	movs	r3, #1
 8015d46:	4622      	mov	r2, r4
 8015d48:	4649      	mov	r1, r9
 8015d4a:	4638      	mov	r0, r7
 8015d4c:	47c0      	blx	r8
 8015d4e:	3001      	adds	r0, #1
 8015d50:	d0e6      	beq.n	8015d20 <_printf_common+0xa4>
 8015d52:	3601      	adds	r6, #1
 8015d54:	e7d9      	b.n	8015d0a <_printf_common+0x8e>
	...

08015d58 <_printf_i>:
 8015d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d5c:	460c      	mov	r4, r1
 8015d5e:	4691      	mov	r9, r2
 8015d60:	7e27      	ldrb	r7, [r4, #24]
 8015d62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015d64:	2f78      	cmp	r7, #120	; 0x78
 8015d66:	4680      	mov	r8, r0
 8015d68:	469a      	mov	sl, r3
 8015d6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015d6e:	d807      	bhi.n	8015d80 <_printf_i+0x28>
 8015d70:	2f62      	cmp	r7, #98	; 0x62
 8015d72:	d80a      	bhi.n	8015d8a <_printf_i+0x32>
 8015d74:	2f00      	cmp	r7, #0
 8015d76:	f000 80d8 	beq.w	8015f2a <_printf_i+0x1d2>
 8015d7a:	2f58      	cmp	r7, #88	; 0x58
 8015d7c:	f000 80a3 	beq.w	8015ec6 <_printf_i+0x16e>
 8015d80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015d88:	e03a      	b.n	8015e00 <_printf_i+0xa8>
 8015d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015d8e:	2b15      	cmp	r3, #21
 8015d90:	d8f6      	bhi.n	8015d80 <_printf_i+0x28>
 8015d92:	a001      	add	r0, pc, #4	; (adr r0, 8015d98 <_printf_i+0x40>)
 8015d94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015d98:	08015df1 	.word	0x08015df1
 8015d9c:	08015e05 	.word	0x08015e05
 8015da0:	08015d81 	.word	0x08015d81
 8015da4:	08015d81 	.word	0x08015d81
 8015da8:	08015d81 	.word	0x08015d81
 8015dac:	08015d81 	.word	0x08015d81
 8015db0:	08015e05 	.word	0x08015e05
 8015db4:	08015d81 	.word	0x08015d81
 8015db8:	08015d81 	.word	0x08015d81
 8015dbc:	08015d81 	.word	0x08015d81
 8015dc0:	08015d81 	.word	0x08015d81
 8015dc4:	08015f11 	.word	0x08015f11
 8015dc8:	08015e35 	.word	0x08015e35
 8015dcc:	08015ef3 	.word	0x08015ef3
 8015dd0:	08015d81 	.word	0x08015d81
 8015dd4:	08015d81 	.word	0x08015d81
 8015dd8:	08015f33 	.word	0x08015f33
 8015ddc:	08015d81 	.word	0x08015d81
 8015de0:	08015e35 	.word	0x08015e35
 8015de4:	08015d81 	.word	0x08015d81
 8015de8:	08015d81 	.word	0x08015d81
 8015dec:	08015efb 	.word	0x08015efb
 8015df0:	680b      	ldr	r3, [r1, #0]
 8015df2:	1d1a      	adds	r2, r3, #4
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	600a      	str	r2, [r1, #0]
 8015df8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015e00:	2301      	movs	r3, #1
 8015e02:	e0a3      	b.n	8015f4c <_printf_i+0x1f4>
 8015e04:	6825      	ldr	r5, [r4, #0]
 8015e06:	6808      	ldr	r0, [r1, #0]
 8015e08:	062e      	lsls	r6, r5, #24
 8015e0a:	f100 0304 	add.w	r3, r0, #4
 8015e0e:	d50a      	bpl.n	8015e26 <_printf_i+0xce>
 8015e10:	6805      	ldr	r5, [r0, #0]
 8015e12:	600b      	str	r3, [r1, #0]
 8015e14:	2d00      	cmp	r5, #0
 8015e16:	da03      	bge.n	8015e20 <_printf_i+0xc8>
 8015e18:	232d      	movs	r3, #45	; 0x2d
 8015e1a:	426d      	negs	r5, r5
 8015e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e20:	485e      	ldr	r0, [pc, #376]	; (8015f9c <_printf_i+0x244>)
 8015e22:	230a      	movs	r3, #10
 8015e24:	e019      	b.n	8015e5a <_printf_i+0x102>
 8015e26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015e2a:	6805      	ldr	r5, [r0, #0]
 8015e2c:	600b      	str	r3, [r1, #0]
 8015e2e:	bf18      	it	ne
 8015e30:	b22d      	sxthne	r5, r5
 8015e32:	e7ef      	b.n	8015e14 <_printf_i+0xbc>
 8015e34:	680b      	ldr	r3, [r1, #0]
 8015e36:	6825      	ldr	r5, [r4, #0]
 8015e38:	1d18      	adds	r0, r3, #4
 8015e3a:	6008      	str	r0, [r1, #0]
 8015e3c:	0628      	lsls	r0, r5, #24
 8015e3e:	d501      	bpl.n	8015e44 <_printf_i+0xec>
 8015e40:	681d      	ldr	r5, [r3, #0]
 8015e42:	e002      	b.n	8015e4a <_printf_i+0xf2>
 8015e44:	0669      	lsls	r1, r5, #25
 8015e46:	d5fb      	bpl.n	8015e40 <_printf_i+0xe8>
 8015e48:	881d      	ldrh	r5, [r3, #0]
 8015e4a:	4854      	ldr	r0, [pc, #336]	; (8015f9c <_printf_i+0x244>)
 8015e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8015e4e:	bf0c      	ite	eq
 8015e50:	2308      	moveq	r3, #8
 8015e52:	230a      	movne	r3, #10
 8015e54:	2100      	movs	r1, #0
 8015e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015e5a:	6866      	ldr	r6, [r4, #4]
 8015e5c:	60a6      	str	r6, [r4, #8]
 8015e5e:	2e00      	cmp	r6, #0
 8015e60:	bfa2      	ittt	ge
 8015e62:	6821      	ldrge	r1, [r4, #0]
 8015e64:	f021 0104 	bicge.w	r1, r1, #4
 8015e68:	6021      	strge	r1, [r4, #0]
 8015e6a:	b90d      	cbnz	r5, 8015e70 <_printf_i+0x118>
 8015e6c:	2e00      	cmp	r6, #0
 8015e6e:	d04d      	beq.n	8015f0c <_printf_i+0x1b4>
 8015e70:	4616      	mov	r6, r2
 8015e72:	fbb5 f1f3 	udiv	r1, r5, r3
 8015e76:	fb03 5711 	mls	r7, r3, r1, r5
 8015e7a:	5dc7      	ldrb	r7, [r0, r7]
 8015e7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015e80:	462f      	mov	r7, r5
 8015e82:	42bb      	cmp	r3, r7
 8015e84:	460d      	mov	r5, r1
 8015e86:	d9f4      	bls.n	8015e72 <_printf_i+0x11a>
 8015e88:	2b08      	cmp	r3, #8
 8015e8a:	d10b      	bne.n	8015ea4 <_printf_i+0x14c>
 8015e8c:	6823      	ldr	r3, [r4, #0]
 8015e8e:	07df      	lsls	r7, r3, #31
 8015e90:	d508      	bpl.n	8015ea4 <_printf_i+0x14c>
 8015e92:	6923      	ldr	r3, [r4, #16]
 8015e94:	6861      	ldr	r1, [r4, #4]
 8015e96:	4299      	cmp	r1, r3
 8015e98:	bfde      	ittt	le
 8015e9a:	2330      	movle	r3, #48	; 0x30
 8015e9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015ea0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015ea4:	1b92      	subs	r2, r2, r6
 8015ea6:	6122      	str	r2, [r4, #16]
 8015ea8:	f8cd a000 	str.w	sl, [sp]
 8015eac:	464b      	mov	r3, r9
 8015eae:	aa03      	add	r2, sp, #12
 8015eb0:	4621      	mov	r1, r4
 8015eb2:	4640      	mov	r0, r8
 8015eb4:	f7ff fee2 	bl	8015c7c <_printf_common>
 8015eb8:	3001      	adds	r0, #1
 8015eba:	d14c      	bne.n	8015f56 <_printf_i+0x1fe>
 8015ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8015ec0:	b004      	add	sp, #16
 8015ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ec6:	4835      	ldr	r0, [pc, #212]	; (8015f9c <_printf_i+0x244>)
 8015ec8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015ecc:	6823      	ldr	r3, [r4, #0]
 8015ece:	680e      	ldr	r6, [r1, #0]
 8015ed0:	061f      	lsls	r7, r3, #24
 8015ed2:	f856 5b04 	ldr.w	r5, [r6], #4
 8015ed6:	600e      	str	r6, [r1, #0]
 8015ed8:	d514      	bpl.n	8015f04 <_printf_i+0x1ac>
 8015eda:	07d9      	lsls	r1, r3, #31
 8015edc:	bf44      	itt	mi
 8015ede:	f043 0320 	orrmi.w	r3, r3, #32
 8015ee2:	6023      	strmi	r3, [r4, #0]
 8015ee4:	b91d      	cbnz	r5, 8015eee <_printf_i+0x196>
 8015ee6:	6823      	ldr	r3, [r4, #0]
 8015ee8:	f023 0320 	bic.w	r3, r3, #32
 8015eec:	6023      	str	r3, [r4, #0]
 8015eee:	2310      	movs	r3, #16
 8015ef0:	e7b0      	b.n	8015e54 <_printf_i+0xfc>
 8015ef2:	6823      	ldr	r3, [r4, #0]
 8015ef4:	f043 0320 	orr.w	r3, r3, #32
 8015ef8:	6023      	str	r3, [r4, #0]
 8015efa:	2378      	movs	r3, #120	; 0x78
 8015efc:	4828      	ldr	r0, [pc, #160]	; (8015fa0 <_printf_i+0x248>)
 8015efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015f02:	e7e3      	b.n	8015ecc <_printf_i+0x174>
 8015f04:	065e      	lsls	r6, r3, #25
 8015f06:	bf48      	it	mi
 8015f08:	b2ad      	uxthmi	r5, r5
 8015f0a:	e7e6      	b.n	8015eda <_printf_i+0x182>
 8015f0c:	4616      	mov	r6, r2
 8015f0e:	e7bb      	b.n	8015e88 <_printf_i+0x130>
 8015f10:	680b      	ldr	r3, [r1, #0]
 8015f12:	6826      	ldr	r6, [r4, #0]
 8015f14:	6960      	ldr	r0, [r4, #20]
 8015f16:	1d1d      	adds	r5, r3, #4
 8015f18:	600d      	str	r5, [r1, #0]
 8015f1a:	0635      	lsls	r5, r6, #24
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	d501      	bpl.n	8015f24 <_printf_i+0x1cc>
 8015f20:	6018      	str	r0, [r3, #0]
 8015f22:	e002      	b.n	8015f2a <_printf_i+0x1d2>
 8015f24:	0671      	lsls	r1, r6, #25
 8015f26:	d5fb      	bpl.n	8015f20 <_printf_i+0x1c8>
 8015f28:	8018      	strh	r0, [r3, #0]
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	6123      	str	r3, [r4, #16]
 8015f2e:	4616      	mov	r6, r2
 8015f30:	e7ba      	b.n	8015ea8 <_printf_i+0x150>
 8015f32:	680b      	ldr	r3, [r1, #0]
 8015f34:	1d1a      	adds	r2, r3, #4
 8015f36:	600a      	str	r2, [r1, #0]
 8015f38:	681e      	ldr	r6, [r3, #0]
 8015f3a:	6862      	ldr	r2, [r4, #4]
 8015f3c:	2100      	movs	r1, #0
 8015f3e:	4630      	mov	r0, r6
 8015f40:	f7ea f95e 	bl	8000200 <memchr>
 8015f44:	b108      	cbz	r0, 8015f4a <_printf_i+0x1f2>
 8015f46:	1b80      	subs	r0, r0, r6
 8015f48:	6060      	str	r0, [r4, #4]
 8015f4a:	6863      	ldr	r3, [r4, #4]
 8015f4c:	6123      	str	r3, [r4, #16]
 8015f4e:	2300      	movs	r3, #0
 8015f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f54:	e7a8      	b.n	8015ea8 <_printf_i+0x150>
 8015f56:	6923      	ldr	r3, [r4, #16]
 8015f58:	4632      	mov	r2, r6
 8015f5a:	4649      	mov	r1, r9
 8015f5c:	4640      	mov	r0, r8
 8015f5e:	47d0      	blx	sl
 8015f60:	3001      	adds	r0, #1
 8015f62:	d0ab      	beq.n	8015ebc <_printf_i+0x164>
 8015f64:	6823      	ldr	r3, [r4, #0]
 8015f66:	079b      	lsls	r3, r3, #30
 8015f68:	d413      	bmi.n	8015f92 <_printf_i+0x23a>
 8015f6a:	68e0      	ldr	r0, [r4, #12]
 8015f6c:	9b03      	ldr	r3, [sp, #12]
 8015f6e:	4298      	cmp	r0, r3
 8015f70:	bfb8      	it	lt
 8015f72:	4618      	movlt	r0, r3
 8015f74:	e7a4      	b.n	8015ec0 <_printf_i+0x168>
 8015f76:	2301      	movs	r3, #1
 8015f78:	4632      	mov	r2, r6
 8015f7a:	4649      	mov	r1, r9
 8015f7c:	4640      	mov	r0, r8
 8015f7e:	47d0      	blx	sl
 8015f80:	3001      	adds	r0, #1
 8015f82:	d09b      	beq.n	8015ebc <_printf_i+0x164>
 8015f84:	3501      	adds	r5, #1
 8015f86:	68e3      	ldr	r3, [r4, #12]
 8015f88:	9903      	ldr	r1, [sp, #12]
 8015f8a:	1a5b      	subs	r3, r3, r1
 8015f8c:	42ab      	cmp	r3, r5
 8015f8e:	dcf2      	bgt.n	8015f76 <_printf_i+0x21e>
 8015f90:	e7eb      	b.n	8015f6a <_printf_i+0x212>
 8015f92:	2500      	movs	r5, #0
 8015f94:	f104 0619 	add.w	r6, r4, #25
 8015f98:	e7f5      	b.n	8015f86 <_printf_i+0x22e>
 8015f9a:	bf00      	nop
 8015f9c:	08021d7d 	.word	0x08021d7d
 8015fa0:	08021d8e 	.word	0x08021d8e

08015fa4 <_read_r>:
 8015fa4:	b538      	push	{r3, r4, r5, lr}
 8015fa6:	4d07      	ldr	r5, [pc, #28]	; (8015fc4 <_read_r+0x20>)
 8015fa8:	4604      	mov	r4, r0
 8015faa:	4608      	mov	r0, r1
 8015fac:	4611      	mov	r1, r2
 8015fae:	2200      	movs	r2, #0
 8015fb0:	602a      	str	r2, [r5, #0]
 8015fb2:	461a      	mov	r2, r3
 8015fb4:	f7ee fb64 	bl	8004680 <_read>
 8015fb8:	1c43      	adds	r3, r0, #1
 8015fba:	d102      	bne.n	8015fc2 <_read_r+0x1e>
 8015fbc:	682b      	ldr	r3, [r5, #0]
 8015fbe:	b103      	cbz	r3, 8015fc2 <_read_r+0x1e>
 8015fc0:	6023      	str	r3, [r4, #0]
 8015fc2:	bd38      	pop	{r3, r4, r5, pc}
 8015fc4:	20013088 	.word	0x20013088

08015fc8 <nan>:
 8015fc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015fd0 <nan+0x8>
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop
 8015fd0:	00000000 	.word	0x00000000
 8015fd4:	7ff80000 	.word	0x7ff80000

08015fd8 <sniprintf>:
 8015fd8:	b40c      	push	{r2, r3}
 8015fda:	b530      	push	{r4, r5, lr}
 8015fdc:	4b17      	ldr	r3, [pc, #92]	; (801603c <sniprintf+0x64>)
 8015fde:	1e0c      	subs	r4, r1, #0
 8015fe0:	681d      	ldr	r5, [r3, #0]
 8015fe2:	b09d      	sub	sp, #116	; 0x74
 8015fe4:	da08      	bge.n	8015ff8 <sniprintf+0x20>
 8015fe6:	238b      	movs	r3, #139	; 0x8b
 8015fe8:	602b      	str	r3, [r5, #0]
 8015fea:	f04f 30ff 	mov.w	r0, #4294967295
 8015fee:	b01d      	add	sp, #116	; 0x74
 8015ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ff4:	b002      	add	sp, #8
 8015ff6:	4770      	bx	lr
 8015ff8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015ffc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016000:	bf14      	ite	ne
 8016002:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016006:	4623      	moveq	r3, r4
 8016008:	9304      	str	r3, [sp, #16]
 801600a:	9307      	str	r3, [sp, #28]
 801600c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016010:	9002      	str	r0, [sp, #8]
 8016012:	9006      	str	r0, [sp, #24]
 8016014:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016018:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801601a:	ab21      	add	r3, sp, #132	; 0x84
 801601c:	a902      	add	r1, sp, #8
 801601e:	4628      	mov	r0, r5
 8016020:	9301      	str	r3, [sp, #4]
 8016022:	f7ff fbd1 	bl	80157c8 <_svfiprintf_r>
 8016026:	1c43      	adds	r3, r0, #1
 8016028:	bfbc      	itt	lt
 801602a:	238b      	movlt	r3, #139	; 0x8b
 801602c:	602b      	strlt	r3, [r5, #0]
 801602e:	2c00      	cmp	r4, #0
 8016030:	d0dd      	beq.n	8015fee <sniprintf+0x16>
 8016032:	9b02      	ldr	r3, [sp, #8]
 8016034:	2200      	movs	r2, #0
 8016036:	701a      	strb	r2, [r3, #0]
 8016038:	e7d9      	b.n	8015fee <sniprintf+0x16>
 801603a:	bf00      	nop
 801603c:	200000b4 	.word	0x200000b4

08016040 <siscanf>:
 8016040:	b40e      	push	{r1, r2, r3}
 8016042:	b510      	push	{r4, lr}
 8016044:	b09f      	sub	sp, #124	; 0x7c
 8016046:	ac21      	add	r4, sp, #132	; 0x84
 8016048:	f44f 7101 	mov.w	r1, #516	; 0x204
 801604c:	f854 2b04 	ldr.w	r2, [r4], #4
 8016050:	9201      	str	r2, [sp, #4]
 8016052:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016056:	9004      	str	r0, [sp, #16]
 8016058:	9008      	str	r0, [sp, #32]
 801605a:	f7ea f8c3 	bl	80001e4 <strlen>
 801605e:	4b0c      	ldr	r3, [pc, #48]	; (8016090 <siscanf+0x50>)
 8016060:	9005      	str	r0, [sp, #20]
 8016062:	9009      	str	r0, [sp, #36]	; 0x24
 8016064:	930d      	str	r3, [sp, #52]	; 0x34
 8016066:	480b      	ldr	r0, [pc, #44]	; (8016094 <siscanf+0x54>)
 8016068:	9a01      	ldr	r2, [sp, #4]
 801606a:	6800      	ldr	r0, [r0, #0]
 801606c:	9403      	str	r4, [sp, #12]
 801606e:	2300      	movs	r3, #0
 8016070:	9311      	str	r3, [sp, #68]	; 0x44
 8016072:	9316      	str	r3, [sp, #88]	; 0x58
 8016074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016078:	f8ad 301e 	strh.w	r3, [sp, #30]
 801607c:	a904      	add	r1, sp, #16
 801607e:	4623      	mov	r3, r4
 8016080:	f000 f9fc 	bl	801647c <__ssvfiscanf_r>
 8016084:	b01f      	add	sp, #124	; 0x7c
 8016086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801608a:	b003      	add	sp, #12
 801608c:	4770      	bx	lr
 801608e:	bf00      	nop
 8016090:	080123c7 	.word	0x080123c7
 8016094:	200000b4 	.word	0x200000b4

08016098 <strncmp>:
 8016098:	b510      	push	{r4, lr}
 801609a:	b16a      	cbz	r2, 80160b8 <strncmp+0x20>
 801609c:	3901      	subs	r1, #1
 801609e:	1884      	adds	r4, r0, r2
 80160a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80160a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80160a8:	4293      	cmp	r3, r2
 80160aa:	d103      	bne.n	80160b4 <strncmp+0x1c>
 80160ac:	42a0      	cmp	r0, r4
 80160ae:	d001      	beq.n	80160b4 <strncmp+0x1c>
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d1f5      	bne.n	80160a0 <strncmp+0x8>
 80160b4:	1a98      	subs	r0, r3, r2
 80160b6:	bd10      	pop	{r4, pc}
 80160b8:	4610      	mov	r0, r2
 80160ba:	e7fc      	b.n	80160b6 <strncmp+0x1e>

080160bc <__swbuf_r>:
 80160bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160be:	460e      	mov	r6, r1
 80160c0:	4614      	mov	r4, r2
 80160c2:	4605      	mov	r5, r0
 80160c4:	b118      	cbz	r0, 80160ce <__swbuf_r+0x12>
 80160c6:	6983      	ldr	r3, [r0, #24]
 80160c8:	b90b      	cbnz	r3, 80160ce <__swbuf_r+0x12>
 80160ca:	f7fb fe25 	bl	8011d18 <__sinit>
 80160ce:	4b21      	ldr	r3, [pc, #132]	; (8016154 <__swbuf_r+0x98>)
 80160d0:	429c      	cmp	r4, r3
 80160d2:	d12b      	bne.n	801612c <__swbuf_r+0x70>
 80160d4:	686c      	ldr	r4, [r5, #4]
 80160d6:	69a3      	ldr	r3, [r4, #24]
 80160d8:	60a3      	str	r3, [r4, #8]
 80160da:	89a3      	ldrh	r3, [r4, #12]
 80160dc:	071a      	lsls	r2, r3, #28
 80160de:	d52f      	bpl.n	8016140 <__swbuf_r+0x84>
 80160e0:	6923      	ldr	r3, [r4, #16]
 80160e2:	b36b      	cbz	r3, 8016140 <__swbuf_r+0x84>
 80160e4:	6923      	ldr	r3, [r4, #16]
 80160e6:	6820      	ldr	r0, [r4, #0]
 80160e8:	1ac0      	subs	r0, r0, r3
 80160ea:	6963      	ldr	r3, [r4, #20]
 80160ec:	b2f6      	uxtb	r6, r6
 80160ee:	4283      	cmp	r3, r0
 80160f0:	4637      	mov	r7, r6
 80160f2:	dc04      	bgt.n	80160fe <__swbuf_r+0x42>
 80160f4:	4621      	mov	r1, r4
 80160f6:	4628      	mov	r0, r5
 80160f8:	f7fe f958 	bl	80143ac <_fflush_r>
 80160fc:	bb30      	cbnz	r0, 801614c <__swbuf_r+0x90>
 80160fe:	68a3      	ldr	r3, [r4, #8]
 8016100:	3b01      	subs	r3, #1
 8016102:	60a3      	str	r3, [r4, #8]
 8016104:	6823      	ldr	r3, [r4, #0]
 8016106:	1c5a      	adds	r2, r3, #1
 8016108:	6022      	str	r2, [r4, #0]
 801610a:	701e      	strb	r6, [r3, #0]
 801610c:	6963      	ldr	r3, [r4, #20]
 801610e:	3001      	adds	r0, #1
 8016110:	4283      	cmp	r3, r0
 8016112:	d004      	beq.n	801611e <__swbuf_r+0x62>
 8016114:	89a3      	ldrh	r3, [r4, #12]
 8016116:	07db      	lsls	r3, r3, #31
 8016118:	d506      	bpl.n	8016128 <__swbuf_r+0x6c>
 801611a:	2e0a      	cmp	r6, #10
 801611c:	d104      	bne.n	8016128 <__swbuf_r+0x6c>
 801611e:	4621      	mov	r1, r4
 8016120:	4628      	mov	r0, r5
 8016122:	f7fe f943 	bl	80143ac <_fflush_r>
 8016126:	b988      	cbnz	r0, 801614c <__swbuf_r+0x90>
 8016128:	4638      	mov	r0, r7
 801612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801612c:	4b0a      	ldr	r3, [pc, #40]	; (8016158 <__swbuf_r+0x9c>)
 801612e:	429c      	cmp	r4, r3
 8016130:	d101      	bne.n	8016136 <__swbuf_r+0x7a>
 8016132:	68ac      	ldr	r4, [r5, #8]
 8016134:	e7cf      	b.n	80160d6 <__swbuf_r+0x1a>
 8016136:	4b09      	ldr	r3, [pc, #36]	; (801615c <__swbuf_r+0xa0>)
 8016138:	429c      	cmp	r4, r3
 801613a:	bf08      	it	eq
 801613c:	68ec      	ldreq	r4, [r5, #12]
 801613e:	e7ca      	b.n	80160d6 <__swbuf_r+0x1a>
 8016140:	4621      	mov	r1, r4
 8016142:	4628      	mov	r0, r5
 8016144:	f000 f81a 	bl	801617c <__swsetup_r>
 8016148:	2800      	cmp	r0, #0
 801614a:	d0cb      	beq.n	80160e4 <__swbuf_r+0x28>
 801614c:	f04f 37ff 	mov.w	r7, #4294967295
 8016150:	e7ea      	b.n	8016128 <__swbuf_r+0x6c>
 8016152:	bf00      	nop
 8016154:	08021610 	.word	0x08021610
 8016158:	08021630 	.word	0x08021630
 801615c:	080215f0 	.word	0x080215f0

08016160 <__ascii_wctomb>:
 8016160:	b149      	cbz	r1, 8016176 <__ascii_wctomb+0x16>
 8016162:	2aff      	cmp	r2, #255	; 0xff
 8016164:	bf85      	ittet	hi
 8016166:	238a      	movhi	r3, #138	; 0x8a
 8016168:	6003      	strhi	r3, [r0, #0]
 801616a:	700a      	strbls	r2, [r1, #0]
 801616c:	f04f 30ff 	movhi.w	r0, #4294967295
 8016170:	bf98      	it	ls
 8016172:	2001      	movls	r0, #1
 8016174:	4770      	bx	lr
 8016176:	4608      	mov	r0, r1
 8016178:	4770      	bx	lr
	...

0801617c <__swsetup_r>:
 801617c:	4b32      	ldr	r3, [pc, #200]	; (8016248 <__swsetup_r+0xcc>)
 801617e:	b570      	push	{r4, r5, r6, lr}
 8016180:	681d      	ldr	r5, [r3, #0]
 8016182:	4606      	mov	r6, r0
 8016184:	460c      	mov	r4, r1
 8016186:	b125      	cbz	r5, 8016192 <__swsetup_r+0x16>
 8016188:	69ab      	ldr	r3, [r5, #24]
 801618a:	b913      	cbnz	r3, 8016192 <__swsetup_r+0x16>
 801618c:	4628      	mov	r0, r5
 801618e:	f7fb fdc3 	bl	8011d18 <__sinit>
 8016192:	4b2e      	ldr	r3, [pc, #184]	; (801624c <__swsetup_r+0xd0>)
 8016194:	429c      	cmp	r4, r3
 8016196:	d10f      	bne.n	80161b8 <__swsetup_r+0x3c>
 8016198:	686c      	ldr	r4, [r5, #4]
 801619a:	89a3      	ldrh	r3, [r4, #12]
 801619c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80161a0:	0719      	lsls	r1, r3, #28
 80161a2:	d42c      	bmi.n	80161fe <__swsetup_r+0x82>
 80161a4:	06dd      	lsls	r5, r3, #27
 80161a6:	d411      	bmi.n	80161cc <__swsetup_r+0x50>
 80161a8:	2309      	movs	r3, #9
 80161aa:	6033      	str	r3, [r6, #0]
 80161ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80161b0:	81a3      	strh	r3, [r4, #12]
 80161b2:	f04f 30ff 	mov.w	r0, #4294967295
 80161b6:	e03e      	b.n	8016236 <__swsetup_r+0xba>
 80161b8:	4b25      	ldr	r3, [pc, #148]	; (8016250 <__swsetup_r+0xd4>)
 80161ba:	429c      	cmp	r4, r3
 80161bc:	d101      	bne.n	80161c2 <__swsetup_r+0x46>
 80161be:	68ac      	ldr	r4, [r5, #8]
 80161c0:	e7eb      	b.n	801619a <__swsetup_r+0x1e>
 80161c2:	4b24      	ldr	r3, [pc, #144]	; (8016254 <__swsetup_r+0xd8>)
 80161c4:	429c      	cmp	r4, r3
 80161c6:	bf08      	it	eq
 80161c8:	68ec      	ldreq	r4, [r5, #12]
 80161ca:	e7e6      	b.n	801619a <__swsetup_r+0x1e>
 80161cc:	0758      	lsls	r0, r3, #29
 80161ce:	d512      	bpl.n	80161f6 <__swsetup_r+0x7a>
 80161d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161d2:	b141      	cbz	r1, 80161e6 <__swsetup_r+0x6a>
 80161d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161d8:	4299      	cmp	r1, r3
 80161da:	d002      	beq.n	80161e2 <__swsetup_r+0x66>
 80161dc:	4630      	mov	r0, r6
 80161de:	f7fb ff9d 	bl	801211c <_free_r>
 80161e2:	2300      	movs	r3, #0
 80161e4:	6363      	str	r3, [r4, #52]	; 0x34
 80161e6:	89a3      	ldrh	r3, [r4, #12]
 80161e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80161ec:	81a3      	strh	r3, [r4, #12]
 80161ee:	2300      	movs	r3, #0
 80161f0:	6063      	str	r3, [r4, #4]
 80161f2:	6923      	ldr	r3, [r4, #16]
 80161f4:	6023      	str	r3, [r4, #0]
 80161f6:	89a3      	ldrh	r3, [r4, #12]
 80161f8:	f043 0308 	orr.w	r3, r3, #8
 80161fc:	81a3      	strh	r3, [r4, #12]
 80161fe:	6923      	ldr	r3, [r4, #16]
 8016200:	b94b      	cbnz	r3, 8016216 <__swsetup_r+0x9a>
 8016202:	89a3      	ldrh	r3, [r4, #12]
 8016204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801620c:	d003      	beq.n	8016216 <__swsetup_r+0x9a>
 801620e:	4621      	mov	r1, r4
 8016210:	4630      	mov	r0, r6
 8016212:	f000 f859 	bl	80162c8 <__smakebuf_r>
 8016216:	89a0      	ldrh	r0, [r4, #12]
 8016218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801621c:	f010 0301 	ands.w	r3, r0, #1
 8016220:	d00a      	beq.n	8016238 <__swsetup_r+0xbc>
 8016222:	2300      	movs	r3, #0
 8016224:	60a3      	str	r3, [r4, #8]
 8016226:	6963      	ldr	r3, [r4, #20]
 8016228:	425b      	negs	r3, r3
 801622a:	61a3      	str	r3, [r4, #24]
 801622c:	6923      	ldr	r3, [r4, #16]
 801622e:	b943      	cbnz	r3, 8016242 <__swsetup_r+0xc6>
 8016230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016234:	d1ba      	bne.n	80161ac <__swsetup_r+0x30>
 8016236:	bd70      	pop	{r4, r5, r6, pc}
 8016238:	0781      	lsls	r1, r0, #30
 801623a:	bf58      	it	pl
 801623c:	6963      	ldrpl	r3, [r4, #20]
 801623e:	60a3      	str	r3, [r4, #8]
 8016240:	e7f4      	b.n	801622c <__swsetup_r+0xb0>
 8016242:	2000      	movs	r0, #0
 8016244:	e7f7      	b.n	8016236 <__swsetup_r+0xba>
 8016246:	bf00      	nop
 8016248:	200000b4 	.word	0x200000b4
 801624c:	08021610 	.word	0x08021610
 8016250:	08021630 	.word	0x08021630
 8016254:	080215f0 	.word	0x080215f0

08016258 <abort>:
 8016258:	b508      	push	{r3, lr}
 801625a:	2006      	movs	r0, #6
 801625c:	f000 fc34 	bl	8016ac8 <raise>
 8016260:	2001      	movs	r0, #1
 8016262:	f7ee fa03 	bl	800466c <_exit>
	...

08016268 <__env_lock>:
 8016268:	4801      	ldr	r0, [pc, #4]	; (8016270 <__env_lock+0x8>)
 801626a:	f7fb bf2d 	b.w	80120c8 <__retarget_lock_acquire_recursive>
 801626e:	bf00      	nop
 8016270:	2001307e 	.word	0x2001307e

08016274 <__env_unlock>:
 8016274:	4801      	ldr	r0, [pc, #4]	; (801627c <__env_unlock+0x8>)
 8016276:	f7fb bf29 	b.w	80120cc <__retarget_lock_release_recursive>
 801627a:	bf00      	nop
 801627c:	2001307e 	.word	0x2001307e

08016280 <__swhatbuf_r>:
 8016280:	b570      	push	{r4, r5, r6, lr}
 8016282:	460e      	mov	r6, r1
 8016284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016288:	2900      	cmp	r1, #0
 801628a:	b096      	sub	sp, #88	; 0x58
 801628c:	4614      	mov	r4, r2
 801628e:	461d      	mov	r5, r3
 8016290:	da07      	bge.n	80162a2 <__swhatbuf_r+0x22>
 8016292:	2300      	movs	r3, #0
 8016294:	602b      	str	r3, [r5, #0]
 8016296:	89b3      	ldrh	r3, [r6, #12]
 8016298:	061a      	lsls	r2, r3, #24
 801629a:	d410      	bmi.n	80162be <__swhatbuf_r+0x3e>
 801629c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80162a0:	e00e      	b.n	80162c0 <__swhatbuf_r+0x40>
 80162a2:	466a      	mov	r2, sp
 80162a4:	f000 fc66 	bl	8016b74 <_fstat_r>
 80162a8:	2800      	cmp	r0, #0
 80162aa:	dbf2      	blt.n	8016292 <__swhatbuf_r+0x12>
 80162ac:	9a01      	ldr	r2, [sp, #4]
 80162ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80162b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80162b6:	425a      	negs	r2, r3
 80162b8:	415a      	adcs	r2, r3
 80162ba:	602a      	str	r2, [r5, #0]
 80162bc:	e7ee      	b.n	801629c <__swhatbuf_r+0x1c>
 80162be:	2340      	movs	r3, #64	; 0x40
 80162c0:	2000      	movs	r0, #0
 80162c2:	6023      	str	r3, [r4, #0]
 80162c4:	b016      	add	sp, #88	; 0x58
 80162c6:	bd70      	pop	{r4, r5, r6, pc}

080162c8 <__smakebuf_r>:
 80162c8:	898b      	ldrh	r3, [r1, #12]
 80162ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80162cc:	079d      	lsls	r5, r3, #30
 80162ce:	4606      	mov	r6, r0
 80162d0:	460c      	mov	r4, r1
 80162d2:	d507      	bpl.n	80162e4 <__smakebuf_r+0x1c>
 80162d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80162d8:	6023      	str	r3, [r4, #0]
 80162da:	6123      	str	r3, [r4, #16]
 80162dc:	2301      	movs	r3, #1
 80162de:	6163      	str	r3, [r4, #20]
 80162e0:	b002      	add	sp, #8
 80162e2:	bd70      	pop	{r4, r5, r6, pc}
 80162e4:	ab01      	add	r3, sp, #4
 80162e6:	466a      	mov	r2, sp
 80162e8:	f7ff ffca 	bl	8016280 <__swhatbuf_r>
 80162ec:	9900      	ldr	r1, [sp, #0]
 80162ee:	4605      	mov	r5, r0
 80162f0:	4630      	mov	r0, r6
 80162f2:	f7fb ff63 	bl	80121bc <_malloc_r>
 80162f6:	b948      	cbnz	r0, 801630c <__smakebuf_r+0x44>
 80162f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162fc:	059a      	lsls	r2, r3, #22
 80162fe:	d4ef      	bmi.n	80162e0 <__smakebuf_r+0x18>
 8016300:	f023 0303 	bic.w	r3, r3, #3
 8016304:	f043 0302 	orr.w	r3, r3, #2
 8016308:	81a3      	strh	r3, [r4, #12]
 801630a:	e7e3      	b.n	80162d4 <__smakebuf_r+0xc>
 801630c:	4b0d      	ldr	r3, [pc, #52]	; (8016344 <__smakebuf_r+0x7c>)
 801630e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016310:	89a3      	ldrh	r3, [r4, #12]
 8016312:	6020      	str	r0, [r4, #0]
 8016314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016318:	81a3      	strh	r3, [r4, #12]
 801631a:	9b00      	ldr	r3, [sp, #0]
 801631c:	6163      	str	r3, [r4, #20]
 801631e:	9b01      	ldr	r3, [sp, #4]
 8016320:	6120      	str	r0, [r4, #16]
 8016322:	b15b      	cbz	r3, 801633c <__smakebuf_r+0x74>
 8016324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016328:	4630      	mov	r0, r6
 801632a:	f000 fc35 	bl	8016b98 <_isatty_r>
 801632e:	b128      	cbz	r0, 801633c <__smakebuf_r+0x74>
 8016330:	89a3      	ldrh	r3, [r4, #12]
 8016332:	f023 0303 	bic.w	r3, r3, #3
 8016336:	f043 0301 	orr.w	r3, r3, #1
 801633a:	81a3      	strh	r3, [r4, #12]
 801633c:	89a0      	ldrh	r0, [r4, #12]
 801633e:	4305      	orrs	r5, r0
 8016340:	81a5      	strh	r5, [r4, #12]
 8016342:	e7cd      	b.n	80162e0 <__smakebuf_r+0x18>
 8016344:	08011cb1 	.word	0x08011cb1

08016348 <memmove>:
 8016348:	4288      	cmp	r0, r1
 801634a:	b510      	push	{r4, lr}
 801634c:	eb01 0402 	add.w	r4, r1, r2
 8016350:	d902      	bls.n	8016358 <memmove+0x10>
 8016352:	4284      	cmp	r4, r0
 8016354:	4623      	mov	r3, r4
 8016356:	d807      	bhi.n	8016368 <memmove+0x20>
 8016358:	1e43      	subs	r3, r0, #1
 801635a:	42a1      	cmp	r1, r4
 801635c:	d008      	beq.n	8016370 <memmove+0x28>
 801635e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016366:	e7f8      	b.n	801635a <memmove+0x12>
 8016368:	4402      	add	r2, r0
 801636a:	4601      	mov	r1, r0
 801636c:	428a      	cmp	r2, r1
 801636e:	d100      	bne.n	8016372 <memmove+0x2a>
 8016370:	bd10      	pop	{r4, pc}
 8016372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801637a:	e7f7      	b.n	801636c <memmove+0x24>

0801637c <_realloc_r>:
 801637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801637e:	4607      	mov	r7, r0
 8016380:	4614      	mov	r4, r2
 8016382:	460e      	mov	r6, r1
 8016384:	b921      	cbnz	r1, 8016390 <_realloc_r+0x14>
 8016386:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801638a:	4611      	mov	r1, r2
 801638c:	f7fb bf16 	b.w	80121bc <_malloc_r>
 8016390:	b922      	cbnz	r2, 801639c <_realloc_r+0x20>
 8016392:	f7fb fec3 	bl	801211c <_free_r>
 8016396:	4625      	mov	r5, r4
 8016398:	4628      	mov	r0, r5
 801639a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801639c:	f000 fc0c 	bl	8016bb8 <_malloc_usable_size_r>
 80163a0:	42a0      	cmp	r0, r4
 80163a2:	d20f      	bcs.n	80163c4 <_realloc_r+0x48>
 80163a4:	4621      	mov	r1, r4
 80163a6:	4638      	mov	r0, r7
 80163a8:	f7fb ff08 	bl	80121bc <_malloc_r>
 80163ac:	4605      	mov	r5, r0
 80163ae:	2800      	cmp	r0, #0
 80163b0:	d0f2      	beq.n	8016398 <_realloc_r+0x1c>
 80163b2:	4631      	mov	r1, r6
 80163b4:	4622      	mov	r2, r4
 80163b6:	f7fb fe9b 	bl	80120f0 <memcpy>
 80163ba:	4631      	mov	r1, r6
 80163bc:	4638      	mov	r0, r7
 80163be:	f7fb fead 	bl	801211c <_free_r>
 80163c2:	e7e9      	b.n	8016398 <_realloc_r+0x1c>
 80163c4:	4635      	mov	r5, r6
 80163c6:	e7e7      	b.n	8016398 <_realloc_r+0x1c>

080163c8 <_sungetc_r>:
 80163c8:	b538      	push	{r3, r4, r5, lr}
 80163ca:	1c4b      	adds	r3, r1, #1
 80163cc:	4614      	mov	r4, r2
 80163ce:	d103      	bne.n	80163d8 <_sungetc_r+0x10>
 80163d0:	f04f 35ff 	mov.w	r5, #4294967295
 80163d4:	4628      	mov	r0, r5
 80163d6:	bd38      	pop	{r3, r4, r5, pc}
 80163d8:	8993      	ldrh	r3, [r2, #12]
 80163da:	f023 0320 	bic.w	r3, r3, #32
 80163de:	8193      	strh	r3, [r2, #12]
 80163e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80163e2:	6852      	ldr	r2, [r2, #4]
 80163e4:	b2cd      	uxtb	r5, r1
 80163e6:	b18b      	cbz	r3, 801640c <_sungetc_r+0x44>
 80163e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80163ea:	4293      	cmp	r3, r2
 80163ec:	dd08      	ble.n	8016400 <_sungetc_r+0x38>
 80163ee:	6823      	ldr	r3, [r4, #0]
 80163f0:	1e5a      	subs	r2, r3, #1
 80163f2:	6022      	str	r2, [r4, #0]
 80163f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80163f8:	6863      	ldr	r3, [r4, #4]
 80163fa:	3301      	adds	r3, #1
 80163fc:	6063      	str	r3, [r4, #4]
 80163fe:	e7e9      	b.n	80163d4 <_sungetc_r+0xc>
 8016400:	4621      	mov	r1, r4
 8016402:	f000 fb7d 	bl	8016b00 <__submore>
 8016406:	2800      	cmp	r0, #0
 8016408:	d0f1      	beq.n	80163ee <_sungetc_r+0x26>
 801640a:	e7e1      	b.n	80163d0 <_sungetc_r+0x8>
 801640c:	6921      	ldr	r1, [r4, #16]
 801640e:	6823      	ldr	r3, [r4, #0]
 8016410:	b151      	cbz	r1, 8016428 <_sungetc_r+0x60>
 8016412:	4299      	cmp	r1, r3
 8016414:	d208      	bcs.n	8016428 <_sungetc_r+0x60>
 8016416:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801641a:	42a9      	cmp	r1, r5
 801641c:	d104      	bne.n	8016428 <_sungetc_r+0x60>
 801641e:	3b01      	subs	r3, #1
 8016420:	3201      	adds	r2, #1
 8016422:	6023      	str	r3, [r4, #0]
 8016424:	6062      	str	r2, [r4, #4]
 8016426:	e7d5      	b.n	80163d4 <_sungetc_r+0xc>
 8016428:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801642c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016430:	6363      	str	r3, [r4, #52]	; 0x34
 8016432:	2303      	movs	r3, #3
 8016434:	63a3      	str	r3, [r4, #56]	; 0x38
 8016436:	4623      	mov	r3, r4
 8016438:	f803 5f46 	strb.w	r5, [r3, #70]!
 801643c:	6023      	str	r3, [r4, #0]
 801643e:	2301      	movs	r3, #1
 8016440:	e7dc      	b.n	80163fc <_sungetc_r+0x34>

08016442 <__ssrefill_r>:
 8016442:	b510      	push	{r4, lr}
 8016444:	460c      	mov	r4, r1
 8016446:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016448:	b169      	cbz	r1, 8016466 <__ssrefill_r+0x24>
 801644a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801644e:	4299      	cmp	r1, r3
 8016450:	d001      	beq.n	8016456 <__ssrefill_r+0x14>
 8016452:	f7fb fe63 	bl	801211c <_free_r>
 8016456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016458:	6063      	str	r3, [r4, #4]
 801645a:	2000      	movs	r0, #0
 801645c:	6360      	str	r0, [r4, #52]	; 0x34
 801645e:	b113      	cbz	r3, 8016466 <__ssrefill_r+0x24>
 8016460:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016462:	6023      	str	r3, [r4, #0]
 8016464:	bd10      	pop	{r4, pc}
 8016466:	6923      	ldr	r3, [r4, #16]
 8016468:	6023      	str	r3, [r4, #0]
 801646a:	2300      	movs	r3, #0
 801646c:	6063      	str	r3, [r4, #4]
 801646e:	89a3      	ldrh	r3, [r4, #12]
 8016470:	f043 0320 	orr.w	r3, r3, #32
 8016474:	81a3      	strh	r3, [r4, #12]
 8016476:	f04f 30ff 	mov.w	r0, #4294967295
 801647a:	e7f3      	b.n	8016464 <__ssrefill_r+0x22>

0801647c <__ssvfiscanf_r>:
 801647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016480:	460c      	mov	r4, r1
 8016482:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016486:	2100      	movs	r1, #0
 8016488:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801648c:	49b2      	ldr	r1, [pc, #712]	; (8016758 <__ssvfiscanf_r+0x2dc>)
 801648e:	91a0      	str	r1, [sp, #640]	; 0x280
 8016490:	f10d 0804 	add.w	r8, sp, #4
 8016494:	49b1      	ldr	r1, [pc, #708]	; (801675c <__ssvfiscanf_r+0x2e0>)
 8016496:	4fb2      	ldr	r7, [pc, #712]	; (8016760 <__ssvfiscanf_r+0x2e4>)
 8016498:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8016764 <__ssvfiscanf_r+0x2e8>
 801649c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80164a0:	4606      	mov	r6, r0
 80164a2:	91a1      	str	r1, [sp, #644]	; 0x284
 80164a4:	9300      	str	r3, [sp, #0]
 80164a6:	f892 a000 	ldrb.w	sl, [r2]
 80164aa:	f1ba 0f00 	cmp.w	sl, #0
 80164ae:	f000 8151 	beq.w	8016754 <__ssvfiscanf_r+0x2d8>
 80164b2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80164b6:	f013 0308 	ands.w	r3, r3, #8
 80164ba:	f102 0501 	add.w	r5, r2, #1
 80164be:	d019      	beq.n	80164f4 <__ssvfiscanf_r+0x78>
 80164c0:	6863      	ldr	r3, [r4, #4]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	dd0f      	ble.n	80164e6 <__ssvfiscanf_r+0x6a>
 80164c6:	6823      	ldr	r3, [r4, #0]
 80164c8:	781a      	ldrb	r2, [r3, #0]
 80164ca:	5cba      	ldrb	r2, [r7, r2]
 80164cc:	0712      	lsls	r2, r2, #28
 80164ce:	d401      	bmi.n	80164d4 <__ssvfiscanf_r+0x58>
 80164d0:	462a      	mov	r2, r5
 80164d2:	e7e8      	b.n	80164a6 <__ssvfiscanf_r+0x2a>
 80164d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80164d6:	3201      	adds	r2, #1
 80164d8:	9245      	str	r2, [sp, #276]	; 0x114
 80164da:	6862      	ldr	r2, [r4, #4]
 80164dc:	3301      	adds	r3, #1
 80164de:	3a01      	subs	r2, #1
 80164e0:	6062      	str	r2, [r4, #4]
 80164e2:	6023      	str	r3, [r4, #0]
 80164e4:	e7ec      	b.n	80164c0 <__ssvfiscanf_r+0x44>
 80164e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80164e8:	4621      	mov	r1, r4
 80164ea:	4630      	mov	r0, r6
 80164ec:	4798      	blx	r3
 80164ee:	2800      	cmp	r0, #0
 80164f0:	d0e9      	beq.n	80164c6 <__ssvfiscanf_r+0x4a>
 80164f2:	e7ed      	b.n	80164d0 <__ssvfiscanf_r+0x54>
 80164f4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80164f8:	f040 8083 	bne.w	8016602 <__ssvfiscanf_r+0x186>
 80164fc:	9341      	str	r3, [sp, #260]	; 0x104
 80164fe:	9343      	str	r3, [sp, #268]	; 0x10c
 8016500:	7853      	ldrb	r3, [r2, #1]
 8016502:	2b2a      	cmp	r3, #42	; 0x2a
 8016504:	bf02      	ittt	eq
 8016506:	2310      	moveq	r3, #16
 8016508:	1c95      	addeq	r5, r2, #2
 801650a:	9341      	streq	r3, [sp, #260]	; 0x104
 801650c:	220a      	movs	r2, #10
 801650e:	46ab      	mov	fp, r5
 8016510:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8016514:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016518:	2b09      	cmp	r3, #9
 801651a:	d91d      	bls.n	8016558 <__ssvfiscanf_r+0xdc>
 801651c:	4891      	ldr	r0, [pc, #580]	; (8016764 <__ssvfiscanf_r+0x2e8>)
 801651e:	2203      	movs	r2, #3
 8016520:	f7e9 fe6e 	bl	8000200 <memchr>
 8016524:	b140      	cbz	r0, 8016538 <__ssvfiscanf_r+0xbc>
 8016526:	2301      	movs	r3, #1
 8016528:	eba0 0009 	sub.w	r0, r0, r9
 801652c:	fa03 f000 	lsl.w	r0, r3, r0
 8016530:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016532:	4318      	orrs	r0, r3
 8016534:	9041      	str	r0, [sp, #260]	; 0x104
 8016536:	465d      	mov	r5, fp
 8016538:	f815 3b01 	ldrb.w	r3, [r5], #1
 801653c:	2b78      	cmp	r3, #120	; 0x78
 801653e:	d806      	bhi.n	801654e <__ssvfiscanf_r+0xd2>
 8016540:	2b57      	cmp	r3, #87	; 0x57
 8016542:	d810      	bhi.n	8016566 <__ssvfiscanf_r+0xea>
 8016544:	2b25      	cmp	r3, #37	; 0x25
 8016546:	d05c      	beq.n	8016602 <__ssvfiscanf_r+0x186>
 8016548:	d856      	bhi.n	80165f8 <__ssvfiscanf_r+0x17c>
 801654a:	2b00      	cmp	r3, #0
 801654c:	d074      	beq.n	8016638 <__ssvfiscanf_r+0x1bc>
 801654e:	2303      	movs	r3, #3
 8016550:	9347      	str	r3, [sp, #284]	; 0x11c
 8016552:	230a      	movs	r3, #10
 8016554:	9342      	str	r3, [sp, #264]	; 0x108
 8016556:	e081      	b.n	801665c <__ssvfiscanf_r+0x1e0>
 8016558:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801655a:	fb02 1303 	mla	r3, r2, r3, r1
 801655e:	3b30      	subs	r3, #48	; 0x30
 8016560:	9343      	str	r3, [sp, #268]	; 0x10c
 8016562:	465d      	mov	r5, fp
 8016564:	e7d3      	b.n	801650e <__ssvfiscanf_r+0x92>
 8016566:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801656a:	2a20      	cmp	r2, #32
 801656c:	d8ef      	bhi.n	801654e <__ssvfiscanf_r+0xd2>
 801656e:	a101      	add	r1, pc, #4	; (adr r1, 8016574 <__ssvfiscanf_r+0xf8>)
 8016570:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016574:	08016647 	.word	0x08016647
 8016578:	0801654f 	.word	0x0801654f
 801657c:	0801654f 	.word	0x0801654f
 8016580:	080166a5 	.word	0x080166a5
 8016584:	0801654f 	.word	0x0801654f
 8016588:	0801654f 	.word	0x0801654f
 801658c:	0801654f 	.word	0x0801654f
 8016590:	0801654f 	.word	0x0801654f
 8016594:	0801654f 	.word	0x0801654f
 8016598:	0801654f 	.word	0x0801654f
 801659c:	0801654f 	.word	0x0801654f
 80165a0:	080166bb 	.word	0x080166bb
 80165a4:	08016691 	.word	0x08016691
 80165a8:	080165ff 	.word	0x080165ff
 80165ac:	080165ff 	.word	0x080165ff
 80165b0:	080165ff 	.word	0x080165ff
 80165b4:	0801654f 	.word	0x0801654f
 80165b8:	08016695 	.word	0x08016695
 80165bc:	0801654f 	.word	0x0801654f
 80165c0:	0801654f 	.word	0x0801654f
 80165c4:	0801654f 	.word	0x0801654f
 80165c8:	0801654f 	.word	0x0801654f
 80165cc:	080166cb 	.word	0x080166cb
 80165d0:	0801669d 	.word	0x0801669d
 80165d4:	0801663f 	.word	0x0801663f
 80165d8:	0801654f 	.word	0x0801654f
 80165dc:	0801654f 	.word	0x0801654f
 80165e0:	080166c7 	.word	0x080166c7
 80165e4:	0801654f 	.word	0x0801654f
 80165e8:	08016691 	.word	0x08016691
 80165ec:	0801654f 	.word	0x0801654f
 80165f0:	0801654f 	.word	0x0801654f
 80165f4:	08016647 	.word	0x08016647
 80165f8:	3b45      	subs	r3, #69	; 0x45
 80165fa:	2b02      	cmp	r3, #2
 80165fc:	d8a7      	bhi.n	801654e <__ssvfiscanf_r+0xd2>
 80165fe:	2305      	movs	r3, #5
 8016600:	e02b      	b.n	801665a <__ssvfiscanf_r+0x1de>
 8016602:	6863      	ldr	r3, [r4, #4]
 8016604:	2b00      	cmp	r3, #0
 8016606:	dd0d      	ble.n	8016624 <__ssvfiscanf_r+0x1a8>
 8016608:	6823      	ldr	r3, [r4, #0]
 801660a:	781a      	ldrb	r2, [r3, #0]
 801660c:	4552      	cmp	r2, sl
 801660e:	f040 80a1 	bne.w	8016754 <__ssvfiscanf_r+0x2d8>
 8016612:	3301      	adds	r3, #1
 8016614:	6862      	ldr	r2, [r4, #4]
 8016616:	6023      	str	r3, [r4, #0]
 8016618:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801661a:	3a01      	subs	r2, #1
 801661c:	3301      	adds	r3, #1
 801661e:	6062      	str	r2, [r4, #4]
 8016620:	9345      	str	r3, [sp, #276]	; 0x114
 8016622:	e755      	b.n	80164d0 <__ssvfiscanf_r+0x54>
 8016624:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016626:	4621      	mov	r1, r4
 8016628:	4630      	mov	r0, r6
 801662a:	4798      	blx	r3
 801662c:	2800      	cmp	r0, #0
 801662e:	d0eb      	beq.n	8016608 <__ssvfiscanf_r+0x18c>
 8016630:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016632:	2800      	cmp	r0, #0
 8016634:	f040 8084 	bne.w	8016740 <__ssvfiscanf_r+0x2c4>
 8016638:	f04f 30ff 	mov.w	r0, #4294967295
 801663c:	e086      	b.n	801674c <__ssvfiscanf_r+0x2d0>
 801663e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016640:	f042 0220 	orr.w	r2, r2, #32
 8016644:	9241      	str	r2, [sp, #260]	; 0x104
 8016646:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801664c:	9241      	str	r2, [sp, #260]	; 0x104
 801664e:	2210      	movs	r2, #16
 8016650:	2b6f      	cmp	r3, #111	; 0x6f
 8016652:	9242      	str	r2, [sp, #264]	; 0x108
 8016654:	bf34      	ite	cc
 8016656:	2303      	movcc	r3, #3
 8016658:	2304      	movcs	r3, #4
 801665a:	9347      	str	r3, [sp, #284]	; 0x11c
 801665c:	6863      	ldr	r3, [r4, #4]
 801665e:	2b00      	cmp	r3, #0
 8016660:	dd41      	ble.n	80166e6 <__ssvfiscanf_r+0x26a>
 8016662:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016664:	0659      	lsls	r1, r3, #25
 8016666:	d404      	bmi.n	8016672 <__ssvfiscanf_r+0x1f6>
 8016668:	6823      	ldr	r3, [r4, #0]
 801666a:	781a      	ldrb	r2, [r3, #0]
 801666c:	5cba      	ldrb	r2, [r7, r2]
 801666e:	0712      	lsls	r2, r2, #28
 8016670:	d440      	bmi.n	80166f4 <__ssvfiscanf_r+0x278>
 8016672:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016674:	2b02      	cmp	r3, #2
 8016676:	dc4f      	bgt.n	8016718 <__ssvfiscanf_r+0x29c>
 8016678:	466b      	mov	r3, sp
 801667a:	4622      	mov	r2, r4
 801667c:	a941      	add	r1, sp, #260	; 0x104
 801667e:	4630      	mov	r0, r6
 8016680:	f000 f874 	bl	801676c <_scanf_chars>
 8016684:	2801      	cmp	r0, #1
 8016686:	d065      	beq.n	8016754 <__ssvfiscanf_r+0x2d8>
 8016688:	2802      	cmp	r0, #2
 801668a:	f47f af21 	bne.w	80164d0 <__ssvfiscanf_r+0x54>
 801668e:	e7cf      	b.n	8016630 <__ssvfiscanf_r+0x1b4>
 8016690:	220a      	movs	r2, #10
 8016692:	e7dd      	b.n	8016650 <__ssvfiscanf_r+0x1d4>
 8016694:	2300      	movs	r3, #0
 8016696:	9342      	str	r3, [sp, #264]	; 0x108
 8016698:	2303      	movs	r3, #3
 801669a:	e7de      	b.n	801665a <__ssvfiscanf_r+0x1de>
 801669c:	2308      	movs	r3, #8
 801669e:	9342      	str	r3, [sp, #264]	; 0x108
 80166a0:	2304      	movs	r3, #4
 80166a2:	e7da      	b.n	801665a <__ssvfiscanf_r+0x1de>
 80166a4:	4629      	mov	r1, r5
 80166a6:	4640      	mov	r0, r8
 80166a8:	f000 f9ac 	bl	8016a04 <__sccl>
 80166ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80166ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166b2:	9341      	str	r3, [sp, #260]	; 0x104
 80166b4:	4605      	mov	r5, r0
 80166b6:	2301      	movs	r3, #1
 80166b8:	e7cf      	b.n	801665a <__ssvfiscanf_r+0x1de>
 80166ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80166bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166c0:	9341      	str	r3, [sp, #260]	; 0x104
 80166c2:	2300      	movs	r3, #0
 80166c4:	e7c9      	b.n	801665a <__ssvfiscanf_r+0x1de>
 80166c6:	2302      	movs	r3, #2
 80166c8:	e7c7      	b.n	801665a <__ssvfiscanf_r+0x1de>
 80166ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 80166cc:	06c3      	lsls	r3, r0, #27
 80166ce:	f53f aeff 	bmi.w	80164d0 <__ssvfiscanf_r+0x54>
 80166d2:	9b00      	ldr	r3, [sp, #0]
 80166d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80166d6:	1d19      	adds	r1, r3, #4
 80166d8:	9100      	str	r1, [sp, #0]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	07c0      	lsls	r0, r0, #31
 80166de:	bf4c      	ite	mi
 80166e0:	801a      	strhmi	r2, [r3, #0]
 80166e2:	601a      	strpl	r2, [r3, #0]
 80166e4:	e6f4      	b.n	80164d0 <__ssvfiscanf_r+0x54>
 80166e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80166e8:	4621      	mov	r1, r4
 80166ea:	4630      	mov	r0, r6
 80166ec:	4798      	blx	r3
 80166ee:	2800      	cmp	r0, #0
 80166f0:	d0b7      	beq.n	8016662 <__ssvfiscanf_r+0x1e6>
 80166f2:	e79d      	b.n	8016630 <__ssvfiscanf_r+0x1b4>
 80166f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80166f6:	3201      	adds	r2, #1
 80166f8:	9245      	str	r2, [sp, #276]	; 0x114
 80166fa:	6862      	ldr	r2, [r4, #4]
 80166fc:	3a01      	subs	r2, #1
 80166fe:	2a00      	cmp	r2, #0
 8016700:	6062      	str	r2, [r4, #4]
 8016702:	dd02      	ble.n	801670a <__ssvfiscanf_r+0x28e>
 8016704:	3301      	adds	r3, #1
 8016706:	6023      	str	r3, [r4, #0]
 8016708:	e7ae      	b.n	8016668 <__ssvfiscanf_r+0x1ec>
 801670a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801670c:	4621      	mov	r1, r4
 801670e:	4630      	mov	r0, r6
 8016710:	4798      	blx	r3
 8016712:	2800      	cmp	r0, #0
 8016714:	d0a8      	beq.n	8016668 <__ssvfiscanf_r+0x1ec>
 8016716:	e78b      	b.n	8016630 <__ssvfiscanf_r+0x1b4>
 8016718:	2b04      	cmp	r3, #4
 801671a:	dc06      	bgt.n	801672a <__ssvfiscanf_r+0x2ae>
 801671c:	466b      	mov	r3, sp
 801671e:	4622      	mov	r2, r4
 8016720:	a941      	add	r1, sp, #260	; 0x104
 8016722:	4630      	mov	r0, r6
 8016724:	f000 f87a 	bl	801681c <_scanf_i>
 8016728:	e7ac      	b.n	8016684 <__ssvfiscanf_r+0x208>
 801672a:	4b0f      	ldr	r3, [pc, #60]	; (8016768 <__ssvfiscanf_r+0x2ec>)
 801672c:	2b00      	cmp	r3, #0
 801672e:	f43f aecf 	beq.w	80164d0 <__ssvfiscanf_r+0x54>
 8016732:	466b      	mov	r3, sp
 8016734:	4622      	mov	r2, r4
 8016736:	a941      	add	r1, sp, #260	; 0x104
 8016738:	4630      	mov	r0, r6
 801673a:	f3af 8000 	nop.w
 801673e:	e7a1      	b.n	8016684 <__ssvfiscanf_r+0x208>
 8016740:	89a3      	ldrh	r3, [r4, #12]
 8016742:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016746:	bf18      	it	ne
 8016748:	f04f 30ff 	movne.w	r0, #4294967295
 801674c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016754:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016756:	e7f9      	b.n	801674c <__ssvfiscanf_r+0x2d0>
 8016758:	080163c9 	.word	0x080163c9
 801675c:	08016443 	.word	0x08016443
 8016760:	08021a81 	.word	0x08021a81
 8016764:	08021d72 	.word	0x08021d72
 8016768:	00000000 	.word	0x00000000

0801676c <_scanf_chars>:
 801676c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016770:	4615      	mov	r5, r2
 8016772:	688a      	ldr	r2, [r1, #8]
 8016774:	4680      	mov	r8, r0
 8016776:	460c      	mov	r4, r1
 8016778:	b932      	cbnz	r2, 8016788 <_scanf_chars+0x1c>
 801677a:	698a      	ldr	r2, [r1, #24]
 801677c:	2a00      	cmp	r2, #0
 801677e:	bf0c      	ite	eq
 8016780:	2201      	moveq	r2, #1
 8016782:	f04f 32ff 	movne.w	r2, #4294967295
 8016786:	608a      	str	r2, [r1, #8]
 8016788:	6822      	ldr	r2, [r4, #0]
 801678a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8016818 <_scanf_chars+0xac>
 801678e:	06d1      	lsls	r1, r2, #27
 8016790:	bf5f      	itttt	pl
 8016792:	681a      	ldrpl	r2, [r3, #0]
 8016794:	1d11      	addpl	r1, r2, #4
 8016796:	6019      	strpl	r1, [r3, #0]
 8016798:	6816      	ldrpl	r6, [r2, #0]
 801679a:	2700      	movs	r7, #0
 801679c:	69a0      	ldr	r0, [r4, #24]
 801679e:	b188      	cbz	r0, 80167c4 <_scanf_chars+0x58>
 80167a0:	2801      	cmp	r0, #1
 80167a2:	d107      	bne.n	80167b4 <_scanf_chars+0x48>
 80167a4:	682b      	ldr	r3, [r5, #0]
 80167a6:	781a      	ldrb	r2, [r3, #0]
 80167a8:	6963      	ldr	r3, [r4, #20]
 80167aa:	5c9b      	ldrb	r3, [r3, r2]
 80167ac:	b953      	cbnz	r3, 80167c4 <_scanf_chars+0x58>
 80167ae:	bb27      	cbnz	r7, 80167fa <_scanf_chars+0x8e>
 80167b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167b4:	2802      	cmp	r0, #2
 80167b6:	d120      	bne.n	80167fa <_scanf_chars+0x8e>
 80167b8:	682b      	ldr	r3, [r5, #0]
 80167ba:	781b      	ldrb	r3, [r3, #0]
 80167bc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80167c0:	071b      	lsls	r3, r3, #28
 80167c2:	d41a      	bmi.n	80167fa <_scanf_chars+0x8e>
 80167c4:	6823      	ldr	r3, [r4, #0]
 80167c6:	06da      	lsls	r2, r3, #27
 80167c8:	bf5e      	ittt	pl
 80167ca:	682b      	ldrpl	r3, [r5, #0]
 80167cc:	781b      	ldrbpl	r3, [r3, #0]
 80167ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 80167d2:	682a      	ldr	r2, [r5, #0]
 80167d4:	686b      	ldr	r3, [r5, #4]
 80167d6:	3201      	adds	r2, #1
 80167d8:	602a      	str	r2, [r5, #0]
 80167da:	68a2      	ldr	r2, [r4, #8]
 80167dc:	3b01      	subs	r3, #1
 80167de:	3a01      	subs	r2, #1
 80167e0:	606b      	str	r3, [r5, #4]
 80167e2:	3701      	adds	r7, #1
 80167e4:	60a2      	str	r2, [r4, #8]
 80167e6:	b142      	cbz	r2, 80167fa <_scanf_chars+0x8e>
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	dcd7      	bgt.n	801679c <_scanf_chars+0x30>
 80167ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80167f0:	4629      	mov	r1, r5
 80167f2:	4640      	mov	r0, r8
 80167f4:	4798      	blx	r3
 80167f6:	2800      	cmp	r0, #0
 80167f8:	d0d0      	beq.n	801679c <_scanf_chars+0x30>
 80167fa:	6823      	ldr	r3, [r4, #0]
 80167fc:	f013 0310 	ands.w	r3, r3, #16
 8016800:	d105      	bne.n	801680e <_scanf_chars+0xa2>
 8016802:	68e2      	ldr	r2, [r4, #12]
 8016804:	3201      	adds	r2, #1
 8016806:	60e2      	str	r2, [r4, #12]
 8016808:	69a2      	ldr	r2, [r4, #24]
 801680a:	b102      	cbz	r2, 801680e <_scanf_chars+0xa2>
 801680c:	7033      	strb	r3, [r6, #0]
 801680e:	6923      	ldr	r3, [r4, #16]
 8016810:	441f      	add	r7, r3
 8016812:	6127      	str	r7, [r4, #16]
 8016814:	2000      	movs	r0, #0
 8016816:	e7cb      	b.n	80167b0 <_scanf_chars+0x44>
 8016818:	08021a81 	.word	0x08021a81

0801681c <_scanf_i>:
 801681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016820:	4698      	mov	r8, r3
 8016822:	4b74      	ldr	r3, [pc, #464]	; (80169f4 <_scanf_i+0x1d8>)
 8016824:	460c      	mov	r4, r1
 8016826:	4682      	mov	sl, r0
 8016828:	4616      	mov	r6, r2
 801682a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801682e:	b087      	sub	sp, #28
 8016830:	ab03      	add	r3, sp, #12
 8016832:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016836:	4b70      	ldr	r3, [pc, #448]	; (80169f8 <_scanf_i+0x1dc>)
 8016838:	69a1      	ldr	r1, [r4, #24]
 801683a:	4a70      	ldr	r2, [pc, #448]	; (80169fc <_scanf_i+0x1e0>)
 801683c:	2903      	cmp	r1, #3
 801683e:	bf18      	it	ne
 8016840:	461a      	movne	r2, r3
 8016842:	68a3      	ldr	r3, [r4, #8]
 8016844:	9201      	str	r2, [sp, #4]
 8016846:	1e5a      	subs	r2, r3, #1
 8016848:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801684c:	bf88      	it	hi
 801684e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016852:	4627      	mov	r7, r4
 8016854:	bf82      	ittt	hi
 8016856:	eb03 0905 	addhi.w	r9, r3, r5
 801685a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801685e:	60a3      	strhi	r3, [r4, #8]
 8016860:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016864:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016868:	bf98      	it	ls
 801686a:	f04f 0900 	movls.w	r9, #0
 801686e:	6023      	str	r3, [r4, #0]
 8016870:	463d      	mov	r5, r7
 8016872:	f04f 0b00 	mov.w	fp, #0
 8016876:	6831      	ldr	r1, [r6, #0]
 8016878:	ab03      	add	r3, sp, #12
 801687a:	7809      	ldrb	r1, [r1, #0]
 801687c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016880:	2202      	movs	r2, #2
 8016882:	f7e9 fcbd 	bl	8000200 <memchr>
 8016886:	b328      	cbz	r0, 80168d4 <_scanf_i+0xb8>
 8016888:	f1bb 0f01 	cmp.w	fp, #1
 801688c:	d159      	bne.n	8016942 <_scanf_i+0x126>
 801688e:	6862      	ldr	r2, [r4, #4]
 8016890:	b92a      	cbnz	r2, 801689e <_scanf_i+0x82>
 8016892:	6822      	ldr	r2, [r4, #0]
 8016894:	2308      	movs	r3, #8
 8016896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801689a:	6063      	str	r3, [r4, #4]
 801689c:	6022      	str	r2, [r4, #0]
 801689e:	6822      	ldr	r2, [r4, #0]
 80168a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80168a4:	6022      	str	r2, [r4, #0]
 80168a6:	68a2      	ldr	r2, [r4, #8]
 80168a8:	1e51      	subs	r1, r2, #1
 80168aa:	60a1      	str	r1, [r4, #8]
 80168ac:	b192      	cbz	r2, 80168d4 <_scanf_i+0xb8>
 80168ae:	6832      	ldr	r2, [r6, #0]
 80168b0:	1c51      	adds	r1, r2, #1
 80168b2:	6031      	str	r1, [r6, #0]
 80168b4:	7812      	ldrb	r2, [r2, #0]
 80168b6:	f805 2b01 	strb.w	r2, [r5], #1
 80168ba:	6872      	ldr	r2, [r6, #4]
 80168bc:	3a01      	subs	r2, #1
 80168be:	2a00      	cmp	r2, #0
 80168c0:	6072      	str	r2, [r6, #4]
 80168c2:	dc07      	bgt.n	80168d4 <_scanf_i+0xb8>
 80168c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80168c8:	4631      	mov	r1, r6
 80168ca:	4650      	mov	r0, sl
 80168cc:	4790      	blx	r2
 80168ce:	2800      	cmp	r0, #0
 80168d0:	f040 8085 	bne.w	80169de <_scanf_i+0x1c2>
 80168d4:	f10b 0b01 	add.w	fp, fp, #1
 80168d8:	f1bb 0f03 	cmp.w	fp, #3
 80168dc:	d1cb      	bne.n	8016876 <_scanf_i+0x5a>
 80168de:	6863      	ldr	r3, [r4, #4]
 80168e0:	b90b      	cbnz	r3, 80168e6 <_scanf_i+0xca>
 80168e2:	230a      	movs	r3, #10
 80168e4:	6063      	str	r3, [r4, #4]
 80168e6:	6863      	ldr	r3, [r4, #4]
 80168e8:	4945      	ldr	r1, [pc, #276]	; (8016a00 <_scanf_i+0x1e4>)
 80168ea:	6960      	ldr	r0, [r4, #20]
 80168ec:	1ac9      	subs	r1, r1, r3
 80168ee:	f000 f889 	bl	8016a04 <__sccl>
 80168f2:	f04f 0b00 	mov.w	fp, #0
 80168f6:	68a3      	ldr	r3, [r4, #8]
 80168f8:	6822      	ldr	r2, [r4, #0]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d03d      	beq.n	801697a <_scanf_i+0x15e>
 80168fe:	6831      	ldr	r1, [r6, #0]
 8016900:	6960      	ldr	r0, [r4, #20]
 8016902:	f891 c000 	ldrb.w	ip, [r1]
 8016906:	f810 000c 	ldrb.w	r0, [r0, ip]
 801690a:	2800      	cmp	r0, #0
 801690c:	d035      	beq.n	801697a <_scanf_i+0x15e>
 801690e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016912:	d124      	bne.n	801695e <_scanf_i+0x142>
 8016914:	0510      	lsls	r0, r2, #20
 8016916:	d522      	bpl.n	801695e <_scanf_i+0x142>
 8016918:	f10b 0b01 	add.w	fp, fp, #1
 801691c:	f1b9 0f00 	cmp.w	r9, #0
 8016920:	d003      	beq.n	801692a <_scanf_i+0x10e>
 8016922:	3301      	adds	r3, #1
 8016924:	f109 39ff 	add.w	r9, r9, #4294967295
 8016928:	60a3      	str	r3, [r4, #8]
 801692a:	6873      	ldr	r3, [r6, #4]
 801692c:	3b01      	subs	r3, #1
 801692e:	2b00      	cmp	r3, #0
 8016930:	6073      	str	r3, [r6, #4]
 8016932:	dd1b      	ble.n	801696c <_scanf_i+0x150>
 8016934:	6833      	ldr	r3, [r6, #0]
 8016936:	3301      	adds	r3, #1
 8016938:	6033      	str	r3, [r6, #0]
 801693a:	68a3      	ldr	r3, [r4, #8]
 801693c:	3b01      	subs	r3, #1
 801693e:	60a3      	str	r3, [r4, #8]
 8016940:	e7d9      	b.n	80168f6 <_scanf_i+0xda>
 8016942:	f1bb 0f02 	cmp.w	fp, #2
 8016946:	d1ae      	bne.n	80168a6 <_scanf_i+0x8a>
 8016948:	6822      	ldr	r2, [r4, #0]
 801694a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801694e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016952:	d1bf      	bne.n	80168d4 <_scanf_i+0xb8>
 8016954:	2310      	movs	r3, #16
 8016956:	6063      	str	r3, [r4, #4]
 8016958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801695c:	e7a2      	b.n	80168a4 <_scanf_i+0x88>
 801695e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016962:	6022      	str	r2, [r4, #0]
 8016964:	780b      	ldrb	r3, [r1, #0]
 8016966:	f805 3b01 	strb.w	r3, [r5], #1
 801696a:	e7de      	b.n	801692a <_scanf_i+0x10e>
 801696c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016970:	4631      	mov	r1, r6
 8016972:	4650      	mov	r0, sl
 8016974:	4798      	blx	r3
 8016976:	2800      	cmp	r0, #0
 8016978:	d0df      	beq.n	801693a <_scanf_i+0x11e>
 801697a:	6823      	ldr	r3, [r4, #0]
 801697c:	05d9      	lsls	r1, r3, #23
 801697e:	d50d      	bpl.n	801699c <_scanf_i+0x180>
 8016980:	42bd      	cmp	r5, r7
 8016982:	d909      	bls.n	8016998 <_scanf_i+0x17c>
 8016984:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016988:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801698c:	4632      	mov	r2, r6
 801698e:	4650      	mov	r0, sl
 8016990:	4798      	blx	r3
 8016992:	f105 39ff 	add.w	r9, r5, #4294967295
 8016996:	464d      	mov	r5, r9
 8016998:	42bd      	cmp	r5, r7
 801699a:	d028      	beq.n	80169ee <_scanf_i+0x1d2>
 801699c:	6822      	ldr	r2, [r4, #0]
 801699e:	f012 0210 	ands.w	r2, r2, #16
 80169a2:	d113      	bne.n	80169cc <_scanf_i+0x1b0>
 80169a4:	702a      	strb	r2, [r5, #0]
 80169a6:	6863      	ldr	r3, [r4, #4]
 80169a8:	9e01      	ldr	r6, [sp, #4]
 80169aa:	4639      	mov	r1, r7
 80169ac:	4650      	mov	r0, sl
 80169ae:	47b0      	blx	r6
 80169b0:	f8d8 3000 	ldr.w	r3, [r8]
 80169b4:	6821      	ldr	r1, [r4, #0]
 80169b6:	1d1a      	adds	r2, r3, #4
 80169b8:	f8c8 2000 	str.w	r2, [r8]
 80169bc:	f011 0f20 	tst.w	r1, #32
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	d00f      	beq.n	80169e4 <_scanf_i+0x1c8>
 80169c4:	6018      	str	r0, [r3, #0]
 80169c6:	68e3      	ldr	r3, [r4, #12]
 80169c8:	3301      	adds	r3, #1
 80169ca:	60e3      	str	r3, [r4, #12]
 80169cc:	1bed      	subs	r5, r5, r7
 80169ce:	44ab      	add	fp, r5
 80169d0:	6925      	ldr	r5, [r4, #16]
 80169d2:	445d      	add	r5, fp
 80169d4:	6125      	str	r5, [r4, #16]
 80169d6:	2000      	movs	r0, #0
 80169d8:	b007      	add	sp, #28
 80169da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169de:	f04f 0b00 	mov.w	fp, #0
 80169e2:	e7ca      	b.n	801697a <_scanf_i+0x15e>
 80169e4:	07ca      	lsls	r2, r1, #31
 80169e6:	bf4c      	ite	mi
 80169e8:	8018      	strhmi	r0, [r3, #0]
 80169ea:	6018      	strpl	r0, [r3, #0]
 80169ec:	e7eb      	b.n	80169c6 <_scanf_i+0x1aa>
 80169ee:	2001      	movs	r0, #1
 80169f0:	e7f2      	b.n	80169d8 <_scanf_i+0x1bc>
 80169f2:	bf00      	nop
 80169f4:	08017088 	.word	0x08017088
 80169f8:	08013d95 	.word	0x08013d95
 80169fc:	08013c85 	.word	0x08013c85
 8016a00:	08021db8 	.word	0x08021db8

08016a04 <__sccl>:
 8016a04:	b570      	push	{r4, r5, r6, lr}
 8016a06:	780b      	ldrb	r3, [r1, #0]
 8016a08:	4604      	mov	r4, r0
 8016a0a:	2b5e      	cmp	r3, #94	; 0x5e
 8016a0c:	bf0b      	itete	eq
 8016a0e:	784b      	ldrbeq	r3, [r1, #1]
 8016a10:	1c48      	addne	r0, r1, #1
 8016a12:	1c88      	addeq	r0, r1, #2
 8016a14:	2200      	movne	r2, #0
 8016a16:	bf08      	it	eq
 8016a18:	2201      	moveq	r2, #1
 8016a1a:	1e61      	subs	r1, r4, #1
 8016a1c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016a20:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016a24:	42a9      	cmp	r1, r5
 8016a26:	d1fb      	bne.n	8016a20 <__sccl+0x1c>
 8016a28:	b90b      	cbnz	r3, 8016a2e <__sccl+0x2a>
 8016a2a:	3801      	subs	r0, #1
 8016a2c:	bd70      	pop	{r4, r5, r6, pc}
 8016a2e:	f082 0101 	eor.w	r1, r2, #1
 8016a32:	54e1      	strb	r1, [r4, r3]
 8016a34:	1c42      	adds	r2, r0, #1
 8016a36:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8016a3a:	2d2d      	cmp	r5, #45	; 0x2d
 8016a3c:	f102 36ff 	add.w	r6, r2, #4294967295
 8016a40:	4610      	mov	r0, r2
 8016a42:	d006      	beq.n	8016a52 <__sccl+0x4e>
 8016a44:	2d5d      	cmp	r5, #93	; 0x5d
 8016a46:	d0f1      	beq.n	8016a2c <__sccl+0x28>
 8016a48:	b90d      	cbnz	r5, 8016a4e <__sccl+0x4a>
 8016a4a:	4630      	mov	r0, r6
 8016a4c:	e7ee      	b.n	8016a2c <__sccl+0x28>
 8016a4e:	462b      	mov	r3, r5
 8016a50:	e7ef      	b.n	8016a32 <__sccl+0x2e>
 8016a52:	7816      	ldrb	r6, [r2, #0]
 8016a54:	2e5d      	cmp	r6, #93	; 0x5d
 8016a56:	d0fa      	beq.n	8016a4e <__sccl+0x4a>
 8016a58:	42b3      	cmp	r3, r6
 8016a5a:	dcf8      	bgt.n	8016a4e <__sccl+0x4a>
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	3001      	adds	r0, #1
 8016a60:	4286      	cmp	r6, r0
 8016a62:	5421      	strb	r1, [r4, r0]
 8016a64:	dcfb      	bgt.n	8016a5e <__sccl+0x5a>
 8016a66:	43d8      	mvns	r0, r3
 8016a68:	4430      	add	r0, r6
 8016a6a:	1c5d      	adds	r5, r3, #1
 8016a6c:	42b3      	cmp	r3, r6
 8016a6e:	bfa8      	it	ge
 8016a70:	2000      	movge	r0, #0
 8016a72:	182b      	adds	r3, r5, r0
 8016a74:	3202      	adds	r2, #2
 8016a76:	e7de      	b.n	8016a36 <__sccl+0x32>

08016a78 <_raise_r>:
 8016a78:	291f      	cmp	r1, #31
 8016a7a:	b538      	push	{r3, r4, r5, lr}
 8016a7c:	4604      	mov	r4, r0
 8016a7e:	460d      	mov	r5, r1
 8016a80:	d904      	bls.n	8016a8c <_raise_r+0x14>
 8016a82:	2316      	movs	r3, #22
 8016a84:	6003      	str	r3, [r0, #0]
 8016a86:	f04f 30ff 	mov.w	r0, #4294967295
 8016a8a:	bd38      	pop	{r3, r4, r5, pc}
 8016a8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016a8e:	b112      	cbz	r2, 8016a96 <_raise_r+0x1e>
 8016a90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016a94:	b94b      	cbnz	r3, 8016aaa <_raise_r+0x32>
 8016a96:	4620      	mov	r0, r4
 8016a98:	f000 f830 	bl	8016afc <_getpid_r>
 8016a9c:	462a      	mov	r2, r5
 8016a9e:	4601      	mov	r1, r0
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016aa6:	f000 b817 	b.w	8016ad8 <_kill_r>
 8016aaa:	2b01      	cmp	r3, #1
 8016aac:	d00a      	beq.n	8016ac4 <_raise_r+0x4c>
 8016aae:	1c59      	adds	r1, r3, #1
 8016ab0:	d103      	bne.n	8016aba <_raise_r+0x42>
 8016ab2:	2316      	movs	r3, #22
 8016ab4:	6003      	str	r3, [r0, #0]
 8016ab6:	2001      	movs	r0, #1
 8016ab8:	e7e7      	b.n	8016a8a <_raise_r+0x12>
 8016aba:	2400      	movs	r4, #0
 8016abc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016ac0:	4628      	mov	r0, r5
 8016ac2:	4798      	blx	r3
 8016ac4:	2000      	movs	r0, #0
 8016ac6:	e7e0      	b.n	8016a8a <_raise_r+0x12>

08016ac8 <raise>:
 8016ac8:	4b02      	ldr	r3, [pc, #8]	; (8016ad4 <raise+0xc>)
 8016aca:	4601      	mov	r1, r0
 8016acc:	6818      	ldr	r0, [r3, #0]
 8016ace:	f7ff bfd3 	b.w	8016a78 <_raise_r>
 8016ad2:	bf00      	nop
 8016ad4:	200000b4 	.word	0x200000b4

08016ad8 <_kill_r>:
 8016ad8:	b538      	push	{r3, r4, r5, lr}
 8016ada:	4d07      	ldr	r5, [pc, #28]	; (8016af8 <_kill_r+0x20>)
 8016adc:	2300      	movs	r3, #0
 8016ade:	4604      	mov	r4, r0
 8016ae0:	4608      	mov	r0, r1
 8016ae2:	4611      	mov	r1, r2
 8016ae4:	602b      	str	r3, [r5, #0]
 8016ae6:	f7ed fdb1 	bl	800464c <_kill>
 8016aea:	1c43      	adds	r3, r0, #1
 8016aec:	d102      	bne.n	8016af4 <_kill_r+0x1c>
 8016aee:	682b      	ldr	r3, [r5, #0]
 8016af0:	b103      	cbz	r3, 8016af4 <_kill_r+0x1c>
 8016af2:	6023      	str	r3, [r4, #0]
 8016af4:	bd38      	pop	{r3, r4, r5, pc}
 8016af6:	bf00      	nop
 8016af8:	20013088 	.word	0x20013088

08016afc <_getpid_r>:
 8016afc:	f7ed bd9e 	b.w	800463c <_getpid>

08016b00 <__submore>:
 8016b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b04:	460c      	mov	r4, r1
 8016b06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b0c:	4299      	cmp	r1, r3
 8016b0e:	d11d      	bne.n	8016b4c <__submore+0x4c>
 8016b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016b14:	f7fb fb52 	bl	80121bc <_malloc_r>
 8016b18:	b918      	cbnz	r0, 8016b22 <__submore+0x22>
 8016b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8016b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b26:	63a3      	str	r3, [r4, #56]	; 0x38
 8016b28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016b2c:	6360      	str	r0, [r4, #52]	; 0x34
 8016b2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016b32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016b36:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016b3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016b3e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016b42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016b46:	6020      	str	r0, [r4, #0]
 8016b48:	2000      	movs	r0, #0
 8016b4a:	e7e8      	b.n	8016b1e <__submore+0x1e>
 8016b4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016b4e:	0077      	lsls	r7, r6, #1
 8016b50:	463a      	mov	r2, r7
 8016b52:	f7ff fc13 	bl	801637c <_realloc_r>
 8016b56:	4605      	mov	r5, r0
 8016b58:	2800      	cmp	r0, #0
 8016b5a:	d0de      	beq.n	8016b1a <__submore+0x1a>
 8016b5c:	eb00 0806 	add.w	r8, r0, r6
 8016b60:	4601      	mov	r1, r0
 8016b62:	4632      	mov	r2, r6
 8016b64:	4640      	mov	r0, r8
 8016b66:	f7fb fac3 	bl	80120f0 <memcpy>
 8016b6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016b6e:	f8c4 8000 	str.w	r8, [r4]
 8016b72:	e7e9      	b.n	8016b48 <__submore+0x48>

08016b74 <_fstat_r>:
 8016b74:	b538      	push	{r3, r4, r5, lr}
 8016b76:	4d07      	ldr	r5, [pc, #28]	; (8016b94 <_fstat_r+0x20>)
 8016b78:	2300      	movs	r3, #0
 8016b7a:	4604      	mov	r4, r0
 8016b7c:	4608      	mov	r0, r1
 8016b7e:	4611      	mov	r1, r2
 8016b80:	602b      	str	r3, [r5, #0]
 8016b82:	f7ed fdc2 	bl	800470a <_fstat>
 8016b86:	1c43      	adds	r3, r0, #1
 8016b88:	d102      	bne.n	8016b90 <_fstat_r+0x1c>
 8016b8a:	682b      	ldr	r3, [r5, #0]
 8016b8c:	b103      	cbz	r3, 8016b90 <_fstat_r+0x1c>
 8016b8e:	6023      	str	r3, [r4, #0]
 8016b90:	bd38      	pop	{r3, r4, r5, pc}
 8016b92:	bf00      	nop
 8016b94:	20013088 	.word	0x20013088

08016b98 <_isatty_r>:
 8016b98:	b538      	push	{r3, r4, r5, lr}
 8016b9a:	4d06      	ldr	r5, [pc, #24]	; (8016bb4 <_isatty_r+0x1c>)
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	4608      	mov	r0, r1
 8016ba2:	602b      	str	r3, [r5, #0]
 8016ba4:	f7ed fdc1 	bl	800472a <_isatty>
 8016ba8:	1c43      	adds	r3, r0, #1
 8016baa:	d102      	bne.n	8016bb2 <_isatty_r+0x1a>
 8016bac:	682b      	ldr	r3, [r5, #0]
 8016bae:	b103      	cbz	r3, 8016bb2 <_isatty_r+0x1a>
 8016bb0:	6023      	str	r3, [r4, #0]
 8016bb2:	bd38      	pop	{r3, r4, r5, pc}
 8016bb4:	20013088 	.word	0x20013088

08016bb8 <_malloc_usable_size_r>:
 8016bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016bbc:	1f18      	subs	r0, r3, #4
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	bfbc      	itt	lt
 8016bc2:	580b      	ldrlt	r3, [r1, r0]
 8016bc4:	18c0      	addlt	r0, r0, r3
 8016bc6:	4770      	bx	lr

08016bc8 <_init>:
 8016bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bca:	bf00      	nop
 8016bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bce:	bc08      	pop	{r3}
 8016bd0:	469e      	mov	lr, r3
 8016bd2:	4770      	bx	lr

08016bd4 <_fini>:
 8016bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bd6:	bf00      	nop
 8016bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bda:	bc08      	pop	{r3}
 8016bdc:	469e      	mov	lr, r3
 8016bde:	4770      	bx	lr
